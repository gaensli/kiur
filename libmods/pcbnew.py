# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if False:
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pcbnew', [dirname(__file__)])
        except ImportError:
            import _pcbnew
            return _pcbnew
        if fp is not None:
            try:
                _mod = imp.load_module('_pcbnew', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pcbnew = swig_import_helper()
    del swig_import_helper
else:
    import _pcbnew
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pcbnew.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _pcbnew.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _pcbnew.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _pcbnew.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _pcbnew.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _pcbnew.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _pcbnew.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _pcbnew.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _pcbnew.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _pcbnew.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pcbnew.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _pcbnew.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _pcbnew.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pcbnew.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pcbnew.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pcbnew.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _pcbnew.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _pcbnew.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def wxSetDefaultPyEncoding(*args):
  """wxSetDefaultPyEncoding(char const * encoding)"""
  return _pcbnew.wxSetDefaultPyEncoding(*args)

def wxGetDefaultPyEncoding():
  """wxGetDefaultPyEncoding() -> char const *"""
  return _pcbnew.wxGetDefaultPyEncoding()
class wxRect(_object):
    """Proxy of C++ wxRect class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wxRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wxRect, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(wxRect self) -> wxRect
        __init__(wxRect self, int xx, int yy, int ww, int hh) -> wxRect
        __init__(wxRect self, wxPoint topLeft, wxPoint bottomRight) -> wxRect
        __init__(wxRect self, wxPoint pt, wxSize size) -> wxRect
        __init__(wxRect self, wxSize size) -> wxRect
        """
        this = _pcbnew.new_wxRect(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetX(self):
        """GetX(wxRect self) -> int"""
        return _pcbnew.wxRect_GetX(self)

    def SetX(self, *args):
        """SetX(wxRect self, int xx)"""
        return _pcbnew.wxRect_SetX(self, *args)

    def GetY(self):
        """GetY(wxRect self) -> int"""
        return _pcbnew.wxRect_GetY(self)

    def SetY(self, *args):
        """SetY(wxRect self, int yy)"""
        return _pcbnew.wxRect_SetY(self, *args)

    def GetWidth(self):
        """GetWidth(wxRect self) -> int"""
        return _pcbnew.wxRect_GetWidth(self)

    def SetWidth(self, *args):
        """SetWidth(wxRect self, int w)"""
        return _pcbnew.wxRect_SetWidth(self, *args)

    def GetHeight(self):
        """GetHeight(wxRect self) -> int"""
        return _pcbnew.wxRect_GetHeight(self)

    def SetHeight(self, *args):
        """SetHeight(wxRect self, int h)"""
        return _pcbnew.wxRect_SetHeight(self, *args)

    def GetPosition(self):
        """GetPosition(wxRect self) -> wxPoint"""
        return _pcbnew.wxRect_GetPosition(self)

    def SetPosition(self, *args):
        """SetPosition(wxRect self, wxPoint p)"""
        return _pcbnew.wxRect_SetPosition(self, *args)

    __swig_setmethods__["x"] = _pcbnew.wxRect_x_set
    __swig_getmethods__["x"] = _pcbnew.wxRect_x_get
    if _newclass:x = _swig_property(_pcbnew.wxRect_x_get, _pcbnew.wxRect_x_set)
    __swig_setmethods__["y"] = _pcbnew.wxRect_y_set
    __swig_getmethods__["y"] = _pcbnew.wxRect_y_get
    if _newclass:y = _swig_property(_pcbnew.wxRect_y_get, _pcbnew.wxRect_y_set)
    __swig_setmethods__["width"] = _pcbnew.wxRect_width_set
    __swig_getmethods__["width"] = _pcbnew.wxRect_width_get
    if _newclass:width = _swig_property(_pcbnew.wxRect_width_get, _pcbnew.wxRect_width_set)
    __swig_setmethods__["height"] = _pcbnew.wxRect_height_set
    __swig_getmethods__["height"] = _pcbnew.wxRect_height_get
    if _newclass:height = _swig_property(_pcbnew.wxRect_height_get, _pcbnew.wxRect_height_set)
    def Get(self):
        """Get(wxRect self) -> PyObject *"""
        return _pcbnew.wxRect_Get(self)

    def __eq__(self,other):	
    	return self.x==other.x and self.y==other.y and self.width==other.width and self.height==other.height
    def __str__(self):                   return str(self.Get())
    def __repr__(self):                  return 'wxRect'+str(self.Get())
    def __len__(self):                   return len(self.Get())
    def __getitem__(self, index):        return self.Get()[index]
    def __setitem__(self, index, val):
        if 	index == 0: 	self.SetX(val)
        elif 	index == 1: 	self.SetY(val)
        elif 	index == 2: 	self.SetWidth(val)
        elif 	index == 3: 	self.SetHeight(val)
        else: 			raise IndexError
    def __nonzero__(self):               return self.Get() != (0,0,0,0)
    __safe_for_unpickling__ = True

    __swig_destroy__ = _pcbnew.delete_wxRect
    __del__ = lambda self : None;
wxRect_swigregister = _pcbnew.wxRect_swigregister
wxRect_swigregister(wxRect)

class wxSize(_object):
    """Proxy of C++ wxSize class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wxSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wxSize, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pcbnew.wxSize_x_set
    __swig_getmethods__["x"] = _pcbnew.wxSize_x_get
    if _newclass:x = _swig_property(_pcbnew.wxSize_x_get, _pcbnew.wxSize_x_set)
    __swig_setmethods__["y"] = _pcbnew.wxSize_y_set
    __swig_getmethods__["y"] = _pcbnew.wxSize_y_get
    if _newclass:y = _swig_property(_pcbnew.wxSize_y_get, _pcbnew.wxSize_y_set)
    def __init__(self, *args): 
        """
        __init__(wxSize self, int xx, int yy) -> wxSize
        __init__(wxSize self, double xx, double yy) -> wxSize
        """
        this = _pcbnew.new_wxSize(*args)
        try: self.this.append(this)
        except: self.this = this
    def Get(self):
        """Get(wxSize self) -> PyObject *"""
        return _pcbnew.wxSize_Get(self)

    __swig_destroy__ = _pcbnew.delete_wxSize
    __del__ = lambda self : None;
    def SetWidth(self, *args):
        """SetWidth(wxSize self, int w)"""
        return _pcbnew.wxSize_SetWidth(self, *args)

    def SetHeight(self, *args):
        """SetHeight(wxSize self, int h)"""
        return _pcbnew.wxSize_SetHeight(self, *args)

    def GetWidth(self):
        """GetWidth(wxSize self) -> int"""
        return _pcbnew.wxSize_GetWidth(self)

    def GetHeight(self):
        """GetHeight(wxSize self) -> int"""
        return _pcbnew.wxSize_GetHeight(self)

    def Scale(self,xscale,yscale):
    	return wxSize(self.x*xscale,self.y*yscale)
    def __eq__(self,other):	
    	return self.GetWidth()==other.GetWidth() and self.GetHeight()==other.GetHeight()
    def __str__(self):                   return str(self.Get())
    def __repr__(self):                  return 'wxSize'+str(self.Get())
    def __len__(self):                   return len(self.Get())
    def __getitem__(self, index):        return self.Get()[index]
    def __setitem__(self, index, val):
        if 	index == 0: 	self.SetWidth(val)
        elif 	index == 1: 	self.SetHeight(val)
        else: 			raise IndexError
    def __nonzero__(self):               return self.Get() != (0,0)
    __safe_for_unpickling__ = True


wxSize_swigregister = _pcbnew.wxSize_swigregister
wxSize_swigregister(wxSize)

class wxPoint(_object):
    """Proxy of C++ wxPoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wxPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wxPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pcbnew.wxPoint_x_set
    __swig_getmethods__["x"] = _pcbnew.wxPoint_x_get
    if _newclass:x = _swig_property(_pcbnew.wxPoint_x_get, _pcbnew.wxPoint_x_set)
    __swig_setmethods__["y"] = _pcbnew.wxPoint_y_set
    __swig_getmethods__["y"] = _pcbnew.wxPoint_y_get
    if _newclass:y = _swig_property(_pcbnew.wxPoint_y_get, _pcbnew.wxPoint_y_set)
    def __init__(self, *args): 
        """
        __init__(wxPoint self, int xx, int yy) -> wxPoint
        __init__(wxPoint self, double xx, double yy) -> wxPoint
        """
        this = _pcbnew.new_wxPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_wxPoint
    __del__ = lambda self : None;
    def __add__(self, *args):
        """__add__(wxPoint self, wxPoint pt) -> wxPoint"""
        return _pcbnew.wxPoint___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(wxPoint self, wxPoint pt) -> wxPoint"""
        return _pcbnew.wxPoint___sub__(self, *args)

    def Set(self, *args):
        """Set(wxPoint self, long x, long y)"""
        return _pcbnew.wxPoint_Set(self, *args)

    def Get(self):
        """Get(wxPoint self) -> PyObject *"""
        return _pcbnew.wxPoint_Get(self)

    def __eq__(self,other):            return (self.x==other.x and self.y==other.y)
    def __ne__(self,other):            return not (self==other)
    def __str__(self):                 return str(self.Get())
    def __repr__(self):                return 'wxPoint'+str(self.Get())
    def __len__(self):                 return len(self.Get())
    def __getitem__(self, index):      return self.Get()[index]
    def __setitem__(self, index, val):
        if index == 0: 
            self.x = val
        elif index == 1: 
            self.y = val
        else: 
            raise IndexError
    def __nonzero__(self):               return self.Get() != (0,0)


wxPoint_swigregister = _pcbnew.wxPoint_swigregister
wxPoint_swigregister(wxPoint)

class DHEAD(_object):
    """Proxy of C++ DHEAD class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DHEAD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DHEAD, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def DeleteAll(self):
        """DeleteAll(DHEAD self)"""
        return _pcbnew.DHEAD_DeleteAll(self)

    def SetOwnership(self, *args):
        """SetOwnership(DHEAD self, bool Iown)"""
        return _pcbnew.DHEAD_SetOwnership(self, *args)

    def GetCount(self):
        """GetCount(DHEAD self) -> unsigned int"""
        return _pcbnew.DHEAD_GetCount(self)

DHEAD_swigregister = _pcbnew.DHEAD_swigregister
DHEAD_swigregister(DHEAD)

NOT_USED = _pcbnew.NOT_USED
EOT = _pcbnew.EOT
TYPE_NOT_INIT = _pcbnew.TYPE_NOT_INIT
PCB_T = _pcbnew.PCB_T
SCREEN_T = _pcbnew.SCREEN_T
PCB_MODULE_T = _pcbnew.PCB_MODULE_T
PCB_PAD_T = _pcbnew.PCB_PAD_T
PCB_LINE_T = _pcbnew.PCB_LINE_T
PCB_TEXT_T = _pcbnew.PCB_TEXT_T
PCB_MODULE_TEXT_T = _pcbnew.PCB_MODULE_TEXT_T
PCB_MODULE_EDGE_T = _pcbnew.PCB_MODULE_EDGE_T
PCB_TRACE_T = _pcbnew.PCB_TRACE_T
PCB_VIA_T = _pcbnew.PCB_VIA_T
PCB_ZONE_T = _pcbnew.PCB_ZONE_T
PCB_MARKER_T = _pcbnew.PCB_MARKER_T
PCB_DIMENSION_T = _pcbnew.PCB_DIMENSION_T
PCB_TARGET_T = _pcbnew.PCB_TARGET_T
PCB_ZONE_AREA_T = _pcbnew.PCB_ZONE_AREA_T
PCB_ITEM_LIST_T = _pcbnew.PCB_ITEM_LIST_T
SCH_MARKER_T = _pcbnew.SCH_MARKER_T
SCH_JUNCTION_T = _pcbnew.SCH_JUNCTION_T
SCH_NO_CONNECT_T = _pcbnew.SCH_NO_CONNECT_T
SCH_BUS_ENTRY_T = _pcbnew.SCH_BUS_ENTRY_T
SCH_LINE_T = _pcbnew.SCH_LINE_T
SCH_POLYLINE_T = _pcbnew.SCH_POLYLINE_T
SCH_BITMAP_T = _pcbnew.SCH_BITMAP_T
SCH_TEXT_T = _pcbnew.SCH_TEXT_T
SCH_LABEL_T = _pcbnew.SCH_LABEL_T
SCH_GLOBAL_LABEL_T = _pcbnew.SCH_GLOBAL_LABEL_T
SCH_HIERARCHICAL_LABEL_T = _pcbnew.SCH_HIERARCHICAL_LABEL_T
SCH_FIELD_T = _pcbnew.SCH_FIELD_T
SCH_COMPONENT_T = _pcbnew.SCH_COMPONENT_T
SCH_SHEET_PIN_T = _pcbnew.SCH_SHEET_PIN_T
SCH_SHEET_T = _pcbnew.SCH_SHEET_T
SCH_SCREEN_T = _pcbnew.SCH_SCREEN_T
LIB_COMPONENT_T = _pcbnew.LIB_COMPONENT_T
LIB_ALIAS_T = _pcbnew.LIB_ALIAS_T
LIB_ARC_T = _pcbnew.LIB_ARC_T
LIB_CIRCLE_T = _pcbnew.LIB_CIRCLE_T
LIB_TEXT_T = _pcbnew.LIB_TEXT_T
LIB_RECTANGLE_T = _pcbnew.LIB_RECTANGLE_T
LIB_POLYLINE_T = _pcbnew.LIB_POLYLINE_T
LIB_BEZIER_T = _pcbnew.LIB_BEZIER_T
LIB_PIN_T = _pcbnew.LIB_PIN_T
LIB_FIELD_T = _pcbnew.LIB_FIELD_T
TYPE_GERBER_DRAW_ITEM = _pcbnew.TYPE_GERBER_DRAW_ITEM
MAX_STRUCT_TYPE_ID = _pcbnew.MAX_STRUCT_TYPE_ID
NO_FILL = _pcbnew.NO_FILL
FILLED_SHAPE = _pcbnew.FILLED_SHAPE
FILLED_WITH_BG_BODYCOLOR = _pcbnew.FILLED_WITH_BG_BODYCOLOR
SEARCH_QUIT = _pcbnew.SEARCH_QUIT
SEARCH_CONTINUE = _pcbnew.SEARCH_CONTINUE
class INSPECTOR(_object):
    """Proxy of C++ INSPECTOR class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INSPECTOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INSPECTOR, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pcbnew.delete_INSPECTOR
    __del__ = lambda self : None;
    def Inspect(self, *args):
        """Inspect(INSPECTOR self, EDA_ITEM aItem, void const * aTestData) -> SEARCH_RESULT"""
        return _pcbnew.INSPECTOR_Inspect(self, *args)

INSPECTOR_swigregister = _pcbnew.INSPECTOR_swigregister
INSPECTOR_swigregister(INSPECTOR)

class EDA_RECT(_object):
    """Proxy of C++ EDA_RECT class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EDA_RECT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EDA_RECT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(EDA_RECT self) -> EDA_RECT
        __init__(EDA_RECT self, wxPoint aPos, wxSize aSize) -> EDA_RECT
        """
        this = _pcbnew.new_EDA_RECT(*args)
        try: self.this.append(this)
        except: self.this = this
    def Centre(self):
        """Centre(EDA_RECT self) -> wxPoint"""
        return _pcbnew.EDA_RECT_Centre(self)

    def Move(self, *args):
        """Move(EDA_RECT self, wxPoint aMoveVector)"""
        return _pcbnew.EDA_RECT_Move(self, *args)

    def Normalize(self):
        """Normalize(EDA_RECT self)"""
        return _pcbnew.EDA_RECT_Normalize(self)

    def Contains(self, *args):
        """
        Contains(EDA_RECT self, wxPoint aPoint) -> bool
        Contains(EDA_RECT self, int x, int y) -> bool
        Contains(EDA_RECT self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.EDA_RECT_Contains(self, *args)

    def GetSize(self):
        """GetSize(EDA_RECT self) -> wxSize"""
        return _pcbnew.EDA_RECT_GetSize(self)

    def GetX(self):
        """GetX(EDA_RECT self) -> int"""
        return _pcbnew.EDA_RECT_GetX(self)

    def GetY(self):
        """GetY(EDA_RECT self) -> int"""
        return _pcbnew.EDA_RECT_GetY(self)

    def GetOrigin(self):
        """GetOrigin(EDA_RECT self) -> wxPoint"""
        return _pcbnew.EDA_RECT_GetOrigin(self)

    def GetPosition(self):
        """GetPosition(EDA_RECT self) -> wxPoint"""
        return _pcbnew.EDA_RECT_GetPosition(self)

    def GetEnd(self):
        """GetEnd(EDA_RECT self) -> wxPoint"""
        return _pcbnew.EDA_RECT_GetEnd(self)

    def GetWidth(self):
        """GetWidth(EDA_RECT self) -> int"""
        return _pcbnew.EDA_RECT_GetWidth(self)

    def GetHeight(self):
        """GetHeight(EDA_RECT self) -> int"""
        return _pcbnew.EDA_RECT_GetHeight(self)

    def GetRight(self):
        """GetRight(EDA_RECT self) -> int"""
        return _pcbnew.EDA_RECT_GetRight(self)

    def GetBottom(self):
        """GetBottom(EDA_RECT self) -> int"""
        return _pcbnew.EDA_RECT_GetBottom(self)

    def SetOrigin(self, *args):
        """
        SetOrigin(EDA_RECT self, wxPoint pos)
        SetOrigin(EDA_RECT self, int x, int y)
        """
        return _pcbnew.EDA_RECT_SetOrigin(self, *args)

    def SetSize(self, *args):
        """
        SetSize(EDA_RECT self, wxSize size)
        SetSize(EDA_RECT self, int w, int h)
        """
        return _pcbnew.EDA_RECT_SetSize(self, *args)

    def Offset(self, *args):
        """
        Offset(EDA_RECT self, int dx, int dy)
        Offset(EDA_RECT self, wxPoint offset)
        """
        return _pcbnew.EDA_RECT_Offset(self, *args)

    def SetX(self, *args):
        """SetX(EDA_RECT self, int val)"""
        return _pcbnew.EDA_RECT_SetX(self, *args)

    def SetY(self, *args):
        """SetY(EDA_RECT self, int val)"""
        return _pcbnew.EDA_RECT_SetY(self, *args)

    def SetWidth(self, *args):
        """SetWidth(EDA_RECT self, int val)"""
        return _pcbnew.EDA_RECT_SetWidth(self, *args)

    def SetHeight(self, *args):
        """SetHeight(EDA_RECT self, int val)"""
        return _pcbnew.EDA_RECT_SetHeight(self, *args)

    def SetEnd(self, *args):
        """
        SetEnd(EDA_RECT self, int x, int y)
        SetEnd(EDA_RECT self, wxPoint pos)
        """
        return _pcbnew.EDA_RECT_SetEnd(self, *args)

    def Intersects(self, *args):
        """Intersects(EDA_RECT self, EDA_RECT aRect) -> bool"""
        return _pcbnew.EDA_RECT_Intersects(self, *args)

    def getWxRect(self):
        """getWxRect(EDA_RECT self) -> wxRect"""
        return _pcbnew.EDA_RECT_getWxRect(self)

    def Inflate(self, *args):
        """
        Inflate(EDA_RECT self, wxCoord dx, wxCoord dy) -> EDA_RECT
        Inflate(EDA_RECT self, int aDelta) -> EDA_RECT
        """
        return _pcbnew.EDA_RECT_Inflate(self, *args)

    def Merge(self, *args):
        """
        Merge(EDA_RECT self, EDA_RECT aRect)
        Merge(EDA_RECT self, wxPoint aPoint)
        """
        return _pcbnew.EDA_RECT_Merge(self, *args)

    def GetArea(self):
        """GetArea(EDA_RECT self) -> double"""
        return _pcbnew.EDA_RECT_GetArea(self)

    __swig_destroy__ = _pcbnew.delete_EDA_RECT
    __del__ = lambda self : None;
EDA_RECT_swigregister = _pcbnew.EDA_RECT_swigregister
EDA_RECT_swigregister(EDA_RECT)

IS_CHANGED = _pcbnew.IS_CHANGED
IS_LINKED = _pcbnew.IS_LINKED
IN_EDIT = _pcbnew.IN_EDIT
IS_MOVED = _pcbnew.IS_MOVED
IS_NEW = _pcbnew.IS_NEW
IS_RESIZED = _pcbnew.IS_RESIZED
IS_DRAGGED = _pcbnew.IS_DRAGGED
IS_DELETED = _pcbnew.IS_DELETED
IS_WIRE_IMAGE = _pcbnew.IS_WIRE_IMAGE
STARTPOINT = _pcbnew.STARTPOINT
ENDPOINT = _pcbnew.ENDPOINT
SELECTED = _pcbnew.SELECTED
SELECTEDNODE = _pcbnew.SELECTEDNODE
STRUCT_DELETED = _pcbnew.STRUCT_DELETED
CANDIDATE = _pcbnew.CANDIDATE
SKIP_STRUCT = _pcbnew.SKIP_STRUCT
DO_NOT_DRAW = _pcbnew.DO_NOT_DRAW
IS_CANCELLED = _pcbnew.IS_CANCELLED
TRACK_LOCKED = _pcbnew.TRACK_LOCKED
TRACK_AR = _pcbnew.TRACK_AR
FLAG1 = _pcbnew.FLAG1
FLAG0 = _pcbnew.FLAG0
BEGIN_ONPAD = _pcbnew.BEGIN_ONPAD
END_ONPAD = _pcbnew.END_ONPAD
BUSY = _pcbnew.BUSY
EDA_ITEM_ALL_FLAGS = _pcbnew.EDA_ITEM_ALL_FLAGS
class EDA_ITEM(_object):
    """Proxy of C++ EDA_ITEM class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EDA_ITEM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EDA_ITEM, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pcbnew.delete_EDA_ITEM
    __del__ = lambda self : None;
    def Type(self):
        """Type(EDA_ITEM self) -> KICAD_T"""
        return _pcbnew.EDA_ITEM_Type(self)

    def SetTimeStamp(self, *args):
        """SetTimeStamp(EDA_ITEM self, time_t aNewTimeStamp)"""
        return _pcbnew.EDA_ITEM_SetTimeStamp(self, *args)

    def GetTimeStamp(self):
        """GetTimeStamp(EDA_ITEM self) -> time_t"""
        return _pcbnew.EDA_ITEM_GetTimeStamp(self)

    def Next(self):
        """Next(EDA_ITEM self) -> EDA_ITEM"""
        return _pcbnew.EDA_ITEM_Next(self)

    def Back(self):
        """Back(EDA_ITEM self) -> EDA_ITEM"""
        return _pcbnew.EDA_ITEM_Back(self)

    def GetParent(self):
        """GetParent(EDA_ITEM self) -> EDA_ITEM"""
        return _pcbnew.EDA_ITEM_GetParent(self)

    def GetSon(self):
        """GetSon(EDA_ITEM self) -> EDA_ITEM"""
        return _pcbnew.EDA_ITEM_GetSon(self)

    def GetList(self):
        """GetList(EDA_ITEM self) -> DHEAD"""
        return _pcbnew.EDA_ITEM_GetList(self)

    def SetParent(self, *args):
        """SetParent(EDA_ITEM self, EDA_ITEM aParent)"""
        return _pcbnew.EDA_ITEM_SetParent(self, *args)

    def SetSon(self, *args):
        """SetSon(EDA_ITEM self, EDA_ITEM aSon)"""
        return _pcbnew.EDA_ITEM_SetSon(self, *args)

    def SetList(self, *args):
        """SetList(EDA_ITEM self, DHEAD aList)"""
        return _pcbnew.EDA_ITEM_SetList(self, *args)

    def IsNew(self):
        """IsNew(EDA_ITEM self) -> bool"""
        return _pcbnew.EDA_ITEM_IsNew(self)

    def IsModified(self):
        """IsModified(EDA_ITEM self) -> bool"""
        return _pcbnew.EDA_ITEM_IsModified(self)

    def IsMoving(self):
        """IsMoving(EDA_ITEM self) -> bool"""
        return _pcbnew.EDA_ITEM_IsMoving(self)

    def IsDragging(self):
        """IsDragging(EDA_ITEM self) -> bool"""
        return _pcbnew.EDA_ITEM_IsDragging(self)

    def IsSelected(self):
        """IsSelected(EDA_ITEM self) -> bool"""
        return _pcbnew.EDA_ITEM_IsSelected(self)

    def IsResized(self):
        """IsResized(EDA_ITEM self) -> bool"""
        return _pcbnew.EDA_ITEM_IsResized(self)

    def SetModified(self):
        """SetModified(EDA_ITEM self)"""
        return _pcbnew.EDA_ITEM_SetModified(self)

    def GetState(self, *args):
        """GetState(EDA_ITEM self, int type) -> int"""
        return _pcbnew.EDA_ITEM_GetState(self, *args)

    def SetState(self, *args):
        """SetState(EDA_ITEM self, int type, int state)"""
        return _pcbnew.EDA_ITEM_SetState(self, *args)

    def GetStatus(self):
        """GetStatus(EDA_ITEM self) -> int"""
        return _pcbnew.EDA_ITEM_GetStatus(self)

    def SetStatus(self, *args):
        """SetStatus(EDA_ITEM self, int aStatus)"""
        return _pcbnew.EDA_ITEM_SetStatus(self, *args)

    def SetFlags(self, *args):
        """SetFlags(EDA_ITEM self, int aMask)"""
        return _pcbnew.EDA_ITEM_SetFlags(self, *args)

    def ClearFlags(self, *args):
        """
        ClearFlags(EDA_ITEM self, int aMask=-1)
        ClearFlags(EDA_ITEM self)
        """
        return _pcbnew.EDA_ITEM_ClearFlags(self, *args)

    def GetFlags(self):
        """GetFlags(EDA_ITEM self) -> int"""
        return _pcbnew.EDA_ITEM_GetFlags(self)

    def SetImage(self, *args):
        """SetImage(EDA_ITEM self, EDA_ITEM aItem)"""
        return _pcbnew.EDA_ITEM_SetImage(self, *args)

    def SetForceVisible(self, *args):
        """SetForceVisible(EDA_ITEM self, bool aEnable)"""
        return _pcbnew.EDA_ITEM_SetForceVisible(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(EDA_ITEM self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.EDA_ITEM_DisplayInfo(self, *args)

    def HitTest(self, *args):
        """
        HitTest(EDA_ITEM self, wxPoint aPosition) -> bool
        HitTest(EDA_ITEM self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.EDA_ITEM_HitTest(self, *args)

    def GetBoundingBox(self):
        """GetBoundingBox(EDA_ITEM self) -> EDA_RECT"""
        return _pcbnew.EDA_ITEM_GetBoundingBox(self)

    def Clone(self):
        """Clone(EDA_ITEM self) -> EDA_ITEM"""
        return _pcbnew.EDA_ITEM_Clone(self)

    def IterateForward(*args):
        """IterateForward(EDA_ITEM listStart, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.EDA_ITEM_IterateForward(*args)

    if _newclass:IterateForward = staticmethod(IterateForward)
    __swig_getmethods__["IterateForward"] = lambda x: IterateForward
    def Visit(self, *args):
        """Visit(EDA_ITEM self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.EDA_ITEM_Visit(self, *args)

    def GetClass(self):
        """GetClass(EDA_ITEM self) -> wxString"""
        return _pcbnew.EDA_ITEM_GetClass(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(EDA_ITEM self) -> wxString"""
        return _pcbnew.EDA_ITEM_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(EDA_ITEM self) -> BITMAP_DEF"""
        return _pcbnew.EDA_ITEM_GetMenuImage(self)

    def Matches(self, *args):
        """
        Matches(EDA_ITEM self, wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool
        Matches(EDA_ITEM self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.EDA_ITEM_Matches(self, *args)

    def Replace(self, *args):
        """
        Replace(EDA_ITEM self, wxFindReplaceData & aSearchData, wxString & aText) -> bool
        Replace(EDA_ITEM self, wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool
        Replace(EDA_ITEM self, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.EDA_ITEM_Replace(self, *args)

    def IsReplaceable(self):
        """IsReplaceable(EDA_ITEM self) -> bool"""
        return _pcbnew.EDA_ITEM_IsReplaceable(self)

    def __lt__(self, *args):
        """__lt__(EDA_ITEM self, EDA_ITEM aItem) -> bool"""
        return _pcbnew.EDA_ITEM___lt__(self, *args)

    def Sort(*args):
        """Sort(EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"""
        return _pcbnew.EDA_ITEM_Sort(*args)

    if _newclass:Sort = staticmethod(Sort)
    __swig_getmethods__["Sort"] = lambda x: Sort
EDA_ITEM_swigregister = _pcbnew.EDA_ITEM_swigregister
EDA_ITEM_swigregister(EDA_ITEM)

def EDA_ITEM_IterateForward(*args):
  """EDA_ITEM_IterateForward(EDA_ITEM listStart, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
  return _pcbnew.EDA_ITEM_IterateForward(*args)

def EDA_ITEM_Sort(*args):
  """EDA_ITEM_Sort(EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"""
  return _pcbnew.EDA_ITEM_Sort(*args)


def new_clone(*args):
  """new_clone(EDA_ITEM aItem) -> EDA_ITEM"""
  return _pcbnew.new_clone(*args)
GR_KB_RIGHTSHIFT = _pcbnew.GR_KB_RIGHTSHIFT
GR_KB_LEFTSHIFT = _pcbnew.GR_KB_LEFTSHIFT
GR_KB_CTRL = _pcbnew.GR_KB_CTRL
GR_KB_ALT = _pcbnew.GR_KB_ALT
GR_KB_SHIFT = _pcbnew.GR_KB_SHIFT
GR_KB_SHIFTCTRL = _pcbnew.GR_KB_SHIFTCTRL
MOUSE_MIDDLE = _pcbnew.MOUSE_MIDDLE
EDA_PANNING_UP_KEY = _pcbnew.EDA_PANNING_UP_KEY
EDA_PANNING_DOWN_KEY = _pcbnew.EDA_PANNING_DOWN_KEY
EDA_PANNING_LEFT_KEY = _pcbnew.EDA_PANNING_LEFT_KEY
EDA_PANNING_RIGHT_KEY = _pcbnew.EDA_PANNING_RIGHT_KEY
EDA_ZOOM_IN_FROM_MOUSE = _pcbnew.EDA_ZOOM_IN_FROM_MOUSE
EDA_ZOOM_OUT_FROM_MOUSE = _pcbnew.EDA_ZOOM_OUT_FROM_MOUSE
EDA_ZOOM_CENTER_FROM_MOUSE = _pcbnew.EDA_ZOOM_CENTER_FROM_MOUSE
ESC = _pcbnew.ESC
TEXT_ORIENT_HORIZ = _pcbnew.TEXT_ORIENT_HORIZ
TEXT_ORIENT_VERT = _pcbnew.TEXT_ORIENT_VERT
ON = _pcbnew.ON
OFF = _pcbnew.OFF

def KiROUND(*args):
  """KiROUND(double v) -> int"""
  return _pcbnew.KiROUND(*args)

def Mm2mils(*args):
  """Mm2mils(double x) -> int"""
  return _pcbnew.Mm2mils(*args)

def Mils2mm(*args):
  """Mils2mm(double x) -> int"""
  return _pcbnew.Mils2mm(*args)

def IsGOST():
  """IsGOST() -> bool"""
  return _pcbnew.IsGOST()
INCHES = _pcbnew.INCHES
MILLIMETRES = _pcbnew.MILLIMETRES
UNSCALED_UNITS = _pcbnew.UNSCALED_UNITS
class PAGE_INFO(_object):
    """Proxy of C++ PAGE_INFO class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAGE_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAGE_INFO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(PAGE_INFO self, wxString const & aType=A3, bool IsPortrait=False) -> PAGE_INFO
        __init__(PAGE_INFO self, wxString const & aType=A3) -> PAGE_INFO
        __init__(PAGE_INFO self) -> PAGE_INFO
        """
        this = _pcbnew.new_PAGE_INFO(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetType(self, *args):
        """
        SetType(PAGE_INFO self, wxString const & aStandardPageDescriptionName, bool IsPortrait=False) -> bool
        SetType(PAGE_INFO self, wxString const & aStandardPageDescriptionName) -> bool
        """
        return _pcbnew.PAGE_INFO_SetType(self, *args)

    def GetType(self):
        """GetType(PAGE_INFO self) -> wxString const &"""
        return _pcbnew.PAGE_INFO_GetType(self)

    def IsDefault(self):
        """IsDefault(PAGE_INFO self) -> bool"""
        return _pcbnew.PAGE_INFO_IsDefault(self)

    def IsCustom(self):
        """IsCustom(PAGE_INFO self) -> bool"""
        return _pcbnew.PAGE_INFO_IsCustom(self)

    def SetPortrait(self, *args):
        """SetPortrait(PAGE_INFO self, bool isPortrait)"""
        return _pcbnew.PAGE_INFO_SetPortrait(self, *args)

    def IsPortrait(self):
        """IsPortrait(PAGE_INFO self) -> bool"""
        return _pcbnew.PAGE_INFO_IsPortrait(self)

    def GetWxOrientation(self):
        """GetWxOrientation(PAGE_INFO self) -> int"""
        return _pcbnew.PAGE_INFO_GetWxOrientation(self)

    def GetPaperId(self):
        """GetPaperId(PAGE_INFO self) -> wxPaperSize"""
        return _pcbnew.PAGE_INFO_GetPaperId(self)

    def SetWidthMils(self, *args):
        """SetWidthMils(PAGE_INFO self, int aWidthInMils)"""
        return _pcbnew.PAGE_INFO_SetWidthMils(self, *args)

    def GetWidthMils(self):
        """GetWidthMils(PAGE_INFO self) -> int"""
        return _pcbnew.PAGE_INFO_GetWidthMils(self)

    def SetHeightMils(self, *args):
        """SetHeightMils(PAGE_INFO self, int aHeightInMils)"""
        return _pcbnew.PAGE_INFO_SetHeightMils(self, *args)

    def GetHeightMils(self):
        """GetHeightMils(PAGE_INFO self) -> int"""
        return _pcbnew.PAGE_INFO_GetHeightMils(self)

    def GetSizeMils(self):
        """GetSizeMils(PAGE_INFO self) -> wxSize"""
        return _pcbnew.PAGE_INFO_GetSizeMils(self)

    def GetWidthIU(self):
        """GetWidthIU(PAGE_INFO self) -> int"""
        return _pcbnew.PAGE_INFO_GetWidthIU(self)

    def GetHeightIU(self):
        """GetHeightIU(PAGE_INFO self) -> int"""
        return _pcbnew.PAGE_INFO_GetHeightIU(self)

    def GetSizeIU(self):
        """GetSizeIU(PAGE_INFO self) -> wxSize"""
        return _pcbnew.PAGE_INFO_GetSizeIU(self)

    def GetLeftMarginMils(self):
        """GetLeftMarginMils(PAGE_INFO self) -> int"""
        return _pcbnew.PAGE_INFO_GetLeftMarginMils(self)

    def GetRightMarginMils(self):
        """GetRightMarginMils(PAGE_INFO self) -> int"""
        return _pcbnew.PAGE_INFO_GetRightMarginMils(self)

    def GetTopMarginMils(self):
        """GetTopMarginMils(PAGE_INFO self) -> int"""
        return _pcbnew.PAGE_INFO_GetTopMarginMils(self)

    def GetBottomMarginMils(self):
        """GetBottomMarginMils(PAGE_INFO self) -> int"""
        return _pcbnew.PAGE_INFO_GetBottomMarginMils(self)

    def SetLeftMarginMils(self, *args):
        """SetLeftMarginMils(PAGE_INFO self, int aMargin)"""
        return _pcbnew.PAGE_INFO_SetLeftMarginMils(self, *args)

    def SetRightMarginMils(self, *args):
        """SetRightMarginMils(PAGE_INFO self, int aMargin)"""
        return _pcbnew.PAGE_INFO_SetRightMarginMils(self, *args)

    def SetTopMarginMils(self, *args):
        """SetTopMarginMils(PAGE_INFO self, int aMargin)"""
        return _pcbnew.PAGE_INFO_SetTopMarginMils(self, *args)

    def SetBottomMarginMils(self, *args):
        """SetBottomMarginMils(PAGE_INFO self, int aMargin)"""
        return _pcbnew.PAGE_INFO_SetBottomMarginMils(self, *args)

    def SetCustomWidthMils(*args):
        """SetCustomWidthMils(int aWidthInMils)"""
        return _pcbnew.PAGE_INFO_SetCustomWidthMils(*args)

    if _newclass:SetCustomWidthMils = staticmethod(SetCustomWidthMils)
    __swig_getmethods__["SetCustomWidthMils"] = lambda x: SetCustomWidthMils
    def SetCustomHeightMils(*args):
        """SetCustomHeightMils(int aHeightInMils)"""
        return _pcbnew.PAGE_INFO_SetCustomHeightMils(*args)

    if _newclass:SetCustomHeightMils = staticmethod(SetCustomHeightMils)
    __swig_getmethods__["SetCustomHeightMils"] = lambda x: SetCustomHeightMils
    def GetCustomWidthMils():
        """GetCustomWidthMils() -> int"""
        return _pcbnew.PAGE_INFO_GetCustomWidthMils()

    if _newclass:GetCustomWidthMils = staticmethod(GetCustomWidthMils)
    __swig_getmethods__["GetCustomWidthMils"] = lambda x: GetCustomWidthMils
    def GetCustomHeightMils():
        """GetCustomHeightMils() -> int"""
        return _pcbnew.PAGE_INFO_GetCustomHeightMils()

    if _newclass:GetCustomHeightMils = staticmethod(GetCustomHeightMils)
    __swig_getmethods__["GetCustomHeightMils"] = lambda x: GetCustomHeightMils
    def Format(self, *args):
        """Format(PAGE_INFO self, OUTPUTFORMATTER * aFormatter, int aNestLevel, int aControlBits)"""
        return _pcbnew.PAGE_INFO_Format(self, *args)

    __swig_destroy__ = _pcbnew.delete_PAGE_INFO
    __del__ = lambda self : None;
PAGE_INFO_swigregister = _pcbnew.PAGE_INFO_swigregister
PAGE_INFO_swigregister(PAGE_INFO)
cvar = _pcbnew.cvar
PAGE_INFO.A4 = _pcbnew.cvar.PAGE_INFO_A4
PAGE_INFO.A3 = _pcbnew.cvar.PAGE_INFO_A3
PAGE_INFO.A2 = _pcbnew.cvar.PAGE_INFO_A2
PAGE_INFO.A1 = _pcbnew.cvar.PAGE_INFO_A1
PAGE_INFO.A0 = _pcbnew.cvar.PAGE_INFO_A0
PAGE_INFO.A = _pcbnew.cvar.PAGE_INFO_A
PAGE_INFO.B = _pcbnew.cvar.PAGE_INFO_B
PAGE_INFO.C = _pcbnew.cvar.PAGE_INFO_C
PAGE_INFO.D = _pcbnew.cvar.PAGE_INFO_D
PAGE_INFO.E = _pcbnew.cvar.PAGE_INFO_E
PAGE_INFO.GERBER = _pcbnew.cvar.PAGE_INFO_GERBER
PAGE_INFO.USLetter = _pcbnew.cvar.PAGE_INFO_USLetter
PAGE_INFO.USLegal = _pcbnew.cvar.PAGE_INFO_USLegal
PAGE_INFO.USLedger = _pcbnew.cvar.PAGE_INFO_USLedger
PAGE_INFO.Custom = _pcbnew.cvar.PAGE_INFO_Custom

def PAGE_INFO_SetCustomWidthMils(*args):
  """PAGE_INFO_SetCustomWidthMils(int aWidthInMils)"""
  return _pcbnew.PAGE_INFO_SetCustomWidthMils(*args)

def PAGE_INFO_SetCustomHeightMils(*args):
  """PAGE_INFO_SetCustomHeightMils(int aHeightInMils)"""
  return _pcbnew.PAGE_INFO_SetCustomHeightMils(*args)

def PAGE_INFO_GetCustomWidthMils():
  """PAGE_INFO_GetCustomWidthMils() -> int"""
  return _pcbnew.PAGE_INFO_GetCustomWidthMils()

def PAGE_INFO_GetCustomHeightMils():
  """PAGE_INFO_GetCustomHeightMils() -> int"""
  return _pcbnew.PAGE_INFO_GetCustomHeightMils()


def SetLocaleTo_C_standard():
  """SetLocaleTo_C_standard()"""
  return _pcbnew.SetLocaleTo_C_standard()

def SetLocaleTo_Default():
  """SetLocaleTo_Default()"""
  return _pcbnew.SetLocaleTo_Default()
class LOCALE_IO(_object):
    """Proxy of C++ LOCALE_IO class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LOCALE_IO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LOCALE_IO, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(LOCALE_IO self) -> LOCALE_IO"""
        this = _pcbnew.new_LOCALE_IO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_LOCALE_IO
    __del__ = lambda self : None;
LOCALE_IO_swigregister = _pcbnew.LOCALE_IO_swigregister
LOCALE_IO_swigregister(LOCALE_IO)


def GetTextSize(*args):
  """GetTextSize(wxString const & aSingleLine, wxWindow * aWindow) -> wxSize"""
  return _pcbnew.GetTextSize(*args)

def EnsureTextCtrlWidth(*args):
  """
    EnsureTextCtrlWidth(wxTextCtrl * aCtrl, wxString const * aString=None) -> bool
    EnsureTextCtrlWidth(wxTextCtrl * aCtrl) -> bool
    """
  return _pcbnew.EnsureTextCtrlWidth(*args)

def ProcessExecute(*args):
  """
    ProcessExecute(wxString const & aCommandLine, int aFlags=wxEXEC_ASYNC) -> bool
    ProcessExecute(wxString const & aCommandLine) -> bool
    """
  return _pcbnew.ProcessExecute(*args)

def GetNewTimeStamp():
  """GetNewTimeStamp() -> time_t"""
  return _pcbnew.GetNewTimeStamp()

def DisplayColorFrame(*args):
  """DisplayColorFrame(wxWindow * parent, int OldColor) -> int"""
  return _pcbnew.DisplayColorFrame(*args)

def ReturnUnitSymbol(*args):
  """
    ReturnUnitSymbol(EDA_UNITS_T aUnits=g_UserUnit, wxString const & aFormatString=_( " (%s):" )) -> wxString
    ReturnUnitSymbol(EDA_UNITS_T aUnits=g_UserUnit) -> wxString
    ReturnUnitSymbol() -> wxString
    """
  return _pcbnew.ReturnUnitSymbol(*args)

def GetUnitsLabel(*args):
  """GetUnitsLabel(EDA_UNITS_T aUnits) -> wxString"""
  return _pcbnew.GetUnitsLabel(*args)

def GetAbbreviatedUnitsLabel(*args):
  """
    GetAbbreviatedUnitsLabel(EDA_UNITS_T aUnit=g_UserUnit) -> wxString
    GetAbbreviatedUnitsLabel() -> wxString
    """
  return _pcbnew.GetAbbreviatedUnitsLabel(*args)

def AddUnitSymbol(*args):
  """
    AddUnitSymbol(wxStaticText & Stext, EDA_UNITS_T aUnit=g_UserUnit)
    AddUnitSymbol(wxStaticText & Stext)
    """
  return _pcbnew.AddUnitSymbol(*args)

def RoundTo0(*args):
  """RoundTo0(double x, double precision) -> double"""
  return _pcbnew.RoundTo0(*args)

def wxStringSplit(*args):
  """wxStringSplit(wxString aString, wxChar aSplitter) -> wxArrayString *"""
  return _pcbnew.wxStringSplit(*args)

def GenDate():
  """GenDate() -> wxString"""
  return _pcbnew.GenDate()

def GetRunningMicroSecs():
  """GetRunningMicroSecs() -> unsigned int"""
  return _pcbnew.GetRunningMicroSecs()
class TITLE_BLOCK(_object):
    """Proxy of C++ TITLE_BLOCK class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TITLE_BLOCK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TITLE_BLOCK, name)
    __repr__ = _swig_repr
    def SetTitle(self, *args):
        """SetTitle(TITLE_BLOCK self, wxString const & aTitle)"""
        return _pcbnew.TITLE_BLOCK_SetTitle(self, *args)

    def GetTitle(self):
        """GetTitle(TITLE_BLOCK self) -> wxString const &"""
        return _pcbnew.TITLE_BLOCK_GetTitle(self)

    def SetDate(self, *args):
        """
        SetDate(TITLE_BLOCK self, wxString const & aDate=GenDate())
        SetDate(TITLE_BLOCK self)
        """
        return _pcbnew.TITLE_BLOCK_SetDate(self, *args)

    def GetDate(self):
        """GetDate(TITLE_BLOCK self) -> wxString const &"""
        return _pcbnew.TITLE_BLOCK_GetDate(self)

    def SetRevision(self, *args):
        """SetRevision(TITLE_BLOCK self, wxString const & aRevision)"""
        return _pcbnew.TITLE_BLOCK_SetRevision(self, *args)

    def GetRevision(self):
        """GetRevision(TITLE_BLOCK self) -> wxString const &"""
        return _pcbnew.TITLE_BLOCK_GetRevision(self)

    def SetCompany(self, *args):
        """SetCompany(TITLE_BLOCK self, wxString const & aCompany)"""
        return _pcbnew.TITLE_BLOCK_SetCompany(self, *args)

    def GetCompany(self):
        """GetCompany(TITLE_BLOCK self) -> wxString const &"""
        return _pcbnew.TITLE_BLOCK_GetCompany(self)

    def SetComment1(self, *args):
        """SetComment1(TITLE_BLOCK self, wxString const & aComment)"""
        return _pcbnew.TITLE_BLOCK_SetComment1(self, *args)

    def GetComment1(self):
        """GetComment1(TITLE_BLOCK self) -> wxString const &"""
        return _pcbnew.TITLE_BLOCK_GetComment1(self)

    def SetComment2(self, *args):
        """SetComment2(TITLE_BLOCK self, wxString const & aComment)"""
        return _pcbnew.TITLE_BLOCK_SetComment2(self, *args)

    def GetComment2(self):
        """GetComment2(TITLE_BLOCK self) -> wxString const &"""
        return _pcbnew.TITLE_BLOCK_GetComment2(self)

    def SetComment3(self, *args):
        """SetComment3(TITLE_BLOCK self, wxString const & aComment)"""
        return _pcbnew.TITLE_BLOCK_SetComment3(self, *args)

    def GetComment3(self):
        """GetComment3(TITLE_BLOCK self) -> wxString const &"""
        return _pcbnew.TITLE_BLOCK_GetComment3(self)

    def SetComment4(self, *args):
        """SetComment4(TITLE_BLOCK self, wxString const & aComment)"""
        return _pcbnew.TITLE_BLOCK_SetComment4(self, *args)

    def GetComment4(self):
        """GetComment4(TITLE_BLOCK self) -> wxString const &"""
        return _pcbnew.TITLE_BLOCK_GetComment4(self)

    def Clear(self):
        """Clear(TITLE_BLOCK self)"""
        return _pcbnew.TITLE_BLOCK_Clear(self)

    def Format(self, *args):
        """Format(TITLE_BLOCK self, OUTPUTFORMATTER * aFormatter, int aNestLevel, int aControlBits)"""
        return _pcbnew.TITLE_BLOCK_Format(self, *args)

    def __init__(self): 
        """__init__(TITLE_BLOCK self) -> TITLE_BLOCK"""
        this = _pcbnew.new_TITLE_BLOCK()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_TITLE_BLOCK
    __del__ = lambda self : None;
TITLE_BLOCK_swigregister = _pcbnew.TITLE_BLOCK_swigregister
TITLE_BLOCK_swigregister(TITLE_BLOCK)

LAYERSCOLORSBUFFERSIZE = _pcbnew.LAYERSCOLORSBUFFERSIZE
ITEMSCOLORSBUFFERSIZE = _pcbnew.ITEMSCOLORSBUFFERSIZE
class COLORS_DESIGN_SETTINGS(_object):
    """Proxy of C++ COLORS_DESIGN_SETTINGS class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COLORS_DESIGN_SETTINGS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COLORS_DESIGN_SETTINGS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_LayersColors"] = _pcbnew.COLORS_DESIGN_SETTINGS_m_LayersColors_set
    __swig_getmethods__["m_LayersColors"] = _pcbnew.COLORS_DESIGN_SETTINGS_m_LayersColors_get
    if _newclass:m_LayersColors = _swig_property(_pcbnew.COLORS_DESIGN_SETTINGS_m_LayersColors_get, _pcbnew.COLORS_DESIGN_SETTINGS_m_LayersColors_set)
    __swig_setmethods__["m_ItemsColors"] = _pcbnew.COLORS_DESIGN_SETTINGS_m_ItemsColors_set
    __swig_getmethods__["m_ItemsColors"] = _pcbnew.COLORS_DESIGN_SETTINGS_m_ItemsColors_get
    if _newclass:m_ItemsColors = _swig_property(_pcbnew.COLORS_DESIGN_SETTINGS_m_ItemsColors_get, _pcbnew.COLORS_DESIGN_SETTINGS_m_ItemsColors_set)
    def __init__(self): 
        """__init__(COLORS_DESIGN_SETTINGS self) -> COLORS_DESIGN_SETTINGS"""
        this = _pcbnew.new_COLORS_DESIGN_SETTINGS()
        try: self.this.append(this)
        except: self.this = this
    def GetLayerColor(self, *args):
        """GetLayerColor(COLORS_DESIGN_SETTINGS self, int aLayer) -> int"""
        return _pcbnew.COLORS_DESIGN_SETTINGS_GetLayerColor(self, *args)

    def SetLayerColor(self, *args):
        """SetLayerColor(COLORS_DESIGN_SETTINGS self, int aLayer, int aColor)"""
        return _pcbnew.COLORS_DESIGN_SETTINGS_SetLayerColor(self, *args)

    def GetItemColor(self, *args):
        """GetItemColor(COLORS_DESIGN_SETTINGS self, int aItemIdx) -> int"""
        return _pcbnew.COLORS_DESIGN_SETTINGS_GetItemColor(self, *args)

    def SetItemColor(self, *args):
        """SetItemColor(COLORS_DESIGN_SETTINGS self, int aItemIdx, int aColor)"""
        return _pcbnew.COLORS_DESIGN_SETTINGS_SetItemColor(self, *args)

    def SetAllColorsAs(self, *args):
        """SetAllColorsAs(COLORS_DESIGN_SETTINGS self, int aColor)"""
        return _pcbnew.COLORS_DESIGN_SETTINGS_SetAllColorsAs(self, *args)

    __swig_destroy__ = _pcbnew.delete_COLORS_DESIGN_SETTINGS
    __del__ = lambda self : None;
COLORS_DESIGN_SETTINGS_swigregister = _pcbnew.COLORS_DESIGN_SETTINGS_swigregister
COLORS_DESIGN_SETTINGS_swigregister(COLORS_DESIGN_SETTINGS)

class MARKER_BASE(_object):
    """Proxy of C++ MARKER_BASE class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MARKER_BASE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MARKER_BASE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Pos"] = _pcbnew.MARKER_BASE_m_Pos_set
    __swig_getmethods__["m_Pos"] = _pcbnew.MARKER_BASE_m_Pos_get
    if _newclass:m_Pos = _swig_property(_pcbnew.MARKER_BASE_m_Pos_get, _pcbnew.MARKER_BASE_m_Pos_set)
    def __init__(self, *args): 
        """
        __init__(MARKER_BASE self) -> MARKER_BASE
        __init__(MARKER_BASE self, int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos, wxString const & bText, 
            wxPoint bPos) -> MARKER_BASE
        __init__(MARKER_BASE self, int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos) -> MARKER_BASE
        __init__(MARKER_BASE self, MARKER_BASE aMarker) -> MARKER_BASE
        """
        this = _pcbnew.new_MARKER_BASE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_MARKER_BASE
    __del__ = lambda self : None;
    def DrawMarker(self, *args):
        """DrawMarker(MARKER_BASE self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset)"""
        return _pcbnew.MARKER_BASE_DrawMarker(self, *args)

    def GetPos(self):
        """GetPos(MARKER_BASE self) -> wxPoint"""
        return _pcbnew.MARKER_BASE_GetPos(self)

    def SetColor(self, *args):
        """SetColor(MARKER_BASE self, EDA_COLOR_T aColor)"""
        return _pcbnew.MARKER_BASE_SetColor(self, *args)

    def SetErrorLevel(self, *args):
        """SetErrorLevel(MARKER_BASE self, int aErrorLevel)"""
        return _pcbnew.MARKER_BASE_SetErrorLevel(self, *args)

    def GetErrorLevel(self):
        """GetErrorLevel(MARKER_BASE self) -> int"""
        return _pcbnew.MARKER_BASE_GetErrorLevel(self)

    def SetMarkerType(self, *args):
        """SetMarkerType(MARKER_BASE self, int aMarkerType)"""
        return _pcbnew.MARKER_BASE_SetMarkerType(self, *args)

    def GetMarkerType(self):
        """GetMarkerType(MARKER_BASE self) -> int"""
        return _pcbnew.MARKER_BASE_GetMarkerType(self)

    def SetData(self, *args):
        """
        SetData(MARKER_BASE self, int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos, wxString const & bText, 
            wxPoint bPos)
        SetData(MARKER_BASE self, int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos)
        """
        return _pcbnew.MARKER_BASE_SetData(self, *args)

    def SetAuxiliaryData(self, *args):
        """SetAuxiliaryData(MARKER_BASE self, wxString const & aAuxiliaryText, wxPoint aAuxiliaryPos)"""
        return _pcbnew.MARKER_BASE_SetAuxiliaryData(self, *args)

    def SetShowNoCoordinate(self):
        """SetShowNoCoordinate(MARKER_BASE self)"""
        return _pcbnew.MARKER_BASE_SetShowNoCoordinate(self)

    def GetReporter(self):
        """GetReporter(MARKER_BASE self) -> DRC_ITEM const &"""
        return _pcbnew.MARKER_BASE_GetReporter(self)

    def DisplayMarkerInfo(self, *args):
        """DisplayMarkerInfo(MARKER_BASE self, EDA_DRAW_FRAME * aFrame)"""
        return _pcbnew.MARKER_BASE_DisplayMarkerInfo(self, *args)

    def HitTestMarker(self, *args):
        """HitTestMarker(MARKER_BASE self, wxPoint ref_pos) -> bool"""
        return _pcbnew.MARKER_BASE_HitTestMarker(self, *args)

    def GetBoundingBoxMarker(self):
        """GetBoundingBoxMarker(MARKER_BASE self) -> EDA_RECT"""
        return _pcbnew.MARKER_BASE_GetBoundingBoxMarker(self)

MARKER_BASE_swigregister = _pcbnew.MARKER_BASE_swigregister
MARKER_BASE_swigregister(MARKER_BASE)

GR_TEXT_HJUSTIFY_LEFT = _pcbnew.GR_TEXT_HJUSTIFY_LEFT
GR_TEXT_HJUSTIFY_CENTER = _pcbnew.GR_TEXT_HJUSTIFY_CENTER
GR_TEXT_HJUSTIFY_RIGHT = _pcbnew.GR_TEXT_HJUSTIFY_RIGHT
GR_TEXT_VJUSTIFY_TOP = _pcbnew.GR_TEXT_VJUSTIFY_TOP
GR_TEXT_VJUSTIFY_CENTER = _pcbnew.GR_TEXT_VJUSTIFY_CENTER
GR_TEXT_VJUSTIFY_BOTTOM = _pcbnew.GR_TEXT_VJUSTIFY_BOTTOM
LINE = _pcbnew.LINE
FILLED = _pcbnew.FILLED
SKETCH = _pcbnew.SKETCH
DEFAULT_SIZE_TEXT = _pcbnew.DEFAULT_SIZE_TEXT
TEXT_NO_VISIBLE = _pcbnew.TEXT_NO_VISIBLE
class EDA_TEXT(_object):
    """Proxy of C++ EDA_TEXT class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EDA_TEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EDA_TEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Text"] = _pcbnew.EDA_TEXT_m_Text_set
    __swig_getmethods__["m_Text"] = _pcbnew.EDA_TEXT_m_Text_get
    if _newclass:m_Text = _swig_property(_pcbnew.EDA_TEXT_m_Text_get, _pcbnew.EDA_TEXT_m_Text_set)
    __swig_setmethods__["m_Thickness"] = _pcbnew.EDA_TEXT_m_Thickness_set
    __swig_getmethods__["m_Thickness"] = _pcbnew.EDA_TEXT_m_Thickness_get
    if _newclass:m_Thickness = _swig_property(_pcbnew.EDA_TEXT_m_Thickness_get, _pcbnew.EDA_TEXT_m_Thickness_set)
    __swig_setmethods__["m_Orient"] = _pcbnew.EDA_TEXT_m_Orient_set
    __swig_getmethods__["m_Orient"] = _pcbnew.EDA_TEXT_m_Orient_get
    if _newclass:m_Orient = _swig_property(_pcbnew.EDA_TEXT_m_Orient_get, _pcbnew.EDA_TEXT_m_Orient_set)
    __swig_setmethods__["m_Pos"] = _pcbnew.EDA_TEXT_m_Pos_set
    __swig_getmethods__["m_Pos"] = _pcbnew.EDA_TEXT_m_Pos_get
    if _newclass:m_Pos = _swig_property(_pcbnew.EDA_TEXT_m_Pos_get, _pcbnew.EDA_TEXT_m_Pos_set)
    __swig_setmethods__["m_Size"] = _pcbnew.EDA_TEXT_m_Size_set
    __swig_getmethods__["m_Size"] = _pcbnew.EDA_TEXT_m_Size_get
    if _newclass:m_Size = _swig_property(_pcbnew.EDA_TEXT_m_Size_get, _pcbnew.EDA_TEXT_m_Size_set)
    __swig_setmethods__["m_Mirror"] = _pcbnew.EDA_TEXT_m_Mirror_set
    __swig_getmethods__["m_Mirror"] = _pcbnew.EDA_TEXT_m_Mirror_get
    if _newclass:m_Mirror = _swig_property(_pcbnew.EDA_TEXT_m_Mirror_get, _pcbnew.EDA_TEXT_m_Mirror_set)
    __swig_setmethods__["m_Attributs"] = _pcbnew.EDA_TEXT_m_Attributs_set
    __swig_getmethods__["m_Attributs"] = _pcbnew.EDA_TEXT_m_Attributs_get
    if _newclass:m_Attributs = _swig_property(_pcbnew.EDA_TEXT_m_Attributs_get, _pcbnew.EDA_TEXT_m_Attributs_set)
    __swig_setmethods__["m_Italic"] = _pcbnew.EDA_TEXT_m_Italic_set
    __swig_getmethods__["m_Italic"] = _pcbnew.EDA_TEXT_m_Italic_get
    if _newclass:m_Italic = _swig_property(_pcbnew.EDA_TEXT_m_Italic_get, _pcbnew.EDA_TEXT_m_Italic_set)
    __swig_setmethods__["m_Bold"] = _pcbnew.EDA_TEXT_m_Bold_set
    __swig_getmethods__["m_Bold"] = _pcbnew.EDA_TEXT_m_Bold_get
    if _newclass:m_Bold = _swig_property(_pcbnew.EDA_TEXT_m_Bold_get, _pcbnew.EDA_TEXT_m_Bold_set)
    __swig_setmethods__["m_HJustify"] = _pcbnew.EDA_TEXT_m_HJustify_set
    __swig_getmethods__["m_HJustify"] = _pcbnew.EDA_TEXT_m_HJustify_get
    if _newclass:m_HJustify = _swig_property(_pcbnew.EDA_TEXT_m_HJustify_get, _pcbnew.EDA_TEXT_m_HJustify_set)
    __swig_setmethods__["m_VJustify"] = _pcbnew.EDA_TEXT_m_VJustify_set
    __swig_getmethods__["m_VJustify"] = _pcbnew.EDA_TEXT_m_VJustify_get
    if _newclass:m_VJustify = _swig_property(_pcbnew.EDA_TEXT_m_VJustify_get, _pcbnew.EDA_TEXT_m_VJustify_set)
    __swig_setmethods__["m_MultilineAllowed"] = _pcbnew.EDA_TEXT_m_MultilineAllowed_set
    __swig_getmethods__["m_MultilineAllowed"] = _pcbnew.EDA_TEXT_m_MultilineAllowed_get
    if _newclass:m_MultilineAllowed = _swig_property(_pcbnew.EDA_TEXT_m_MultilineAllowed_get, _pcbnew.EDA_TEXT_m_MultilineAllowed_set)
    def __init__(self, *args): 
        """
        __init__(EDA_TEXT self, wxString const & text=wxEmptyString) -> EDA_TEXT
        __init__(EDA_TEXT self) -> EDA_TEXT
        __init__(EDA_TEXT self, EDA_TEXT aText) -> EDA_TEXT
        """
        this = _pcbnew.new_EDA_TEXT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_EDA_TEXT
    __del__ = lambda self : None;
    def SetThickness(self, *args):
        """SetThickness(EDA_TEXT self, int aNewThickness)"""
        return _pcbnew.EDA_TEXT_SetThickness(self, *args)

    def GetThickness(self):
        """GetThickness(EDA_TEXT self) -> int"""
        return _pcbnew.EDA_TEXT_GetThickness(self)

    def SetOrientation(self, *args):
        """SetOrientation(EDA_TEXT self, double aOrientation)"""
        return _pcbnew.EDA_TEXT_SetOrientation(self, *args)

    def GetOrientation(self):
        """GetOrientation(EDA_TEXT self) -> double"""
        return _pcbnew.EDA_TEXT_GetOrientation(self)

    def SetItalic(self, *args):
        """SetItalic(EDA_TEXT self, bool isItalic)"""
        return _pcbnew.EDA_TEXT_SetItalic(self, *args)

    def IsItalic(self):
        """IsItalic(EDA_TEXT self) -> bool"""
        return _pcbnew.EDA_TEXT_IsItalic(self)

    def SetBold(self, *args):
        """SetBold(EDA_TEXT self, bool aBold)"""
        return _pcbnew.EDA_TEXT_SetBold(self, *args)

    def IsBold(self):
        """IsBold(EDA_TEXT self) -> bool"""
        return _pcbnew.EDA_TEXT_IsBold(self)

    def SetVisible(self, *args):
        """SetVisible(EDA_TEXT self, bool aVisible)"""
        return _pcbnew.EDA_TEXT_SetVisible(self, *args)

    def IsVisible(self):
        """IsVisible(EDA_TEXT self) -> bool"""
        return _pcbnew.EDA_TEXT_IsVisible(self)

    def SetMirrored(self, *args):
        """SetMirrored(EDA_TEXT self, bool isMirrored)"""
        return _pcbnew.EDA_TEXT_SetMirrored(self, *args)

    def IsMirrored(self):
        """IsMirrored(EDA_TEXT self) -> bool"""
        return _pcbnew.EDA_TEXT_IsMirrored(self)

    def IsDefaultFormatting(self):
        """IsDefaultFormatting(EDA_TEXT self) -> bool"""
        return _pcbnew.EDA_TEXT_IsDefaultFormatting(self)

    def SetSize(self, *args):
        """SetSize(EDA_TEXT self, wxSize aNewSize)"""
        return _pcbnew.EDA_TEXT_SetSize(self, *args)

    def GetSize(self):
        """GetSize(EDA_TEXT self) -> wxSize"""
        return _pcbnew.EDA_TEXT_GetSize(self)

    def SetPos(self, *args):
        """SetPos(EDA_TEXT self, wxPoint aPoint)"""
        return _pcbnew.EDA_TEXT_SetPos(self, *args)

    def GetPos(self):
        """GetPos(EDA_TEXT self) -> wxPoint"""
        return _pcbnew.EDA_TEXT_GetPos(self)

    def GetLength(self):
        """GetLength(EDA_TEXT self) -> int"""
        return _pcbnew.EDA_TEXT_GetLength(self)

    def Draw(self, *args):
        """
        Draw(EDA_TEXT self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, wxPoint aOffset, EDA_COLOR_T aColor, int aDrawMode, 
            EDA_DRAW_MODE_T aDisplay_mode=LINE, EDA_COLOR_T aAnchor_color=UNSPECIFIED)
        Draw(EDA_TEXT self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, wxPoint aOffset, EDA_COLOR_T aColor, int aDrawMode, 
            EDA_DRAW_MODE_T aDisplay_mode=LINE)
        Draw(EDA_TEXT self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, wxPoint aOffset, EDA_COLOR_T aColor, int aDrawMode)
        """
        return _pcbnew.EDA_TEXT_Draw(self, *args)

    def TextHitTest(self, *args):
        """
        TextHitTest(EDA_TEXT self, wxPoint aPoint, int aAccuracy=0) -> bool
        TextHitTest(EDA_TEXT self, wxPoint aPoint) -> bool
        TextHitTest(EDA_TEXT self, EDA_RECT aRect, bool aContains=False, int aAccuracy=0) -> bool
        TextHitTest(EDA_TEXT self, EDA_RECT aRect, bool aContains=False) -> bool
        TextHitTest(EDA_TEXT self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.EDA_TEXT_TextHitTest(self, *args)

    def LenSize(self, *args):
        """LenSize(EDA_TEXT self, wxString const & aLine) -> int"""
        return _pcbnew.EDA_TEXT_LenSize(self, *args)

    def GetTextBox(self, *args):
        """
        GetTextBox(EDA_TEXT self, int aLine=-1, int aThickness=-1, bool aInvertY=False) -> EDA_RECT
        GetTextBox(EDA_TEXT self, int aLine=-1, int aThickness=-1) -> EDA_RECT
        GetTextBox(EDA_TEXT self, int aLine=-1) -> EDA_RECT
        GetTextBox(EDA_TEXT self) -> EDA_RECT
        """
        return _pcbnew.EDA_TEXT_GetTextBox(self, *args)

    def GetInterline(self):
        """GetInterline(EDA_TEXT self) -> int"""
        return _pcbnew.EDA_TEXT_GetInterline(self)

    def GetTextStyleName(self):
        """GetTextStyleName(EDA_TEXT self) -> wxString"""
        return _pcbnew.EDA_TEXT_GetTextStyleName(self)

    def SetText(self, *args):
        """SetText(EDA_TEXT self, wxString const & aText)"""
        return _pcbnew.EDA_TEXT_SetText(self, *args)

    def GetText(self):
        """GetText(EDA_TEXT self) -> wxString const"""
        return _pcbnew.EDA_TEXT_GetText(self)

    def GetHorizJustify(self):
        """GetHorizJustify(EDA_TEXT self) -> EDA_TEXT_HJUSTIFY_T"""
        return _pcbnew.EDA_TEXT_GetHorizJustify(self)

    def GetVertJustify(self):
        """GetVertJustify(EDA_TEXT self) -> EDA_TEXT_VJUSTIFY_T"""
        return _pcbnew.EDA_TEXT_GetVertJustify(self)

    def SetHorizJustify(self, *args):
        """SetHorizJustify(EDA_TEXT self, EDA_TEXT_HJUSTIFY_T aType)"""
        return _pcbnew.EDA_TEXT_SetHorizJustify(self, *args)

    def SetVertJustify(self, *args):
        """SetVertJustify(EDA_TEXT self, EDA_TEXT_VJUSTIFY_T aType)"""
        return _pcbnew.EDA_TEXT_SetVertJustify(self, *args)

    def Format(self, *args):
        """Format(EDA_TEXT self, OUTPUTFORMATTER * aFormatter, int aNestLevel, int aControlBits)"""
        return _pcbnew.EDA_TEXT_Format(self, *args)

EDA_TEXT_swigregister = _pcbnew.EDA_TEXT_swigregister
EDA_TEXT_swigregister(EDA_TEXT)

DECIMILS_PER_IU = _pcbnew.DECIMILS_PER_IU
MILS_PER_IU = _pcbnew.MILS_PER_IU
MM_PER_IU = _pcbnew.MM_PER_IU

def Iu2Mils(*args):
  """Iu2Mils(int iu) -> int"""
  return _pcbnew.Iu2Mils(*args)

def Iu2DMils(*args):
  """Iu2DMils(int iu) -> int"""
  return _pcbnew.Iu2DMils(*args)
IU_PER_DECIMILS = _pcbnew.IU_PER_DECIMILS
IU_PER_MILS = _pcbnew.IU_PER_MILS
IU_PER_MM = _pcbnew.IU_PER_MM

def Mils2iu(*args):
  """Mils2iu(int mils) -> int"""
  return _pcbnew.Mils2iu(*args)

def DMils2iu(*args):
  """DMils2iu(int dmils) -> int"""
  return _pcbnew.DMils2iu(*args)
class intVector(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(intVector self) -> SwigPyIterator"""
        return _pcbnew.intVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(intVector self) -> bool"""
        return _pcbnew.intVector___nonzero__(self)

    def __bool__(self):
        """__bool__(intVector self) -> bool"""
        return _pcbnew.intVector___bool__(self)

    def __len__(self):
        """__len__(intVector self) -> std::vector< int >::size_type"""
        return _pcbnew.intVector___len__(self)

    def pop(self):
        """pop(intVector self) -> std::vector< int >::value_type"""
        return _pcbnew.intVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> intVector"""
        return _pcbnew.intVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, intVector v=std::vector< int,std::allocator< int > >())
        __setslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _pcbnew.intVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _pcbnew.intVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(intVector self, std::vector< int >::difference_type i)
        __delitem__(intVector self, PySliceObject * slice)
        """
        return _pcbnew.intVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(intVector self, PySliceObject * slice) -> intVector
        __getitem__(intVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _pcbnew.intVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(intVector self, PySliceObject * slice, intVector v)
        __setitem__(intVector self, PySliceObject * slice)
        __setitem__(intVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _pcbnew.intVector___setitem__(self, *args)

    def append(self, *args):
        """append(intVector self, std::vector< int >::value_type const & x)"""
        return _pcbnew.intVector_append(self, *args)

    def empty(self):
        """empty(intVector self) -> bool"""
        return _pcbnew.intVector_empty(self)

    def size(self):
        """size(intVector self) -> std::vector< int >::size_type"""
        return _pcbnew.intVector_size(self)

    def clear(self):
        """clear(intVector self)"""
        return _pcbnew.intVector_clear(self)

    def swap(self, *args):
        """swap(intVector self, intVector v)"""
        return _pcbnew.intVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(intVector self) -> std::vector< int >::allocator_type"""
        return _pcbnew.intVector_get_allocator(self)

    def begin(self):
        """begin(intVector self) -> std::vector< int >::iterator"""
        return _pcbnew.intVector_begin(self)

    def end(self):
        """end(intVector self) -> std::vector< int >::iterator"""
        return _pcbnew.intVector_end(self)

    def rbegin(self):
        """rbegin(intVector self) -> std::vector< int >::reverse_iterator"""
        return _pcbnew.intVector_rbegin(self)

    def rend(self):
        """rend(intVector self) -> std::vector< int >::reverse_iterator"""
        return _pcbnew.intVector_rend(self)

    def pop_back(self):
        """pop_back(intVector self)"""
        return _pcbnew.intVector_pop_back(self)

    def erase(self, *args):
        """
        erase(intVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(intVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _pcbnew.intVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int)> self) -> intVector
        __init__(std::vector<(int)> self, intVector arg2) -> intVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> intVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> intVector
        """
        this = _pcbnew.new_intVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(intVector self, std::vector< int >::value_type const & x)"""
        return _pcbnew.intVector_push_back(self, *args)

    def front(self):
        """front(intVector self) -> std::vector< int >::value_type const &"""
        return _pcbnew.intVector_front(self)

    def back(self):
        """back(intVector self) -> std::vector< int >::value_type const &"""
        return _pcbnew.intVector_back(self)

    def assign(self, *args):
        """assign(intVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _pcbnew.intVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(intVector self, std::vector< int >::size_type new_size)
        resize(intVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _pcbnew.intVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(intVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(intVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _pcbnew.intVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(intVector self, std::vector< int >::size_type n)"""
        return _pcbnew.intVector_reserve(self, *args)

    def capacity(self):
        """capacity(intVector self) -> std::vector< int >::size_type"""
        return _pcbnew.intVector_capacity(self)

    __swig_destroy__ = _pcbnew.delete_intVector
    __del__ = lambda self : None;
intVector_swigregister = _pcbnew.intVector_swigregister
intVector_swigregister(intVector)

def LoadPlugins():  
    import os
    import sys

    
    kicad_path = os.environ.get('KICAD_PATH')
    plugin_directories=[]

    if kicad_path and os.path.isdir(kicad_path):
        plugin_directories.append(os.path.join(kicad_path, 'scripting', 'plugins'))
        
    if sys.platform.startswith('linux'):
        plugin_directories.append(os.environ['HOME']+'/.kicad_plugins/')
        plugin_directories.append(os.environ['HOME']+'/.kicad/scripting/plugins/')

    

    for plugins_dir in plugin_directories:
        sys.path.append(plugins_dir)
	if not os.path.isdir(plugins_dir):
            continue
        for module in os.listdir(plugins_dir):
            if os.path.isdir(plugins_dir+module):
                __import__(module, locals(), globals())

            if module == '__init__.py' or module[-3:] != '.py':
                continue
            __import__(module[:-3], locals(), globals())



class KiCadPlugin:
    def __init__(self):
        pass
        
    def register(self):
        if isinstance(self,FilePlugin):
            pass # register to file plugins in C++
        if isinstance(self,FootprintWizardPlugin):
            PYTHON_FOOTPRINT_WIZARDS.register_wizard(self)
            return
        
        if isinstance(self,ActionPlugin):
            pass # register to action plugins in C++
        
        return
            

    


class FilePlugin(KiCadPlugin):
    def __init__(self):
        KiCadPlugin.__init__(self)
        
        

class FootprintWizardPlugin(KiCadPlugin):
    def __init__(self):
        KiCadPlugin.__init__(self)
        self.defaults()
        
    def defaults(self):
        self.module = None
        self.parameters = {}
        self.parameter_errors={}
        self.name = "Undefined Footprint Wizard plugin"
        self.description = ""
        self.image = ""
        
    def GetName(self):
        return self.name
    
    def GetImage(self):
        return self.image
    
    def GetDescription(self):
        return self.description
        
    
    def GetNumParameterPages(self):
        return len(self.parameters)
    
    def GetParameterPageName(self,page_n):
        return self.parameters.keys()[page_n]
    
    def GetParameterNames(self,page_n):
        name = self.GetParameterPageName(page_n)
        return self.parameters[name].keys()
        
    def GetParameterValues(self,page_n):
        name = self.GetParameterPageName(page_n)
        values = self.parameters[name].values()
        return map( lambda x: str(x) , values) # list elements as strings
    
    def GetParameterErrors(self,page_n):
        self.CheckParameters()
        name = self.GetParameterPageName(page_n)
        values = self.parameter_errors[name].values()
        return map( lambda x: str(x) , values) # list elements as strings
        
    def CheckParameters(self):
        return ""
    
    def TryConvertToFloat(self,value):
        v = value
        try:
            v = float(value)
        except:
            pass
        
        return v
    
    def SetParameterValues(self,page_n,values):
        name = self.GetParameterPageName(page_n)
        keys = self.parameters[name].keys()
        n=0
        for key in keys:
            val = self.TryConvertToFloat(values[n])
            self.parameters[name][key] = val
            print "[%s][%s]<="%(name,key),val
            n+=1
        
    
    def ClearErrors(self):
        errs={}
        
        for page in self.parameters.keys():
            page_dict = self.parameters[page]
            page_params = {}
            for param in page_dict.keys():
                page_params[param]=""
                
            errs[page]=page_params
            
        self.parameter_errors = errs    
        
    
    def GetModule(self):
        self.BuildFootprint()
        return self.module
    
    def BuildFootprint(self):
        return
            
    def Show(self):
        print "Footprint Wizard Name:        ",self.GetName()
        print "Footprint Wizard Description: ",self.GetDescription()
        n_pages = self.GetNumParameterPages()
        print " setup pages: ",n_pages
        for page in range(0,n_pages):
            name = self.GetParameterPageName(page)
            values = self.GetParameterValues(page)
            names =  self.GetParameterNames(page)
            print "page %d) %s"%(page,name)
            for n in range (0,len(values)):
                print "\t%s\t:\t%s"%(names[n],values[n])

class ActionPlugin(KiCadPlugin):
    def __init__(self):
        KiCadPlugin.__init__(self)




S_SEGMENT = _pcbnew.S_SEGMENT
S_RECT = _pcbnew.S_RECT
S_ARC = _pcbnew.S_ARC
S_CIRCLE = _pcbnew.S_CIRCLE
S_POLYGON = _pcbnew.S_POLYGON
S_CURVE = _pcbnew.S_CURVE
S_LAST = _pcbnew.S_LAST
class BOARD_ITEM(EDA_ITEM):
    """Proxy of C++ BOARD_ITEM class"""
    __swig_setmethods__ = {}
    for _s in [EDA_ITEM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BOARD_ITEM, name, value)
    __swig_getmethods__ = {}
    for _s in [EDA_ITEM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BOARD_ITEM, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self):
        """Next(BOARD_ITEM self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_Next(self)

    def Back(self):
        """Back(BOARD_ITEM self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_Back(self)

    def GetParent(self):
        """GetParent(BOARD_ITEM self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_GetParent(self)

    def GetLayer(self):
        """GetLayer(BOARD_ITEM self) -> int"""
        return _pcbnew.BOARD_ITEM_GetLayer(self)

    def SetLayer(self, *args):
        """SetLayer(BOARD_ITEM self, int aLayer)"""
        return _pcbnew.BOARD_ITEM_SetLayer(self, *args)

    def Draw(self, *args):
        """
        Draw(BOARD_ITEM self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)
        Draw(BOARD_ITEM self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.BOARD_ITEM_Draw(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(BOARD_ITEM self, int aLayer) -> bool"""
        return _pcbnew.BOARD_ITEM_IsOnLayer(self, *args)

    def IsTrack(self):
        """IsTrack(BOARD_ITEM self) -> bool"""
        return _pcbnew.BOARD_ITEM_IsTrack(self)

    def IsLocked(self):
        """IsLocked(BOARD_ITEM self) -> bool"""
        return _pcbnew.BOARD_ITEM_IsLocked(self)

    def UnLink(self):
        """UnLink(BOARD_ITEM self)"""
        return _pcbnew.BOARD_ITEM_UnLink(self)

    def DeleteStructure(self):
        """DeleteStructure(BOARD_ITEM self)"""
        return _pcbnew.BOARD_ITEM_DeleteStructure(self)

    def ShowShape(*args):
        """ShowShape(STROKE_T aShape) -> wxString"""
        return _pcbnew.BOARD_ITEM_ShowShape(*args)

    if _newclass:ShowShape = staticmethod(ShowShape)
    __swig_getmethods__["ShowShape"] = lambda x: ShowShape
    def Move(self, *args):
        """Move(BOARD_ITEM self, wxPoint aMoveVector)"""
        return _pcbnew.BOARD_ITEM_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(BOARD_ITEM self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.BOARD_ITEM_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(BOARD_ITEM self, wxPoint aCentre)"""
        return _pcbnew.BOARD_ITEM_Flip(self, *args)

    def GetBoard(self):
        """GetBoard(BOARD_ITEM self) -> BOARD"""
        return _pcbnew.BOARD_ITEM_GetBoard(self)

    def GetLayerName(self):
        """GetLayerName(BOARD_ITEM self) -> wxString"""
        return _pcbnew.BOARD_ITEM_GetLayerName(self)

    def FormatAngle(*args):
        """FormatAngle(double aAngle) -> std::string"""
        return _pcbnew.BOARD_ITEM_FormatAngle(*args)

    if _newclass:FormatAngle = staticmethod(FormatAngle)
    __swig_getmethods__["FormatAngle"] = lambda x: FormatAngle
    def FormatInternalUnits(*args):
        """
        FormatInternalUnits(int aValue) -> std::string
        FormatInternalUnits(wxPoint aPoint) -> std::string
        FormatInternalUnits(wxSize aSize) -> std::string
        """
        return _pcbnew.BOARD_ITEM_FormatInternalUnits(*args)

    if _newclass:FormatInternalUnits = staticmethod(FormatInternalUnits)
    __swig_getmethods__["FormatInternalUnits"] = lambda x: FormatInternalUnits
    def Cast_to_TEXTE_PCB(self):
        """Cast_to_TEXTE_PCB(BOARD_ITEM self) -> TEXTE_PCB"""
        return _pcbnew.BOARD_ITEM_Cast_to_TEXTE_PCB(self)

    def Cast_to_DIMENSION(self):
        """Cast_to_DIMENSION(BOARD_ITEM self) -> DIMENSION"""
        return _pcbnew.BOARD_ITEM_Cast_to_DIMENSION(self)

    def Cast_to_MODULE(self):
        """Cast_to_MODULE(BOARD_ITEM self) -> MODULE"""
        return _pcbnew.BOARD_ITEM_Cast_to_MODULE(self)

    def Cast_to_TEXTE_MODULE(self):
        """Cast_to_TEXTE_MODULE(BOARD_ITEM self) -> TEXTE_MODULE"""
        return _pcbnew.BOARD_ITEM_Cast_to_TEXTE_MODULE(self)

    def Cast_to_DRAWSEGMENT(self):
        """Cast_to_DRAWSEGMENT(BOARD_ITEM self) -> DRAWSEGMENT"""
        return _pcbnew.BOARD_ITEM_Cast_to_DRAWSEGMENT(self)

    def Cast_to_MARKER_PCB(self):
        """Cast_to_MARKER_PCB(BOARD_ITEM self) -> MARKER_PCB"""
        return _pcbnew.BOARD_ITEM_Cast_to_MARKER_PCB(self)

    def Cast_to_BOARD(self):
        """Cast_to_BOARD(BOARD_ITEM self) -> BOARD"""
        return _pcbnew.BOARD_ITEM_Cast_to_BOARD(self)

    def Cast_to_EDGE_MODULE(self):
        """Cast_to_EDGE_MODULE(BOARD_ITEM self) -> EDGE_MODULE"""
        return _pcbnew.BOARD_ITEM_Cast_to_EDGE_MODULE(self)

    def Cast_to_D_PAD(self):
        """Cast_to_D_PAD(BOARD_ITEM self) -> D_PAD"""
        return _pcbnew.BOARD_ITEM_Cast_to_D_PAD(self)

    def Cast_to_TRACK(self):
        """Cast_to_TRACK(BOARD_ITEM self) -> TRACK"""
        return _pcbnew.BOARD_ITEM_Cast_to_TRACK(self)

    def Cast_to_SEGZONE(self):
        """Cast_to_SEGZONE(BOARD_ITEM self) -> SEGZONE"""
        return _pcbnew.BOARD_ITEM_Cast_to_SEGZONE(self)

    def Cast_to_SEGVIA(self):
        """Cast_to_SEGVIA(BOARD_ITEM self) -> SEGVIA"""
        return _pcbnew.BOARD_ITEM_Cast_to_SEGVIA(self)

    def Cast(self):
      
      ct = self.GetClass()
      
      if ct=="PTEXT":
        return self.Cast_to_TEXTE_PCB()
      elif ct=="BOARD":
        return self.Cast_to_BOARD()
      elif ct=="DIMENSION":
        return self.Cast_to_DIMENSION()
      elif ct=="DRAWSEGMENT":
        return self.Cast_to_DRAWSEGMENT()
      elif ct=="MGRAPHIC":
        return self.Cast_to_EDGE_MODULE()
      elif ct=="MODULE":
        return self.Cast_to_MODULE()
      elif ct=="PAD":
        return self.Cast_to_D_PAD()
      elif ct=="MTEXT":
        return self.Cast_to_TEXTE_MODULE()
      elif ct=="ZONE":
        return self.Cast_to_SEGZONE()
      elif ct=="VIA":
        return self.Cast_to_SEGVIA()
      elif ct=="TRACK":
        return self.Cast_to_TRACK()
      else:
        return None

    def SetPos(self,p):
    	self.SetPosition(p)
    	self.SetPos0(p)
                  
    def SetStartEnd(self,start,end):
    	self.SetStart(start)
    	self.SetStart0(start)
    	self.SetEnd(end)
    	self.SetEnd0(end)
          
    __swig_destroy__ = _pcbnew.delete_BOARD_ITEM
    __del__ = lambda self : None;
BOARD_ITEM_swigregister = _pcbnew.BOARD_ITEM_swigregister
BOARD_ITEM_swigregister(BOARD_ITEM)

def BOARD_ITEM_ShowShape(*args):
  """BOARD_ITEM_ShowShape(STROKE_T aShape) -> wxString"""
  return _pcbnew.BOARD_ITEM_ShowShape(*args)

def BOARD_ITEM_FormatAngle(*args):
  """BOARD_ITEM_FormatAngle(double aAngle) -> std::string"""
  return _pcbnew.BOARD_ITEM_FormatAngle(*args)

def BOARD_ITEM_FormatInternalUnits(*args):
  """
    FormatInternalUnits(int aValue) -> std::string
    FormatInternalUnits(wxPoint aPoint) -> std::string
    BOARD_ITEM_FormatInternalUnits(wxSize aSize) -> std::string
    """
  return _pcbnew.BOARD_ITEM_FormatInternalUnits(*args)

class BOARD_CONNECTED_ITEM(BOARD_ITEM):
    """Proxy of C++ BOARD_CONNECTED_ITEM class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BOARD_CONNECTED_ITEM, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BOARD_CONNECTED_ITEM, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["m_TracksConnected"] = _pcbnew.BOARD_CONNECTED_ITEM_m_TracksConnected_set
    __swig_getmethods__["m_TracksConnected"] = _pcbnew.BOARD_CONNECTED_ITEM_m_TracksConnected_get
    if _newclass:m_TracksConnected = _swig_property(_pcbnew.BOARD_CONNECTED_ITEM_m_TracksConnected_get, _pcbnew.BOARD_CONNECTED_ITEM_m_TracksConnected_set)
    __swig_setmethods__["m_PadsConnected"] = _pcbnew.BOARD_CONNECTED_ITEM_m_PadsConnected_set
    __swig_getmethods__["m_PadsConnected"] = _pcbnew.BOARD_CONNECTED_ITEM_m_PadsConnected_get
    if _newclass:m_PadsConnected = _swig_property(_pcbnew.BOARD_CONNECTED_ITEM_m_PadsConnected_get, _pcbnew.BOARD_CONNECTED_ITEM_m_PadsConnected_set)
    def GetNet(self):
        """GetNet(BOARD_CONNECTED_ITEM self) -> int"""
        return _pcbnew.BOARD_CONNECTED_ITEM_GetNet(self)

    def SetNet(self, *args):
        """SetNet(BOARD_CONNECTED_ITEM self, int aNetCode)"""
        return _pcbnew.BOARD_CONNECTED_ITEM_SetNet(self, *args)

    def GetSubNet(self):
        """GetSubNet(BOARD_CONNECTED_ITEM self) -> int"""
        return _pcbnew.BOARD_CONNECTED_ITEM_GetSubNet(self)

    def SetSubNet(self, *args):
        """SetSubNet(BOARD_CONNECTED_ITEM self, int aSubNetCode)"""
        return _pcbnew.BOARD_CONNECTED_ITEM_SetSubNet(self, *args)

    def GetZoneSubNet(self):
        """GetZoneSubNet(BOARD_CONNECTED_ITEM self) -> int"""
        return _pcbnew.BOARD_CONNECTED_ITEM_GetZoneSubNet(self)

    def SetZoneSubNet(self, *args):
        """SetZoneSubNet(BOARD_CONNECTED_ITEM self, int aSubNetCode)"""
        return _pcbnew.BOARD_CONNECTED_ITEM_SetZoneSubNet(self, *args)

    def GetClearance(self, aItem=None):
        """
        GetClearance(BOARD_CONNECTED_ITEM self, BOARD_CONNECTED_ITEM aItem=None) -> int
        GetClearance(BOARD_CONNECTED_ITEM self) -> int
        """
        return _pcbnew.BOARD_CONNECTED_ITEM_GetClearance(self, aItem)

    def GetNetClass(self):
        """GetNetClass(BOARD_CONNECTED_ITEM self) -> NETCLASS"""
        return _pcbnew.BOARD_CONNECTED_ITEM_GetNetClass(self)

    def GetNetClassName(self):
        """GetNetClassName(BOARD_CONNECTED_ITEM self) -> wxString"""
        return _pcbnew.BOARD_CONNECTED_ITEM_GetNetClassName(self)

    __swig_destroy__ = _pcbnew.delete_BOARD_CONNECTED_ITEM
    __del__ = lambda self : None;
BOARD_CONNECTED_ITEM_swigregister = _pcbnew.BOARD_CONNECTED_ITEM_swigregister
BOARD_CONNECTED_ITEM_swigregister(BOARD_CONNECTED_ITEM)

class BOARD_DESIGN_SETTINGS(_object):
    """Proxy of C++ BOARD_DESIGN_SETTINGS class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BOARD_DESIGN_SETTINGS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BOARD_DESIGN_SETTINGS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_MicroViasAllowed"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_set
    __swig_getmethods__["m_MicroViasAllowed"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_get
    if _newclass:m_MicroViasAllowed = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_set)
    __swig_setmethods__["m_CurrentViaType"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_CurrentViaType_set
    __swig_getmethods__["m_CurrentViaType"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_CurrentViaType_get
    if _newclass:m_CurrentViaType = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_CurrentViaType_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_CurrentViaType_set)
    __swig_setmethods__["m_UseConnectedTrackWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_set
    __swig_getmethods__["m_UseConnectedTrackWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_get
    if _newclass:m_UseConnectedTrackWidth = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_set)
    __swig_setmethods__["m_DrawSegmentWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_set
    __swig_getmethods__["m_DrawSegmentWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_get
    if _newclass:m_DrawSegmentWidth = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_set)
    __swig_setmethods__["m_EdgeSegmentWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_set
    __swig_getmethods__["m_EdgeSegmentWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_get
    if _newclass:m_EdgeSegmentWidth = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_set)
    __swig_setmethods__["m_PcbTextWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_PcbTextWidth_set
    __swig_getmethods__["m_PcbTextWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_PcbTextWidth_get
    if _newclass:m_PcbTextWidth = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_PcbTextWidth_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_PcbTextWidth_set)
    __swig_setmethods__["m_PcbTextSize"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_PcbTextSize_set
    __swig_getmethods__["m_PcbTextSize"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_PcbTextSize_get
    if _newclass:m_PcbTextSize = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_PcbTextSize_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_PcbTextSize_set)
    __swig_setmethods__["m_TrackMinWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_TrackMinWidth_set
    __swig_getmethods__["m_TrackMinWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_TrackMinWidth_get
    if _newclass:m_TrackMinWidth = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_TrackMinWidth_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_TrackMinWidth_set)
    __swig_setmethods__["m_ViasMinSize"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ViasMinSize_set
    __swig_getmethods__["m_ViasMinSize"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ViasMinSize_get
    if _newclass:m_ViasMinSize = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_ViasMinSize_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_ViasMinSize_set)
    __swig_setmethods__["m_ViasMinDrill"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ViasMinDrill_set
    __swig_getmethods__["m_ViasMinDrill"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ViasMinDrill_get
    if _newclass:m_ViasMinDrill = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_ViasMinDrill_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_ViasMinDrill_set)
    __swig_setmethods__["m_MicroViasMinSize"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_set
    __swig_getmethods__["m_MicroViasMinSize"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_get
    if _newclass:m_MicroViasMinSize = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_set)
    __swig_setmethods__["m_MicroViasMinDrill"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_set
    __swig_getmethods__["m_MicroViasMinDrill"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_get
    if _newclass:m_MicroViasMinDrill = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_set)
    __swig_setmethods__["m_SolderMaskMargin"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_set
    __swig_getmethods__["m_SolderMaskMargin"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_get
    if _newclass:m_SolderMaskMargin = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_set)
    __swig_setmethods__["m_SolderPasteMargin"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_set
    __swig_getmethods__["m_SolderPasteMargin"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_get
    if _newclass:m_SolderPasteMargin = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_set)
    __swig_setmethods__["m_SolderPasteMarginRatio"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_set
    __swig_getmethods__["m_SolderPasteMarginRatio"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_get
    if _newclass:m_SolderPasteMarginRatio = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_set)
    __swig_setmethods__["m_ModuleTextSize"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleTextSize_set
    __swig_getmethods__["m_ModuleTextSize"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleTextSize_get
    if _newclass:m_ModuleTextSize = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleTextSize_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleTextSize_set)
    __swig_setmethods__["m_ModuleTextWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_set
    __swig_getmethods__["m_ModuleTextWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_get
    if _newclass:m_ModuleTextWidth = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_set)
    __swig_setmethods__["m_ModuleSegmentWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_set
    __swig_getmethods__["m_ModuleSegmentWidth"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_get
    if _newclass:m_ModuleSegmentWidth = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_set)
    __swig_setmethods__["m_Pad_Master"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_Pad_Master_set
    __swig_getmethods__["m_Pad_Master"] = _pcbnew.BOARD_DESIGN_SETTINGS_m_Pad_Master_get
    if _newclass:m_Pad_Master = _swig_property(_pcbnew.BOARD_DESIGN_SETTINGS_m_Pad_Master_get, _pcbnew.BOARD_DESIGN_SETTINGS_m_Pad_Master_set)
    def __init__(self): 
        """__init__(BOARD_DESIGN_SETTINGS self) -> BOARD_DESIGN_SETTINGS"""
        this = _pcbnew.new_BOARD_DESIGN_SETTINGS()
        try: self.this.append(this)
        except: self.this = this
    def GetVisibleLayers(self):
        """GetVisibleLayers(BOARD_DESIGN_SETTINGS self) -> int"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_GetVisibleLayers(self)

    def SetVisibleAlls(self):
        """SetVisibleAlls(BOARD_DESIGN_SETTINGS self)"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_SetVisibleAlls(self)

    def SetVisibleLayers(self, *args):
        """SetVisibleLayers(BOARD_DESIGN_SETTINGS self, int aMask)"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_SetVisibleLayers(self, *args)

    def IsLayerVisible(self, *args):
        """IsLayerVisible(BOARD_DESIGN_SETTINGS self, int aLayerIndex) -> bool"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_IsLayerVisible(self, *args)

    def SetLayerVisibility(self, *args):
        """SetLayerVisibility(BOARD_DESIGN_SETTINGS self, int aLayerIndex, bool aNewState)"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_SetLayerVisibility(self, *args)

    def GetVisibleElements(self):
        """GetVisibleElements(BOARD_DESIGN_SETTINGS self) -> int"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_GetVisibleElements(self)

    def SetVisibleElements(self, *args):
        """SetVisibleElements(BOARD_DESIGN_SETTINGS self, int aMask)"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_SetVisibleElements(self, *args)

    def IsElementVisible(self, *args):
        """IsElementVisible(BOARD_DESIGN_SETTINGS self, int aPCB_VISIBLE) -> bool"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_IsElementVisible(self, *args)

    def SetElementVisibility(self, *args):
        """SetElementVisibility(BOARD_DESIGN_SETTINGS self, int aPCB_VISIBLE, bool aNewState)"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_SetElementVisibility(self, *args)

    def GetEnabledLayers(self):
        """GetEnabledLayers(BOARD_DESIGN_SETTINGS self) -> int"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_GetEnabledLayers(self)

    def SetEnabledLayers(self, *args):
        """SetEnabledLayers(BOARD_DESIGN_SETTINGS self, int aMask)"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_SetEnabledLayers(self, *args)

    def IsLayerEnabled(self, *args):
        """IsLayerEnabled(BOARD_DESIGN_SETTINGS self, int aLayerIndex) -> bool"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_IsLayerEnabled(self, *args)

    def GetCopperLayerCount(self):
        """GetCopperLayerCount(BOARD_DESIGN_SETTINGS self) -> int"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_GetCopperLayerCount(self)

    def SetCopperLayerCount(self, *args):
        """SetCopperLayerCount(BOARD_DESIGN_SETTINGS self, int aNewLayerCount)"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_SetCopperLayerCount(self, *args)

    def AppendConfigs(self, *args):
        """AppendConfigs(BOARD_DESIGN_SETTINGS self, PARAM_CFG_ARRAY * aResult)"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_AppendConfigs(self, *args)

    def GetBoardThickness(self):
        """GetBoardThickness(BOARD_DESIGN_SETTINGS self) -> int"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_GetBoardThickness(self)

    def SetBoardThickness(self, *args):
        """SetBoardThickness(BOARD_DESIGN_SETTINGS self, int aThickness)"""
        return _pcbnew.BOARD_DESIGN_SETTINGS_SetBoardThickness(self, *args)

    __swig_destroy__ = _pcbnew.delete_BOARD_DESIGN_SETTINGS
    __del__ = lambda self : None;
BOARD_DESIGN_SETTINGS_swigregister = _pcbnew.BOARD_DESIGN_SETTINGS_swigregister
BOARD_DESIGN_SETTINGS_swigregister(BOARD_DESIGN_SETTINGS)

HISTORY_MAX_COUNT = _pcbnew.HISTORY_MAX_COUNT
LT_UNDEFINED = _pcbnew.LT_UNDEFINED
LT_SIGNAL = _pcbnew.LT_SIGNAL
LT_POWER = _pcbnew.LT_POWER
LT_MIXED = _pcbnew.LT_MIXED
LT_JUMPER = _pcbnew.LT_JUMPER
class LAYER(_object):
    """Proxy of C++ LAYER class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LAYER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LAYER, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(LAYER self, wxString const & aName=wxEmptyString, LAYER_T aType=LT_SIGNAL, bool aVisible=True) -> LAYER
        __init__(LAYER self, wxString const & aName=wxEmptyString, LAYER_T aType=LT_SIGNAL) -> LAYER
        __init__(LAYER self, wxString const & aName=wxEmptyString) -> LAYER
        __init__(LAYER self) -> LAYER
        """
        this = _pcbnew.new_LAYER(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetVisible(self, *args):
        """SetVisible(LAYER self, bool aEnable)"""
        return _pcbnew.LAYER_SetVisible(self, *args)

    def IsVisible(self):
        """IsVisible(LAYER self) -> bool"""
        return _pcbnew.LAYER_IsVisible(self)

    def SetFixedListIndex(self, *args):
        """SetFixedListIndex(LAYER self, int aIndex)"""
        return _pcbnew.LAYER_SetFixedListIndex(self, *args)

    def GetFixedListIndex(self):
        """GetFixedListIndex(LAYER self) -> int"""
        return _pcbnew.LAYER_GetFixedListIndex(self)

    __swig_setmethods__["m_Name"] = _pcbnew.LAYER_m_Name_set
    __swig_getmethods__["m_Name"] = _pcbnew.LAYER_m_Name_get
    if _newclass:m_Name = _swig_property(_pcbnew.LAYER_m_Name_get, _pcbnew.LAYER_m_Name_set)
    __swig_setmethods__["m_Type"] = _pcbnew.LAYER_m_Type_set
    __swig_getmethods__["m_Type"] = _pcbnew.LAYER_m_Type_get
    if _newclass:m_Type = _swig_property(_pcbnew.LAYER_m_Type_get, _pcbnew.LAYER_m_Type_set)
    def ShowType(*args):
        """ShowType(LAYER_T aType) -> char const *"""
        return _pcbnew.LAYER_ShowType(*args)

    if _newclass:ShowType = staticmethod(ShowType)
    __swig_getmethods__["ShowType"] = lambda x: ShowType
    def ParseType(*args):
        """ParseType(char const * aType) -> LAYER_T"""
        return _pcbnew.LAYER_ParseType(*args)

    if _newclass:ParseType = staticmethod(ParseType)
    __swig_getmethods__["ParseType"] = lambda x: ParseType
    def GetDefaultIndex(*args):
        """GetDefaultIndex(wxString const & aName) -> int"""
        return _pcbnew.LAYER_GetDefaultIndex(*args)

    if _newclass:GetDefaultIndex = staticmethod(GetDefaultIndex)
    __swig_getmethods__["GetDefaultIndex"] = lambda x: GetDefaultIndex
    __swig_destroy__ = _pcbnew.delete_LAYER
    __del__ = lambda self : None;
LAYER_swigregister = _pcbnew.LAYER_swigregister
LAYER_swigregister(LAYER)

def LAYER_ShowType(*args):
  """LAYER_ShowType(LAYER_T aType) -> char const *"""
  return _pcbnew.LAYER_ShowType(*args)

def LAYER_ParseType(*args):
  """LAYER_ParseType(char const * aType) -> LAYER_T"""
  return _pcbnew.LAYER_ParseType(*args)

def LAYER_GetDefaultIndex(*args):
  """LAYER_GetDefaultIndex(wxString const & aName) -> int"""
  return _pcbnew.LAYER_GetDefaultIndex(*args)

class VIA_DIMENSION(_object):
    """Proxy of C++ VIA_DIMENSION class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VIA_DIMENSION, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VIA_DIMENSION, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Diameter"] = _pcbnew.VIA_DIMENSION_m_Diameter_set
    __swig_getmethods__["m_Diameter"] = _pcbnew.VIA_DIMENSION_m_Diameter_get
    if _newclass:m_Diameter = _swig_property(_pcbnew.VIA_DIMENSION_m_Diameter_get, _pcbnew.VIA_DIMENSION_m_Diameter_set)
    __swig_setmethods__["m_Drill"] = _pcbnew.VIA_DIMENSION_m_Drill_set
    __swig_getmethods__["m_Drill"] = _pcbnew.VIA_DIMENSION_m_Drill_get
    if _newclass:m_Drill = _swig_property(_pcbnew.VIA_DIMENSION_m_Drill_get, _pcbnew.VIA_DIMENSION_m_Drill_set)
    def __init__(self, *args): 
        """
        __init__(VIA_DIMENSION self) -> VIA_DIMENSION
        __init__(VIA_DIMENSION self, int aDiameter, int aDrill) -> VIA_DIMENSION
        """
        this = _pcbnew.new_VIA_DIMENSION(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(VIA_DIMENSION self, VIA_DIMENSION other) -> bool"""
        return _pcbnew.VIA_DIMENSION___eq__(self, *args)

    def __lt__(self, *args):
        """__lt__(VIA_DIMENSION self, VIA_DIMENSION other) -> bool"""
        return _pcbnew.VIA_DIMENSION___lt__(self, *args)

    __swig_destroy__ = _pcbnew.delete_VIA_DIMENSION
    __del__ = lambda self : None;
VIA_DIMENSION_swigregister = _pcbnew.VIA_DIMENSION_swigregister
VIA_DIMENSION_swigregister(VIA_DIMENSION)

class HIGH_LIGHT_INFO(_object):
    """Proxy of C++ HIGH_LIGHT_INFO class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HIGH_LIGHT_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HIGH_LIGHT_INFO, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pcbnew.delete_HIGH_LIGHT_INFO
    __del__ = lambda self : None;
HIGH_LIGHT_INFO_swigregister = _pcbnew.HIGH_LIGHT_INFO_swigregister
HIGH_LIGHT_INFO_swigregister(HIGH_LIGHT_INFO)

class BOARD(BOARD_ITEM):
    """Proxy of C++ BOARD class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BOARD, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BOARD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Status_Pcb"] = _pcbnew.BOARD_m_Status_Pcb_set
    __swig_getmethods__["m_Status_Pcb"] = _pcbnew.BOARD_m_Status_Pcb_get
    if _newclass:m_Status_Pcb = _swig_property(_pcbnew.BOARD_m_Status_Pcb_get, _pcbnew.BOARD_m_Status_Pcb_set)
    __swig_setmethods__["m_NbNodes"] = _pcbnew.BOARD_m_NbNodes_set
    __swig_getmethods__["m_NbNodes"] = _pcbnew.BOARD_m_NbNodes_get
    if _newclass:m_NbNodes = _swig_property(_pcbnew.BOARD_m_NbNodes_get, _pcbnew.BOARD_m_NbNodes_set)
    __swig_setmethods__["m_NbNoconnect"] = _pcbnew.BOARD_m_NbNoconnect_set
    __swig_getmethods__["m_NbNoconnect"] = _pcbnew.BOARD_m_NbNoconnect_get
    if _newclass:m_NbNoconnect = _swig_property(_pcbnew.BOARD_m_NbNoconnect_get, _pcbnew.BOARD_m_NbNoconnect_set)
    __swig_setmethods__["m_Drawings"] = _pcbnew.BOARD_m_Drawings_set
    __swig_getmethods__["m_Drawings"] = _pcbnew.BOARD_m_Drawings_get
    if _newclass:m_Drawings = _swig_property(_pcbnew.BOARD_m_Drawings_get, _pcbnew.BOARD_m_Drawings_set)
    __swig_setmethods__["m_Modules"] = _pcbnew.BOARD_m_Modules_set
    __swig_getmethods__["m_Modules"] = _pcbnew.BOARD_m_Modules_get
    if _newclass:m_Modules = _swig_property(_pcbnew.BOARD_m_Modules_get, _pcbnew.BOARD_m_Modules_set)
    __swig_setmethods__["m_Track"] = _pcbnew.BOARD_m_Track_set
    __swig_getmethods__["m_Track"] = _pcbnew.BOARD_m_Track_get
    if _newclass:m_Track = _swig_property(_pcbnew.BOARD_m_Track_get, _pcbnew.BOARD_m_Track_set)
    __swig_setmethods__["m_Zone"] = _pcbnew.BOARD_m_Zone_set
    __swig_getmethods__["m_Zone"] = _pcbnew.BOARD_m_Zone_get
    if _newclass:m_Zone = _swig_property(_pcbnew.BOARD_m_Zone_get, _pcbnew.BOARD_m_Zone_set)
    __swig_setmethods__["m_FullRatsnest"] = _pcbnew.BOARD_m_FullRatsnest_set
    __swig_getmethods__["m_FullRatsnest"] = _pcbnew.BOARD_m_FullRatsnest_get
    if _newclass:m_FullRatsnest = _swig_property(_pcbnew.BOARD_m_FullRatsnest_get, _pcbnew.BOARD_m_FullRatsnest_set)
    __swig_setmethods__["m_LocalRatsnest"] = _pcbnew.BOARD_m_LocalRatsnest_set
    __swig_getmethods__["m_LocalRatsnest"] = _pcbnew.BOARD_m_LocalRatsnest_get
    if _newclass:m_LocalRatsnest = _swig_property(_pcbnew.BOARD_m_LocalRatsnest_get, _pcbnew.BOARD_m_LocalRatsnest_set)
    __swig_setmethods__["m_CurrentZoneContour"] = _pcbnew.BOARD_m_CurrentZoneContour_set
    __swig_getmethods__["m_CurrentZoneContour"] = _pcbnew.BOARD_m_CurrentZoneContour_get
    if _newclass:m_CurrentZoneContour = _swig_property(_pcbnew.BOARD_m_CurrentZoneContour_get, _pcbnew.BOARD_m_CurrentZoneContour_set)
    __swig_setmethods__["m_NetClasses"] = _pcbnew.BOARD_m_NetClasses_set
    __swig_getmethods__["m_NetClasses"] = _pcbnew.BOARD_m_NetClasses_get
    if _newclass:m_NetClasses = _swig_property(_pcbnew.BOARD_m_NetClasses_get, _pcbnew.BOARD_m_NetClasses_set)
    __swig_setmethods__["m_CurrentNetClassName"] = _pcbnew.BOARD_m_CurrentNetClassName_set
    __swig_getmethods__["m_CurrentNetClassName"] = _pcbnew.BOARD_m_CurrentNetClassName_get
    if _newclass:m_CurrentNetClassName = _swig_property(_pcbnew.BOARD_m_CurrentNetClassName_get, _pcbnew.BOARD_m_CurrentNetClassName_set)
    __swig_setmethods__["m_ViasDimensionsList"] = _pcbnew.BOARD_m_ViasDimensionsList_set
    __swig_getmethods__["m_ViasDimensionsList"] = _pcbnew.BOARD_m_ViasDimensionsList_get
    if _newclass:m_ViasDimensionsList = _swig_property(_pcbnew.BOARD_m_ViasDimensionsList_get, _pcbnew.BOARD_m_ViasDimensionsList_set)
    __swig_setmethods__["m_TrackWidthList"] = _pcbnew.BOARD_m_TrackWidthList_set
    __swig_getmethods__["m_TrackWidthList"] = _pcbnew.BOARD_m_TrackWidthList_get
    if _newclass:m_TrackWidthList = _swig_property(_pcbnew.BOARD_m_TrackWidthList_get, _pcbnew.BOARD_m_TrackWidthList_set)
    __swig_setmethods__["m_ViaSizeSelector"] = _pcbnew.BOARD_m_ViaSizeSelector_set
    __swig_getmethods__["m_ViaSizeSelector"] = _pcbnew.BOARD_m_ViaSizeSelector_get
    if _newclass:m_ViaSizeSelector = _swig_property(_pcbnew.BOARD_m_ViaSizeSelector_get, _pcbnew.BOARD_m_ViaSizeSelector_set)
    __swig_setmethods__["m_TrackWidthSelector"] = _pcbnew.BOARD_m_TrackWidthSelector_set
    __swig_getmethods__["m_TrackWidthSelector"] = _pcbnew.BOARD_m_TrackWidthSelector_get
    if _newclass:m_TrackWidthSelector = _swig_property(_pcbnew.BOARD_m_TrackWidthSelector_get, _pcbnew.BOARD_m_TrackWidthSelector_set)
    def __init__(self): 
        """__init__(BOARD self) -> BOARD"""
        this = _pcbnew.new_BOARD()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_BOARD
    __del__ = lambda self : None;
    def Move(self, *args):
        """Move(BOARD self, wxPoint aMoveVector)"""
        return _pcbnew.BOARD_Move(self, *args)

    def SetFileFormatVersionAtLoad(self, *args):
        """SetFileFormatVersionAtLoad(BOARD self, int aVersion)"""
        return _pcbnew.BOARD_SetFileFormatVersionAtLoad(self, *args)

    def GetFileFormatVersionAtLoad(self):
        """GetFileFormatVersionAtLoad(BOARD self) -> int"""
        return _pcbnew.BOARD_GetFileFormatVersionAtLoad(self)

    def GetDefaultLayerName(*args):
        """GetDefaultLayerName(int aLayerNumber, bool aTranslate) -> wxString"""
        return _pcbnew.BOARD_GetDefaultLayerName(*args)

    if _newclass:GetDefaultLayerName = staticmethod(GetDefaultLayerName)
    __swig_getmethods__["GetDefaultLayerName"] = lambda x: GetDefaultLayerName
    def ReturnFlippedLayerNumber(*args):
        """ReturnFlippedLayerNumber(int oldlayer) -> int"""
        return _pcbnew.BOARD_ReturnFlippedLayerNumber(*args)

    if _newclass:ReturnFlippedLayerNumber = staticmethod(ReturnFlippedLayerNumber)
    __swig_getmethods__["ReturnFlippedLayerNumber"] = lambda x: ReturnFlippedLayerNumber
    def AddNative(self, *args):
        """
        AddNative(BOARD self, BOARD_ITEM aBoardItem, int aControl=0)
        AddNative(BOARD self, BOARD_ITEM aBoardItem)
        """
        return _pcbnew.BOARD_AddNative(self, *args)

    def Delete(self, *args):
        """Delete(BOARD self, BOARD_ITEM aBoardItem)"""
        return _pcbnew.BOARD_Delete(self, *args)

    def Remove(self, *args):
        """Remove(BOARD self, BOARD_ITEM aBoardItem) -> BOARD_ITEM"""
        return _pcbnew.BOARD_Remove(self, *args)

    def DeleteMARKERs(self):
        """DeleteMARKERs(BOARD self)"""
        return _pcbnew.BOARD_DeleteMARKERs(self)

    def DeleteZONEOutlines(self):
        """DeleteZONEOutlines(BOARD self)"""
        return _pcbnew.BOARD_DeleteZONEOutlines(self)

    def GetMARKER(self, *args):
        """GetMARKER(BOARD self, int index) -> MARKER_PCB"""
        return _pcbnew.BOARD_GetMARKER(self, *args)

    def GetMARKERCount(self):
        """GetMARKERCount(BOARD self) -> int"""
        return _pcbnew.BOARD_GetMARKERCount(self)

    def ResetHighLight(self):
        """ResetHighLight(BOARD self)"""
        return _pcbnew.BOARD_ResetHighLight(self)

    def GetHighLightNetCode(self):
        """GetHighLightNetCode(BOARD self) -> int"""
        return _pcbnew.BOARD_GetHighLightNetCode(self)

    def SetHighLightNet(self, *args):
        """SetHighLightNet(BOARD self, int aNetCode)"""
        return _pcbnew.BOARD_SetHighLightNet(self, *args)

    def IsHighLightNetON(self):
        """IsHighLightNetON(BOARD self) -> bool"""
        return _pcbnew.BOARD_IsHighLightNetON(self)

    def HighLightOFF(self):
        """HighLightOFF(BOARD self)"""
        return _pcbnew.BOARD_HighLightOFF(self)

    def HighLightON(self):
        """HighLightON(BOARD self)"""
        return _pcbnew.BOARD_HighLightON(self)

    def PushHighLight(self):
        """PushHighLight(BOARD self)"""
        return _pcbnew.BOARD_PushHighLight(self)

    def PopHighLight(self):
        """PopHighLight(BOARD self)"""
        return _pcbnew.BOARD_PopHighLight(self)

    def GetCopperLayerCount(self):
        """GetCopperLayerCount(BOARD self) -> int"""
        return _pcbnew.BOARD_GetCopperLayerCount(self)

    def SetCopperLayerCount(self, *args):
        """SetCopperLayerCount(BOARD self, int aCount)"""
        return _pcbnew.BOARD_SetCopperLayerCount(self, *args)

    def GetEnabledLayers(self):
        """GetEnabledLayers(BOARD self) -> int"""
        return _pcbnew.BOARD_GetEnabledLayers(self)

    def SetEnabledLayers(self, *args):
        """SetEnabledLayers(BOARD self, int aLayerMask)"""
        return _pcbnew.BOARD_SetEnabledLayers(self, *args)

    def IsLayerEnabled(self, *args):
        """IsLayerEnabled(BOARD self, int aLayer) -> bool"""
        return _pcbnew.BOARD_IsLayerEnabled(self, *args)

    def IsLayerVisible(self, *args):
        """IsLayerVisible(BOARD self, int aLayerIndex) -> bool"""
        return _pcbnew.BOARD_IsLayerVisible(self, *args)

    def GetVisibleLayers(self):
        """GetVisibleLayers(BOARD self) -> int"""
        return _pcbnew.BOARD_GetVisibleLayers(self)

    def SetVisibleLayers(self, *args):
        """SetVisibleLayers(BOARD self, int aLayerMask)"""
        return _pcbnew.BOARD_SetVisibleLayers(self, *args)

    def GetVisibleElements(self):
        """GetVisibleElements(BOARD self) -> int"""
        return _pcbnew.BOARD_GetVisibleElements(self)

    def SetVisibleElements(self, *args):
        """SetVisibleElements(BOARD self, int aMask)"""
        return _pcbnew.BOARD_SetVisibleElements(self, *args)

    def SetVisibleAlls(self):
        """SetVisibleAlls(BOARD self)"""
        return _pcbnew.BOARD_SetVisibleAlls(self)

    def IsElementVisible(self, *args):
        """IsElementVisible(BOARD self, int aPCB_VISIBLE) -> bool"""
        return _pcbnew.BOARD_IsElementVisible(self, *args)

    def SetElementVisibility(self, *args):
        """SetElementVisibility(BOARD self, int aPCB_VISIBLE, bool aNewState)"""
        return _pcbnew.BOARD_SetElementVisibility(self, *args)

    def IsModuleLayerVisible(self, *args):
        """IsModuleLayerVisible(BOARD self, int layer) -> bool"""
        return _pcbnew.BOARD_IsModuleLayerVisible(self, *args)

    def GetVisibleElementColor(self, *args):
        """GetVisibleElementColor(BOARD self, int aPCB_VISIBLE) -> int"""
        return _pcbnew.BOARD_GetVisibleElementColor(self, *args)

    def SetVisibleElementColor(self, *args):
        """SetVisibleElementColor(BOARD self, int aPCB_VISIBLE, int aColor)"""
        return _pcbnew.BOARD_SetVisibleElementColor(self, *args)

    def GetDesignSettings(self):
        """GetDesignSettings(BOARD self) -> BOARD_DESIGN_SETTINGS"""
        return _pcbnew.BOARD_GetDesignSettings(self)

    def SetDesignSettings(self, *args):
        """SetDesignSettings(BOARD self, BOARD_DESIGN_SETTINGS aDesignSettings)"""
        return _pcbnew.BOARD_SetDesignSettings(self, *args)

    def GetPageSettings(self):
        """GetPageSettings(BOARD self) -> PAGE_INFO"""
        return _pcbnew.BOARD_GetPageSettings(self)

    def SetPageSettings(self, *args):
        """SetPageSettings(BOARD self, PAGE_INFO aPageSettings)"""
        return _pcbnew.BOARD_SetPageSettings(self, *args)

    def GetPlotOptions(self):
        """GetPlotOptions(BOARD self) -> PCB_PLOT_PARAMS const &"""
        return _pcbnew.BOARD_GetPlotOptions(self)

    def SetPlotOptions(self, *args):
        """SetPlotOptions(BOARD self, PCB_PLOT_PARAMS const & aOptions)"""
        return _pcbnew.BOARD_SetPlotOptions(self, *args)

    def GetOriginAxisPosition(self):
        """GetOriginAxisPosition(BOARD self) -> wxPoint"""
        return _pcbnew.BOARD_GetOriginAxisPosition(self)

    def SetOriginAxisPosition(self, *args):
        """SetOriginAxisPosition(BOARD self, wxPoint aPosition)"""
        return _pcbnew.BOARD_SetOriginAxisPosition(self, *args)

    def GetTitleBlock(self):
        """GetTitleBlock(BOARD self) -> TITLE_BLOCK"""
        return _pcbnew.BOARD_GetTitleBlock(self)

    def SetTitleBlock(self, *args):
        """SetTitleBlock(BOARD self, TITLE_BLOCK aTitleBlock)"""
        return _pcbnew.BOARD_SetTitleBlock(self, *args)

    def GetZoneSettings(self):
        """GetZoneSettings(BOARD self) -> ZONE_SETTINGS"""
        return _pcbnew.BOARD_GetZoneSettings(self)

    def SetZoneSettings(self, *args):
        """SetZoneSettings(BOARD self, ZONE_SETTINGS aSettings)"""
        return _pcbnew.BOARD_SetZoneSettings(self, *args)

    def GetColorsSettings(self):
        """GetColorsSettings(BOARD self) -> COLORS_DESIGN_SETTINGS"""
        return _pcbnew.BOARD_GetColorsSettings(self)

    def SetColorsSettings(self, *args):
        """SetColorsSettings(BOARD self, COLORS_DESIGN_SETTINGS aColorsSettings)"""
        return _pcbnew.BOARD_SetColorsSettings(self, *args)

    def GetLayerName(self, *args):
        """
        GetLayerName(BOARD self, int aLayerIndex, bool aTranslate=True) -> wxString
        GetLayerName(BOARD self, int aLayerIndex) -> wxString
        """
        return _pcbnew.BOARD_GetLayerName(self, *args)

    def SetLayerName(self, *args):
        """SetLayerName(BOARD self, int aLayerIndex, wxString const & aLayerName) -> bool"""
        return _pcbnew.BOARD_SetLayerName(self, *args)

    def SetLayer(self, *args):
        """SetLayer(BOARD self, int aIndex, LAYER aLayer) -> bool"""
        return _pcbnew.BOARD_SetLayer(self, *args)

    def GetLayerType(self, *args):
        """GetLayerType(BOARD self, int aLayerIndex) -> LAYER_T"""
        return _pcbnew.BOARD_GetLayerType(self, *args)

    def SetLayerType(self, *args):
        """SetLayerType(BOARD self, int aLayerIndex, LAYER_T aLayerType) -> bool"""
        return _pcbnew.BOARD_SetLayerType(self, *args)

    def SetLayerColor(self, *args):
        """SetLayerColor(BOARD self, int aLayer, int aColor)"""
        return _pcbnew.BOARD_SetLayerColor(self, *args)

    def GetLayerColor(self, *args):
        """GetLayerColor(BOARD self, int aLayer) -> int"""
        return _pcbnew.BOARD_GetLayerColor(self, *args)

    def GetNumSegmTrack(self):
        """GetNumSegmTrack(BOARD self) -> int"""
        return _pcbnew.BOARD_GetNumSegmTrack(self)

    def GetNumSegmZone(self):
        """GetNumSegmZone(BOARD self) -> int"""
        return _pcbnew.BOARD_GetNumSegmZone(self)

    def GetNoconnectCount(self):
        """GetNoconnectCount(BOARD self) -> unsigned int"""
        return _pcbnew.BOARD_GetNoconnectCount(self)

    def GetRatsnestsCount(self):
        """GetRatsnestsCount(BOARD self) -> unsigned int"""
        return _pcbnew.BOARD_GetRatsnestsCount(self)

    def GetNodesCount(self):
        """GetNodesCount(BOARD self) -> unsigned int"""
        return _pcbnew.BOARD_GetNodesCount(self)

    def GetPadCount(self):
        """GetPadCount(BOARD self) -> unsigned int"""
        return _pcbnew.BOARD_GetPadCount(self)

    def GetPads(self):
        """GetPads(BOARD self) -> std::vector< D_PAD *,std::allocator< D_PAD * > >"""
        return _pcbnew.BOARD_GetPads(self)

    def BuildListOfNets(self):
        """BuildListOfNets(BOARD self)"""
        return _pcbnew.BOARD_BuildListOfNets(self)

    def FindNet(self, *args):
        """
        FindNet(BOARD self, int aNetcode) -> NETINFO_ITEM
        FindNet(BOARD self, wxString const & aNetname) -> NETINFO_ITEM
        """
        return _pcbnew.BOARD_FindNet(self, *args)

    def AppendNet(self, *args):
        """AppendNet(BOARD self, NETINFO_ITEM aNewNet)"""
        return _pcbnew.BOARD_AppendNet(self, *args)

    def GetNetCount(self):
        """GetNetCount(BOARD self) -> unsigned int"""
        return _pcbnew.BOARD_GetNetCount(self)

    def ComputeBoundingBox(self, aBoardEdgesOnly=False):
        """
        ComputeBoundingBox(BOARD self, bool aBoardEdgesOnly=False) -> EDA_RECT
        ComputeBoundingBox(BOARD self) -> EDA_RECT
        """
        return _pcbnew.BOARD_ComputeBoundingBox(self, aBoardEdgesOnly)

    def GetBoundingBox(self):
        """GetBoundingBox(BOARD self) -> EDA_RECT"""
        return _pcbnew.BOARD_GetBoundingBox(self)

    def SetBoundingBox(self, *args):
        """SetBoundingBox(BOARD self, EDA_RECT aBox)"""
        return _pcbnew.BOARD_SetBoundingBox(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(BOARD self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.BOARD_DisplayInfo(self, *args)

    def Draw(self, *args):
        """
        Draw(BOARD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)
        Draw(BOARD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)
        """
        return _pcbnew.BOARD_Draw(self, *args)

    def DrawHighLight(self, *args):
        """DrawHighLight(BOARD self, EDA_DRAW_PANEL * aDrawPanel, wxDC * aDC, int aNetCode)"""
        return _pcbnew.BOARD_DrawHighLight(self, *args)

    def Visit(self, *args):
        """Visit(BOARD self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.BOARD_Visit(self, *args)

    def FindModuleByReference(self, *args):
        """FindModuleByReference(BOARD self, wxString const & aReference) -> MODULE"""
        return _pcbnew.BOARD_FindModuleByReference(self, *args)

    def ReturnSortedNetnamesList(self, *args):
        """ReturnSortedNetnamesList(BOARD self, wxArrayString & aNames, bool aSortbyPadsCount) -> int"""
        return _pcbnew.BOARD_ReturnSortedNetnamesList(self, *args)

    def SynchronizeNetsAndNetClasses(self):
        """SynchronizeNetsAndNetClasses(BOARD self)"""
        return _pcbnew.BOARD_SynchronizeNetsAndNetClasses(self)

    def SetCurrentNetClass(self, *args):
        """SetCurrentNetClass(BOARD self, wxString const & aNetClassName) -> bool"""
        return _pcbnew.BOARD_SetCurrentNetClass(self, *args)

    def GetBiggestClearanceValue(self):
        """GetBiggestClearanceValue(BOARD self) -> int"""
        return _pcbnew.BOARD_GetBiggestClearanceValue(self)

    def GetSmallestClearanceValue(self):
        """GetSmallestClearanceValue(BOARD self) -> int"""
        return _pcbnew.BOARD_GetSmallestClearanceValue(self)

    def GetCurrentTrackWidth(self):
        """GetCurrentTrackWidth(BOARD self) -> int"""
        return _pcbnew.BOARD_GetCurrentTrackWidth(self)

    def GetCurrentViaSize(self):
        """GetCurrentViaSize(BOARD self) -> int"""
        return _pcbnew.BOARD_GetCurrentViaSize(self)

    def GetCurrentViaDrill(self):
        """GetCurrentViaDrill(BOARD self) -> int"""
        return _pcbnew.BOARD_GetCurrentViaDrill(self)

    def GetCurrentMicroViaSize(self):
        """GetCurrentMicroViaSize(BOARD self) -> int"""
        return _pcbnew.BOARD_GetCurrentMicroViaSize(self)

    def GetCurrentMicroViaDrill(self):
        """GetCurrentMicroViaDrill(BOARD self) -> int"""
        return _pcbnew.BOARD_GetCurrentMicroViaDrill(self)

    def GetClass(self):
        """GetClass(BOARD self) -> wxString"""
        return _pcbnew.BOARD_GetClass(self)

    def HitTestForAnyFilledArea(self, *args):
        """
        HitTestForAnyFilledArea(BOARD self, wxPoint aRefPos, int aStartLayer, int aEndLayer=-1) -> ZONE_CONTAINER
        HitTestForAnyFilledArea(BOARD self, wxPoint aRefPos, int aStartLayer) -> ZONE_CONTAINER *
        """
        return _pcbnew.BOARD_HitTestForAnyFilledArea(self, *args)

    def RedrawAreasOutlines(self, *args):
        """RedrawAreasOutlines(BOARD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, int aLayer)"""
        return _pcbnew.BOARD_RedrawAreasOutlines(self, *args)

    def RedrawFilledAreas(self, *args):
        """RedrawFilledAreas(BOARD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, int aLayer)"""
        return _pcbnew.BOARD_RedrawFilledAreas(self, *args)

    def SetAreasNetCodesFromNetNames(self):
        """SetAreasNetCodesFromNetNames(BOARD self) -> int"""
        return _pcbnew.BOARD_SetAreasNetCodesFromNetNames(self)

    def GetArea(self, *args):
        """GetArea(BOARD self, int index) -> ZONE_CONTAINER *"""
        return _pcbnew.BOARD_GetArea(self, *args)

    def GetAreaIndex(self, *args):
        """GetAreaIndex(BOARD self, ZONE_CONTAINER const * aArea) -> int"""
        return _pcbnew.BOARD_GetAreaIndex(self, *args)

    def GetAreaCount(self):
        """GetAreaCount(BOARD self) -> int"""
        return _pcbnew.BOARD_GetAreaCount(self)

    def AddArea(self, *args):
        """
        AddArea(BOARD self, PICKED_ITEMS_LIST * aNewZonesList, int aNetcode, int aLayer, wxPoint aStartPointPosition, 
            int aHatch) -> ZONE_CONTAINER *
        """
        return _pcbnew.BOARD_AddArea(self, *args)

    def InsertArea(self, *args):
        """InsertArea(BOARD self, int netcode, int iarea, int layer, int x, int y, int hatch) -> ZONE_CONTAINER *"""
        return _pcbnew.BOARD_InsertArea(self, *args)

    def TestAreaPolygon(self, *args):
        """TestAreaPolygon(BOARD self, ZONE_CONTAINER * CurrArea) -> int"""
        return _pcbnew.BOARD_TestAreaPolygon(self, *args)

    def ClipAreaPolygon(self, *args):
        """
        ClipAreaPolygon(BOARD self, PICKED_ITEMS_LIST * aNewZonesList, ZONE_CONTAINER * aCurrArea, bool bMessageBoxArc, 
            bool bMessageBoxInt, bool bRetainArcs=True) -> int
        ClipAreaPolygon(BOARD self, PICKED_ITEMS_LIST * aNewZonesList, ZONE_CONTAINER * aCurrArea, bool bMessageBoxArc, 
            bool bMessageBoxInt) -> int
        """
        return _pcbnew.BOARD_ClipAreaPolygon(self, *args)

    def AreaPolygonModified(self, *args):
        """
        AreaPolygonModified(BOARD self, PICKED_ITEMS_LIST * aModifiedZonesList, ZONE_CONTAINER * modified_area, bool bMessageBoxArc, 
            bool bMessageBoxInt) -> int
        """
        return _pcbnew.BOARD_AreaPolygonModified(self, *args)

    def CombineAllAreasInNet(self, *args):
        """CombineAllAreasInNet(BOARD self, PICKED_ITEMS_LIST * aDeletedList, int aNetCode, bool bMessageBox, bool bUseUtility) -> int"""
        return _pcbnew.BOARD_CombineAllAreasInNet(self, *args)

    def RemoveArea(self, *args):
        """RemoveArea(BOARD self, PICKED_ITEMS_LIST * aDeletedList, ZONE_CONTAINER * area_to_remove)"""
        return _pcbnew.BOARD_RemoveArea(self, *args)

    def TestAreaIntersections(self, *args):
        """TestAreaIntersections(BOARD self, ZONE_CONTAINER * area_to_test) -> bool"""
        return _pcbnew.BOARD_TestAreaIntersections(self, *args)

    def TestAreaIntersection(self, *args):
        """TestAreaIntersection(BOARD self, ZONE_CONTAINER * area_ref, ZONE_CONTAINER * area_to_test) -> int"""
        return _pcbnew.BOARD_TestAreaIntersection(self, *args)

    def CombineAreas(self, *args):
        """CombineAreas(BOARD self, PICKED_ITEMS_LIST * aDeletedList, ZONE_CONTAINER * area_ref, ZONE_CONTAINER * area_to_combine) -> int"""
        return _pcbnew.BOARD_CombineAreas(self, *args)

    def Test_Drc_Areas_Outlines_To_Areas_Outlines(self, *args):
        """Test_Drc_Areas_Outlines_To_Areas_Outlines(BOARD self, ZONE_CONTAINER * aArea_To_Examine, bool aCreate_Markers) -> int"""
        return _pcbnew.BOARD_Test_Drc_Areas_Outlines_To_Areas_Outlines(self, *args)

    def Test_Connections_To_Copper_Areas(self, *args):
        """
        Test_Connections_To_Copper_Areas(BOARD self, int aNetcode=-1)
        Test_Connections_To_Copper_Areas(BOARD self)
        """
        return _pcbnew.BOARD_Test_Connections_To_Copper_Areas(self, *args)

    def GetViaByPosition(self, *args):
        """
        GetViaByPosition(BOARD self, wxPoint aPosition, int aLayerMask=-1) -> TRACK
        GetViaByPosition(BOARD self, wxPoint aPosition) -> TRACK
        """
        return _pcbnew.BOARD_GetViaByPosition(self, *args)

    def GetPadFast(self, *args):
        """GetPadFast(BOARD self, wxPoint aPosition, int aLayer) -> D_PAD"""
        return _pcbnew.BOARD_GetPadFast(self, *args)

    def GetPad(self, *args):
        """
        GetPad(BOARD self, unsigned int aIndex) -> D_PAD
        GetPad(BOARD self, wxPoint aPosition, int aLayerMask=ALL_LAYERS) -> D_PAD
        GetPad(BOARD self, wxPoint aPosition) -> D_PAD
        GetPad(BOARD self, TRACK aTrace, int aEndPoint) -> D_PAD
        GetPad(BOARD self, std::vector< D_PAD *,std::allocator< D_PAD * > > & aPadList, wxPoint aPosition, int aLayerMask) -> D_PAD
        """
        return _pcbnew.BOARD_GetPad(self, *args)

    def GetSortedPadListByXthenYCoord(self, *args):
        """
        GetSortedPadListByXthenYCoord(BOARD self, std::vector< D_PAD *,std::allocator< D_PAD * > > & aVector, int aNetCode=-1)
        GetSortedPadListByXthenYCoord(BOARD self, std::vector< D_PAD *,std::allocator< D_PAD * > > & aVector)
        """
        return _pcbnew.BOARD_GetSortedPadListByXthenYCoord(self, *args)

    def GetTrace(self, *args):
        """GetTrace(BOARD self, TRACK aTrace, wxPoint aPosition, int aLayerMask) -> TRACK"""
        return _pcbnew.BOARD_GetTrace(self, *args)

    def MarkTrace(self, *args):
        """MarkTrace(BOARD self, TRACK aTrace, int * aCount, int * aTraceLength, int * aDieLength, bool aReorder) -> TRACK"""
        return _pcbnew.BOARD_MarkTrace(self, *args)

    def GetFootprint(self, *args):
        """
        GetFootprint(BOARD self, wxPoint aPosition, int aActiveLayer, bool aVisibleOnly, bool aIgnoreLocked=False) -> MODULE
        GetFootprint(BOARD self, wxPoint aPosition, int aActiveLayer, bool aVisibleOnly) -> MODULE
        """
        return _pcbnew.BOARD_GetFootprint(self, *args)

    def GetLockPoint(self, *args):
        """GetLockPoint(BOARD self, wxPoint aPosition, int aLayerMask) -> BOARD_CONNECTED_ITEM"""
        return _pcbnew.BOARD_GetLockPoint(self, *args)

    def CreateLockPoint(self, *args):
        """CreateLockPoint(BOARD self, wxPoint aPosition, TRACK aSegment, PICKED_ITEMS_LIST * aList) -> TRACK"""
        return _pcbnew.BOARD_CreateLockPoint(self, *args)

    def GetModules(self):             return self.m_Modules
    def GetDrawings(self):            return self.m_Drawings
    def GetTracks(self):              return self.m_Track
    def GetSegZones(self):            return self.m_Zone
    def GetFullRatsnest(self):        return self.m_FullRatsnest
    def GetLocalRatsnest(self):       return self.m_LocalRatsnest
    def GetNetClasses(self):          return self.m_NetClasses
    def GetCurrentNetClassName(self): return self.m_CurrentNetClassName
    def GetViasDimensionsList(self):  return self.m_ViasDimensionsList
    def GetTrackWidthList(self):      return self.m_TrackWidthList

    def Save(self,filename,format = None):
      if format is None:
        str_filename = str(filename)
        if str_filename.endswith(".brd"):
          format = IO_MGR.LEGACY
        if str_filename.endswith(".kicad_brd"):
          format = IO_MGR.KICAD	  
      return SaveBoard(filename,self,format)
        





    def Add(self,item): 
    	item.thisown=0
    	self.AddNative(item)

BOARD_swigregister = _pcbnew.BOARD_swigregister
BOARD_swigregister(BOARD)

def BOARD_GetDefaultLayerName(*args):
  """BOARD_GetDefaultLayerName(int aLayerNumber, bool aTranslate) -> wxString"""
  return _pcbnew.BOARD_GetDefaultLayerName(*args)

def BOARD_ReturnFlippedLayerNumber(*args):
  """BOARD_ReturnFlippedLayerNumber(int oldlayer) -> int"""
  return _pcbnew.BOARD_ReturnFlippedLayerNumber(*args)
ADD_APPEND = _pcbnew.ADD_APPEND

MOD_DEFAULT = _pcbnew.MOD_DEFAULT
MOD_CMS = _pcbnew.MOD_CMS
MOD_VIRTUAL = _pcbnew.MOD_VIRTUAL
class MODULE(BOARD_ITEM):
    """Proxy of C++ MODULE class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MODULE, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MODULE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Orient"] = _pcbnew.MODULE_m_Orient_set
    __swig_getmethods__["m_Orient"] = _pcbnew.MODULE_m_Orient_get
    if _newclass:m_Orient = _swig_property(_pcbnew.MODULE_m_Orient_get, _pcbnew.MODULE_m_Orient_set)
    __swig_setmethods__["m_Pos"] = _pcbnew.MODULE_m_Pos_set
    __swig_getmethods__["m_Pos"] = _pcbnew.MODULE_m_Pos_get
    if _newclass:m_Pos = _swig_property(_pcbnew.MODULE_m_Pos_get, _pcbnew.MODULE_m_Pos_set)
    __swig_setmethods__["m_Pads"] = _pcbnew.MODULE_m_Pads_set
    __swig_getmethods__["m_Pads"] = _pcbnew.MODULE_m_Pads_get
    if _newclass:m_Pads = _swig_property(_pcbnew.MODULE_m_Pads_get, _pcbnew.MODULE_m_Pads_set)
    __swig_setmethods__["m_Drawings"] = _pcbnew.MODULE_m_Drawings_set
    __swig_getmethods__["m_Drawings"] = _pcbnew.MODULE_m_Drawings_get
    if _newclass:m_Drawings = _swig_property(_pcbnew.MODULE_m_Drawings_get, _pcbnew.MODULE_m_Drawings_set)
    __swig_setmethods__["m_3D_Drawings"] = _pcbnew.MODULE_m_3D_Drawings_set
    __swig_getmethods__["m_3D_Drawings"] = _pcbnew.MODULE_m_3D_Drawings_get
    if _newclass:m_3D_Drawings = _swig_property(_pcbnew.MODULE_m_3D_Drawings_get, _pcbnew.MODULE_m_3D_Drawings_set)
    __swig_setmethods__["m_Reference"] = _pcbnew.MODULE_m_Reference_set
    __swig_getmethods__["m_Reference"] = _pcbnew.MODULE_m_Reference_get
    if _newclass:m_Reference = _swig_property(_pcbnew.MODULE_m_Reference_get, _pcbnew.MODULE_m_Reference_set)
    __swig_setmethods__["m_Value"] = _pcbnew.MODULE_m_Value_set
    __swig_getmethods__["m_Value"] = _pcbnew.MODULE_m_Value_get
    if _newclass:m_Value = _swig_property(_pcbnew.MODULE_m_Value_get, _pcbnew.MODULE_m_Value_set)
    __swig_setmethods__["m_LibRef"] = _pcbnew.MODULE_m_LibRef_set
    __swig_getmethods__["m_LibRef"] = _pcbnew.MODULE_m_LibRef_get
    if _newclass:m_LibRef = _swig_property(_pcbnew.MODULE_m_LibRef_get, _pcbnew.MODULE_m_LibRef_set)
    __swig_setmethods__["m_Attributs"] = _pcbnew.MODULE_m_Attributs_set
    __swig_getmethods__["m_Attributs"] = _pcbnew.MODULE_m_Attributs_get
    if _newclass:m_Attributs = _swig_property(_pcbnew.MODULE_m_Attributs_get, _pcbnew.MODULE_m_Attributs_set)
    __swig_setmethods__["flag"] = _pcbnew.MODULE_flag_set
    __swig_getmethods__["flag"] = _pcbnew.MODULE_flag_get
    if _newclass:flag = _swig_property(_pcbnew.MODULE_flag_get, _pcbnew.MODULE_flag_set)
    __swig_setmethods__["m_ModuleStatus"] = _pcbnew.MODULE_m_ModuleStatus_set
    __swig_getmethods__["m_ModuleStatus"] = _pcbnew.MODULE_m_ModuleStatus_get
    if _newclass:m_ModuleStatus = _swig_property(_pcbnew.MODULE_m_ModuleStatus_get, _pcbnew.MODULE_m_ModuleStatus_set)
    __swig_setmethods__["m_BoundaryBox"] = _pcbnew.MODULE_m_BoundaryBox_set
    __swig_getmethods__["m_BoundaryBox"] = _pcbnew.MODULE_m_BoundaryBox_get
    if _newclass:m_BoundaryBox = _swig_property(_pcbnew.MODULE_m_BoundaryBox_get, _pcbnew.MODULE_m_BoundaryBox_set)
    __swig_setmethods__["m_PadNum"] = _pcbnew.MODULE_m_PadNum_set
    __swig_getmethods__["m_PadNum"] = _pcbnew.MODULE_m_PadNum_get
    if _newclass:m_PadNum = _swig_property(_pcbnew.MODULE_m_PadNum_get, _pcbnew.MODULE_m_PadNum_set)
    __swig_setmethods__["m_AltPadNum"] = _pcbnew.MODULE_m_AltPadNum_set
    __swig_getmethods__["m_AltPadNum"] = _pcbnew.MODULE_m_AltPadNum_get
    if _newclass:m_AltPadNum = _swig_property(_pcbnew.MODULE_m_AltPadNum_get, _pcbnew.MODULE_m_AltPadNum_set)
    __swig_setmethods__["m_CntRot90"] = _pcbnew.MODULE_m_CntRot90_set
    __swig_getmethods__["m_CntRot90"] = _pcbnew.MODULE_m_CntRot90_get
    if _newclass:m_CntRot90 = _swig_property(_pcbnew.MODULE_m_CntRot90_get, _pcbnew.MODULE_m_CntRot90_set)
    __swig_setmethods__["m_CntRot180"] = _pcbnew.MODULE_m_CntRot180_set
    __swig_getmethods__["m_CntRot180"] = _pcbnew.MODULE_m_CntRot180_get
    if _newclass:m_CntRot180 = _swig_property(_pcbnew.MODULE_m_CntRot180_get, _pcbnew.MODULE_m_CntRot180_set)
    __swig_setmethods__["m_Ext"] = _pcbnew.MODULE_m_Ext_set
    __swig_getmethods__["m_Ext"] = _pcbnew.MODULE_m_Ext_get
    if _newclass:m_Ext = _swig_property(_pcbnew.MODULE_m_Ext_get, _pcbnew.MODULE_m_Ext_set)
    __swig_setmethods__["m_Surface"] = _pcbnew.MODULE_m_Surface_set
    __swig_getmethods__["m_Surface"] = _pcbnew.MODULE_m_Surface_get
    if _newclass:m_Surface = _swig_property(_pcbnew.MODULE_m_Surface_get, _pcbnew.MODULE_m_Surface_set)
    __swig_setmethods__["m_Link"] = _pcbnew.MODULE_m_Link_set
    __swig_getmethods__["m_Link"] = _pcbnew.MODULE_m_Link_get
    if _newclass:m_Link = _swig_property(_pcbnew.MODULE_m_Link_get, _pcbnew.MODULE_m_Link_set)
    __swig_setmethods__["m_LastEdit_Time"] = _pcbnew.MODULE_m_LastEdit_Time_set
    __swig_getmethods__["m_LastEdit_Time"] = _pcbnew.MODULE_m_LastEdit_Time_get
    if _newclass:m_LastEdit_Time = _swig_property(_pcbnew.MODULE_m_LastEdit_Time_get, _pcbnew.MODULE_m_LastEdit_Time_set)
    __swig_setmethods__["m_Path"] = _pcbnew.MODULE_m_Path_set
    __swig_getmethods__["m_Path"] = _pcbnew.MODULE_m_Path_get
    if _newclass:m_Path = _swig_property(_pcbnew.MODULE_m_Path_get, _pcbnew.MODULE_m_Path_set)
    __swig_setmethods__["m_Doc"] = _pcbnew.MODULE_m_Doc_set
    __swig_getmethods__["m_Doc"] = _pcbnew.MODULE_m_Doc_get
    if _newclass:m_Doc = _swig_property(_pcbnew.MODULE_m_Doc_get, _pcbnew.MODULE_m_Doc_set)
    __swig_setmethods__["m_KeyWord"] = _pcbnew.MODULE_m_KeyWord_set
    __swig_getmethods__["m_KeyWord"] = _pcbnew.MODULE_m_KeyWord_get
    if _newclass:m_KeyWord = _swig_property(_pcbnew.MODULE_m_KeyWord_get, _pcbnew.MODULE_m_KeyWord_set)
    __swig_setmethods__["m_ZoneConnection"] = _pcbnew.MODULE_m_ZoneConnection_set
    __swig_getmethods__["m_ZoneConnection"] = _pcbnew.MODULE_m_ZoneConnection_get
    if _newclass:m_ZoneConnection = _swig_property(_pcbnew.MODULE_m_ZoneConnection_get, _pcbnew.MODULE_m_ZoneConnection_set)
    __swig_setmethods__["m_ThermalWidth"] = _pcbnew.MODULE_m_ThermalWidth_set
    __swig_getmethods__["m_ThermalWidth"] = _pcbnew.MODULE_m_ThermalWidth_get
    if _newclass:m_ThermalWidth = _swig_property(_pcbnew.MODULE_m_ThermalWidth_get, _pcbnew.MODULE_m_ThermalWidth_set)
    __swig_setmethods__["m_ThermalGap"] = _pcbnew.MODULE_m_ThermalGap_set
    __swig_getmethods__["m_ThermalGap"] = _pcbnew.MODULE_m_ThermalGap_get
    if _newclass:m_ThermalGap = _swig_property(_pcbnew.MODULE_m_ThermalGap_get, _pcbnew.MODULE_m_ThermalGap_set)
    def __init__(self, *args): 
        """
        __init__(MODULE self, BOARD parent) -> MODULE
        __init__(MODULE self, MODULE aModule) -> MODULE
        """
        this = _pcbnew.new_MODULE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_MODULE
    __del__ = lambda self : None;
    def Next(self):
        """Next(MODULE self) -> MODULE"""
        return _pcbnew.MODULE_Next(self)

    def Back(self):
        """Back(MODULE self) -> MODULE"""
        return _pcbnew.MODULE_Back(self)

    def Copy(self, *args):
        """Copy(MODULE self, MODULE Module)"""
        return _pcbnew.MODULE_Copy(self, *args)

    def CalculateBoundingBox(self):
        """CalculateBoundingBox(MODULE self)"""
        return _pcbnew.MODULE_CalculateBoundingBox(self)

    def GetFootPrintRect(self):
        """GetFootPrintRect(MODULE self) -> EDA_RECT"""
        return _pcbnew.MODULE_GetFootPrintRect(self)

    def GetBoundingBox(self):
        """GetBoundingBox(MODULE self) -> EDA_RECT"""
        return _pcbnew.MODULE_GetBoundingBox(self)

    def SetPosition(self, *args):
        """SetPosition(MODULE self, wxPoint aPos)"""
        return _pcbnew.MODULE_SetPosition(self, *args)

    def GetPosition(self):
        """GetPosition(MODULE self) -> wxPoint"""
        return _pcbnew.MODULE_GetPosition(self)

    def SetOrientation(self, *args):
        """SetOrientation(MODULE self, double newangle)"""
        return _pcbnew.MODULE_SetOrientation(self, *args)

    def GetOrientation(self):
        """GetOrientation(MODULE self) -> double"""
        return _pcbnew.MODULE_GetOrientation(self)

    def GetLibRef(self):
        """GetLibRef(MODULE self) -> wxString const &"""
        return _pcbnew.MODULE_GetLibRef(self)

    def SetLibRef(self, *args):
        """SetLibRef(MODULE self, wxString const & aLibRef)"""
        return _pcbnew.MODULE_SetLibRef(self, *args)

    def GetDescription(self):
        """GetDescription(MODULE self) -> wxString const &"""
        return _pcbnew.MODULE_GetDescription(self)

    def SetDescription(self, *args):
        """SetDescription(MODULE self, wxString const & aDoc)"""
        return _pcbnew.MODULE_SetDescription(self, *args)

    def GetKeywords(self):
        """GetKeywords(MODULE self) -> wxString const &"""
        return _pcbnew.MODULE_GetKeywords(self)

    def SetKeywords(self, *args):
        """SetKeywords(MODULE self, wxString const & aKeywords)"""
        return _pcbnew.MODULE_SetKeywords(self, *args)

    def GetPath(self):
        """GetPath(MODULE self) -> wxString const &"""
        return _pcbnew.MODULE_GetPath(self)

    def SetPath(self, *args):
        """SetPath(MODULE self, wxString const & aPath)"""
        return _pcbnew.MODULE_SetPath(self, *args)

    def GetLocalSolderMaskMargin(self):
        """GetLocalSolderMaskMargin(MODULE self) -> int"""
        return _pcbnew.MODULE_GetLocalSolderMaskMargin(self)

    def SetLocalSolderMaskMargin(self, *args):
        """SetLocalSolderMaskMargin(MODULE self, int aMargin)"""
        return _pcbnew.MODULE_SetLocalSolderMaskMargin(self, *args)

    def GetLocalClearance(self):
        """GetLocalClearance(MODULE self) -> int"""
        return _pcbnew.MODULE_GetLocalClearance(self)

    def SetLocalClearance(self, *args):
        """SetLocalClearance(MODULE self, int aClearance)"""
        return _pcbnew.MODULE_SetLocalClearance(self, *args)

    def GetLocalSolderPasteMargin(self):
        """GetLocalSolderPasteMargin(MODULE self) -> int"""
        return _pcbnew.MODULE_GetLocalSolderPasteMargin(self)

    def SetLocalSolderPasteMargin(self, *args):
        """SetLocalSolderPasteMargin(MODULE self, int aMargin)"""
        return _pcbnew.MODULE_SetLocalSolderPasteMargin(self, *args)

    def GetLocalSolderPasteMarginRatio(self):
        """GetLocalSolderPasteMarginRatio(MODULE self) -> double"""
        return _pcbnew.MODULE_GetLocalSolderPasteMarginRatio(self)

    def SetLocalSolderPasteMarginRatio(self, *args):
        """SetLocalSolderPasteMarginRatio(MODULE self, double aRatio)"""
        return _pcbnew.MODULE_SetLocalSolderPasteMarginRatio(self, *args)

    def SetZoneConnection(self, *args):
        """SetZoneConnection(MODULE self, ZoneConnection aType)"""
        return _pcbnew.MODULE_SetZoneConnection(self, *args)

    def GetZoneConnection(self):
        """GetZoneConnection(MODULE self) -> ZoneConnection"""
        return _pcbnew.MODULE_GetZoneConnection(self)

    def SetThermalWidth(self, *args):
        """SetThermalWidth(MODULE self, int aWidth)"""
        return _pcbnew.MODULE_SetThermalWidth(self, *args)

    def GetThermalWidth(self):
        """GetThermalWidth(MODULE self) -> int"""
        return _pcbnew.MODULE_GetThermalWidth(self)

    def SetThermalGap(self, *args):
        """SetThermalGap(MODULE self, int aGap)"""
        return _pcbnew.MODULE_SetThermalGap(self, *args)

    def GetThermalGap(self):
        """GetThermalGap(MODULE self) -> int"""
        return _pcbnew.MODULE_GetThermalGap(self)

    def GetAttributes(self):
        """GetAttributes(MODULE self) -> int"""
        return _pcbnew.MODULE_GetAttributes(self)

    def SetAttributes(self, *args):
        """SetAttributes(MODULE self, int aAttributes)"""
        return _pcbnew.MODULE_SetAttributes(self, *args)

    def Move(self, *args):
        """Move(MODULE self, wxPoint aMoveVector)"""
        return _pcbnew.MODULE_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(MODULE self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.MODULE_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(MODULE self, wxPoint aCentre)"""
        return _pcbnew.MODULE_Flip(self, *args)

    def IsLocked(self):
        """IsLocked(MODULE self) -> bool"""
        return _pcbnew.MODULE_IsLocked(self)

    def SetLocked(self, *args):
        """SetLocked(MODULE self, bool isLocked)"""
        return _pcbnew.MODULE_SetLocked(self, *args)

    def IsPlaced(self):
        """IsPlaced(MODULE self) -> bool"""
        return _pcbnew.MODULE_IsPlaced(self)

    def SetIsPlaced(self, *args):
        """SetIsPlaced(MODULE self, bool isPlaced)"""
        return _pcbnew.MODULE_SetIsPlaced(self, *args)

    def SetLastEditTime(self, *args):
        """SetLastEditTime(MODULE self, long aTime)"""
        return _pcbnew.MODULE_SetLastEditTime(self, *args)

    def GetLastEditTime(self):
        """GetLastEditTime(MODULE self) -> long"""
        return _pcbnew.MODULE_GetLastEditTime(self)

    def Read_GPCB_Descr(self, *args):
        """Read_GPCB_Descr(MODULE self, wxString const & CmpFullFileName) -> bool"""
        return _pcbnew.MODULE_Read_GPCB_Descr(self, *args)

    def Draw(self, *args):
        """
        Draw(MODULE self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)
        Draw(MODULE self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)
        """
        return _pcbnew.MODULE_Draw(self, *args)

    def Draw3D(self, *args):
        """Draw3D(MODULE self, EDA_3D_CANVAS * glcanvas)"""
        return _pcbnew.MODULE_Draw3D(self, *args)

    def DrawEdgesOnly(self, *args):
        """DrawEdgesOnly(MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, wxPoint offset, int draw_mode)"""
        return _pcbnew.MODULE_DrawEdgesOnly(self, *args)

    def DrawAncre(self, *args):
        """DrawAncre(MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, wxPoint offset, int dim_ancre, int draw_mode)"""
        return _pcbnew.MODULE_DrawAncre(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(MODULE self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.MODULE_DisplayInfo(self, *args)

    def HitTest(self, *args):
        """
        HitTest(MODULE self, wxPoint aPosition) -> bool
        HitTest(MODULE self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.MODULE_HitTest(self, *args)

    def GetReference(self):
        """GetReference(MODULE self) -> wxString const &"""
        return _pcbnew.MODULE_GetReference(self)

    def SetReference(self, *args):
        """SetReference(MODULE self, wxString const & aReference)"""
        return _pcbnew.MODULE_SetReference(self, *args)

    def GetValue(self):
        """GetValue(MODULE self) -> wxString const &"""
        return _pcbnew.MODULE_GetValue(self)

    def SetValue(self, *args):
        """SetValue(MODULE self, wxString const & aValue)"""
        return _pcbnew.MODULE_SetValue(self, *args)

    def Value(self):
        """Value(MODULE self) -> TEXTE_MODULE"""
        return _pcbnew.MODULE_Value(self)

    def Reference(self):
        """Reference(MODULE self) -> TEXTE_MODULE"""
        return _pcbnew.MODULE_Reference(self)

    def FindPadByName(self, *args):
        """FindPadByName(MODULE self, wxString const & aPadName) -> D_PAD"""
        return _pcbnew.MODULE_FindPadByName(self, *args)

    def GetPad(self, *args):
        """
        GetPad(MODULE self, wxPoint aPosition, int aLayerMask=ALL_LAYERS) -> D_PAD
        GetPad(MODULE self, wxPoint aPosition) -> D_PAD
        """
        return _pcbnew.MODULE_GetPad(self, *args)

    def GetPadCount(self):
        """GetPadCount(MODULE self) -> unsigned int"""
        return _pcbnew.MODULE_GetPadCount(self)

    def Add3DModel(self, *args):
        """Add3DModel(MODULE self, S3D_MASTER * a3DModel)"""
        return _pcbnew.MODULE_Add3DModel(self, *args)

    def AddPad(self, *args):
        """AddPad(MODULE self, D_PAD aPad)"""
        return _pcbnew.MODULE_AddPad(self, *args)

    def Visit(self, *args):
        """Visit(MODULE self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.MODULE_Visit(self, *args)

    def GetClass(self):
        """GetClass(MODULE self) -> wxString"""
        return _pcbnew.MODULE_GetClass(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(MODULE self) -> wxString"""
        return _pcbnew.MODULE_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(MODULE self) -> BITMAP_DEF"""
        return _pcbnew.MODULE_GetMenuImage(self)

    def Clone(self):
        """Clone(MODULE self) -> EDA_ITEM"""
        return _pcbnew.MODULE_Clone(self)

    def GetPads(self):		      return self.m_Pads
    def GetDrawings(self):            return self.m_Drawings
    def GetReferenceObj(self):	      return self.m_Reference
    def GetValueObj(self):	      return self.m_Value
     








    def Add(self,item): 
    	
    	itemC = item.Cast()
    	
    	if type(itemC) is D_PAD:
    		item.thisown=0
    		self.m_Pads.PushBack(itemC)
    	elif type(itemC) in [ TEXTE_PCB, DIMENSION, TEXTE_MODULE, DRAWSEGMENT,EDGE_MODULE]:
    		item.thisown = 0
    		self.m_Drawings.PushBack(item)

MODULE_swigregister = _pcbnew.MODULE_swigregister
MODULE_swigregister(MODULE)
MODULE_is_LOCKED = _pcbnew.MODULE_is_LOCKED
MODULE_is_PLACED = _pcbnew.MODULE_is_PLACED
MODULE_to_PLACE = _pcbnew.MODULE_to_PLACE

VIA_THROUGH = _pcbnew.VIA_THROUGH
VIA_BLIND_BURIED = _pcbnew.VIA_BLIND_BURIED
VIA_MICROVIA = _pcbnew.VIA_MICROVIA
VIA_NOT_DEFINED = _pcbnew.VIA_NOT_DEFINED
UNDEFINED_DRILL_DIAMETER = _pcbnew.UNDEFINED_DRILL_DIAMETER

def GetTrace(*args):
  """GetTrace(TRACK aStartTrace, TRACK aEndTrace, wxPoint aPosition, int aLayerMask) -> TRACK"""
  return _pcbnew.GetTrace(*args)
class TRACK(BOARD_CONNECTED_ITEM):
    """Proxy of C++ TRACK class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_CONNECTED_ITEM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRACK, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_CONNECTED_ITEM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TRACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Width"] = _pcbnew.TRACK_m_Width_set
    __swig_getmethods__["m_Width"] = _pcbnew.TRACK_m_Width_get
    if _newclass:m_Width = _swig_property(_pcbnew.TRACK_m_Width_get, _pcbnew.TRACK_m_Width_set)
    __swig_setmethods__["m_Start"] = _pcbnew.TRACK_m_Start_set
    __swig_getmethods__["m_Start"] = _pcbnew.TRACK_m_Start_get
    if _newclass:m_Start = _swig_property(_pcbnew.TRACK_m_Start_get, _pcbnew.TRACK_m_Start_set)
    __swig_setmethods__["m_End"] = _pcbnew.TRACK_m_End_set
    __swig_getmethods__["m_End"] = _pcbnew.TRACK_m_End_get
    if _newclass:m_End = _swig_property(_pcbnew.TRACK_m_End_get, _pcbnew.TRACK_m_End_set)
    __swig_setmethods__["m_Shape"] = _pcbnew.TRACK_m_Shape_set
    __swig_getmethods__["m_Shape"] = _pcbnew.TRACK_m_Shape_get
    if _newclass:m_Shape = _swig_property(_pcbnew.TRACK_m_Shape_get, _pcbnew.TRACK_m_Shape_set)
    __swig_setmethods__["start"] = _pcbnew.TRACK_start_set
    __swig_getmethods__["start"] = _pcbnew.TRACK_start_get
    if _newclass:start = _swig_property(_pcbnew.TRACK_start_get, _pcbnew.TRACK_start_set)
    __swig_setmethods__["end"] = _pcbnew.TRACK_end_set
    __swig_getmethods__["end"] = _pcbnew.TRACK_end_get
    if _newclass:end = _swig_property(_pcbnew.TRACK_end_get, _pcbnew.TRACK_end_set)
    __swig_setmethods__["m_Param"] = _pcbnew.TRACK_m_Param_set
    __swig_getmethods__["m_Param"] = _pcbnew.TRACK_m_Param_get
    if _newclass:m_Param = _swig_property(_pcbnew.TRACK_m_Param_get, _pcbnew.TRACK_m_Param_set)
    def __init__(self, *args): 
        """
        __init__(TRACK self, BOARD_ITEM aParent, KICAD_T idtype=PCB_TRACE_T) -> TRACK
        __init__(TRACK self, BOARD_ITEM aParent) -> TRACK
        """
        this = _pcbnew.new_TRACK(*args)
        try: self.this.append(this)
        except: self.this = this
    def Next(self):
        """Next(TRACK self) -> TRACK"""
        return _pcbnew.TRACK_Next(self)

    def Back(self):
        """Back(TRACK self) -> TRACK"""
        return _pcbnew.TRACK_Back(self)

    def Move(self, *args):
        """Move(TRACK self, wxPoint aMoveVector)"""
        return _pcbnew.TRACK_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(TRACK self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.TRACK_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(TRACK self, wxPoint aCentre)"""
        return _pcbnew.TRACK_Flip(self, *args)

    def SetPosition(self, *args):
        """SetPosition(TRACK self, wxPoint aPos)"""
        return _pcbnew.TRACK_SetPosition(self, *args)

    def GetPosition(self):
        """GetPosition(TRACK self) -> wxPoint"""
        return _pcbnew.TRACK_GetPosition(self)

    def SetWidth(self, *args):
        """SetWidth(TRACK self, int aWidth)"""
        return _pcbnew.TRACK_SetWidth(self, *args)

    def GetWidth(self):
        """GetWidth(TRACK self) -> int"""
        return _pcbnew.TRACK_GetWidth(self)

    def SetEnd(self, *args):
        """SetEnd(TRACK self, wxPoint aEnd)"""
        return _pcbnew.TRACK_SetEnd(self, *args)

    def GetEnd(self):
        """GetEnd(TRACK self) -> wxPoint"""
        return _pcbnew.TRACK_GetEnd(self)

    def SetStart(self, *args):
        """SetStart(TRACK self, wxPoint aStart)"""
        return _pcbnew.TRACK_SetStart(self, *args)

    def GetStart(self):
        """GetStart(TRACK self) -> wxPoint"""
        return _pcbnew.TRACK_GetStart(self)

    def GetBoundingBox(self):
        """GetBoundingBox(TRACK self) -> EDA_RECT"""
        return _pcbnew.TRACK_GetBoundingBox(self)

    def GetBestInsertPoint(self, *args):
        """GetBestInsertPoint(TRACK self, BOARD aPcb) -> TRACK"""
        return _pcbnew.TRACK_GetBestInsertPoint(self, *args)

    def GetStartNetCode(self, *args):
        """GetStartNetCode(TRACK self, int NetCode) -> TRACK"""
        return _pcbnew.TRACK_GetStartNetCode(self, *args)

    def GetEndNetCode(self, *args):
        """GetEndNetCode(TRACK self, int NetCode) -> TRACK"""
        return _pcbnew.TRACK_GetEndNetCode(self, *args)

    def GetLength(self):
        """GetLength(TRACK self) -> double"""
        return _pcbnew.TRACK_GetLength(self)

    def Draw(self, *args):
        """
        Draw(TRACK self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)
        Draw(TRACK self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.TRACK_Draw(self, *args)

    def GetShape(self):
        """GetShape(TRACK self) -> int"""
        return _pcbnew.TRACK_GetShape(self)

    def SetShape(self, *args):
        """SetShape(TRACK self, int aShape)"""
        return _pcbnew.TRACK_SetShape(self, *args)

    def TransformShapeWithClearanceToPolygon(self, *args):
        """
        TransformShapeWithClearanceToPolygon(TRACK self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, int aClearanceValue, 
            int aCircleToSegmentsCount, double aCorrectionFactor)
        """
        return _pcbnew.TRACK_TransformShapeWithClearanceToPolygon(self, *args)

    def SetDrill(self, *args):
        """SetDrill(TRACK self, int aDrill)"""
        return _pcbnew.TRACK_SetDrill(self, *args)

    def GetDrill(self):
        """GetDrill(TRACK self) -> int"""
        return _pcbnew.TRACK_GetDrill(self)

    def GetDrillValue(self):
        """GetDrillValue(TRACK self) -> int"""
        return _pcbnew.TRACK_GetDrillValue(self)

    def SetDrillDefault(self):
        """SetDrillDefault(TRACK self)"""
        return _pcbnew.TRACK_SetDrillDefault(self)

    def IsDrillDefault(self):
        """IsDrillDefault(TRACK self) -> bool"""
        return _pcbnew.TRACK_IsDrillDefault(self)

    def ReturnMaskLayer(self):
        """ReturnMaskLayer(TRACK self) -> int"""
        return _pcbnew.TRACK_ReturnMaskLayer(self)

    def IsPointOnEnds(self, *args):
        """
        IsPointOnEnds(TRACK self, wxPoint point, int min_dist=0) -> int
        IsPointOnEnds(TRACK self, wxPoint point) -> int
        """
        return _pcbnew.TRACK_IsPointOnEnds(self, *args)

    def IsNull(self):
        """IsNull(TRACK self) -> bool"""
        return _pcbnew.TRACK_IsNull(self)

    def DisplayInfo(self, *args):
        """DisplayInfo(TRACK self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.TRACK_DisplayInfo(self, *args)

    def DisplayInfoBase(self, *args):
        """DisplayInfoBase(TRACK self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.TRACK_DisplayInfoBase(self, *args)

    def ShowWidth(self):
        """ShowWidth(TRACK self) -> wxString"""
        return _pcbnew.TRACK_ShowWidth(self)

    def Visit(self, *args):
        """Visit(TRACK self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.TRACK_Visit(self, *args)

    def HitTest(self, *args):
        """
        HitTest(TRACK self, wxPoint aPosition) -> bool
        HitTest(TRACK self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.TRACK_HitTest(self, *args)

    def GetVia(self, *args):
        """
        GetVia(TRACK self, wxPoint aPosition, int aLayerMask=-1) -> TRACK
        GetVia(TRACK self, wxPoint aPosition) -> TRACK
        GetVia(TRACK self, TRACK aEndTrace, wxPoint aPosition, int aLayerMask) -> TRACK
        """
        return _pcbnew.TRACK_GetVia(self, *args)

    def GetTrace(self, *args):
        """GetTrace(TRACK self, TRACK aStartTrace, TRACK aEndTrace, int aEndPoint) -> TRACK"""
        return _pcbnew.TRACK_GetTrace(self, *args)

    def GetEndSegments(self, *args):
        """GetEndSegments(TRACK self, int NbSegm, TRACK ** StartTrack, TRACK ** EndTrack) -> int"""
        return _pcbnew.TRACK_GetEndSegments(self, *args)

    def GetClass(self):
        """GetClass(TRACK self) -> wxString"""
        return _pcbnew.TRACK_GetClass(self)

    def GetClearance(self, aItem=None):
        """
        GetClearance(TRACK self, BOARD_CONNECTED_ITEM aItem=None) -> int
        GetClearance(TRACK self) -> int
        """
        return _pcbnew.TRACK_GetClearance(self, aItem)

    def GetSelectMenuText(self):
        """GetSelectMenuText(TRACK self) -> wxString"""
        return _pcbnew.TRACK_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(TRACK self) -> BITMAP_DEF"""
        return _pcbnew.TRACK_GetMenuImage(self)

    def Clone(self):
        """Clone(TRACK self) -> EDA_ITEM"""
        return _pcbnew.TRACK_Clone(self)

    __swig_destroy__ = _pcbnew.delete_TRACK
    __del__ = lambda self : None;
TRACK_swigregister = _pcbnew.TRACK_swigregister
TRACK_swigregister(TRACK)

class SEGZONE(TRACK):
    """Proxy of C++ SEGZONE class"""
    __swig_setmethods__ = {}
    for _s in [TRACK]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEGZONE, name, value)
    __swig_getmethods__ = {}
    for _s in [TRACK]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEGZONE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(SEGZONE self, BOARD_ITEM aParent) -> SEGZONE"""
        this = _pcbnew.new_SEGZONE(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetClass(self):
        """GetClass(SEGZONE self) -> wxString"""
        return _pcbnew.SEGZONE_GetClass(self)

    def Next(self):
        """Next(SEGZONE self) -> SEGZONE"""
        return _pcbnew.SEGZONE_Next(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(SEGZONE self) -> wxString"""
        return _pcbnew.SEGZONE_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(SEGZONE self) -> BITMAP_DEF"""
        return _pcbnew.SEGZONE_GetMenuImage(self)

    def Clone(self):
        """Clone(SEGZONE self) -> EDA_ITEM"""
        return _pcbnew.SEGZONE_Clone(self)

    __swig_destroy__ = _pcbnew.delete_SEGZONE
    __del__ = lambda self : None;
SEGZONE_swigregister = _pcbnew.SEGZONE_swigregister
SEGZONE_swigregister(SEGZONE)

class SEGVIA(TRACK):
    """Proxy of C++ SEGVIA class"""
    __swig_setmethods__ = {}
    for _s in [TRACK]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEGVIA, name, value)
    __swig_getmethods__ = {}
    for _s in [TRACK]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEGVIA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(SEGVIA self, BOARD_ITEM aParent) -> SEGVIA"""
        this = _pcbnew.new_SEGVIA(*args)
        try: self.this.append(this)
        except: self.this = this
    def Draw(self, *args):
        """
        Draw(SEGVIA self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)
        Draw(SEGVIA self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.SEGVIA_Draw(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(SEGVIA self, int aLayer) -> bool"""
        return _pcbnew.SEGVIA_IsOnLayer(self, *args)

    def SetLayerPair(self, *args):
        """SetLayerPair(SEGVIA self, int top_layer, int bottom_layer)"""
        return _pcbnew.SEGVIA_SetLayerPair(self, *args)

    def ReturnLayerPair(self, *args):
        """ReturnLayerPair(SEGVIA self, int * top_layer, int * bottom_layer)"""
        return _pcbnew.SEGVIA_ReturnLayerPair(self, *args)

    def GetPosition(self):
        """GetPosition(SEGVIA self) -> wxPoint"""
        return _pcbnew.SEGVIA_GetPosition(self)

    def SetPosition(self, *args):
        """SetPosition(SEGVIA self, wxPoint aPoint)"""
        return _pcbnew.SEGVIA_SetPosition(self, *args)

    def GetClass(self):
        """GetClass(SEGVIA self) -> wxString"""
        return _pcbnew.SEGVIA_GetClass(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(SEGVIA self) -> wxString"""
        return _pcbnew.SEGVIA_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(SEGVIA self) -> BITMAP_DEF"""
        return _pcbnew.SEGVIA_GetMenuImage(self)

    def Clone(self):
        """Clone(SEGVIA self) -> EDA_ITEM"""
        return _pcbnew.SEGVIA_Clone(self)

    __swig_destroy__ = _pcbnew.delete_SEGVIA
    __del__ = lambda self : None;
SEGVIA_swigregister = _pcbnew.SEGVIA_swigregister
SEGVIA_swigregister(SEGVIA)

UNDEFINED_LAYER = _pcbnew.UNDEFINED_LAYER
FIRST_COPPER_LAYER = _pcbnew.FIRST_COPPER_LAYER
LAYER_N_BACK = _pcbnew.LAYER_N_BACK
LAYER_N_2 = _pcbnew.LAYER_N_2
LAYER_N_3 = _pcbnew.LAYER_N_3
LAYER_N_4 = _pcbnew.LAYER_N_4
LAYER_N_5 = _pcbnew.LAYER_N_5
LAYER_N_6 = _pcbnew.LAYER_N_6
LAYER_N_7 = _pcbnew.LAYER_N_7
LAYER_N_8 = _pcbnew.LAYER_N_8
LAYER_N_9 = _pcbnew.LAYER_N_9
LAYER_N_10 = _pcbnew.LAYER_N_10
LAYER_N_11 = _pcbnew.LAYER_N_11
LAYER_N_12 = _pcbnew.LAYER_N_12
LAYER_N_13 = _pcbnew.LAYER_N_13
LAYER_N_14 = _pcbnew.LAYER_N_14
LAYER_N_15 = _pcbnew.LAYER_N_15
LAYER_N_FRONT = _pcbnew.LAYER_N_FRONT
LAST_COPPER_LAYER = _pcbnew.LAST_COPPER_LAYER
NB_COPPER_LAYERS = _pcbnew.NB_COPPER_LAYERS
FIRST_NO_COPPER_LAYER = _pcbnew.FIRST_NO_COPPER_LAYER
ADHESIVE_N_BACK = _pcbnew.ADHESIVE_N_BACK
ADHESIVE_N_FRONT = _pcbnew.ADHESIVE_N_FRONT
SOLDERPASTE_N_BACK = _pcbnew.SOLDERPASTE_N_BACK
SOLDERPASTE_N_FRONT = _pcbnew.SOLDERPASTE_N_FRONT
SILKSCREEN_N_BACK = _pcbnew.SILKSCREEN_N_BACK
SILKSCREEN_N_FRONT = _pcbnew.SILKSCREEN_N_FRONT
SOLDERMASK_N_BACK = _pcbnew.SOLDERMASK_N_BACK
SOLDERMASK_N_FRONT = _pcbnew.SOLDERMASK_N_FRONT
DRAW_N = _pcbnew.DRAW_N
COMMENT_N = _pcbnew.COMMENT_N
ECO1_N = _pcbnew.ECO1_N
ECO2_N = _pcbnew.ECO2_N
EDGE_N = _pcbnew.EDGE_N
LAST_NO_COPPER_LAYER = _pcbnew.LAST_NO_COPPER_LAYER
UNUSED_LAYER_29 = _pcbnew.UNUSED_LAYER_29
UNUSED_LAYER_30 = _pcbnew.UNUSED_LAYER_30
UNUSED_LAYER_31 = _pcbnew.UNUSED_LAYER_31
NB_LAYERS = _pcbnew.NB_LAYERS
LAYER_COUNT = _pcbnew.LAYER_COUNT
LAYER_BACK = _pcbnew.LAYER_BACK
LAYER_2 = _pcbnew.LAYER_2
LAYER_3 = _pcbnew.LAYER_3
LAYER_4 = _pcbnew.LAYER_4
LAYER_5 = _pcbnew.LAYER_5
LAYER_6 = _pcbnew.LAYER_6
LAYER_7 = _pcbnew.LAYER_7
LAYER_8 = _pcbnew.LAYER_8
LAYER_9 = _pcbnew.LAYER_9
LAYER_10 = _pcbnew.LAYER_10
LAYER_11 = _pcbnew.LAYER_11
LAYER_12 = _pcbnew.LAYER_12
LAYER_13 = _pcbnew.LAYER_13
LAYER_14 = _pcbnew.LAYER_14
LAYER_15 = _pcbnew.LAYER_15
LAYER_FRONT = _pcbnew.LAYER_FRONT
ADHESIVE_LAYER_BACK = _pcbnew.ADHESIVE_LAYER_BACK
ADHESIVE_LAYER_FRONT = _pcbnew.ADHESIVE_LAYER_FRONT
SOLDERPASTE_LAYER_BACK = _pcbnew.SOLDERPASTE_LAYER_BACK
SOLDERPASTE_LAYER_FRONT = _pcbnew.SOLDERPASTE_LAYER_FRONT
SILKSCREEN_LAYER_BACK = _pcbnew.SILKSCREEN_LAYER_BACK
SILKSCREEN_LAYER_FRONT = _pcbnew.SILKSCREEN_LAYER_FRONT
SOLDERMASK_LAYER_BACK = _pcbnew.SOLDERMASK_LAYER_BACK
SOLDERMASK_LAYER_FRONT = _pcbnew.SOLDERMASK_LAYER_FRONT
DRAW_LAYER = _pcbnew.DRAW_LAYER
COMMENT_LAYER = _pcbnew.COMMENT_LAYER
ECO1_LAYER = _pcbnew.ECO1_LAYER
ECO2_LAYER = _pcbnew.ECO2_LAYER
EDGE_LAYER = _pcbnew.EDGE_LAYER
FIRST_NON_COPPER_LAYER = _pcbnew.FIRST_NON_COPPER_LAYER
LAST_NON_COPPER_LAYER = _pcbnew.LAST_NON_COPPER_LAYER
ALL_LAYERS = _pcbnew.ALL_LAYERS
FULL_LAYERS = _pcbnew.FULL_LAYERS
ALL_NO_CU_LAYERS = _pcbnew.ALL_NO_CU_LAYERS
ALL_CU_LAYERS = _pcbnew.ALL_CU_LAYERS
INTERNAL_LAYERS = _pcbnew.INTERNAL_LAYERS
EXTERNAL_LAYERS = _pcbnew.EXTERNAL_LAYERS
VIAS_VISIBLE = _pcbnew.VIAS_VISIBLE
VIA_MICROVIA_VISIBLE = _pcbnew.VIA_MICROVIA_VISIBLE
VIA_BBLIND_VISIBLE = _pcbnew.VIA_BBLIND_VISIBLE
VIA_THROUGH_VISIBLE = _pcbnew.VIA_THROUGH_VISIBLE
MOD_TEXT_FR_VISIBLE = _pcbnew.MOD_TEXT_FR_VISIBLE
MOD_TEXT_BK_VISIBLE = _pcbnew.MOD_TEXT_BK_VISIBLE
MOD_TEXT_INVISIBLE = _pcbnew.MOD_TEXT_INVISIBLE
ANCHOR_VISIBLE = _pcbnew.ANCHOR_VISIBLE
PAD_FR_VISIBLE = _pcbnew.PAD_FR_VISIBLE
PAD_BK_VISIBLE = _pcbnew.PAD_BK_VISIBLE
RATSNEST_VISIBLE = _pcbnew.RATSNEST_VISIBLE
GRID_VISIBLE = _pcbnew.GRID_VISIBLE
NO_CONNECTS_VISIBLE = _pcbnew.NO_CONNECTS_VISIBLE
MOD_FR_VISIBLE = _pcbnew.MOD_FR_VISIBLE
MOD_BK_VISIBLE = _pcbnew.MOD_BK_VISIBLE
MOD_VALUES_VISIBLE = _pcbnew.MOD_VALUES_VISIBLE
MOD_REFERENCES_VISIBLE = _pcbnew.MOD_REFERENCES_VISIBLE
END_PCB_VISIBLE_LIST = _pcbnew.END_PCB_VISIBLE_LIST

def IsValidLayerIndex(*args):
  """IsValidLayerIndex(int aLayerIndex) -> bool"""
  return _pcbnew.IsValidLayerIndex(*args)

def IsValidCopperLayerIndex(*args):
  """IsValidCopperLayerIndex(int aLayerIndex) -> bool"""
  return _pcbnew.IsValidCopperLayerIndex(*args)

def IsValidNonCopperLayerIndex(*args):
  """IsValidNonCopperLayerIndex(int aLayerIndex) -> bool"""
  return _pcbnew.IsValidNonCopperLayerIndex(*args)
PAD_STANDARD_DEFAULT_LAYERS = _pcbnew.PAD_STANDARD_DEFAULT_LAYERS
PAD_CONN_DEFAULT_LAYERS = _pcbnew.PAD_CONN_DEFAULT_LAYERS
PAD_SMD_DEFAULT_LAYERS = _pcbnew.PAD_SMD_DEFAULT_LAYERS
PAD_HOLE_NOT_PLATED_DEFAULT_LAYERS = _pcbnew.PAD_HOLE_NOT_PLATED_DEFAULT_LAYERS
class PAD_DRAWINFO(_object):
    """Proxy of C++ PAD_DRAWINFO class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAD_DRAWINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAD_DRAWINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_DrawPanel"] = _pcbnew.PAD_DRAWINFO_m_DrawPanel_set
    __swig_getmethods__["m_DrawPanel"] = _pcbnew.PAD_DRAWINFO_m_DrawPanel_get
    if _newclass:m_DrawPanel = _swig_property(_pcbnew.PAD_DRAWINFO_m_DrawPanel_get, _pcbnew.PAD_DRAWINFO_m_DrawPanel_set)
    __swig_setmethods__["m_DrawMode"] = _pcbnew.PAD_DRAWINFO_m_DrawMode_set
    __swig_getmethods__["m_DrawMode"] = _pcbnew.PAD_DRAWINFO_m_DrawMode_get
    if _newclass:m_DrawMode = _swig_property(_pcbnew.PAD_DRAWINFO_m_DrawMode_get, _pcbnew.PAD_DRAWINFO_m_DrawMode_set)
    __swig_setmethods__["m_Color"] = _pcbnew.PAD_DRAWINFO_m_Color_set
    __swig_getmethods__["m_Color"] = _pcbnew.PAD_DRAWINFO_m_Color_get
    if _newclass:m_Color = _swig_property(_pcbnew.PAD_DRAWINFO_m_Color_get, _pcbnew.PAD_DRAWINFO_m_Color_set)
    __swig_setmethods__["m_HoleColor"] = _pcbnew.PAD_DRAWINFO_m_HoleColor_set
    __swig_getmethods__["m_HoleColor"] = _pcbnew.PAD_DRAWINFO_m_HoleColor_get
    if _newclass:m_HoleColor = _swig_property(_pcbnew.PAD_DRAWINFO_m_HoleColor_get, _pcbnew.PAD_DRAWINFO_m_HoleColor_set)
    __swig_setmethods__["m_NPHoleColor"] = _pcbnew.PAD_DRAWINFO_m_NPHoleColor_set
    __swig_getmethods__["m_NPHoleColor"] = _pcbnew.PAD_DRAWINFO_m_NPHoleColor_get
    if _newclass:m_NPHoleColor = _swig_property(_pcbnew.PAD_DRAWINFO_m_NPHoleColor_get, _pcbnew.PAD_DRAWINFO_m_NPHoleColor_set)
    __swig_setmethods__["m_PadClearance"] = _pcbnew.PAD_DRAWINFO_m_PadClearance_set
    __swig_getmethods__["m_PadClearance"] = _pcbnew.PAD_DRAWINFO_m_PadClearance_get
    if _newclass:m_PadClearance = _swig_property(_pcbnew.PAD_DRAWINFO_m_PadClearance_get, _pcbnew.PAD_DRAWINFO_m_PadClearance_set)
    __swig_setmethods__["m_Mask_margin"] = _pcbnew.PAD_DRAWINFO_m_Mask_margin_set
    __swig_getmethods__["m_Mask_margin"] = _pcbnew.PAD_DRAWINFO_m_Mask_margin_get
    if _newclass:m_Mask_margin = _swig_property(_pcbnew.PAD_DRAWINFO_m_Mask_margin_get, _pcbnew.PAD_DRAWINFO_m_Mask_margin_set)
    __swig_setmethods__["m_Display_padnum"] = _pcbnew.PAD_DRAWINFO_m_Display_padnum_set
    __swig_getmethods__["m_Display_padnum"] = _pcbnew.PAD_DRAWINFO_m_Display_padnum_get
    if _newclass:m_Display_padnum = _swig_property(_pcbnew.PAD_DRAWINFO_m_Display_padnum_get, _pcbnew.PAD_DRAWINFO_m_Display_padnum_set)
    __swig_setmethods__["m_Display_netname"] = _pcbnew.PAD_DRAWINFO_m_Display_netname_set
    __swig_getmethods__["m_Display_netname"] = _pcbnew.PAD_DRAWINFO_m_Display_netname_get
    if _newclass:m_Display_netname = _swig_property(_pcbnew.PAD_DRAWINFO_m_Display_netname_get, _pcbnew.PAD_DRAWINFO_m_Display_netname_set)
    __swig_setmethods__["m_ShowPadFilled"] = _pcbnew.PAD_DRAWINFO_m_ShowPadFilled_set
    __swig_getmethods__["m_ShowPadFilled"] = _pcbnew.PAD_DRAWINFO_m_ShowPadFilled_get
    if _newclass:m_ShowPadFilled = _swig_property(_pcbnew.PAD_DRAWINFO_m_ShowPadFilled_get, _pcbnew.PAD_DRAWINFO_m_ShowPadFilled_set)
    __swig_setmethods__["m_ShowNCMark"] = _pcbnew.PAD_DRAWINFO_m_ShowNCMark_set
    __swig_getmethods__["m_ShowNCMark"] = _pcbnew.PAD_DRAWINFO_m_ShowNCMark_get
    if _newclass:m_ShowNCMark = _swig_property(_pcbnew.PAD_DRAWINFO_m_ShowNCMark_get, _pcbnew.PAD_DRAWINFO_m_ShowNCMark_set)
    __swig_setmethods__["m_ShowNotPlatedHole"] = _pcbnew.PAD_DRAWINFO_m_ShowNotPlatedHole_set
    __swig_getmethods__["m_ShowNotPlatedHole"] = _pcbnew.PAD_DRAWINFO_m_ShowNotPlatedHole_get
    if _newclass:m_ShowNotPlatedHole = _swig_property(_pcbnew.PAD_DRAWINFO_m_ShowNotPlatedHole_get, _pcbnew.PAD_DRAWINFO_m_ShowNotPlatedHole_set)
    __swig_setmethods__["m_IsPrinting"] = _pcbnew.PAD_DRAWINFO_m_IsPrinting_set
    __swig_getmethods__["m_IsPrinting"] = _pcbnew.PAD_DRAWINFO_m_IsPrinting_get
    if _newclass:m_IsPrinting = _swig_property(_pcbnew.PAD_DRAWINFO_m_IsPrinting_get, _pcbnew.PAD_DRAWINFO_m_IsPrinting_set)
    __swig_setmethods__["m_Offset"] = _pcbnew.PAD_DRAWINFO_m_Offset_set
    __swig_getmethods__["m_Offset"] = _pcbnew.PAD_DRAWINFO_m_Offset_get
    if _newclass:m_Offset = _swig_property(_pcbnew.PAD_DRAWINFO_m_Offset_get, _pcbnew.PAD_DRAWINFO_m_Offset_set)
    def __init__(self): 
        """__init__(PAD_DRAWINFO self) -> PAD_DRAWINFO"""
        this = _pcbnew.new_PAD_DRAWINFO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_PAD_DRAWINFO
    __del__ = lambda self : None;
PAD_DRAWINFO_swigregister = _pcbnew.PAD_DRAWINFO_swigregister
PAD_DRAWINFO_swigregister(PAD_DRAWINFO)

class D_PAD(BOARD_CONNECTED_ITEM):
    """Proxy of C++ D_PAD class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_CONNECTED_ITEM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, D_PAD, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_CONNECTED_ITEM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, D_PAD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(D_PAD self, MODULE parent) -> D_PAD"""
        this = _pcbnew.new_D_PAD(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(D_PAD self, D_PAD source)"""
        return _pcbnew.D_PAD_Copy(self, *args)

    def Next(self):
        """Next(D_PAD self) -> D_PAD"""
        return _pcbnew.D_PAD_Next(self)

    def GetParent(self):
        """GetParent(D_PAD self) -> MODULE"""
        return _pcbnew.D_PAD_GetParent(self)

    def SetPadName(self, *args):
        """SetPadName(D_PAD self, wxString const & name)"""
        return _pcbnew.D_PAD_SetPadName(self, *args)

    def GetPadName(self):
        """GetPadName(D_PAD self) -> wxString const"""
        return _pcbnew.D_PAD_GetPadName(self)

    def PadNameEqual(self, *args):
        """PadNameEqual(D_PAD self, D_PAD other) -> bool"""
        return _pcbnew.D_PAD_PadNameEqual(self, *args)

    def SetNetname(self, *args):
        """SetNetname(D_PAD self, wxString const & aNetname)"""
        return _pcbnew.D_PAD_SetNetname(self, *args)

    def GetNetname(self):
        """GetNetname(D_PAD self) -> wxString const &"""
        return _pcbnew.D_PAD_GetNetname(self)

    def GetShortNetname(self):
        """GetShortNetname(D_PAD self) -> wxString const &"""
        return _pcbnew.D_PAD_GetShortNetname(self)

    def GetShape(self):
        """GetShape(D_PAD self) -> PAD_SHAPE_T"""
        return _pcbnew.D_PAD_GetShape(self)

    def SetShape(self, *args):
        """SetShape(D_PAD self, PAD_SHAPE_T aShape)"""
        return _pcbnew.D_PAD_SetShape(self, *args)

    def SetPosition(self, *args):
        """SetPosition(D_PAD self, wxPoint aPos)"""
        return _pcbnew.D_PAD_SetPosition(self, *args)

    def GetPosition(self):
        """GetPosition(D_PAD self) -> wxPoint"""
        return _pcbnew.D_PAD_GetPosition(self)

    def SetY(self, *args):
        """SetY(D_PAD self, int y)"""
        return _pcbnew.D_PAD_SetY(self, *args)

    def SetX(self, *args):
        """SetX(D_PAD self, int x)"""
        return _pcbnew.D_PAD_SetX(self, *args)

    def SetPos0(self, *args):
        """SetPos0(D_PAD self, wxPoint aPos)"""
        return _pcbnew.D_PAD_SetPos0(self, *args)

    def GetPos0(self):
        """GetPos0(D_PAD self) -> wxPoint"""
        return _pcbnew.D_PAD_GetPos0(self)

    def SetY0(self, *args):
        """SetY0(D_PAD self, int y)"""
        return _pcbnew.D_PAD_SetY0(self, *args)

    def SetX0(self, *args):
        """SetX0(D_PAD self, int x)"""
        return _pcbnew.D_PAD_SetX0(self, *args)

    def SetSize(self, *args):
        """SetSize(D_PAD self, wxSize aSize)"""
        return _pcbnew.D_PAD_SetSize(self, *args)

    def GetSize(self):
        """GetSize(D_PAD self) -> wxSize"""
        return _pcbnew.D_PAD_GetSize(self)

    def SetDelta(self, *args):
        """SetDelta(D_PAD self, wxSize aSize)"""
        return _pcbnew.D_PAD_SetDelta(self, *args)

    def GetDelta(self):
        """GetDelta(D_PAD self) -> wxSize"""
        return _pcbnew.D_PAD_GetDelta(self)

    def SetDrillSize(self, *args):
        """SetDrillSize(D_PAD self, wxSize aSize)"""
        return _pcbnew.D_PAD_SetDrillSize(self, *args)

    def GetDrillSize(self):
        """GetDrillSize(D_PAD self) -> wxSize"""
        return _pcbnew.D_PAD_GetDrillSize(self)

    def SetOffset(self, *args):
        """SetOffset(D_PAD self, wxPoint aOffset)"""
        return _pcbnew.D_PAD_SetOffset(self, *args)

    def GetOffset(self):
        """GetOffset(D_PAD self) -> wxPoint"""
        return _pcbnew.D_PAD_GetOffset(self)

    def Flip(self, *args):
        """Flip(D_PAD self, int aTranslationY)"""
        return _pcbnew.D_PAD_Flip(self, *args)

    def SetOrientation(self, *args):
        """SetOrientation(D_PAD self, double aAngle)"""
        return _pcbnew.D_PAD_SetOrientation(self, *args)

    def GetOrientation(self):
        """GetOrientation(D_PAD self) -> double"""
        return _pcbnew.D_PAD_GetOrientation(self)

    def SetDrillShape(self, *args):
        """SetDrillShape(D_PAD self, PAD_SHAPE_T aDrillShape)"""
        return _pcbnew.D_PAD_SetDrillShape(self, *args)

    def GetDrillShape(self):
        """GetDrillShape(D_PAD self) -> PAD_SHAPE_T"""
        return _pcbnew.D_PAD_GetDrillShape(self)

    def SetLayerMask(self, *args):
        """SetLayerMask(D_PAD self, int aLayerMask)"""
        return _pcbnew.D_PAD_SetLayerMask(self, *args)

    def GetLayerMask(self):
        """GetLayerMask(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetLayerMask(self)

    def SetAttribute(self, *args):
        """SetAttribute(D_PAD self, PAD_ATTR_T aAttribute)"""
        return _pcbnew.D_PAD_SetAttribute(self, *args)

    def GetAttribute(self):
        """GetAttribute(D_PAD self) -> PAD_ATTR_T"""
        return _pcbnew.D_PAD_GetAttribute(self)

    def SetDieLength(self, *args):
        """SetDieLength(D_PAD self, int aLength)"""
        return _pcbnew.D_PAD_SetDieLength(self, *args)

    def GetDieLength(self):
        """GetDieLength(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetDieLength(self)

    def GetLocalSolderMaskMargin(self):
        """GetLocalSolderMaskMargin(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetLocalSolderMaskMargin(self)

    def SetLocalSolderMaskMargin(self, *args):
        """SetLocalSolderMaskMargin(D_PAD self, int aMargin)"""
        return _pcbnew.D_PAD_SetLocalSolderMaskMargin(self, *args)

    def GetLocalClearance(self):
        """GetLocalClearance(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetLocalClearance(self)

    def SetLocalClearance(self, *args):
        """SetLocalClearance(D_PAD self, int aClearance)"""
        return _pcbnew.D_PAD_SetLocalClearance(self, *args)

    def GetLocalSolderPasteMargin(self):
        """GetLocalSolderPasteMargin(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetLocalSolderPasteMargin(self)

    def SetLocalSolderPasteMargin(self, *args):
        """SetLocalSolderPasteMargin(D_PAD self, int aMargin)"""
        return _pcbnew.D_PAD_SetLocalSolderPasteMargin(self, *args)

    def GetLocalSolderPasteMarginRatio(self):
        """GetLocalSolderPasteMarginRatio(D_PAD self) -> double"""
        return _pcbnew.D_PAD_GetLocalSolderPasteMarginRatio(self)

    def SetLocalSolderPasteMarginRatio(self, *args):
        """SetLocalSolderPasteMarginRatio(D_PAD self, double aRatio)"""
        return _pcbnew.D_PAD_SetLocalSolderPasteMarginRatio(self, *args)

    def TransformShapeWithClearanceToPolygon(self, *args):
        """
        TransformShapeWithClearanceToPolygon(D_PAD self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, int aClearanceValue, 
            int aCircleToSegmentsCount, double aCorrectionFactor)
        """
        return _pcbnew.D_PAD_TransformShapeWithClearanceToPolygon(self, *args)

    def GetClearance(self, aItem=None):
        """
        GetClearance(D_PAD self, BOARD_CONNECTED_ITEM aItem=None) -> int
        GetClearance(D_PAD self) -> int
        """
        return _pcbnew.D_PAD_GetClearance(self, aItem)

    def GetSolderMaskMargin(self):
        """GetSolderMaskMargin(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetSolderMaskMargin(self)

    def GetSolderPasteMargin(self):
        """GetSolderPasteMargin(D_PAD self) -> wxSize"""
        return _pcbnew.D_PAD_GetSolderPasteMargin(self)

    def SetZoneConnection(self, *args):
        """SetZoneConnection(D_PAD self, ZoneConnection aType)"""
        return _pcbnew.D_PAD_SetZoneConnection(self, *args)

    def GetZoneConnection(self):
        """GetZoneConnection(D_PAD self) -> ZoneConnection"""
        return _pcbnew.D_PAD_GetZoneConnection(self)

    def SetThermalWidth(self, *args):
        """SetThermalWidth(D_PAD self, int aWidth)"""
        return _pcbnew.D_PAD_SetThermalWidth(self, *args)

    def GetThermalWidth(self):
        """GetThermalWidth(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetThermalWidth(self)

    def SetThermalGap(self, *args):
        """SetThermalGap(D_PAD self, int aGap)"""
        return _pcbnew.D_PAD_SetThermalGap(self, *args)

    def GetThermalGap(self):
        """GetThermalGap(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetThermalGap(self)

    def Draw(self, *args):
        """
        Draw(D_PAD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)
        Draw(D_PAD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)
        """
        return _pcbnew.D_PAD_Draw(self, *args)

    def Draw3D(self, *args):
        """Draw3D(D_PAD self, EDA_3D_CANVAS * glcanvas)"""
        return _pcbnew.D_PAD_Draw3D(self, *args)

    def DrawShape(self, *args):
        """DrawShape(D_PAD self, EDA_RECT aClipBox, wxDC * aDC, PAD_DRAWINFO aDrawInfo)"""
        return _pcbnew.D_PAD_DrawShape(self, *args)

    def BuildPadPolygon(self, *args):
        """BuildPadPolygon(D_PAD self, wxPoint aCoord, wxSize aInflateValue, int aRotation)"""
        return _pcbnew.D_PAD_BuildPadPolygon(self, *args)

    def BuildSegmentFromOvalShape(self, *args):
        """BuildSegmentFromOvalShape(D_PAD self, wxPoint aSegStart, wxPoint aSegEnd, int aRotation) -> int"""
        return _pcbnew.D_PAD_BuildSegmentFromOvalShape(self, *args)

    def ReturnStringPadName(self, *args):
        """ReturnStringPadName(D_PAD self, wxString & text)"""
        return _pcbnew.D_PAD_ReturnStringPadName(self, *args)

    def GetBoundingRadius(self):
        """GetBoundingRadius(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetBoundingRadius(self)

    def ReturnShapePos(self):
        """ReturnShapePos(D_PAD self) -> wxPoint"""
        return _pcbnew.D_PAD_ReturnShapePos(self)

    def GetSubRatsnest(self):
        """GetSubRatsnest(D_PAD self) -> int"""
        return _pcbnew.D_PAD_GetSubRatsnest(self)

    def SetSubRatsnest(self, *args):
        """SetSubRatsnest(D_PAD self, int aSubRatsnest)"""
        return _pcbnew.D_PAD_SetSubRatsnest(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(D_PAD self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.D_PAD_DisplayInfo(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(D_PAD self, int aLayer) -> bool"""
        return _pcbnew.D_PAD_IsOnLayer(self, *args)

    def HitTest(self, *args):
        """HitTest(D_PAD self, wxPoint aPosition) -> bool"""
        return _pcbnew.D_PAD_HitTest(self, *args)

    def GetClass(self):
        """GetClass(D_PAD self) -> wxString"""
        return _pcbnew.D_PAD_GetClass(self)

    def GetBoundingBox(self):
        """GetBoundingBox(D_PAD self) -> EDA_RECT"""
        return _pcbnew.D_PAD_GetBoundingBox(self)

    def Compare(*args):
        """Compare(D_PAD padref, D_PAD padcmp) -> int"""
        return _pcbnew.D_PAD_Compare(*args)

    if _newclass:Compare = staticmethod(Compare)
    __swig_getmethods__["Compare"] = lambda x: Compare
    def Move(self, *args):
        """Move(D_PAD self, wxPoint aMoveVector)"""
        return _pcbnew.D_PAD_Move(self, *args)

    def GetSelectMenuText(self):
        """GetSelectMenuText(D_PAD self) -> wxString"""
        return _pcbnew.D_PAD_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(D_PAD self) -> BITMAP_DEF"""
        return _pcbnew.D_PAD_GetMenuImage(self)

    def ShowPadShape(self):
        """ShowPadShape(D_PAD self) -> wxString"""
        return _pcbnew.D_PAD_ShowPadShape(self)

    def ShowPadAttr(self):
        """ShowPadAttr(D_PAD self) -> wxString"""
        return _pcbnew.D_PAD_ShowPadAttr(self)

    def AppendConfigs(self, *args):
        """AppendConfigs(D_PAD self, PARAM_CFG_ARRAY * aResult)"""
        return _pcbnew.D_PAD_AppendConfigs(self, *args)

    def Clone(self):
        """Clone(D_PAD self) -> EDA_ITEM"""
        return _pcbnew.D_PAD_Clone(self)

    __swig_destroy__ = _pcbnew.delete_D_PAD
    __del__ = lambda self : None;
D_PAD_swigregister = _pcbnew.D_PAD_swigregister
D_PAD_swigregister(D_PAD)

def D_PAD_Compare(*args):
  """D_PAD_Compare(D_PAD padref, D_PAD padcmp) -> int"""
  return _pcbnew.D_PAD_Compare(*args)

PAD_NONE = _pcbnew.PAD_NONE
PAD_CIRCLE = _pcbnew.PAD_CIRCLE
PAD_ROUND = _pcbnew.PAD_ROUND
PAD_RECT = _pcbnew.PAD_RECT
PAD_OVAL = _pcbnew.PAD_OVAL
PAD_TRAPEZOID = _pcbnew.PAD_TRAPEZOID
PAD_RRECT = _pcbnew.PAD_RRECT
PAD_OCTAGON = _pcbnew.PAD_OCTAGON
PAD_SQUARE = _pcbnew.PAD_SQUARE
PAD_STANDARD = _pcbnew.PAD_STANDARD
PAD_SMD = _pcbnew.PAD_SMD
PAD_CONN = _pcbnew.PAD_CONN
PAD_HOLE_NOT_PLATED = _pcbnew.PAD_HOLE_NOT_PLATED
CH_VISIBLE = _pcbnew.CH_VISIBLE
CH_UNROUTABLE = _pcbnew.CH_UNROUTABLE
CH_ROUTE_REQ = _pcbnew.CH_ROUTE_REQ
CH_ACTIF = _pcbnew.CH_ACTIF
LOCAL_RATSNEST_ITEM = _pcbnew.LOCAL_RATSNEST_ITEM
class RATSNEST_ITEM(_object):
    """Proxy of C++ RATSNEST_ITEM class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RATSNEST_ITEM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RATSNEST_ITEM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Status"] = _pcbnew.RATSNEST_ITEM_m_Status_set
    __swig_getmethods__["m_Status"] = _pcbnew.RATSNEST_ITEM_m_Status_get
    if _newclass:m_Status = _swig_property(_pcbnew.RATSNEST_ITEM_m_Status_get, _pcbnew.RATSNEST_ITEM_m_Status_set)
    __swig_setmethods__["m_PadStart"] = _pcbnew.RATSNEST_ITEM_m_PadStart_set
    __swig_getmethods__["m_PadStart"] = _pcbnew.RATSNEST_ITEM_m_PadStart_get
    if _newclass:m_PadStart = _swig_property(_pcbnew.RATSNEST_ITEM_m_PadStart_get, _pcbnew.RATSNEST_ITEM_m_PadStart_set)
    __swig_setmethods__["m_PadEnd"] = _pcbnew.RATSNEST_ITEM_m_PadEnd_set
    __swig_getmethods__["m_PadEnd"] = _pcbnew.RATSNEST_ITEM_m_PadEnd_get
    if _newclass:m_PadEnd = _swig_property(_pcbnew.RATSNEST_ITEM_m_PadEnd_get, _pcbnew.RATSNEST_ITEM_m_PadEnd_set)
    __swig_setmethods__["m_Lenght"] = _pcbnew.RATSNEST_ITEM_m_Lenght_set
    __swig_getmethods__["m_Lenght"] = _pcbnew.RATSNEST_ITEM_m_Lenght_get
    if _newclass:m_Lenght = _swig_property(_pcbnew.RATSNEST_ITEM_m_Lenght_get, _pcbnew.RATSNEST_ITEM_m_Lenght_set)
    def __init__(self): 
        """__init__(RATSNEST_ITEM self) -> RATSNEST_ITEM"""
        this = _pcbnew.new_RATSNEST_ITEM()
        try: self.this.append(this)
        except: self.this = this
    def GetNet(self):
        """GetNet(RATSNEST_ITEM self) -> int"""
        return _pcbnew.RATSNEST_ITEM_GetNet(self)

    def SetNet(self, *args):
        """SetNet(RATSNEST_ITEM self, int aNetCode)"""
        return _pcbnew.RATSNEST_ITEM_SetNet(self, *args)

    def IsVisible(self):
        """IsVisible(RATSNEST_ITEM self) -> bool"""
        return _pcbnew.RATSNEST_ITEM_IsVisible(self)

    def IsActive(self):
        """IsActive(RATSNEST_ITEM self) -> bool"""
        return _pcbnew.RATSNEST_ITEM_IsActive(self)

    def IsLocal(self):
        """IsLocal(RATSNEST_ITEM self) -> bool"""
        return _pcbnew.RATSNEST_ITEM_IsLocal(self)

    def Draw(self, *args):
        """Draw(RATSNEST_ITEM self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset)"""
        return _pcbnew.RATSNEST_ITEM_Draw(self, *args)

    __swig_destroy__ = _pcbnew.delete_RATSNEST_ITEM
    __del__ = lambda self : None;
RATSNEST_ITEM_swigregister = _pcbnew.RATSNEST_ITEM_swigregister
RATSNEST_ITEM_swigregister(RATSNEST_ITEM)

class NETINFO_LIST(_object):
    """Proxy of C++ NETINFO_LIST class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NETINFO_LIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NETINFO_LIST, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(NETINFO_LIST self, BOARD aParent) -> NETINFO_LIST"""
        this = _pcbnew.new_NETINFO_LIST(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_NETINFO_LIST
    __del__ = lambda self : None;
    def GetNetItem(self, *args):
        """GetNetItem(NETINFO_LIST self, int aNetcode) -> NETINFO_ITEM"""
        return _pcbnew.NETINFO_LIST_GetNetItem(self, *args)

    def GetNetCount(self):
        """GetNetCount(NETINFO_LIST self) -> unsigned int"""
        return _pcbnew.NETINFO_LIST_GetNetCount(self)

    def AppendNet(self, *args):
        """AppendNet(NETINFO_LIST self, NETINFO_ITEM aNewElement)"""
        return _pcbnew.NETINFO_LIST_AppendNet(self, *args)

    def GetPadCount(self):
        """GetPadCount(NETINFO_LIST self) -> unsigned int"""
        return _pcbnew.NETINFO_LIST_GetPadCount(self)

    def GetPad(self, *args):
        """GetPad(NETINFO_LIST self, unsigned int aIdx) -> D_PAD"""
        return _pcbnew.NETINFO_LIST_GetPad(self, *args)

NETINFO_LIST_swigregister = _pcbnew.NETINFO_LIST_swigregister
NETINFO_LIST_swigregister(NETINFO_LIST)

class NETINFO_ITEM(_object):
    """Proxy of C++ NETINFO_ITEM class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NETINFO_ITEM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NETINFO_ITEM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_NbNodes"] = _pcbnew.NETINFO_ITEM_m_NbNodes_set
    __swig_getmethods__["m_NbNodes"] = _pcbnew.NETINFO_ITEM_m_NbNodes_get
    if _newclass:m_NbNodes = _swig_property(_pcbnew.NETINFO_ITEM_m_NbNodes_get, _pcbnew.NETINFO_ITEM_m_NbNodes_set)
    __swig_setmethods__["m_NbLink"] = _pcbnew.NETINFO_ITEM_m_NbLink_set
    __swig_getmethods__["m_NbLink"] = _pcbnew.NETINFO_ITEM_m_NbLink_get
    if _newclass:m_NbLink = _swig_property(_pcbnew.NETINFO_ITEM_m_NbLink_get, _pcbnew.NETINFO_ITEM_m_NbLink_set)
    __swig_setmethods__["m_NbNoconn"] = _pcbnew.NETINFO_ITEM_m_NbNoconn_set
    __swig_getmethods__["m_NbNoconn"] = _pcbnew.NETINFO_ITEM_m_NbNoconn_get
    if _newclass:m_NbNoconn = _swig_property(_pcbnew.NETINFO_ITEM_m_NbNoconn_get, _pcbnew.NETINFO_ITEM_m_NbNoconn_set)
    __swig_setmethods__["m_Flag"] = _pcbnew.NETINFO_ITEM_m_Flag_set
    __swig_getmethods__["m_Flag"] = _pcbnew.NETINFO_ITEM_m_Flag_get
    if _newclass:m_Flag = _swig_property(_pcbnew.NETINFO_ITEM_m_Flag_get, _pcbnew.NETINFO_ITEM_m_Flag_set)
    __swig_setmethods__["m_PadInNetList"] = _pcbnew.NETINFO_ITEM_m_PadInNetList_set
    __swig_getmethods__["m_PadInNetList"] = _pcbnew.NETINFO_ITEM_m_PadInNetList_get
    if _newclass:m_PadInNetList = _swig_property(_pcbnew.NETINFO_ITEM_m_PadInNetList_get, _pcbnew.NETINFO_ITEM_m_PadInNetList_set)
    __swig_setmethods__["m_RatsnestStartIdx"] = _pcbnew.NETINFO_ITEM_m_RatsnestStartIdx_set
    __swig_getmethods__["m_RatsnestStartIdx"] = _pcbnew.NETINFO_ITEM_m_RatsnestStartIdx_get
    if _newclass:m_RatsnestStartIdx = _swig_property(_pcbnew.NETINFO_ITEM_m_RatsnestStartIdx_get, _pcbnew.NETINFO_ITEM_m_RatsnestStartIdx_set)
    __swig_setmethods__["m_RatsnestEndIdx"] = _pcbnew.NETINFO_ITEM_m_RatsnestEndIdx_set
    __swig_getmethods__["m_RatsnestEndIdx"] = _pcbnew.NETINFO_ITEM_m_RatsnestEndIdx_get
    if _newclass:m_RatsnestEndIdx = _swig_property(_pcbnew.NETINFO_ITEM_m_RatsnestEndIdx_get, _pcbnew.NETINFO_ITEM_m_RatsnestEndIdx_set)
    def __init__(self, *args): 
        """
        __init__(NETINFO_ITEM self, BOARD_ITEM aParent, wxString const & aNetName=wxEmptyString, int aNetCode=0) -> NETINFO_ITEM
        __init__(NETINFO_ITEM self, BOARD_ITEM aParent, wxString const & aNetName=wxEmptyString) -> NETINFO_ITEM
        __init__(NETINFO_ITEM self, BOARD_ITEM aParent) -> NETINFO_ITEM
        """
        this = _pcbnew.new_NETINFO_ITEM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_NETINFO_ITEM
    __del__ = lambda self : None;
    def SetClass(self, *args):
        """SetClass(NETINFO_ITEM self, NETCLASS aNetClass)"""
        return _pcbnew.NETINFO_ITEM_SetClass(self, *args)

    def GetNetClass(self):
        """GetNetClass(NETINFO_ITEM self) -> NETCLASS"""
        return _pcbnew.NETINFO_ITEM_GetNetClass(self)

    def GetClassName(self):
        """GetClassName(NETINFO_ITEM self) -> wxString const &"""
        return _pcbnew.NETINFO_ITEM_GetClassName(self)

    def GetTrackWidth(self):
        """GetTrackWidth(NETINFO_ITEM self) -> int"""
        return _pcbnew.NETINFO_ITEM_GetTrackWidth(self)

    def GetViaSize(self):
        """GetViaSize(NETINFO_ITEM self) -> int"""
        return _pcbnew.NETINFO_ITEM_GetViaSize(self)

    def GetMicroViaSize(self):
        """GetMicroViaSize(NETINFO_ITEM self) -> int"""
        return _pcbnew.NETINFO_ITEM_GetMicroViaSize(self)

    def GetViaDrillSize(self):
        """GetViaDrillSize(NETINFO_ITEM self) -> int"""
        return _pcbnew.NETINFO_ITEM_GetViaDrillSize(self)

    def GetMicroViaDrillSize(self):
        """GetMicroViaDrillSize(NETINFO_ITEM self) -> int"""
        return _pcbnew.NETINFO_ITEM_GetMicroViaDrillSize(self)

    def GetClearance(self, *args):
        """GetClearance(NETINFO_ITEM self, BOARD_ITEM aBoardItem) -> int"""
        return _pcbnew.NETINFO_ITEM_GetClearance(self, *args)

    def Draw(self, *args):
        """Draw(NETINFO_ITEM self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset)"""
        return _pcbnew.NETINFO_ITEM_Draw(self, *args)

    def GetNet(self):
        """GetNet(NETINFO_ITEM self) -> int"""
        return _pcbnew.NETINFO_ITEM_GetNet(self)

    def SetNet(self, *args):
        """SetNet(NETINFO_ITEM self, int aNetCode)"""
        return _pcbnew.NETINFO_ITEM_SetNet(self, *args)

    def GetNodesCount(self):
        """GetNodesCount(NETINFO_ITEM self) -> int"""
        return _pcbnew.NETINFO_ITEM_GetNodesCount(self)

    def GetNetname(self):
        """GetNetname(NETINFO_ITEM self) -> wxString"""
        return _pcbnew.NETINFO_ITEM_GetNetname(self)

    def GetShortNetname(self):
        """GetShortNetname(NETINFO_ITEM self) -> wxString"""
        return _pcbnew.NETINFO_ITEM_GetShortNetname(self)

    def SetNetname(self, *args):
        """SetNetname(NETINFO_ITEM self, wxString const & aNetname)"""
        return _pcbnew.NETINFO_ITEM_SetNetname(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(NETINFO_ITEM self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.NETINFO_ITEM_DisplayInfo(self, *args)

NETINFO_ITEM_swigregister = _pcbnew.NETINFO_ITEM_swigregister
NETINFO_ITEM_swigregister(NETINFO_ITEM)

START_ON_PAD = _pcbnew.START_ON_PAD
END_ON_PAD = _pcbnew.END_ON_PAD
START_ON_TRACK = _pcbnew.START_ON_TRACK
END_ON_TRACK = _pcbnew.END_ON_TRACK
LISTE_PAD_OK = _pcbnew.LISTE_PAD_OK
LISTE_RATSNEST_ITEM_OK = _pcbnew.LISTE_RATSNEST_ITEM_OK
RATSNEST_ITEM_LOCAL_OK = _pcbnew.RATSNEST_ITEM_LOCAL_OK
CONNEXION_OK = _pcbnew.CONNEXION_OK
NET_CODES_OK = _pcbnew.NET_CODES_OK
DO_NOT_SHOW_GENERAL_RASTNEST = _pcbnew.DO_NOT_SHOW_GENERAL_RASTNEST
class TEXTE_PCB(BOARD_ITEM,EDA_TEXT):
    """Proxy of C++ TEXTE_PCB class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_ITEM,EDA_TEXT]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TEXTE_PCB, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_ITEM,EDA_TEXT]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TEXTE_PCB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(TEXTE_PCB self, BOARD_ITEM parent) -> TEXTE_PCB"""
        this = _pcbnew.new_TEXTE_PCB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_TEXTE_PCB
    __del__ = lambda self : None;
    def GetPosition(self):
        """GetPosition(TEXTE_PCB self) -> wxPoint"""
        return _pcbnew.TEXTE_PCB_GetPosition(self)

    def SetPosition(self, *args):
        """SetPosition(TEXTE_PCB self, wxPoint aPos)"""
        return _pcbnew.TEXTE_PCB_SetPosition(self, *args)

    def Move(self, *args):
        """Move(TEXTE_PCB self, wxPoint aMoveVector)"""
        return _pcbnew.TEXTE_PCB_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(TEXTE_PCB self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.TEXTE_PCB_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(TEXTE_PCB self, wxPoint aCentre)"""
        return _pcbnew.TEXTE_PCB_Flip(self, *args)

    def Copy(self, *args):
        """Copy(TEXTE_PCB self, TEXTE_PCB source)"""
        return _pcbnew.TEXTE_PCB_Copy(self, *args)

    def Draw(self, *args):
        """
        Draw(TEXTE_PCB self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)
        Draw(TEXTE_PCB self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.TEXTE_PCB_Draw(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(TEXTE_PCB self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.TEXTE_PCB_DisplayInfo(self, *args)

    def HitTest(self, *args):
        """
        HitTest(TEXTE_PCB self, wxPoint aPosition) -> bool
        HitTest(TEXTE_PCB self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.TEXTE_PCB_HitTest(self, *args)

    def GetClass(self):
        """GetClass(TEXTE_PCB self) -> wxString"""
        return _pcbnew.TEXTE_PCB_GetClass(self)

    def TransformShapeWithClearanceToPolygon(self, *args):
        """
        TransformShapeWithClearanceToPolygon(TEXTE_PCB self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, int aClearanceValue, 
            int aCircleToSegmentsCount, double aCorrectionFactor)
        """
        return _pcbnew.TEXTE_PCB_TransformShapeWithClearanceToPolygon(self, *args)

    def GetSelectMenuText(self):
        """GetSelectMenuText(TEXTE_PCB self) -> wxString"""
        return _pcbnew.TEXTE_PCB_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(TEXTE_PCB self) -> BITMAP_DEF"""
        return _pcbnew.TEXTE_PCB_GetMenuImage(self)

    def GetBoundingBox(self):
        """GetBoundingBox(TEXTE_PCB self) -> EDA_RECT"""
        return _pcbnew.TEXTE_PCB_GetBoundingBox(self)

    def Clone(self):
        """Clone(TEXTE_PCB self) -> EDA_ITEM"""
        return _pcbnew.TEXTE_PCB_Clone(self)

TEXTE_PCB_swigregister = _pcbnew.TEXTE_PCB_swigregister
TEXTE_PCB_swigregister(TEXTE_PCB)

class DIMENSION(BOARD_ITEM):
    """Proxy of C++ DIMENSION class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIMENSION, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DIMENSION, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Width"] = _pcbnew.DIMENSION_m_Width_set
    __swig_getmethods__["m_Width"] = _pcbnew.DIMENSION_m_Width_get
    if _newclass:m_Width = _swig_property(_pcbnew.DIMENSION_m_Width_get, _pcbnew.DIMENSION_m_Width_set)
    __swig_setmethods__["m_Pos"] = _pcbnew.DIMENSION_m_Pos_set
    __swig_getmethods__["m_Pos"] = _pcbnew.DIMENSION_m_Pos_get
    if _newclass:m_Pos = _swig_property(_pcbnew.DIMENSION_m_Pos_get, _pcbnew.DIMENSION_m_Pos_set)
    __swig_setmethods__["m_Shape"] = _pcbnew.DIMENSION_m_Shape_set
    __swig_getmethods__["m_Shape"] = _pcbnew.DIMENSION_m_Shape_get
    if _newclass:m_Shape = _swig_property(_pcbnew.DIMENSION_m_Shape_get, _pcbnew.DIMENSION_m_Shape_set)
    __swig_setmethods__["m_Unit"] = _pcbnew.DIMENSION_m_Unit_set
    __swig_getmethods__["m_Unit"] = _pcbnew.DIMENSION_m_Unit_get
    if _newclass:m_Unit = _swig_property(_pcbnew.DIMENSION_m_Unit_get, _pcbnew.DIMENSION_m_Unit_set)
    __swig_setmethods__["m_Value"] = _pcbnew.DIMENSION_m_Value_set
    __swig_getmethods__["m_Value"] = _pcbnew.DIMENSION_m_Value_get
    if _newclass:m_Value = _swig_property(_pcbnew.DIMENSION_m_Value_get, _pcbnew.DIMENSION_m_Value_set)
    __swig_setmethods__["m_Text"] = _pcbnew.DIMENSION_m_Text_set
    __swig_getmethods__["m_Text"] = _pcbnew.DIMENSION_m_Text_get
    if _newclass:m_Text = _swig_property(_pcbnew.DIMENSION_m_Text_get, _pcbnew.DIMENSION_m_Text_set)
    __swig_setmethods__["m_crossBarOx"] = _pcbnew.DIMENSION_m_crossBarOx_set
    __swig_getmethods__["m_crossBarOx"] = _pcbnew.DIMENSION_m_crossBarOx_get
    if _newclass:m_crossBarOx = _swig_property(_pcbnew.DIMENSION_m_crossBarOx_get, _pcbnew.DIMENSION_m_crossBarOx_set)
    __swig_setmethods__["m_crossBarOy"] = _pcbnew.DIMENSION_m_crossBarOy_set
    __swig_getmethods__["m_crossBarOy"] = _pcbnew.DIMENSION_m_crossBarOy_get
    if _newclass:m_crossBarOy = _swig_property(_pcbnew.DIMENSION_m_crossBarOy_get, _pcbnew.DIMENSION_m_crossBarOy_set)
    __swig_setmethods__["m_crossBarFx"] = _pcbnew.DIMENSION_m_crossBarFx_set
    __swig_getmethods__["m_crossBarFx"] = _pcbnew.DIMENSION_m_crossBarFx_get
    if _newclass:m_crossBarFx = _swig_property(_pcbnew.DIMENSION_m_crossBarFx_get, _pcbnew.DIMENSION_m_crossBarFx_set)
    __swig_setmethods__["m_crossBarFy"] = _pcbnew.DIMENSION_m_crossBarFy_set
    __swig_getmethods__["m_crossBarFy"] = _pcbnew.DIMENSION_m_crossBarFy_get
    if _newclass:m_crossBarFy = _swig_property(_pcbnew.DIMENSION_m_crossBarFy_get, _pcbnew.DIMENSION_m_crossBarFy_set)
    __swig_setmethods__["m_featureLineGOx"] = _pcbnew.DIMENSION_m_featureLineGOx_set
    __swig_getmethods__["m_featureLineGOx"] = _pcbnew.DIMENSION_m_featureLineGOx_get
    if _newclass:m_featureLineGOx = _swig_property(_pcbnew.DIMENSION_m_featureLineGOx_get, _pcbnew.DIMENSION_m_featureLineGOx_set)
    __swig_setmethods__["m_featureLineGOy"] = _pcbnew.DIMENSION_m_featureLineGOy_set
    __swig_getmethods__["m_featureLineGOy"] = _pcbnew.DIMENSION_m_featureLineGOy_get
    if _newclass:m_featureLineGOy = _swig_property(_pcbnew.DIMENSION_m_featureLineGOy_get, _pcbnew.DIMENSION_m_featureLineGOy_set)
    __swig_setmethods__["m_featureLineGFx"] = _pcbnew.DIMENSION_m_featureLineGFx_set
    __swig_getmethods__["m_featureLineGFx"] = _pcbnew.DIMENSION_m_featureLineGFx_get
    if _newclass:m_featureLineGFx = _swig_property(_pcbnew.DIMENSION_m_featureLineGFx_get, _pcbnew.DIMENSION_m_featureLineGFx_set)
    __swig_setmethods__["m_featureLineGFy"] = _pcbnew.DIMENSION_m_featureLineGFy_set
    __swig_getmethods__["m_featureLineGFy"] = _pcbnew.DIMENSION_m_featureLineGFy_get
    if _newclass:m_featureLineGFy = _swig_property(_pcbnew.DIMENSION_m_featureLineGFy_get, _pcbnew.DIMENSION_m_featureLineGFy_set)
    __swig_setmethods__["m_featureLineDOx"] = _pcbnew.DIMENSION_m_featureLineDOx_set
    __swig_getmethods__["m_featureLineDOx"] = _pcbnew.DIMENSION_m_featureLineDOx_get
    if _newclass:m_featureLineDOx = _swig_property(_pcbnew.DIMENSION_m_featureLineDOx_get, _pcbnew.DIMENSION_m_featureLineDOx_set)
    __swig_setmethods__["m_featureLineDOy"] = _pcbnew.DIMENSION_m_featureLineDOy_set
    __swig_getmethods__["m_featureLineDOy"] = _pcbnew.DIMENSION_m_featureLineDOy_get
    if _newclass:m_featureLineDOy = _swig_property(_pcbnew.DIMENSION_m_featureLineDOy_get, _pcbnew.DIMENSION_m_featureLineDOy_set)
    __swig_setmethods__["m_featureLineDFx"] = _pcbnew.DIMENSION_m_featureLineDFx_set
    __swig_getmethods__["m_featureLineDFx"] = _pcbnew.DIMENSION_m_featureLineDFx_get
    if _newclass:m_featureLineDFx = _swig_property(_pcbnew.DIMENSION_m_featureLineDFx_get, _pcbnew.DIMENSION_m_featureLineDFx_set)
    __swig_setmethods__["m_featureLineDFy"] = _pcbnew.DIMENSION_m_featureLineDFy_set
    __swig_getmethods__["m_featureLineDFy"] = _pcbnew.DIMENSION_m_featureLineDFy_get
    if _newclass:m_featureLineDFy = _swig_property(_pcbnew.DIMENSION_m_featureLineDFy_get, _pcbnew.DIMENSION_m_featureLineDFy_set)
    __swig_setmethods__["m_arrowD1Ox"] = _pcbnew.DIMENSION_m_arrowD1Ox_set
    __swig_getmethods__["m_arrowD1Ox"] = _pcbnew.DIMENSION_m_arrowD1Ox_get
    if _newclass:m_arrowD1Ox = _swig_property(_pcbnew.DIMENSION_m_arrowD1Ox_get, _pcbnew.DIMENSION_m_arrowD1Ox_set)
    __swig_setmethods__["m_arrowD1Oy"] = _pcbnew.DIMENSION_m_arrowD1Oy_set
    __swig_getmethods__["m_arrowD1Oy"] = _pcbnew.DIMENSION_m_arrowD1Oy_get
    if _newclass:m_arrowD1Oy = _swig_property(_pcbnew.DIMENSION_m_arrowD1Oy_get, _pcbnew.DIMENSION_m_arrowD1Oy_set)
    __swig_setmethods__["m_arrowD1Fx"] = _pcbnew.DIMENSION_m_arrowD1Fx_set
    __swig_getmethods__["m_arrowD1Fx"] = _pcbnew.DIMENSION_m_arrowD1Fx_get
    if _newclass:m_arrowD1Fx = _swig_property(_pcbnew.DIMENSION_m_arrowD1Fx_get, _pcbnew.DIMENSION_m_arrowD1Fx_set)
    __swig_setmethods__["m_arrowD1Fy"] = _pcbnew.DIMENSION_m_arrowD1Fy_set
    __swig_getmethods__["m_arrowD1Fy"] = _pcbnew.DIMENSION_m_arrowD1Fy_get
    if _newclass:m_arrowD1Fy = _swig_property(_pcbnew.DIMENSION_m_arrowD1Fy_get, _pcbnew.DIMENSION_m_arrowD1Fy_set)
    __swig_setmethods__["m_arrowD2Ox"] = _pcbnew.DIMENSION_m_arrowD2Ox_set
    __swig_getmethods__["m_arrowD2Ox"] = _pcbnew.DIMENSION_m_arrowD2Ox_get
    if _newclass:m_arrowD2Ox = _swig_property(_pcbnew.DIMENSION_m_arrowD2Ox_get, _pcbnew.DIMENSION_m_arrowD2Ox_set)
    __swig_setmethods__["m_arrowD2Oy"] = _pcbnew.DIMENSION_m_arrowD2Oy_set
    __swig_getmethods__["m_arrowD2Oy"] = _pcbnew.DIMENSION_m_arrowD2Oy_get
    if _newclass:m_arrowD2Oy = _swig_property(_pcbnew.DIMENSION_m_arrowD2Oy_get, _pcbnew.DIMENSION_m_arrowD2Oy_set)
    __swig_setmethods__["m_arrowD2Fx"] = _pcbnew.DIMENSION_m_arrowD2Fx_set
    __swig_getmethods__["m_arrowD2Fx"] = _pcbnew.DIMENSION_m_arrowD2Fx_get
    if _newclass:m_arrowD2Fx = _swig_property(_pcbnew.DIMENSION_m_arrowD2Fx_get, _pcbnew.DIMENSION_m_arrowD2Fx_set)
    __swig_setmethods__["m_arrowD2Fy"] = _pcbnew.DIMENSION_m_arrowD2Fy_set
    __swig_getmethods__["m_arrowD2Fy"] = _pcbnew.DIMENSION_m_arrowD2Fy_get
    if _newclass:m_arrowD2Fy = _swig_property(_pcbnew.DIMENSION_m_arrowD2Fy_get, _pcbnew.DIMENSION_m_arrowD2Fy_set)
    __swig_setmethods__["m_arrowG1Ox"] = _pcbnew.DIMENSION_m_arrowG1Ox_set
    __swig_getmethods__["m_arrowG1Ox"] = _pcbnew.DIMENSION_m_arrowG1Ox_get
    if _newclass:m_arrowG1Ox = _swig_property(_pcbnew.DIMENSION_m_arrowG1Ox_get, _pcbnew.DIMENSION_m_arrowG1Ox_set)
    __swig_setmethods__["m_arrowG1Oy"] = _pcbnew.DIMENSION_m_arrowG1Oy_set
    __swig_getmethods__["m_arrowG1Oy"] = _pcbnew.DIMENSION_m_arrowG1Oy_get
    if _newclass:m_arrowG1Oy = _swig_property(_pcbnew.DIMENSION_m_arrowG1Oy_get, _pcbnew.DIMENSION_m_arrowG1Oy_set)
    __swig_setmethods__["m_arrowG1Fx"] = _pcbnew.DIMENSION_m_arrowG1Fx_set
    __swig_getmethods__["m_arrowG1Fx"] = _pcbnew.DIMENSION_m_arrowG1Fx_get
    if _newclass:m_arrowG1Fx = _swig_property(_pcbnew.DIMENSION_m_arrowG1Fx_get, _pcbnew.DIMENSION_m_arrowG1Fx_set)
    __swig_setmethods__["m_arrowG1Fy"] = _pcbnew.DIMENSION_m_arrowG1Fy_set
    __swig_getmethods__["m_arrowG1Fy"] = _pcbnew.DIMENSION_m_arrowG1Fy_get
    if _newclass:m_arrowG1Fy = _swig_property(_pcbnew.DIMENSION_m_arrowG1Fy_get, _pcbnew.DIMENSION_m_arrowG1Fy_set)
    __swig_setmethods__["m_arrowG2Ox"] = _pcbnew.DIMENSION_m_arrowG2Ox_set
    __swig_getmethods__["m_arrowG2Ox"] = _pcbnew.DIMENSION_m_arrowG2Ox_get
    if _newclass:m_arrowG2Ox = _swig_property(_pcbnew.DIMENSION_m_arrowG2Ox_get, _pcbnew.DIMENSION_m_arrowG2Ox_set)
    __swig_setmethods__["m_arrowG2Oy"] = _pcbnew.DIMENSION_m_arrowG2Oy_set
    __swig_getmethods__["m_arrowG2Oy"] = _pcbnew.DIMENSION_m_arrowG2Oy_get
    if _newclass:m_arrowG2Oy = _swig_property(_pcbnew.DIMENSION_m_arrowG2Oy_get, _pcbnew.DIMENSION_m_arrowG2Oy_set)
    __swig_setmethods__["m_arrowG2Fx"] = _pcbnew.DIMENSION_m_arrowG2Fx_set
    __swig_getmethods__["m_arrowG2Fx"] = _pcbnew.DIMENSION_m_arrowG2Fx_get
    if _newclass:m_arrowG2Fx = _swig_property(_pcbnew.DIMENSION_m_arrowG2Fx_get, _pcbnew.DIMENSION_m_arrowG2Fx_set)
    __swig_setmethods__["m_arrowG2Fy"] = _pcbnew.DIMENSION_m_arrowG2Fy_set
    __swig_getmethods__["m_arrowG2Fy"] = _pcbnew.DIMENSION_m_arrowG2Fy_get
    if _newclass:m_arrowG2Fy = _swig_property(_pcbnew.DIMENSION_m_arrowG2Fy_get, _pcbnew.DIMENSION_m_arrowG2Fy_set)
    def __init__(self, *args): 
        """__init__(DIMENSION self, BOARD_ITEM aParent) -> DIMENSION"""
        this = _pcbnew.new_DIMENSION(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_DIMENSION
    __del__ = lambda self : None;
    def GetPosition(self):
        """GetPosition(DIMENSION self) -> wxPoint"""
        return _pcbnew.DIMENSION_GetPosition(self)

    def SetPosition(self, *args):
        """SetPosition(DIMENSION self, wxPoint aPos)"""
        return _pcbnew.DIMENSION_SetPosition(self, *args)

    def SetTextSize(self, *args):
        """SetTextSize(DIMENSION self, wxSize aTextSize)"""
        return _pcbnew.DIMENSION_SetTextSize(self, *args)

    def SetLayer(self, *args):
        """SetLayer(DIMENSION self, int aLayer)"""
        return _pcbnew.DIMENSION_SetLayer(self, *args)

    def SetShape(self, *args):
        """SetShape(DIMENSION self, int aShape)"""
        return _pcbnew.DIMENSION_SetShape(self, *args)

    def GetShape(self):
        """GetShape(DIMENSION self) -> int"""
        return _pcbnew.DIMENSION_GetShape(self)

    def GetWidth(self):
        """GetWidth(DIMENSION self) -> int"""
        return _pcbnew.DIMENSION_GetWidth(self)

    def SetWidth(self, *args):
        """SetWidth(DIMENSION self, int aWidth)"""
        return _pcbnew.DIMENSION_SetWidth(self, *args)

    def AdjustDimensionDetails(self, aDoNotChangeText=False):
        """
        AdjustDimensionDetails(DIMENSION self, bool aDoNotChangeText=False)
        AdjustDimensionDetails(DIMENSION self)
        """
        return _pcbnew.DIMENSION_AdjustDimensionDetails(self, aDoNotChangeText)

    def SetText(self, *args):
        """SetText(DIMENSION self, wxString const & NewText)"""
        return _pcbnew.DIMENSION_SetText(self, *args)

    def GetText(self):
        """GetText(DIMENSION self) -> wxString const"""
        return _pcbnew.DIMENSION_GetText(self)

    def Copy(self, *args):
        """Copy(DIMENSION self, DIMENSION source)"""
        return _pcbnew.DIMENSION_Copy(self, *args)

    def Draw(self, *args):
        """
        Draw(DIMENSION self, EDA_DRAW_PANEL * panel, wxDC * DC, int aColorMode, wxPoint offset=)
        Draw(DIMENSION self, EDA_DRAW_PANEL * panel, wxDC * DC, int aColorMode)
        """
        return _pcbnew.DIMENSION_Draw(self, *args)

    def Move(self, *args):
        """Move(DIMENSION self, wxPoint offset)"""
        return _pcbnew.DIMENSION_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(DIMENSION self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.DIMENSION_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(DIMENSION self, wxPoint aCentre)"""
        return _pcbnew.DIMENSION_Flip(self, *args)

    def Mirror(self, *args):
        """Mirror(DIMENSION self, wxPoint axis_pos)"""
        return _pcbnew.DIMENSION_Mirror(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(DIMENSION self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.DIMENSION_DisplayInfo(self, *args)

    def HitTest(self, *args):
        """
        HitTest(DIMENSION self, wxPoint aPosition) -> bool
        HitTest(DIMENSION self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.DIMENSION_HitTest(self, *args)

    def GetClass(self):
        """GetClass(DIMENSION self) -> wxString"""
        return _pcbnew.DIMENSION_GetClass(self)

    def GetBoundingBox(self):
        """GetBoundingBox(DIMENSION self) -> EDA_RECT"""
        return _pcbnew.DIMENSION_GetBoundingBox(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(DIMENSION self) -> wxString"""
        return _pcbnew.DIMENSION_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(DIMENSION self) -> BITMAP_DEF"""
        return _pcbnew.DIMENSION_GetMenuImage(self)

    def Clone(self):
        """Clone(DIMENSION self) -> EDA_ITEM"""
        return _pcbnew.DIMENSION_Clone(self)

DIMENSION_swigregister = _pcbnew.DIMENSION_swigregister
DIMENSION_swigregister(DIMENSION)

class DRAWSEGMENT(BOARD_ITEM):
    """Proxy of C++ DRAWSEGMENT class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRAWSEGMENT, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_ITEM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DRAWSEGMENT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DRAWSEGMENT self, BOARD_ITEM aParent=None, KICAD_T idtype=PCB_LINE_T) -> DRAWSEGMENT
        __init__(DRAWSEGMENT self, BOARD_ITEM aParent=None) -> DRAWSEGMENT
        __init__(DRAWSEGMENT self) -> DRAWSEGMENT
        """
        this = _pcbnew.new_DRAWSEGMENT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_DRAWSEGMENT
    __del__ = lambda self : None;
    def Next(self):
        """Next(DRAWSEGMENT self) -> DRAWSEGMENT"""
        return _pcbnew.DRAWSEGMENT_Next(self)

    def Back(self):
        """Back(DRAWSEGMENT self) -> DRAWSEGMENT"""
        return _pcbnew.DRAWSEGMENT_Back(self)

    def SetWidth(self, *args):
        """SetWidth(DRAWSEGMENT self, int aWidth)"""
        return _pcbnew.DRAWSEGMENT_SetWidth(self, *args)

    def GetWidth(self):
        """GetWidth(DRAWSEGMENT self) -> int"""
        return _pcbnew.DRAWSEGMENT_GetWidth(self)

    def SetAngle(self, *args):
        """SetAngle(DRAWSEGMENT self, double aAngle)"""
        return _pcbnew.DRAWSEGMENT_SetAngle(self, *args)

    def GetAngle(self):
        """GetAngle(DRAWSEGMENT self) -> double"""
        return _pcbnew.DRAWSEGMENT_GetAngle(self)

    def SetType(self, *args):
        """SetType(DRAWSEGMENT self, int aType)"""
        return _pcbnew.DRAWSEGMENT_SetType(self, *args)

    def GetType(self):
        """GetType(DRAWSEGMENT self) -> int"""
        return _pcbnew.DRAWSEGMENT_GetType(self)

    def SetShape(self, *args):
        """SetShape(DRAWSEGMENT self, STROKE_T aShape)"""
        return _pcbnew.DRAWSEGMENT_SetShape(self, *args)

    def GetShape(self):
        """GetShape(DRAWSEGMENT self) -> STROKE_T"""
        return _pcbnew.DRAWSEGMENT_GetShape(self)

    def SetBezControl1(self, *args):
        """SetBezControl1(DRAWSEGMENT self, wxPoint aPoint)"""
        return _pcbnew.DRAWSEGMENT_SetBezControl1(self, *args)

    def GetBezControl1(self):
        """GetBezControl1(DRAWSEGMENT self) -> wxPoint"""
        return _pcbnew.DRAWSEGMENT_GetBezControl1(self)

    def SetBezControl2(self, *args):
        """SetBezControl2(DRAWSEGMENT self, wxPoint aPoint)"""
        return _pcbnew.DRAWSEGMENT_SetBezControl2(self, *args)

    def GetBezControl2(self):
        """GetBezControl2(DRAWSEGMENT self) -> wxPoint"""
        return _pcbnew.DRAWSEGMENT_GetBezControl2(self)

    def SetPosition(self, *args):
        """SetPosition(DRAWSEGMENT self, wxPoint aPos)"""
        return _pcbnew.DRAWSEGMENT_SetPosition(self, *args)

    def GetPosition(self):
        """GetPosition(DRAWSEGMENT self) -> wxPoint"""
        return _pcbnew.DRAWSEGMENT_GetPosition(self)

    def GetStart(self):
        """GetStart(DRAWSEGMENT self) -> wxPoint"""
        return _pcbnew.DRAWSEGMENT_GetStart(self)

    def SetStart(self, *args):
        """SetStart(DRAWSEGMENT self, wxPoint aStart)"""
        return _pcbnew.DRAWSEGMENT_SetStart(self, *args)

    def SetStartY(self, *args):
        """SetStartY(DRAWSEGMENT self, int y)"""
        return _pcbnew.DRAWSEGMENT_SetStartY(self, *args)

    def SetStartX(self, *args):
        """SetStartX(DRAWSEGMENT self, int x)"""
        return _pcbnew.DRAWSEGMENT_SetStartX(self, *args)

    def GetEnd(self):
        """GetEnd(DRAWSEGMENT self) -> wxPoint"""
        return _pcbnew.DRAWSEGMENT_GetEnd(self)

    def SetEnd(self, *args):
        """SetEnd(DRAWSEGMENT self, wxPoint aEnd)"""
        return _pcbnew.DRAWSEGMENT_SetEnd(self, *args)

    def SetEndY(self, *args):
        """SetEndY(DRAWSEGMENT self, int y)"""
        return _pcbnew.DRAWSEGMENT_SetEndY(self, *args)

    def SetEndX(self, *args):
        """SetEndX(DRAWSEGMENT self, int x)"""
        return _pcbnew.DRAWSEGMENT_SetEndX(self, *args)

    def GetCenter(self):
        """GetCenter(DRAWSEGMENT self) -> wxPoint"""
        return _pcbnew.DRAWSEGMENT_GetCenter(self)

    def GetArcStart(self):
        """GetArcStart(DRAWSEGMENT self) -> wxPoint"""
        return _pcbnew.DRAWSEGMENT_GetArcStart(self)

    def GetArcEnd(self):
        """GetArcEnd(DRAWSEGMENT self) -> wxPoint"""
        return _pcbnew.DRAWSEGMENT_GetArcEnd(self)

    def GetArcAngleStart(self):
        """GetArcAngleStart(DRAWSEGMENT self) -> double const"""
        return _pcbnew.DRAWSEGMENT_GetArcAngleStart(self)

    def GetRadius(self):
        """GetRadius(DRAWSEGMENT self) -> int"""
        return _pcbnew.DRAWSEGMENT_GetRadius(self)

    def GetParentModule(self):
        """GetParentModule(DRAWSEGMENT self) -> MODULE"""
        return _pcbnew.DRAWSEGMENT_GetParentModule(self)

    def GetBezierPoints(self):
        """GetBezierPoints(DRAWSEGMENT self) -> std::vector< wxPoint,std::allocator< wxPoint > > const &"""
        return _pcbnew.DRAWSEGMENT_GetBezierPoints(self)

    def GetPolyPoints(self):
        """GetPolyPoints(DRAWSEGMENT self) -> std::vector< wxPoint,std::allocator< wxPoint > > const &"""
        return _pcbnew.DRAWSEGMENT_GetPolyPoints(self)

    def SetBezierPoints(self, *args):
        """SetBezierPoints(DRAWSEGMENT self, std::vector< wxPoint,std::allocator< wxPoint > > const & aPoints)"""
        return _pcbnew.DRAWSEGMENT_SetBezierPoints(self, *args)

    def SetPolyPoints(self, *args):
        """SetPolyPoints(DRAWSEGMENT self, std::vector< wxPoint,std::allocator< wxPoint > > const & aPoints)"""
        return _pcbnew.DRAWSEGMENT_SetPolyPoints(self, *args)

    def Copy(self, *args):
        """Copy(DRAWSEGMENT self, DRAWSEGMENT source)"""
        return _pcbnew.DRAWSEGMENT_Copy(self, *args)

    def Draw(self, *args):
        """
        Draw(DRAWSEGMENT self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)
        Draw(DRAWSEGMENT self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.DRAWSEGMENT_Draw(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(DRAWSEGMENT self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.DRAWSEGMENT_DisplayInfo(self, *args)

    def GetBoundingBox(self):
        """GetBoundingBox(DRAWSEGMENT self) -> EDA_RECT"""
        return _pcbnew.DRAWSEGMENT_GetBoundingBox(self)

    def HitTest(self, *args):
        """
        HitTest(DRAWSEGMENT self, wxPoint aPosition) -> bool
        HitTest(DRAWSEGMENT self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.DRAWSEGMENT_HitTest(self, *args)

    def GetClass(self):
        """GetClass(DRAWSEGMENT self) -> wxString"""
        return _pcbnew.DRAWSEGMENT_GetClass(self)

    def GetLength(self):
        """GetLength(DRAWSEGMENT self) -> double"""
        return _pcbnew.DRAWSEGMENT_GetLength(self)

    def Move(self, *args):
        """Move(DRAWSEGMENT self, wxPoint aMoveVector)"""
        return _pcbnew.DRAWSEGMENT_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(DRAWSEGMENT self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.DRAWSEGMENT_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(DRAWSEGMENT self, wxPoint aCentre)"""
        return _pcbnew.DRAWSEGMENT_Flip(self, *args)

    def TransformShapeWithClearanceToPolygon(self, *args):
        """
        TransformShapeWithClearanceToPolygon(DRAWSEGMENT self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, int aClearanceValue, 
            int aCircleToSegmentsCount, double aCorrectionFactor)
        """
        return _pcbnew.DRAWSEGMENT_TransformShapeWithClearanceToPolygon(self, *args)

    def GetSelectMenuText(self):
        """GetSelectMenuText(DRAWSEGMENT self) -> wxString"""
        return _pcbnew.DRAWSEGMENT_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(DRAWSEGMENT self) -> BITMAP_DEF"""
        return _pcbnew.DRAWSEGMENT_GetMenuImage(self)

    def Clone(self):
        """Clone(DRAWSEGMENT self) -> EDA_ITEM"""
        return _pcbnew.DRAWSEGMENT_Clone(self)

    def GetShapeStr(self):
    	return self.ShowShape(self.GetShape())

DRAWSEGMENT_swigregister = _pcbnew.DRAWSEGMENT_swigregister
DRAWSEGMENT_swigregister(DRAWSEGMENT)

class MARKER_PCB(BOARD_ITEM,MARKER_BASE):
    """Proxy of C++ MARKER_PCB class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_ITEM,MARKER_BASE]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MARKER_PCB, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_ITEM,MARKER_BASE]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MARKER_PCB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(MARKER_PCB self, BOARD_ITEM aParent) -> MARKER_PCB
        __init__(MARKER_PCB self, int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos, wxString const & bText, 
            wxPoint bPos) -> MARKER_PCB
        __init__(MARKER_PCB self, int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos) -> MARKER_PCB
        """
        this = _pcbnew.new_MARKER_PCB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_MARKER_PCB
    __del__ = lambda self : None;
    def Move(self, *args):
        """Move(MARKER_PCB self, wxPoint aMoveVector)"""
        return _pcbnew.MARKER_PCB_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(MARKER_PCB self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.MARKER_PCB_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(MARKER_PCB self, wxPoint aCentre)"""
        return _pcbnew.MARKER_PCB_Flip(self, *args)

    def Draw(self, *args):
        """
        Draw(MARKER_PCB self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)
        Draw(MARKER_PCB self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)
        """
        return _pcbnew.MARKER_PCB_Draw(self, *args)

    def GetPosition(self):
        """GetPosition(MARKER_PCB self) -> wxPoint"""
        return _pcbnew.MARKER_PCB_GetPosition(self)

    def SetPosition(self, *args):
        """SetPosition(MARKER_PCB self, wxPoint aPos)"""
        return _pcbnew.MARKER_PCB_SetPosition(self, *args)

    def HitTest(self, *args):
        """HitTest(MARKER_PCB self, wxPoint aPosition) -> bool"""
        return _pcbnew.MARKER_PCB_HitTest(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(MARKER_PCB self, int aLayer) -> bool"""
        return _pcbnew.MARKER_PCB_IsOnLayer(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(MARKER_PCB self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.MARKER_PCB_DisplayInfo(self, *args)

    def GetSelectMenuText(self):
        """GetSelectMenuText(MARKER_PCB self) -> wxString"""
        return _pcbnew.MARKER_PCB_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(MARKER_PCB self) -> BITMAP_DEF"""
        return _pcbnew.MARKER_PCB_GetMenuImage(self)

MARKER_PCB_swigregister = _pcbnew.MARKER_PCB_swigregister
MARKER_PCB_swigregister(MARKER_PCB)

TEXT_is_REFERENCE = _pcbnew.TEXT_is_REFERENCE
TEXT_is_VALUE = _pcbnew.TEXT_is_VALUE
TEXT_is_DIVERS = _pcbnew.TEXT_is_DIVERS
class TEXTE_MODULE(BOARD_ITEM,EDA_TEXT):
    """Proxy of C++ TEXTE_MODULE class"""
    __swig_setmethods__ = {}
    for _s in [BOARD_ITEM,EDA_TEXT]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TEXTE_MODULE, name, value)
    __swig_getmethods__ = {}
    for _s in [BOARD_ITEM,EDA_TEXT]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TEXTE_MODULE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TEXTE_MODULE self, MODULE parent, int text_type=2) -> TEXTE_MODULE
        __init__(TEXTE_MODULE self, MODULE parent) -> TEXTE_MODULE
        """
        this = _pcbnew.new_TEXTE_MODULE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_TEXTE_MODULE
    __del__ = lambda self : None;
    def Next(self):
        """Next(TEXTE_MODULE self) -> TEXTE_MODULE"""
        return _pcbnew.TEXTE_MODULE_Next(self)

    def Back(self):
        """Back(TEXTE_MODULE self) -> TEXTE_MODULE"""
        return _pcbnew.TEXTE_MODULE_Back(self)

    def SetPosition(self, *args):
        """SetPosition(TEXTE_MODULE self, wxPoint aPos)"""
        return _pcbnew.TEXTE_MODULE_SetPosition(self, *args)

    def GetPosition(self):
        """GetPosition(TEXTE_MODULE self) -> wxPoint"""
        return _pcbnew.TEXTE_MODULE_GetPosition(self)

    def SetType(self, *args):
        """SetType(TEXTE_MODULE self, int aType)"""
        return _pcbnew.TEXTE_MODULE_SetType(self, *args)

    def GetType(self):
        """GetType(TEXTE_MODULE self) -> int"""
        return _pcbnew.TEXTE_MODULE_GetType(self)

    def SetVisible(self, *args):
        """SetVisible(TEXTE_MODULE self, bool isVisible)"""
        return _pcbnew.TEXTE_MODULE_SetVisible(self, *args)

    def IsVisible(self):
        """IsVisible(TEXTE_MODULE self) -> bool"""
        return _pcbnew.TEXTE_MODULE_IsVisible(self)

    def SetPos0(self, *args):
        """SetPos0(TEXTE_MODULE self, wxPoint aPos)"""
        return _pcbnew.TEXTE_MODULE_SetPos0(self, *args)

    def GetPos0(self):
        """GetPos0(TEXTE_MODULE self) -> wxPoint"""
        return _pcbnew.TEXTE_MODULE_GetPos0(self)

    def Copy(self, *args):
        """Copy(TEXTE_MODULE self, TEXTE_MODULE source)"""
        return _pcbnew.TEXTE_MODULE_Copy(self, *args)

    def GetLength(self):
        """GetLength(TEXTE_MODULE self) -> int"""
        return _pcbnew.TEXTE_MODULE_GetLength(self)

    def GetDrawRotation(self):
        """GetDrawRotation(TEXTE_MODULE self) -> int"""
        return _pcbnew.TEXTE_MODULE_GetDrawRotation(self)

    def GetTextRect(self):
        """GetTextRect(TEXTE_MODULE self) -> EDA_RECT"""
        return _pcbnew.TEXTE_MODULE_GetTextRect(self)

    def GetBoundingBox(self):
        """GetBoundingBox(TEXTE_MODULE self) -> EDA_RECT"""
        return _pcbnew.TEXTE_MODULE_GetBoundingBox(self)

    def SetDrawCoord(self):
        """SetDrawCoord(TEXTE_MODULE self)"""
        return _pcbnew.TEXTE_MODULE_SetDrawCoord(self)

    def SetLocalCoord(self):
        """SetLocalCoord(TEXTE_MODULE self)"""
        return _pcbnew.TEXTE_MODULE_SetLocalCoord(self)

    def Draw(self, *args):
        """
        Draw(TEXTE_MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)
        Draw(TEXTE_MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.TEXTE_MODULE_Draw(self, *args)

    def DrawUmbilical(self, *args):
        """
        DrawUmbilical(TEXTE_MODULE self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)
        DrawUmbilical(TEXTE_MODULE self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)
        """
        return _pcbnew.TEXTE_MODULE_DrawUmbilical(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(TEXTE_MODULE self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.TEXTE_MODULE_DisplayInfo(self, *args)

    def HitTest(self, *args):
        """HitTest(TEXTE_MODULE self, wxPoint aPosition) -> bool"""
        return _pcbnew.TEXTE_MODULE_HitTest(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(TEXTE_MODULE self, int aLayer) -> bool"""
        return _pcbnew.TEXTE_MODULE_IsOnLayer(self, *args)

    def GetClass(self):
        """GetClass(TEXTE_MODULE self) -> wxString"""
        return _pcbnew.TEXTE_MODULE_GetClass(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(TEXTE_MODULE self) -> wxString"""
        return _pcbnew.TEXTE_MODULE_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(TEXTE_MODULE self) -> BITMAP_DEF"""
        return _pcbnew.TEXTE_MODULE_GetMenuImage(self)

    def Clone(self):
        """Clone(TEXTE_MODULE self) -> EDA_ITEM"""
        return _pcbnew.TEXTE_MODULE_Clone(self)

TEXTE_MODULE_swigregister = _pcbnew.TEXTE_MODULE_swigregister
TEXTE_MODULE_swigregister(TEXTE_MODULE)

class EDGE_MODULE(DRAWSEGMENT):
    """Proxy of C++ EDGE_MODULE class"""
    __swig_setmethods__ = {}
    for _s in [DRAWSEGMENT]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EDGE_MODULE, name, value)
    __swig_getmethods__ = {}
    for _s in [DRAWSEGMENT]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EDGE_MODULE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(EDGE_MODULE self, MODULE parent, STROKE_T aShape=S_SEGMENT) -> EDGE_MODULE
        __init__(EDGE_MODULE self, MODULE parent) -> EDGE_MODULE
        """
        this = _pcbnew.new_EDGE_MODULE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_EDGE_MODULE
    __del__ = lambda self : None;
    def Next(self):
        """Next(EDGE_MODULE self) -> EDGE_MODULE"""
        return _pcbnew.EDGE_MODULE_Next(self)

    def Back(self):
        """Back(EDGE_MODULE self) -> EDGE_MODULE"""
        return _pcbnew.EDGE_MODULE_Back(self)

    def Copy(self, *args):
        """Copy(EDGE_MODULE self, EDGE_MODULE source)"""
        return _pcbnew.EDGE_MODULE_Copy(self, *args)

    def SetStart0(self, *args):
        """SetStart0(EDGE_MODULE self, wxPoint aPoint)"""
        return _pcbnew.EDGE_MODULE_SetStart0(self, *args)

    def GetStart0(self):
        """GetStart0(EDGE_MODULE self) -> wxPoint"""
        return _pcbnew.EDGE_MODULE_GetStart0(self)

    def SetEnd0(self, *args):
        """SetEnd0(EDGE_MODULE self, wxPoint aPoint)"""
        return _pcbnew.EDGE_MODULE_SetEnd0(self, *args)

    def GetEnd0(self):
        """GetEnd0(EDGE_MODULE self) -> wxPoint"""
        return _pcbnew.EDGE_MODULE_GetEnd0(self)

    def SetDrawCoord(self):
        """SetDrawCoord(EDGE_MODULE self)"""
        return _pcbnew.EDGE_MODULE_SetDrawCoord(self)

    def Draw(self, *args):
        """
        Draw(EDGE_MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)
        Draw(EDGE_MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.EDGE_MODULE_Draw(self, *args)

    def Draw3D(self, *args):
        """Draw3D(EDGE_MODULE self, EDA_3D_CANVAS * glcanvas)"""
        return _pcbnew.EDGE_MODULE_Draw3D(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(EDGE_MODULE self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.EDGE_MODULE_DisplayInfo(self, *args)

    def GetClass(self):
        """GetClass(EDGE_MODULE self) -> wxString"""
        return _pcbnew.EDGE_MODULE_GetClass(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(EDGE_MODULE self) -> wxString"""
        return _pcbnew.EDGE_MODULE_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(EDGE_MODULE self) -> BITMAP_DEF"""
        return _pcbnew.EDGE_MODULE_GetMenuImage(self)

    def Clone(self):
        """Clone(EDGE_MODULE self) -> EDA_ITEM"""
        return _pcbnew.EDGE_MODULE_Clone(self)

    __swig_setmethods__["m_Start0"] = _pcbnew.EDGE_MODULE_m_Start0_set
    __swig_getmethods__["m_Start0"] = _pcbnew.EDGE_MODULE_m_Start0_get
    if _newclass:m_Start0 = _swig_property(_pcbnew.EDGE_MODULE_m_Start0_get, _pcbnew.EDGE_MODULE_m_Start0_set)
    __swig_setmethods__["m_End0"] = _pcbnew.EDGE_MODULE_m_End0_set
    __swig_getmethods__["m_End0"] = _pcbnew.EDGE_MODULE_m_End0_get
    if _newclass:m_End0 = _swig_property(_pcbnew.EDGE_MODULE_m_End0_get, _pcbnew.EDGE_MODULE_m_End0_set)
EDGE_MODULE_swigregister = _pcbnew.EDGE_MODULE_swigregister
EDGE_MODULE_swigregister(EDGE_MODULE)

MAX_ZONE_CORNER_RADIUS_MILS = _pcbnew.MAX_ZONE_CORNER_RADIUS_MILS
class ZONE_SETTINGS(_object):
    """Proxy of C++ ZONE_SETTINGS class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZONE_SETTINGS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZONE_SETTINGS, name)
    __repr__ = _swig_repr
    SMOOTHING_NONE = _pcbnew.ZONE_SETTINGS_SMOOTHING_NONE
    SMOOTHING_CHAMFER = _pcbnew.ZONE_SETTINGS_SMOOTHING_CHAMFER
    SMOOTHING_FILLET = _pcbnew.ZONE_SETTINGS_SMOOTHING_FILLET
    SMOOTHING_LAST = _pcbnew.ZONE_SETTINGS_SMOOTHING_LAST
    __swig_setmethods__["m_FillMode"] = _pcbnew.ZONE_SETTINGS_m_FillMode_set
    __swig_getmethods__["m_FillMode"] = _pcbnew.ZONE_SETTINGS_m_FillMode_get
    if _newclass:m_FillMode = _swig_property(_pcbnew.ZONE_SETTINGS_m_FillMode_get, _pcbnew.ZONE_SETTINGS_m_FillMode_set)
    __swig_setmethods__["m_ZonePriority"] = _pcbnew.ZONE_SETTINGS_m_ZonePriority_set
    __swig_getmethods__["m_ZonePriority"] = _pcbnew.ZONE_SETTINGS_m_ZonePriority_get
    if _newclass:m_ZonePriority = _swig_property(_pcbnew.ZONE_SETTINGS_m_ZonePriority_get, _pcbnew.ZONE_SETTINGS_m_ZonePriority_set)
    __swig_setmethods__["m_ZoneClearance"] = _pcbnew.ZONE_SETTINGS_m_ZoneClearance_set
    __swig_getmethods__["m_ZoneClearance"] = _pcbnew.ZONE_SETTINGS_m_ZoneClearance_get
    if _newclass:m_ZoneClearance = _swig_property(_pcbnew.ZONE_SETTINGS_m_ZoneClearance_get, _pcbnew.ZONE_SETTINGS_m_ZoneClearance_set)
    __swig_setmethods__["m_ZoneMinThickness"] = _pcbnew.ZONE_SETTINGS_m_ZoneMinThickness_set
    __swig_getmethods__["m_ZoneMinThickness"] = _pcbnew.ZONE_SETTINGS_m_ZoneMinThickness_get
    if _newclass:m_ZoneMinThickness = _swig_property(_pcbnew.ZONE_SETTINGS_m_ZoneMinThickness_get, _pcbnew.ZONE_SETTINGS_m_ZoneMinThickness_set)
    __swig_setmethods__["m_NetcodeSelection"] = _pcbnew.ZONE_SETTINGS_m_NetcodeSelection_set
    __swig_getmethods__["m_NetcodeSelection"] = _pcbnew.ZONE_SETTINGS_m_NetcodeSelection_get
    if _newclass:m_NetcodeSelection = _swig_property(_pcbnew.ZONE_SETTINGS_m_NetcodeSelection_get, _pcbnew.ZONE_SETTINGS_m_NetcodeSelection_set)
    __swig_setmethods__["m_CurrentZone_Layer"] = _pcbnew.ZONE_SETTINGS_m_CurrentZone_Layer_set
    __swig_getmethods__["m_CurrentZone_Layer"] = _pcbnew.ZONE_SETTINGS_m_CurrentZone_Layer_get
    if _newclass:m_CurrentZone_Layer = _swig_property(_pcbnew.ZONE_SETTINGS_m_CurrentZone_Layer_get, _pcbnew.ZONE_SETTINGS_m_CurrentZone_Layer_set)
    __swig_setmethods__["m_Zone_HatchingStyle"] = _pcbnew.ZONE_SETTINGS_m_Zone_HatchingStyle_set
    __swig_getmethods__["m_Zone_HatchingStyle"] = _pcbnew.ZONE_SETTINGS_m_Zone_HatchingStyle_get
    if _newclass:m_Zone_HatchingStyle = _swig_property(_pcbnew.ZONE_SETTINGS_m_Zone_HatchingStyle_get, _pcbnew.ZONE_SETTINGS_m_Zone_HatchingStyle_set)
    __swig_setmethods__["m_ArcToSegmentsCount"] = _pcbnew.ZONE_SETTINGS_m_ArcToSegmentsCount_set
    __swig_getmethods__["m_ArcToSegmentsCount"] = _pcbnew.ZONE_SETTINGS_m_ArcToSegmentsCount_get
    if _newclass:m_ArcToSegmentsCount = _swig_property(_pcbnew.ZONE_SETTINGS_m_ArcToSegmentsCount_get, _pcbnew.ZONE_SETTINGS_m_ArcToSegmentsCount_set)
    __swig_setmethods__["m_ThermalReliefGap"] = _pcbnew.ZONE_SETTINGS_m_ThermalReliefGap_set
    __swig_getmethods__["m_ThermalReliefGap"] = _pcbnew.ZONE_SETTINGS_m_ThermalReliefGap_get
    if _newclass:m_ThermalReliefGap = _swig_property(_pcbnew.ZONE_SETTINGS_m_ThermalReliefGap_get, _pcbnew.ZONE_SETTINGS_m_ThermalReliefGap_set)
    __swig_setmethods__["m_ThermalReliefCopperBridge"] = _pcbnew.ZONE_SETTINGS_m_ThermalReliefCopperBridge_set
    __swig_getmethods__["m_ThermalReliefCopperBridge"] = _pcbnew.ZONE_SETTINGS_m_ThermalReliefCopperBridge_get
    if _newclass:m_ThermalReliefCopperBridge = _swig_property(_pcbnew.ZONE_SETTINGS_m_ThermalReliefCopperBridge_get, _pcbnew.ZONE_SETTINGS_m_ThermalReliefCopperBridge_set)
    __swig_setmethods__["m_Zone_45_Only"] = _pcbnew.ZONE_SETTINGS_m_Zone_45_Only_set
    __swig_getmethods__["m_Zone_45_Only"] = _pcbnew.ZONE_SETTINGS_m_Zone_45_Only_get
    if _newclass:m_Zone_45_Only = _swig_property(_pcbnew.ZONE_SETTINGS_m_Zone_45_Only_get, _pcbnew.ZONE_SETTINGS_m_Zone_45_Only_set)
    def __init__(self): 
        """__init__(ZONE_SETTINGS self) -> ZONE_SETTINGS"""
        this = _pcbnew.new_ZONE_SETTINGS()
        try: self.this.append(this)
        except: self.this = this
    def __lshift__(self, *args):
        """__lshift__(ZONE_SETTINGS self, ZONE_CONTAINER const & aSource) -> ZONE_SETTINGS"""
        return _pcbnew.ZONE_SETTINGS___lshift__(self, *args)

    def ExportSetting(self, *args):
        """
        ExportSetting(ZONE_SETTINGS self, ZONE_CONTAINER & aTarget, bool aFullExport=True)
        ExportSetting(ZONE_SETTINGS self, ZONE_CONTAINER & aTarget)
        """
        return _pcbnew.ZONE_SETTINGS_ExportSetting(self, *args)

    def SetCornerSmoothingType(self, *args):
        """SetCornerSmoothingType(ZONE_SETTINGS self, int aType)"""
        return _pcbnew.ZONE_SETTINGS_SetCornerSmoothingType(self, *args)

    def GetCornerSmoothingType(self):
        """GetCornerSmoothingType(ZONE_SETTINGS self) -> int"""
        return _pcbnew.ZONE_SETTINGS_GetCornerSmoothingType(self)

    def SetCornerRadius(self, *args):
        """SetCornerRadius(ZONE_SETTINGS self, int aRadius)"""
        return _pcbnew.ZONE_SETTINGS_SetCornerRadius(self, *args)

    def GetCornerRadius(self):
        """GetCornerRadius(ZONE_SETTINGS self) -> unsigned int"""
        return _pcbnew.ZONE_SETTINGS_GetCornerRadius(self)

    def GetPadConnection(self):
        """GetPadConnection(ZONE_SETTINGS self) -> ZoneConnection"""
        return _pcbnew.ZONE_SETTINGS_GetPadConnection(self)

    def SetPadConnection(self, *args):
        """SetPadConnection(ZONE_SETTINGS self, ZoneConnection aPadConnection)"""
        return _pcbnew.ZONE_SETTINGS_SetPadConnection(self, *args)

    def GetIsKeepout(self):
        """GetIsKeepout(ZONE_SETTINGS self) -> bool const"""
        return _pcbnew.ZONE_SETTINGS_GetIsKeepout(self)

    def GetDoNotAllowCopperPour(self):
        """GetDoNotAllowCopperPour(ZONE_SETTINGS self) -> bool const"""
        return _pcbnew.ZONE_SETTINGS_GetDoNotAllowCopperPour(self)

    def GetDoNotAllowVias(self):
        """GetDoNotAllowVias(ZONE_SETTINGS self) -> bool const"""
        return _pcbnew.ZONE_SETTINGS_GetDoNotAllowVias(self)

    def GetDoNotAllowTracks(self):
        """GetDoNotAllowTracks(ZONE_SETTINGS self) -> bool const"""
        return _pcbnew.ZONE_SETTINGS_GetDoNotAllowTracks(self)

    def SetIsKeepout(self, *args):
        """SetIsKeepout(ZONE_SETTINGS self, bool aEnable)"""
        return _pcbnew.ZONE_SETTINGS_SetIsKeepout(self, *args)

    def SetDoNotAllowCopperPour(self, *args):
        """SetDoNotAllowCopperPour(ZONE_SETTINGS self, bool aEnable)"""
        return _pcbnew.ZONE_SETTINGS_SetDoNotAllowCopperPour(self, *args)

    def SetDoNotAllowVias(self, *args):
        """SetDoNotAllowVias(ZONE_SETTINGS self, bool aEnable)"""
        return _pcbnew.ZONE_SETTINGS_SetDoNotAllowVias(self, *args)

    def SetDoNotAllowTracks(self, *args):
        """SetDoNotAllowTracks(ZONE_SETTINGS self, bool aEnable)"""
        return _pcbnew.ZONE_SETTINGS_SetDoNotAllowTracks(self, *args)

    __swig_destroy__ = _pcbnew.delete_ZONE_SETTINGS
    __del__ = lambda self : None;
ZONE_SETTINGS_swigregister = _pcbnew.ZONE_SETTINGS_swigregister
ZONE_SETTINGS_swigregister(ZONE_SETTINGS)

class NETCLASS(_object):
    """Proxy of C++ NETCLASS class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NETCLASS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NETCLASS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(NETCLASS self, BOARD aParent, wxString const & aName, NETCLASS initialParameters=None) -> NETCLASS
        __init__(NETCLASS self, BOARD aParent, wxString const & aName) -> NETCLASS
        """
        this = _pcbnew.new_NETCLASS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_NETCLASS
    __del__ = lambda self : None;
    def GetClass(self):
        """GetClass(NETCLASS self) -> wxString"""
        return _pcbnew.NETCLASS_GetClass(self)

    def GetName(self):
        """GetName(NETCLASS self) -> wxString const &"""
        return _pcbnew.NETCLASS_GetName(self)

    def SetName(self, *args):
        """SetName(NETCLASS self, wxString const & aName)"""
        return _pcbnew.NETCLASS_SetName(self, *args)

    def GetCount(self):
        """GetCount(NETCLASS self) -> unsigned int"""
        return _pcbnew.NETCLASS_GetCount(self)

    def Clear(self):
        """Clear(NETCLASS self)"""
        return _pcbnew.NETCLASS_Clear(self)

    def AddNative(self, *args):
        """AddNative(NETCLASS self, wxString const & aNetname)"""
        return _pcbnew.NETCLASS_AddNative(self, *args)

    def begin(self, *args):
        """
        begin(NETCLASS self) -> NETCLASS::iterator
        begin(NETCLASS self) -> NETCLASS::const_iterator
        """
        return _pcbnew.NETCLASS_begin(self, *args)

    def end(self, *args):
        """
        end(NETCLASS self) -> NETCLASS::iterator
        end(NETCLASS self) -> NETCLASS::const_iterator
        """
        return _pcbnew.NETCLASS_end(self, *args)

    def Remove(self, *args):
        """
        Remove(NETCLASS self, NETCLASS::iterator aName)
        Remove(NETCLASS self, wxString const & aName)
        """
        return _pcbnew.NETCLASS_Remove(self, *args)

    def GetDescription(self):
        """GetDescription(NETCLASS self) -> wxString const &"""
        return _pcbnew.NETCLASS_GetDescription(self)

    def SetDescription(self, *args):
        """SetDescription(NETCLASS self, wxString const & aDesc)"""
        return _pcbnew.NETCLASS_SetDescription(self, *args)

    def GetClearance(self):
        """GetClearance(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetClearance(self)

    def SetClearance(self, *args):
        """SetClearance(NETCLASS self, int aClearance)"""
        return _pcbnew.NETCLASS_SetClearance(self, *args)

    def GetTrackWidth(self):
        """GetTrackWidth(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetTrackWidth(self)

    def GetTrackMinWidth(self):
        """GetTrackMinWidth(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetTrackMinWidth(self)

    def SetTrackWidth(self, *args):
        """SetTrackWidth(NETCLASS self, int aWidth)"""
        return _pcbnew.NETCLASS_SetTrackWidth(self, *args)

    def GetViaDiameter(self):
        """GetViaDiameter(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetViaDiameter(self)

    def GetViaMinDiameter(self):
        """GetViaMinDiameter(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetViaMinDiameter(self)

    def SetViaDiameter(self, *args):
        """SetViaDiameter(NETCLASS self, int aDia)"""
        return _pcbnew.NETCLASS_SetViaDiameter(self, *args)

    def GetViaDrill(self):
        """GetViaDrill(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetViaDrill(self)

    def GetViaMinDrill(self):
        """GetViaMinDrill(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetViaMinDrill(self)

    def SetViaDrill(self, *args):
        """SetViaDrill(NETCLASS self, int aSize)"""
        return _pcbnew.NETCLASS_SetViaDrill(self, *args)

    def GetuViaDiameter(self):
        """GetuViaDiameter(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetuViaDiameter(self)

    def GetuViaMinDiameter(self):
        """GetuViaMinDiameter(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetuViaMinDiameter(self)

    def SetuViaDiameter(self, *args):
        """SetuViaDiameter(NETCLASS self, int aSize)"""
        return _pcbnew.NETCLASS_SetuViaDiameter(self, *args)

    def GetuViaDrill(self):
        """GetuViaDrill(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetuViaDrill(self)

    def GetuViaMinDrill(self):
        """GetuViaMinDrill(NETCLASS self) -> int"""
        return _pcbnew.NETCLASS_GetuViaMinDrill(self)

    def SetuViaDrill(self, *args):
        """SetuViaDrill(NETCLASS self, int aSize)"""
        return _pcbnew.NETCLASS_SetuViaDrill(self, *args)

    def SetParams(self, defaults=None):
        """
        SetParams(NETCLASS self, NETCLASS defaults=None)
        SetParams(NETCLASS self)
        """
        return _pcbnew.NETCLASS_SetParams(self, defaults)

    def Format(self, *args):
        """Format(NETCLASS self, OUTPUTFORMATTER * aFormatter, int aNestLevel, int aControlBits)"""
        return _pcbnew.NETCLASS_Format(self, *args)

NETCLASS_swigregister = _pcbnew.NETCLASS_swigregister
NETCLASS_swigregister(NETCLASS)
NETCLASS.Default = _pcbnew.cvar.NETCLASS_Default

class NETCLASSES(_object):
    """Proxy of C++ NETCLASSES class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NETCLASSES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NETCLASSES, name)
    __repr__ = _swig_repr
    def __init__(self, aParent=None): 
        """
        __init__(NETCLASSES self, BOARD aParent=None) -> NETCLASSES
        __init__(NETCLASSES self) -> NETCLASSES
        """
        this = _pcbnew.new_NETCLASSES(aParent)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_NETCLASSES
    __del__ = lambda self : None;
    def Clear(self):
        """Clear(NETCLASSES self)"""
        return _pcbnew.NETCLASSES_Clear(self)

    def begin(self, *args):
        """
        begin(NETCLASSES self) -> NETCLASSES::iterator
        begin(NETCLASSES self) -> NETCLASSES::const_iterator
        """
        return _pcbnew.NETCLASSES_begin(self, *args)

    def end(self, *args):
        """
        end(NETCLASSES self) -> NETCLASSES::iterator
        end(NETCLASSES self) -> NETCLASSES::const_iterator
        """
        return _pcbnew.NETCLASSES_end(self, *args)

    def GetCount(self):
        """GetCount(NETCLASSES self) -> unsigned int"""
        return _pcbnew.NETCLASSES_GetCount(self)

    def GetDefault(self):
        """GetDefault(NETCLASSES self) -> NETCLASS"""
        return _pcbnew.NETCLASSES_GetDefault(self)

    def AddNative(self, *args):
        """AddNative(NETCLASSES self, NETCLASS aNetclass) -> bool"""
        return _pcbnew.NETCLASSES_AddNative(self, *args)

    def Remove(self, *args):
        """Remove(NETCLASSES self, wxString const & aNetName) -> NETCLASS"""
        return _pcbnew.NETCLASSES_Remove(self, *args)

    def Find(self, *args):
        """Find(NETCLASSES self, wxString const & aName) -> NETCLASS"""
        return _pcbnew.NETCLASSES_Find(self, *args)

NETCLASSES_swigregister = _pcbnew.NETCLASSES_swigregister
NETCLASSES_swigregister(NETCLASSES)


def Cast_to_BOARD_ITEM(*args):
  """Cast_to_BOARD_ITEM(EDA_ITEM base) -> BOARD_ITEM"""
  return _pcbnew.Cast_to_BOARD_ITEM(*args)

def GetBoard():
  """GetBoard() -> BOARD"""
  return _pcbnew.GetBoard()

def LoadBoard(*args):
  """
    LoadBoard(wxString & aFileName, IO_MGR::PCB_FILE_T aFormat) -> BOARD
    LoadBoard(wxString & aFileName) -> BOARD
    """
  return _pcbnew.LoadBoard(*args)

def SaveBoard(*args):
  """
    SaveBoard(wxString & aFileName, BOARD aBoard, IO_MGR::PCB_FILE_T aFormat) -> bool
    SaveBoard(wxString & aFileName, BOARD aBoard) -> bool
    """
  return _pcbnew.SaveBoard(*args)
class IO_MGR(_object):
    """Proxy of C++ IO_MGR class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO_MGR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IO_MGR, name)
    __repr__ = _swig_repr
    LEGACY = _pcbnew.IO_MGR_LEGACY
    KICAD = _pcbnew.IO_MGR_KICAD
    EAGLE = _pcbnew.IO_MGR_EAGLE
    def PluginFind(*args):
        """PluginFind(IO_MGR::PCB_FILE_T aFileType) -> PLUGIN"""
        return _pcbnew.IO_MGR_PluginFind(*args)

    if _newclass:PluginFind = staticmethod(PluginFind)
    __swig_getmethods__["PluginFind"] = lambda x: PluginFind
    def PluginRelease(*args):
        """PluginRelease(PLUGIN aPlugin)"""
        return _pcbnew.IO_MGR_PluginRelease(*args)

    if _newclass:PluginRelease = staticmethod(PluginRelease)
    __swig_getmethods__["PluginRelease"] = lambda x: PluginRelease
    def ShowType(*args):
        """ShowType(IO_MGR::PCB_FILE_T aFileType) -> wxString const"""
        return _pcbnew.IO_MGR_ShowType(*args)

    if _newclass:ShowType = staticmethod(ShowType)
    __swig_getmethods__["ShowType"] = lambda x: ShowType
    def GetFileExtension(*args):
        """GetFileExtension(IO_MGR::PCB_FILE_T aFileType) -> wxString const"""
        return _pcbnew.IO_MGR_GetFileExtension(*args)

    if _newclass:GetFileExtension = staticmethod(GetFileExtension)
    __swig_getmethods__["GetFileExtension"] = lambda x: GetFileExtension
    def Load(*args):
        """
        Load(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aAppendToMe=None, 
            PROPERTIES * aProperties=None) -> BOARD
        Load(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aAppendToMe=None) -> BOARD
        Load(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName) -> BOARD
        """
        return _pcbnew.IO_MGR_Load(*args)

    if _newclass:Load = staticmethod(Load)
    __swig_getmethods__["Load"] = lambda x: Load
    def Save(*args):
        """
        Save(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aBoard, PROPERTIES * aProperties=None)
        Save(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aBoard)
        """
        return _pcbnew.IO_MGR_Save(*args)

    if _newclass:Save = staticmethod(Save)
    __swig_getmethods__["Save"] = lambda x: Save
    def __init__(self): 
        """__init__(IO_MGR self) -> IO_MGR"""
        this = _pcbnew.new_IO_MGR()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_IO_MGR
    __del__ = lambda self : None;
IO_MGR_swigregister = _pcbnew.IO_MGR_swigregister
IO_MGR_swigregister(IO_MGR)

def IO_MGR_PluginFind(*args):
  """IO_MGR_PluginFind(IO_MGR::PCB_FILE_T aFileType) -> PLUGIN"""
  return _pcbnew.IO_MGR_PluginFind(*args)

def IO_MGR_PluginRelease(*args):
  """IO_MGR_PluginRelease(PLUGIN aPlugin)"""
  return _pcbnew.IO_MGR_PluginRelease(*args)

def IO_MGR_ShowType(*args):
  """IO_MGR_ShowType(IO_MGR::PCB_FILE_T aFileType) -> wxString const"""
  return _pcbnew.IO_MGR_ShowType(*args)

def IO_MGR_GetFileExtension(*args):
  """IO_MGR_GetFileExtension(IO_MGR::PCB_FILE_T aFileType) -> wxString const"""
  return _pcbnew.IO_MGR_GetFileExtension(*args)

def IO_MGR_Load(*args):
  """
    Load(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aAppendToMe=None, 
        PROPERTIES * aProperties=None) -> BOARD
    Load(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aAppendToMe=None) -> BOARD
    IO_MGR_Load(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName) -> BOARD
    """
  return _pcbnew.IO_MGR_Load(*args)

def IO_MGR_Save(*args):
  """
    Save(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aBoard, PROPERTIES * aProperties=None)
    IO_MGR_Save(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aBoard)
    """
  return _pcbnew.IO_MGR_Save(*args)

class PLUGIN(_object):
    """Proxy of C++ PLUGIN class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUGIN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUGIN, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def PluginName(self):
        """PluginName(PLUGIN self) -> wxString const &"""
        return _pcbnew.PLUGIN_PluginName(self)

    def GetFileExtension(self):
        """GetFileExtension(PLUGIN self) -> wxString const &"""
        return _pcbnew.PLUGIN_GetFileExtension(self)

    def Load(self, *args):
        """
        Load(PLUGIN self, wxString const & aFileName, BOARD aAppendToMe, PROPERTIES * aProperties=None) -> BOARD
        Load(PLUGIN self, wxString const & aFileName, BOARD aAppendToMe) -> BOARD
        """
        return _pcbnew.PLUGIN_Load(self, *args)

    def Save(self, *args):
        """
        Save(PLUGIN self, wxString const & aFileName, BOARD aBoard, PROPERTIES * aProperties=None)
        Save(PLUGIN self, wxString const & aFileName, BOARD aBoard)
        """
        return _pcbnew.PLUGIN_Save(self, *args)

    def FootprintEnumerate(self, *args):
        """
        FootprintEnumerate(PLUGIN self, wxString const & aLibraryPath, PROPERTIES * aProperties=None) -> wxArrayString
        FootprintEnumerate(PLUGIN self, wxString const & aLibraryPath) -> wxArrayString
        """
        return _pcbnew.PLUGIN_FootprintEnumerate(self, *args)

    def FootprintLoad(self, *args):
        """
        FootprintLoad(PLUGIN self, wxString const & aLibraryPath, wxString const & aFootprintName, PROPERTIES * aProperties=None) -> MODULE
        FootprintLoad(PLUGIN self, wxString const & aLibraryPath, wxString const & aFootprintName) -> MODULE
        """
        return _pcbnew.PLUGIN_FootprintLoad(self, *args)

    def FootprintSave(self, *args):
        """
        FootprintSave(PLUGIN self, wxString const & aLibraryPath, MODULE aFootprint, PROPERTIES * aProperties=None)
        FootprintSave(PLUGIN self, wxString const & aLibraryPath, MODULE aFootprint)
        """
        return _pcbnew.PLUGIN_FootprintSave(self, *args)

    def FootprintDelete(self, *args):
        """FootprintDelete(PLUGIN self, wxString const & aLibraryPath, wxString const & aFootprintName)"""
        return _pcbnew.PLUGIN_FootprintDelete(self, *args)

    def FootprintLibCreate(self, *args):
        """
        FootprintLibCreate(PLUGIN self, wxString const & aLibraryPath, PROPERTIES * aProperties=None)
        FootprintLibCreate(PLUGIN self, wxString const & aLibraryPath)
        """
        return _pcbnew.PLUGIN_FootprintLibCreate(self, *args)

    def FootprintLibDelete(self, *args):
        """
        FootprintLibDelete(PLUGIN self, wxString const & aLibraryPath, PROPERTIES * aProperties=None)
        FootprintLibDelete(PLUGIN self, wxString const & aLibraryPath)
        """
        return _pcbnew.PLUGIN_FootprintLibDelete(self, *args)

    def IsFootprintLibWritable(self, *args):
        """IsFootprintLibWritable(PLUGIN self, wxString const & aLibraryPath) -> bool"""
        return _pcbnew.PLUGIN_IsFootprintLibWritable(self, *args)

    __swig_destroy__ = _pcbnew.delete_PLUGIN
    __del__ = lambda self : None;
PLUGIN_swigregister = _pcbnew.PLUGIN_swigregister
PLUGIN_swigregister(PLUGIN)

SEXPR_BOARD_FILE_VERSION = _pcbnew.SEXPR_BOARD_FILE_VERSION
CTL_CLIPBOARD = _pcbnew.CTL_CLIPBOARD
class PCB_IO(PLUGIN):
    """Proxy of C++ PCB_IO class"""
    __swig_setmethods__ = {}
    for _s in [PLUGIN]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCB_IO, name, value)
    __swig_getmethods__ = {}
    for _s in [PLUGIN]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PCB_IO, name)
    __repr__ = _swig_repr
    def PluginName(self):
        """PluginName(PCB_IO self) -> wxString const &"""
        return _pcbnew.PCB_IO_PluginName(self)

    def GetFileExtension(self):
        """GetFileExtension(PCB_IO self) -> wxString const &"""
        return _pcbnew.PCB_IO_GetFileExtension(self)

    def Save(self, *args):
        """
        Save(PCB_IO self, wxString const & aFileName, BOARD aBoard, PROPERTIES * aProperties=None)
        Save(PCB_IO self, wxString const & aFileName, BOARD aBoard)
        """
        return _pcbnew.PCB_IO_Save(self, *args)

    def Load(self, *args):
        """
        Load(PCB_IO self, wxString const & aFileName, BOARD aAppendToMe, PROPERTIES * aProperties=None) -> BOARD
        Load(PCB_IO self, wxString const & aFileName, BOARD aAppendToMe) -> BOARD
        """
        return _pcbnew.PCB_IO_Load(self, *args)

    def __init__(self): 
        """__init__(PCB_IO self) -> PCB_IO"""
        this = _pcbnew.new_PCB_IO()
        try: self.this.append(this)
        except: self.this = this
    def Format(self, *args):
        """
        Format(PCB_IO self, BOARD_ITEM aItem, int aNestLevel=0)
        Format(PCB_IO self, BOARD_ITEM aItem)
        """
        return _pcbnew.PCB_IO_Format(self, *args)

    def GetStringOutput(self, *args):
        """GetStringOutput(PCB_IO self, bool doClear) -> std::string"""
        return _pcbnew.PCB_IO_GetStringOutput(self, *args)

    __swig_destroy__ = _pcbnew.delete_PCB_IO
    __del__ = lambda self : None;
PCB_IO_swigregister = _pcbnew.PCB_IO_swigregister
PCB_IO_swigregister(PCB_IO)

class BOARD_ITEM_List(DHEAD):
    """Proxy of C++ DLIST<(BOARD_ITEM)> class"""
    __swig_setmethods__ = {}
    for _s in [DHEAD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BOARD_ITEM_List, name, value)
    __swig_getmethods__ = {}
    for _s in [DHEAD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BOARD_ITEM_List, name)
    __repr__ = _swig_repr
    def Get(self):
        """Get(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_Get(self)

    def __deref__(self):
        """__deref__(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List___deref__(self)

    def GetFirst(self):
        """GetFirst(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_GetFirst(self)

    def GetLast(self):
        """GetLast(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_GetLast(self)

    def Append(self, *args):
        """
        Append(BOARD_ITEM_List self, BOARD_ITEM aNewElement)
        Append(BOARD_ITEM_List self, BOARD_ITEM_List aList)
        """
        return _pcbnew.BOARD_ITEM_List_Append(self, *args)

    def Insert(self, *args):
        """Insert(BOARD_ITEM_List self, BOARD_ITEM aNewElement, BOARD_ITEM aElementAfterMe)"""
        return _pcbnew.BOARD_ITEM_List_Insert(self, *args)

    def Remove(self, *args):
        """Remove(BOARD_ITEM_List self, BOARD_ITEM aElement) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_Remove(self, *args)

    def begin(self):
        """begin(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_begin(self)

    def end(self):
        """end(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_end(self)

    def PopFront(self):
        """PopFront(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_PopFront(self)

    def PopBack(self):
        """PopBack(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_PopBack(self)

    def PushFront(self, *args):
        """PushFront(BOARD_ITEM_List self, BOARD_ITEM aNewElement)"""
        return _pcbnew.BOARD_ITEM_List_PushFront(self, *args)

    def PushBack(self, *args):
        """PushBack(BOARD_ITEM_List self, BOARD_ITEM aNewElement)"""
        return _pcbnew.BOARD_ITEM_List_PushBack(self, *args)

    class DLISTIter:
    	def __init__(self,aList):
    		self.last = aList   # last item is the start of list

    	def next(self):         # get the next item
    	
    		item = self.last
    		try:
    		  item = item.Get()
    		except:
    		  pass
    		     
    		if item is None:    # if the item is None, then finish the iteration
    			raise StopIteration
    		else:
    			ret = None
    			
    			
    			try:
    				ret = self.last.Get()
    			except: 
    				ret = self.last # next items do not..
    			
    			self.last = self.last.Next()
    			
    			
    			
    			if 'Cast' in dir(ret):
    				ret = ret.Cast()
    				
    			return ret

    def __iter__(self):
    	return self.DLISTIter(self)
    	

    def __init__(self): 
        """__init__(DLIST<(BOARD_ITEM)> self) -> BOARD_ITEM_List"""
        this = _pcbnew.new_BOARD_ITEM_List()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_BOARD_ITEM_List
    __del__ = lambda self : None;
    def Next(self):
        """Next(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_Next(self)

    def Back(self):
        """Back(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_Back(self)

    def GetParent(self):
        """GetParent(BOARD_ITEM_List self) -> BOARD_ITEM"""
        return _pcbnew.BOARD_ITEM_List_GetParent(self)

    def GetLayer(self):
        """GetLayer(BOARD_ITEM_List self) -> int"""
        return _pcbnew.BOARD_ITEM_List_GetLayer(self)

    def SetLayer(self, *args):
        """SetLayer(BOARD_ITEM_List self, int aLayer)"""
        return _pcbnew.BOARD_ITEM_List_SetLayer(self, *args)

    def Draw(self, *args):
        """
        Draw(BOARD_ITEM_List self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)
        Draw(BOARD_ITEM_List self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.BOARD_ITEM_List_Draw(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(BOARD_ITEM_List self, int aLayer) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsOnLayer(self, *args)

    def IsTrack(self):
        """IsTrack(BOARD_ITEM_List self) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsTrack(self)

    def IsLocked(self):
        """IsLocked(BOARD_ITEM_List self) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsLocked(self)

    def UnLink(self):
        """UnLink(BOARD_ITEM_List self)"""
        return _pcbnew.BOARD_ITEM_List_UnLink(self)

    def DeleteStructure(self):
        """DeleteStructure(BOARD_ITEM_List self)"""
        return _pcbnew.BOARD_ITEM_List_DeleteStructure(self)

    def ShowShape(self, *args):
        """ShowShape(BOARD_ITEM_List self, STROKE_T aShape) -> wxString"""
        return _pcbnew.BOARD_ITEM_List_ShowShape(self, *args)

    def Move(self, *args):
        """Move(BOARD_ITEM_List self, wxPoint aMoveVector)"""
        return _pcbnew.BOARD_ITEM_List_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(BOARD_ITEM_List self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.BOARD_ITEM_List_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(BOARD_ITEM_List self, wxPoint aCentre)"""
        return _pcbnew.BOARD_ITEM_List_Flip(self, *args)

    def GetBoard(self):
        """GetBoard(BOARD_ITEM_List self) -> BOARD"""
        return _pcbnew.BOARD_ITEM_List_GetBoard(self)

    def GetLayerName(self):
        """GetLayerName(BOARD_ITEM_List self) -> wxString"""
        return _pcbnew.BOARD_ITEM_List_GetLayerName(self)

    def FormatInternalUnits(self, *args):
        """
        FormatInternalUnits(BOARD_ITEM_List self, int aValue) -> std::string
        FormatInternalUnits(BOARD_ITEM_List self, wxPoint aPoint) -> std::string
        FormatInternalUnits(BOARD_ITEM_List self, wxSize aSize) -> std::string
        """
        return _pcbnew.BOARD_ITEM_List_FormatInternalUnits(self, *args)

    def FormatAngle(self, *args):
        """FormatAngle(BOARD_ITEM_List self, double aAngle) -> std::string"""
        return _pcbnew.BOARD_ITEM_List_FormatAngle(self, *args)

    def Cast_to_TEXTE_PCB(self):
        """Cast_to_TEXTE_PCB(BOARD_ITEM_List self) -> TEXTE_PCB"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_TEXTE_PCB(self)

    def Cast_to_DIMENSION(self):
        """Cast_to_DIMENSION(BOARD_ITEM_List self) -> DIMENSION"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_DIMENSION(self)

    def Cast_to_MODULE(self):
        """Cast_to_MODULE(BOARD_ITEM_List self) -> MODULE"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_MODULE(self)

    def Cast_to_TEXTE_MODULE(self):
        """Cast_to_TEXTE_MODULE(BOARD_ITEM_List self) -> TEXTE_MODULE"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_TEXTE_MODULE(self)

    def Cast_to_DRAWSEGMENT(self):
        """Cast_to_DRAWSEGMENT(BOARD_ITEM_List self) -> DRAWSEGMENT"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_DRAWSEGMENT(self)

    def Cast_to_MARKER_PCB(self):
        """Cast_to_MARKER_PCB(BOARD_ITEM_List self) -> MARKER_PCB"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_MARKER_PCB(self)

    def Cast_to_BOARD(self):
        """Cast_to_BOARD(BOARD_ITEM_List self) -> BOARD"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_BOARD(self)

    def Cast_to_EDGE_MODULE(self):
        """Cast_to_EDGE_MODULE(BOARD_ITEM_List self) -> EDGE_MODULE"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_EDGE_MODULE(self)

    def Cast_to_D_PAD(self):
        """Cast_to_D_PAD(BOARD_ITEM_List self) -> D_PAD"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_D_PAD(self)

    def Cast_to_TRACK(self):
        """Cast_to_TRACK(BOARD_ITEM_List self) -> TRACK"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_TRACK(self)

    def Cast_to_SEGZONE(self):
        """Cast_to_SEGZONE(BOARD_ITEM_List self) -> SEGZONE"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_SEGZONE(self)

    def Cast_to_SEGVIA(self):
        """Cast_to_SEGVIA(BOARD_ITEM_List self) -> SEGVIA"""
        return _pcbnew.BOARD_ITEM_List_Cast_to_SEGVIA(self)

    def Type(self):
        """Type(BOARD_ITEM_List self) -> KICAD_T"""
        return _pcbnew.BOARD_ITEM_List_Type(self)

    def SetTimeStamp(self, *args):
        """SetTimeStamp(BOARD_ITEM_List self, time_t aNewTimeStamp)"""
        return _pcbnew.BOARD_ITEM_List_SetTimeStamp(self, *args)

    def GetTimeStamp(self):
        """GetTimeStamp(BOARD_ITEM_List self) -> time_t"""
        return _pcbnew.BOARD_ITEM_List_GetTimeStamp(self)

    def GetSon(self):
        """GetSon(BOARD_ITEM_List self) -> EDA_ITEM"""
        return _pcbnew.BOARD_ITEM_List_GetSon(self)

    def GetList(self):
        """GetList(BOARD_ITEM_List self) -> DHEAD"""
        return _pcbnew.BOARD_ITEM_List_GetList(self)

    def SetParent(self, *args):
        """SetParent(BOARD_ITEM_List self, EDA_ITEM aParent)"""
        return _pcbnew.BOARD_ITEM_List_SetParent(self, *args)

    def SetSon(self, *args):
        """SetSon(BOARD_ITEM_List self, EDA_ITEM aSon)"""
        return _pcbnew.BOARD_ITEM_List_SetSon(self, *args)

    def SetList(self, *args):
        """SetList(BOARD_ITEM_List self, DHEAD aList)"""
        return _pcbnew.BOARD_ITEM_List_SetList(self, *args)

    def IsNew(self):
        """IsNew(BOARD_ITEM_List self) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsNew(self)

    def IsModified(self):
        """IsModified(BOARD_ITEM_List self) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsModified(self)

    def IsMoving(self):
        """IsMoving(BOARD_ITEM_List self) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsMoving(self)

    def IsDragging(self):
        """IsDragging(BOARD_ITEM_List self) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsDragging(self)

    def IsSelected(self):
        """IsSelected(BOARD_ITEM_List self) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsSelected(self)

    def IsResized(self):
        """IsResized(BOARD_ITEM_List self) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsResized(self)

    def SetModified(self):
        """SetModified(BOARD_ITEM_List self)"""
        return _pcbnew.BOARD_ITEM_List_SetModified(self)

    def GetState(self, *args):
        """GetState(BOARD_ITEM_List self, int type) -> int"""
        return _pcbnew.BOARD_ITEM_List_GetState(self, *args)

    def SetState(self, *args):
        """SetState(BOARD_ITEM_List self, int type, int state)"""
        return _pcbnew.BOARD_ITEM_List_SetState(self, *args)

    def GetStatus(self):
        """GetStatus(BOARD_ITEM_List self) -> int"""
        return _pcbnew.BOARD_ITEM_List_GetStatus(self)

    def SetStatus(self, *args):
        """SetStatus(BOARD_ITEM_List self, int aStatus)"""
        return _pcbnew.BOARD_ITEM_List_SetStatus(self, *args)

    def SetFlags(self, *args):
        """SetFlags(BOARD_ITEM_List self, int aMask)"""
        return _pcbnew.BOARD_ITEM_List_SetFlags(self, *args)

    def ClearFlags(self, *args):
        """
        ClearFlags(BOARD_ITEM_List self, int aMask=-1)
        ClearFlags(BOARD_ITEM_List self)
        """
        return _pcbnew.BOARD_ITEM_List_ClearFlags(self, *args)

    def GetFlags(self):
        """GetFlags(BOARD_ITEM_List self) -> int"""
        return _pcbnew.BOARD_ITEM_List_GetFlags(self)

    def SetImage(self, *args):
        """SetImage(BOARD_ITEM_List self, EDA_ITEM aItem)"""
        return _pcbnew.BOARD_ITEM_List_SetImage(self, *args)

    def SetForceVisible(self, *args):
        """SetForceVisible(BOARD_ITEM_List self, bool aEnable)"""
        return _pcbnew.BOARD_ITEM_List_SetForceVisible(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(BOARD_ITEM_List self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.BOARD_ITEM_List_DisplayInfo(self, *args)

    def HitTest(self, *args):
        """
        HitTest(BOARD_ITEM_List self, wxPoint aPosition) -> bool
        HitTest(BOARD_ITEM_List self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.BOARD_ITEM_List_HitTest(self, *args)

    def GetBoundingBox(self):
        """GetBoundingBox(BOARD_ITEM_List self) -> EDA_RECT"""
        return _pcbnew.BOARD_ITEM_List_GetBoundingBox(self)

    def Clone(self):
        """Clone(BOARD_ITEM_List self) -> EDA_ITEM"""
        return _pcbnew.BOARD_ITEM_List_Clone(self)

    def IterateForward(self, *args):
        """IterateForward(BOARD_ITEM_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.BOARD_ITEM_List_IterateForward(self, *args)

    def Visit(self, *args):
        """Visit(BOARD_ITEM_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.BOARD_ITEM_List_Visit(self, *args)

    def GetClass(self):
        """GetClass(BOARD_ITEM_List self) -> wxString"""
        return _pcbnew.BOARD_ITEM_List_GetClass(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(BOARD_ITEM_List self) -> wxString"""
        return _pcbnew.BOARD_ITEM_List_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(BOARD_ITEM_List self) -> BITMAP_DEF"""
        return _pcbnew.BOARD_ITEM_List_GetMenuImage(self)

    def Matches(self, *args):
        """
        Matches(BOARD_ITEM_List self, wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool
        Matches(BOARD_ITEM_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.BOARD_ITEM_List_Matches(self, *args)

    def Replace(self, *args):
        """
        Replace(BOARD_ITEM_List self, wxFindReplaceData & aSearchData, wxString & aText) -> bool
        Replace(BOARD_ITEM_List self, wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool
        Replace(BOARD_ITEM_List self, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.BOARD_ITEM_List_Replace(self, *args)

    def IsReplaceable(self):
        """IsReplaceable(BOARD_ITEM_List self) -> bool"""
        return _pcbnew.BOARD_ITEM_List_IsReplaceable(self)

    def __lt__(self, *args):
        """__lt__(BOARD_ITEM_List self, EDA_ITEM aItem) -> bool"""
        return _pcbnew.BOARD_ITEM_List___lt__(self, *args)

    def Sort(self, *args):
        """Sort(BOARD_ITEM_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"""
        return _pcbnew.BOARD_ITEM_List_Sort(self, *args)

BOARD_ITEM_List_swigregister = _pcbnew.BOARD_ITEM_List_swigregister
BOARD_ITEM_List_swigregister(BOARD_ITEM_List)

class MODULE_List(DHEAD):
    """Proxy of C++ DLIST<(MODULE)> class"""
    __swig_setmethods__ = {}
    for _s in [DHEAD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MODULE_List, name, value)
    __swig_getmethods__ = {}
    for _s in [DHEAD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MODULE_List, name)
    __repr__ = _swig_repr
    def Get(self):
        """Get(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_Get(self)

    def __deref__(self):
        """__deref__(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List___deref__(self)

    def GetFirst(self):
        """GetFirst(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_GetFirst(self)

    def GetLast(self):
        """GetLast(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_GetLast(self)

    def Append(self, *args):
        """
        Append(MODULE_List self, MODULE aNewElement)
        Append(MODULE_List self, MODULE_List aList)
        """
        return _pcbnew.MODULE_List_Append(self, *args)

    def Insert(self, *args):
        """Insert(MODULE_List self, MODULE aNewElement, MODULE aElementAfterMe)"""
        return _pcbnew.MODULE_List_Insert(self, *args)

    def Remove(self, *args):
        """Remove(MODULE_List self, MODULE aElement) -> MODULE"""
        return _pcbnew.MODULE_List_Remove(self, *args)

    def begin(self):
        """begin(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_begin(self)

    def end(self):
        """end(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_end(self)

    def PopFront(self):
        """PopFront(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_PopFront(self)

    def PopBack(self):
        """PopBack(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_PopBack(self)

    def PushFront(self, *args):
        """PushFront(MODULE_List self, MODULE aNewElement)"""
        return _pcbnew.MODULE_List_PushFront(self, *args)

    def PushBack(self, *args):
        """PushBack(MODULE_List self, MODULE aNewElement)"""
        return _pcbnew.MODULE_List_PushBack(self, *args)

    class DLISTIter:
    	def __init__(self,aList):
    		self.last = aList   # last item is the start of list

    	def next(self):         # get the next item
    	
    		item = self.last
    		try:
    		  item = item.Get()
    		except:
    		  pass
    		     
    		if item is None:    # if the item is None, then finish the iteration
    			raise StopIteration
    		else:
    			ret = None
    			
    			
    			try:
    				ret = self.last.Get()
    			except: 
    				ret = self.last # next items do not..
    			
    			self.last = self.last.Next()
    			
    			
    			
    			if 'Cast' in dir(ret):
    				ret = ret.Cast()
    				
    			return ret

    def __iter__(self):
    	return self.DLISTIter(self)
    	

    def __init__(self): 
        """__init__(DLIST<(MODULE)> self) -> MODULE_List"""
        this = _pcbnew.new_MODULE_List()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_MODULE_List
    __del__ = lambda self : None;
    __swig_setmethods__["m_Orient"] = _pcbnew.MODULE_List_m_Orient_set
    __swig_getmethods__["m_Orient"] = _pcbnew.MODULE_List_m_Orient_get
    if _newclass:m_Orient = _swig_property(_pcbnew.MODULE_List_m_Orient_get, _pcbnew.MODULE_List_m_Orient_set)
    __swig_setmethods__["m_Pos"] = _pcbnew.MODULE_List_m_Pos_set
    __swig_getmethods__["m_Pos"] = _pcbnew.MODULE_List_m_Pos_get
    if _newclass:m_Pos = _swig_property(_pcbnew.MODULE_List_m_Pos_get, _pcbnew.MODULE_List_m_Pos_set)
    __swig_setmethods__["m_Pads"] = _pcbnew.MODULE_List_m_Pads_set
    __swig_getmethods__["m_Pads"] = _pcbnew.MODULE_List_m_Pads_get
    if _newclass:m_Pads = _swig_property(_pcbnew.MODULE_List_m_Pads_get, _pcbnew.MODULE_List_m_Pads_set)
    __swig_setmethods__["m_Drawings"] = _pcbnew.MODULE_List_m_Drawings_set
    __swig_getmethods__["m_Drawings"] = _pcbnew.MODULE_List_m_Drawings_get
    if _newclass:m_Drawings = _swig_property(_pcbnew.MODULE_List_m_Drawings_get, _pcbnew.MODULE_List_m_Drawings_set)
    __swig_setmethods__["m_3D_Drawings"] = _pcbnew.MODULE_List_m_3D_Drawings_set
    __swig_getmethods__["m_3D_Drawings"] = _pcbnew.MODULE_List_m_3D_Drawings_get
    if _newclass:m_3D_Drawings = _swig_property(_pcbnew.MODULE_List_m_3D_Drawings_get, _pcbnew.MODULE_List_m_3D_Drawings_set)
    __swig_setmethods__["m_Reference"] = _pcbnew.MODULE_List_m_Reference_set
    __swig_getmethods__["m_Reference"] = _pcbnew.MODULE_List_m_Reference_get
    if _newclass:m_Reference = _swig_property(_pcbnew.MODULE_List_m_Reference_get, _pcbnew.MODULE_List_m_Reference_set)
    __swig_setmethods__["m_Value"] = _pcbnew.MODULE_List_m_Value_set
    __swig_getmethods__["m_Value"] = _pcbnew.MODULE_List_m_Value_get
    if _newclass:m_Value = _swig_property(_pcbnew.MODULE_List_m_Value_get, _pcbnew.MODULE_List_m_Value_set)
    __swig_setmethods__["m_LibRef"] = _pcbnew.MODULE_List_m_LibRef_set
    __swig_getmethods__["m_LibRef"] = _pcbnew.MODULE_List_m_LibRef_get
    if _newclass:m_LibRef = _swig_property(_pcbnew.MODULE_List_m_LibRef_get, _pcbnew.MODULE_List_m_LibRef_set)
    __swig_setmethods__["m_Attributs"] = _pcbnew.MODULE_List_m_Attributs_set
    __swig_getmethods__["m_Attributs"] = _pcbnew.MODULE_List_m_Attributs_get
    if _newclass:m_Attributs = _swig_property(_pcbnew.MODULE_List_m_Attributs_get, _pcbnew.MODULE_List_m_Attributs_set)
    __swig_setmethods__["flag"] = _pcbnew.MODULE_List_flag_set
    __swig_getmethods__["flag"] = _pcbnew.MODULE_List_flag_get
    if _newclass:flag = _swig_property(_pcbnew.MODULE_List_flag_get, _pcbnew.MODULE_List_flag_set)
    __swig_setmethods__["m_ModuleStatus"] = _pcbnew.MODULE_List_m_ModuleStatus_set
    __swig_getmethods__["m_ModuleStatus"] = _pcbnew.MODULE_List_m_ModuleStatus_get
    if _newclass:m_ModuleStatus = _swig_property(_pcbnew.MODULE_List_m_ModuleStatus_get, _pcbnew.MODULE_List_m_ModuleStatus_set)
    __swig_setmethods__["m_BoundaryBox"] = _pcbnew.MODULE_List_m_BoundaryBox_set
    __swig_getmethods__["m_BoundaryBox"] = _pcbnew.MODULE_List_m_BoundaryBox_get
    if _newclass:m_BoundaryBox = _swig_property(_pcbnew.MODULE_List_m_BoundaryBox_get, _pcbnew.MODULE_List_m_BoundaryBox_set)
    __swig_setmethods__["m_PadNum"] = _pcbnew.MODULE_List_m_PadNum_set
    __swig_getmethods__["m_PadNum"] = _pcbnew.MODULE_List_m_PadNum_get
    if _newclass:m_PadNum = _swig_property(_pcbnew.MODULE_List_m_PadNum_get, _pcbnew.MODULE_List_m_PadNum_set)
    __swig_setmethods__["m_AltPadNum"] = _pcbnew.MODULE_List_m_AltPadNum_set
    __swig_getmethods__["m_AltPadNum"] = _pcbnew.MODULE_List_m_AltPadNum_get
    if _newclass:m_AltPadNum = _swig_property(_pcbnew.MODULE_List_m_AltPadNum_get, _pcbnew.MODULE_List_m_AltPadNum_set)
    __swig_setmethods__["m_CntRot90"] = _pcbnew.MODULE_List_m_CntRot90_set
    __swig_getmethods__["m_CntRot90"] = _pcbnew.MODULE_List_m_CntRot90_get
    if _newclass:m_CntRot90 = _swig_property(_pcbnew.MODULE_List_m_CntRot90_get, _pcbnew.MODULE_List_m_CntRot90_set)
    __swig_setmethods__["m_CntRot180"] = _pcbnew.MODULE_List_m_CntRot180_set
    __swig_getmethods__["m_CntRot180"] = _pcbnew.MODULE_List_m_CntRot180_get
    if _newclass:m_CntRot180 = _swig_property(_pcbnew.MODULE_List_m_CntRot180_get, _pcbnew.MODULE_List_m_CntRot180_set)
    __swig_setmethods__["m_Ext"] = _pcbnew.MODULE_List_m_Ext_set
    __swig_getmethods__["m_Ext"] = _pcbnew.MODULE_List_m_Ext_get
    if _newclass:m_Ext = _swig_property(_pcbnew.MODULE_List_m_Ext_get, _pcbnew.MODULE_List_m_Ext_set)
    __swig_setmethods__["m_Surface"] = _pcbnew.MODULE_List_m_Surface_set
    __swig_getmethods__["m_Surface"] = _pcbnew.MODULE_List_m_Surface_get
    if _newclass:m_Surface = _swig_property(_pcbnew.MODULE_List_m_Surface_get, _pcbnew.MODULE_List_m_Surface_set)
    __swig_setmethods__["m_Link"] = _pcbnew.MODULE_List_m_Link_set
    __swig_getmethods__["m_Link"] = _pcbnew.MODULE_List_m_Link_get
    if _newclass:m_Link = _swig_property(_pcbnew.MODULE_List_m_Link_get, _pcbnew.MODULE_List_m_Link_set)
    __swig_setmethods__["m_LastEdit_Time"] = _pcbnew.MODULE_List_m_LastEdit_Time_set
    __swig_getmethods__["m_LastEdit_Time"] = _pcbnew.MODULE_List_m_LastEdit_Time_get
    if _newclass:m_LastEdit_Time = _swig_property(_pcbnew.MODULE_List_m_LastEdit_Time_get, _pcbnew.MODULE_List_m_LastEdit_Time_set)
    __swig_setmethods__["m_Path"] = _pcbnew.MODULE_List_m_Path_set
    __swig_getmethods__["m_Path"] = _pcbnew.MODULE_List_m_Path_get
    if _newclass:m_Path = _swig_property(_pcbnew.MODULE_List_m_Path_get, _pcbnew.MODULE_List_m_Path_set)
    __swig_setmethods__["m_Doc"] = _pcbnew.MODULE_List_m_Doc_set
    __swig_getmethods__["m_Doc"] = _pcbnew.MODULE_List_m_Doc_get
    if _newclass:m_Doc = _swig_property(_pcbnew.MODULE_List_m_Doc_get, _pcbnew.MODULE_List_m_Doc_set)
    __swig_setmethods__["m_KeyWord"] = _pcbnew.MODULE_List_m_KeyWord_set
    __swig_getmethods__["m_KeyWord"] = _pcbnew.MODULE_List_m_KeyWord_get
    if _newclass:m_KeyWord = _swig_property(_pcbnew.MODULE_List_m_KeyWord_get, _pcbnew.MODULE_List_m_KeyWord_set)
    __swig_setmethods__["m_ZoneConnection"] = _pcbnew.MODULE_List_m_ZoneConnection_set
    __swig_getmethods__["m_ZoneConnection"] = _pcbnew.MODULE_List_m_ZoneConnection_get
    if _newclass:m_ZoneConnection = _swig_property(_pcbnew.MODULE_List_m_ZoneConnection_get, _pcbnew.MODULE_List_m_ZoneConnection_set)
    __swig_setmethods__["m_ThermalWidth"] = _pcbnew.MODULE_List_m_ThermalWidth_set
    __swig_getmethods__["m_ThermalWidth"] = _pcbnew.MODULE_List_m_ThermalWidth_get
    if _newclass:m_ThermalWidth = _swig_property(_pcbnew.MODULE_List_m_ThermalWidth_get, _pcbnew.MODULE_List_m_ThermalWidth_set)
    __swig_setmethods__["m_ThermalGap"] = _pcbnew.MODULE_List_m_ThermalGap_set
    __swig_getmethods__["m_ThermalGap"] = _pcbnew.MODULE_List_m_ThermalGap_get
    if _newclass:m_ThermalGap = _swig_property(_pcbnew.MODULE_List_m_ThermalGap_get, _pcbnew.MODULE_List_m_ThermalGap_set)
    def Next(self):
        """Next(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_Next(self)

    def Back(self):
        """Back(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_Back(self)

    def Copy(self, *args):
        """Copy(MODULE_List self, MODULE Module)"""
        return _pcbnew.MODULE_List_Copy(self, *args)

    def CalculateBoundingBox(self):
        """CalculateBoundingBox(MODULE_List self)"""
        return _pcbnew.MODULE_List_CalculateBoundingBox(self)

    def GetFootPrintRect(self):
        """GetFootPrintRect(MODULE_List self) -> EDA_RECT"""
        return _pcbnew.MODULE_List_GetFootPrintRect(self)

    def GetBoundingBox(self):
        """GetBoundingBox(MODULE_List self) -> EDA_RECT"""
        return _pcbnew.MODULE_List_GetBoundingBox(self)

    def SetPosition(self, *args):
        """SetPosition(MODULE_List self, wxPoint aPos)"""
        return _pcbnew.MODULE_List_SetPosition(self, *args)

    def GetPosition(self):
        """GetPosition(MODULE_List self) -> wxPoint"""
        return _pcbnew.MODULE_List_GetPosition(self)

    def SetOrientation(self, *args):
        """SetOrientation(MODULE_List self, double newangle)"""
        return _pcbnew.MODULE_List_SetOrientation(self, *args)

    def GetOrientation(self):
        """GetOrientation(MODULE_List self) -> double"""
        return _pcbnew.MODULE_List_GetOrientation(self)

    def GetLibRef(self):
        """GetLibRef(MODULE_List self) -> wxString const &"""
        return _pcbnew.MODULE_List_GetLibRef(self)

    def SetLibRef(self, *args):
        """SetLibRef(MODULE_List self, wxString const & aLibRef)"""
        return _pcbnew.MODULE_List_SetLibRef(self, *args)

    def GetDescription(self):
        """GetDescription(MODULE_List self) -> wxString const &"""
        return _pcbnew.MODULE_List_GetDescription(self)

    def SetDescription(self, *args):
        """SetDescription(MODULE_List self, wxString const & aDoc)"""
        return _pcbnew.MODULE_List_SetDescription(self, *args)

    def GetKeywords(self):
        """GetKeywords(MODULE_List self) -> wxString const &"""
        return _pcbnew.MODULE_List_GetKeywords(self)

    def SetKeywords(self, *args):
        """SetKeywords(MODULE_List self, wxString const & aKeywords)"""
        return _pcbnew.MODULE_List_SetKeywords(self, *args)

    def GetPath(self):
        """GetPath(MODULE_List self) -> wxString const &"""
        return _pcbnew.MODULE_List_GetPath(self)

    def SetPath(self, *args):
        """SetPath(MODULE_List self, wxString const & aPath)"""
        return _pcbnew.MODULE_List_SetPath(self, *args)

    def GetLocalSolderMaskMargin(self):
        """GetLocalSolderMaskMargin(MODULE_List self) -> int"""
        return _pcbnew.MODULE_List_GetLocalSolderMaskMargin(self)

    def SetLocalSolderMaskMargin(self, *args):
        """SetLocalSolderMaskMargin(MODULE_List self, int aMargin)"""
        return _pcbnew.MODULE_List_SetLocalSolderMaskMargin(self, *args)

    def GetLocalClearance(self):
        """GetLocalClearance(MODULE_List self) -> int"""
        return _pcbnew.MODULE_List_GetLocalClearance(self)

    def SetLocalClearance(self, *args):
        """SetLocalClearance(MODULE_List self, int aClearance)"""
        return _pcbnew.MODULE_List_SetLocalClearance(self, *args)

    def GetLocalSolderPasteMargin(self):
        """GetLocalSolderPasteMargin(MODULE_List self) -> int"""
        return _pcbnew.MODULE_List_GetLocalSolderPasteMargin(self)

    def SetLocalSolderPasteMargin(self, *args):
        """SetLocalSolderPasteMargin(MODULE_List self, int aMargin)"""
        return _pcbnew.MODULE_List_SetLocalSolderPasteMargin(self, *args)

    def GetLocalSolderPasteMarginRatio(self):
        """GetLocalSolderPasteMarginRatio(MODULE_List self) -> double"""
        return _pcbnew.MODULE_List_GetLocalSolderPasteMarginRatio(self)

    def SetLocalSolderPasteMarginRatio(self, *args):
        """SetLocalSolderPasteMarginRatio(MODULE_List self, double aRatio)"""
        return _pcbnew.MODULE_List_SetLocalSolderPasteMarginRatio(self, *args)

    def SetZoneConnection(self, *args):
        """SetZoneConnection(MODULE_List self, ZoneConnection aType)"""
        return _pcbnew.MODULE_List_SetZoneConnection(self, *args)

    def GetZoneConnection(self):
        """GetZoneConnection(MODULE_List self) -> ZoneConnection"""
        return _pcbnew.MODULE_List_GetZoneConnection(self)

    def SetThermalWidth(self, *args):
        """SetThermalWidth(MODULE_List self, int aWidth)"""
        return _pcbnew.MODULE_List_SetThermalWidth(self, *args)

    def GetThermalWidth(self):
        """GetThermalWidth(MODULE_List self) -> int"""
        return _pcbnew.MODULE_List_GetThermalWidth(self)

    def SetThermalGap(self, *args):
        """SetThermalGap(MODULE_List self, int aGap)"""
        return _pcbnew.MODULE_List_SetThermalGap(self, *args)

    def GetThermalGap(self):
        """GetThermalGap(MODULE_List self) -> int"""
        return _pcbnew.MODULE_List_GetThermalGap(self)

    def GetAttributes(self):
        """GetAttributes(MODULE_List self) -> int"""
        return _pcbnew.MODULE_List_GetAttributes(self)

    def SetAttributes(self, *args):
        """SetAttributes(MODULE_List self, int aAttributes)"""
        return _pcbnew.MODULE_List_SetAttributes(self, *args)

    def Move(self, *args):
        """Move(MODULE_List self, wxPoint aMoveVector)"""
        return _pcbnew.MODULE_List_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(MODULE_List self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.MODULE_List_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(MODULE_List self, wxPoint aCentre)"""
        return _pcbnew.MODULE_List_Flip(self, *args)

    def IsLocked(self):
        """IsLocked(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsLocked(self)

    def SetLocked(self, *args):
        """SetLocked(MODULE_List self, bool isLocked)"""
        return _pcbnew.MODULE_List_SetLocked(self, *args)

    def IsPlaced(self):
        """IsPlaced(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsPlaced(self)

    def SetIsPlaced(self, *args):
        """SetIsPlaced(MODULE_List self, bool isPlaced)"""
        return _pcbnew.MODULE_List_SetIsPlaced(self, *args)

    def SetLastEditTime(self, *args):
        """SetLastEditTime(MODULE_List self, long aTime)"""
        return _pcbnew.MODULE_List_SetLastEditTime(self, *args)

    def GetLastEditTime(self):
        """GetLastEditTime(MODULE_List self) -> long"""
        return _pcbnew.MODULE_List_GetLastEditTime(self)

    def Read_GPCB_Descr(self, *args):
        """Read_GPCB_Descr(MODULE_List self, wxString const & CmpFullFileName) -> bool"""
        return _pcbnew.MODULE_List_Read_GPCB_Descr(self, *args)

    def Draw(self, *args):
        """
        Draw(MODULE_List self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)
        Draw(MODULE_List self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)
        """
        return _pcbnew.MODULE_List_Draw(self, *args)

    def Draw3D(self, *args):
        """Draw3D(MODULE_List self, EDA_3D_CANVAS * glcanvas)"""
        return _pcbnew.MODULE_List_Draw3D(self, *args)

    def DrawEdgesOnly(self, *args):
        """DrawEdgesOnly(MODULE_List self, EDA_DRAW_PANEL * panel, wxDC * DC, wxPoint offset, int draw_mode)"""
        return _pcbnew.MODULE_List_DrawEdgesOnly(self, *args)

    def DrawAncre(self, *args):
        """DrawAncre(MODULE_List self, EDA_DRAW_PANEL * panel, wxDC * DC, wxPoint offset, int dim_ancre, int draw_mode)"""
        return _pcbnew.MODULE_List_DrawAncre(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(MODULE_List self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.MODULE_List_DisplayInfo(self, *args)

    def HitTest(self, *args):
        """
        HitTest(MODULE_List self, wxPoint aPosition) -> bool
        HitTest(MODULE_List self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.MODULE_List_HitTest(self, *args)

    def GetReference(self):
        """GetReference(MODULE_List self) -> wxString const &"""
        return _pcbnew.MODULE_List_GetReference(self)

    def SetReference(self, *args):
        """SetReference(MODULE_List self, wxString const & aReference)"""
        return _pcbnew.MODULE_List_SetReference(self, *args)

    def GetValue(self):
        """GetValue(MODULE_List self) -> wxString const &"""
        return _pcbnew.MODULE_List_GetValue(self)

    def SetValue(self, *args):
        """SetValue(MODULE_List self, wxString const & aValue)"""
        return _pcbnew.MODULE_List_SetValue(self, *args)

    def Value(self):
        """Value(MODULE_List self) -> TEXTE_MODULE"""
        return _pcbnew.MODULE_List_Value(self)

    def Reference(self):
        """Reference(MODULE_List self) -> TEXTE_MODULE"""
        return _pcbnew.MODULE_List_Reference(self)

    def FindPadByName(self, *args):
        """FindPadByName(MODULE_List self, wxString const & aPadName) -> D_PAD"""
        return _pcbnew.MODULE_List_FindPadByName(self, *args)

    def GetPad(self, *args):
        """
        GetPad(MODULE_List self, wxPoint aPosition, int aLayerMask=ALL_LAYERS) -> D_PAD
        GetPad(MODULE_List self, wxPoint aPosition) -> D_PAD
        """
        return _pcbnew.MODULE_List_GetPad(self, *args)

    def GetPadCount(self):
        """GetPadCount(MODULE_List self) -> unsigned int"""
        return _pcbnew.MODULE_List_GetPadCount(self)

    def Add3DModel(self, *args):
        """Add3DModel(MODULE_List self, S3D_MASTER * a3DModel)"""
        return _pcbnew.MODULE_List_Add3DModel(self, *args)

    def AddPad(self, *args):
        """AddPad(MODULE_List self, D_PAD aPad)"""
        return _pcbnew.MODULE_List_AddPad(self, *args)

    def Visit(self, *args):
        """Visit(MODULE_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.MODULE_List_Visit(self, *args)

    def GetClass(self):
        """GetClass(MODULE_List self) -> wxString"""
        return _pcbnew.MODULE_List_GetClass(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(MODULE_List self) -> wxString"""
        return _pcbnew.MODULE_List_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(MODULE_List self) -> BITMAP_DEF"""
        return _pcbnew.MODULE_List_GetMenuImage(self)

    def Clone(self):
        """Clone(MODULE_List self) -> EDA_ITEM"""
        return _pcbnew.MODULE_List_Clone(self)

    def GetParent(self):
        """GetParent(MODULE_List self) -> BOARD_ITEM"""
        return _pcbnew.MODULE_List_GetParent(self)

    def GetLayer(self):
        """GetLayer(MODULE_List self) -> int"""
        return _pcbnew.MODULE_List_GetLayer(self)

    def SetLayer(self, *args):
        """SetLayer(MODULE_List self, int aLayer)"""
        return _pcbnew.MODULE_List_SetLayer(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(MODULE_List self, int aLayer) -> bool"""
        return _pcbnew.MODULE_List_IsOnLayer(self, *args)

    def IsTrack(self):
        """IsTrack(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsTrack(self)

    def UnLink(self):
        """UnLink(MODULE_List self)"""
        return _pcbnew.MODULE_List_UnLink(self)

    def DeleteStructure(self):
        """DeleteStructure(MODULE_List self)"""
        return _pcbnew.MODULE_List_DeleteStructure(self)

    def ShowShape(self, *args):
        """ShowShape(MODULE_List self, STROKE_T aShape) -> wxString"""
        return _pcbnew.MODULE_List_ShowShape(self, *args)

    def GetBoard(self):
        """GetBoard(MODULE_List self) -> BOARD"""
        return _pcbnew.MODULE_List_GetBoard(self)

    def GetLayerName(self):
        """GetLayerName(MODULE_List self) -> wxString"""
        return _pcbnew.MODULE_List_GetLayerName(self)

    def FormatInternalUnits(self, *args):
        """
        FormatInternalUnits(MODULE_List self, int aValue) -> std::string
        FormatInternalUnits(MODULE_List self, wxPoint aPoint) -> std::string
        FormatInternalUnits(MODULE_List self, wxSize aSize) -> std::string
        """
        return _pcbnew.MODULE_List_FormatInternalUnits(self, *args)

    def FormatAngle(self, *args):
        """FormatAngle(MODULE_List self, double aAngle) -> std::string"""
        return _pcbnew.MODULE_List_FormatAngle(self, *args)

    def Cast_to_TEXTE_PCB(self):
        """Cast_to_TEXTE_PCB(MODULE_List self) -> TEXTE_PCB"""
        return _pcbnew.MODULE_List_Cast_to_TEXTE_PCB(self)

    def Cast_to_DIMENSION(self):
        """Cast_to_DIMENSION(MODULE_List self) -> DIMENSION"""
        return _pcbnew.MODULE_List_Cast_to_DIMENSION(self)

    def Cast_to_MODULE(self):
        """Cast_to_MODULE(MODULE_List self) -> MODULE"""
        return _pcbnew.MODULE_List_Cast_to_MODULE(self)

    def Cast_to_TEXTE_MODULE(self):
        """Cast_to_TEXTE_MODULE(MODULE_List self) -> TEXTE_MODULE"""
        return _pcbnew.MODULE_List_Cast_to_TEXTE_MODULE(self)

    def Cast_to_DRAWSEGMENT(self):
        """Cast_to_DRAWSEGMENT(MODULE_List self) -> DRAWSEGMENT"""
        return _pcbnew.MODULE_List_Cast_to_DRAWSEGMENT(self)

    def Cast_to_MARKER_PCB(self):
        """Cast_to_MARKER_PCB(MODULE_List self) -> MARKER_PCB"""
        return _pcbnew.MODULE_List_Cast_to_MARKER_PCB(self)

    def Cast_to_BOARD(self):
        """Cast_to_BOARD(MODULE_List self) -> BOARD"""
        return _pcbnew.MODULE_List_Cast_to_BOARD(self)

    def Cast_to_EDGE_MODULE(self):
        """Cast_to_EDGE_MODULE(MODULE_List self) -> EDGE_MODULE"""
        return _pcbnew.MODULE_List_Cast_to_EDGE_MODULE(self)

    def Cast_to_D_PAD(self):
        """Cast_to_D_PAD(MODULE_List self) -> D_PAD"""
        return _pcbnew.MODULE_List_Cast_to_D_PAD(self)

    def Cast_to_TRACK(self):
        """Cast_to_TRACK(MODULE_List self) -> TRACK"""
        return _pcbnew.MODULE_List_Cast_to_TRACK(self)

    def Cast_to_SEGZONE(self):
        """Cast_to_SEGZONE(MODULE_List self) -> SEGZONE"""
        return _pcbnew.MODULE_List_Cast_to_SEGZONE(self)

    def Cast_to_SEGVIA(self):
        """Cast_to_SEGVIA(MODULE_List self) -> SEGVIA"""
        return _pcbnew.MODULE_List_Cast_to_SEGVIA(self)

    def Type(self):
        """Type(MODULE_List self) -> KICAD_T"""
        return _pcbnew.MODULE_List_Type(self)

    def SetTimeStamp(self, *args):
        """SetTimeStamp(MODULE_List self, time_t aNewTimeStamp)"""
        return _pcbnew.MODULE_List_SetTimeStamp(self, *args)

    def GetTimeStamp(self):
        """GetTimeStamp(MODULE_List self) -> time_t"""
        return _pcbnew.MODULE_List_GetTimeStamp(self)

    def GetSon(self):
        """GetSon(MODULE_List self) -> EDA_ITEM"""
        return _pcbnew.MODULE_List_GetSon(self)

    def GetList(self):
        """GetList(MODULE_List self) -> DHEAD"""
        return _pcbnew.MODULE_List_GetList(self)

    def SetParent(self, *args):
        """SetParent(MODULE_List self, EDA_ITEM aParent)"""
        return _pcbnew.MODULE_List_SetParent(self, *args)

    def SetSon(self, *args):
        """SetSon(MODULE_List self, EDA_ITEM aSon)"""
        return _pcbnew.MODULE_List_SetSon(self, *args)

    def SetList(self, *args):
        """SetList(MODULE_List self, DHEAD aList)"""
        return _pcbnew.MODULE_List_SetList(self, *args)

    def IsNew(self):
        """IsNew(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsNew(self)

    def IsModified(self):
        """IsModified(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsModified(self)

    def IsMoving(self):
        """IsMoving(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsMoving(self)

    def IsDragging(self):
        """IsDragging(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsDragging(self)

    def IsSelected(self):
        """IsSelected(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsSelected(self)

    def IsResized(self):
        """IsResized(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsResized(self)

    def SetModified(self):
        """SetModified(MODULE_List self)"""
        return _pcbnew.MODULE_List_SetModified(self)

    def GetState(self, *args):
        """GetState(MODULE_List self, int type) -> int"""
        return _pcbnew.MODULE_List_GetState(self, *args)

    def SetState(self, *args):
        """SetState(MODULE_List self, int type, int state)"""
        return _pcbnew.MODULE_List_SetState(self, *args)

    def GetStatus(self):
        """GetStatus(MODULE_List self) -> int"""
        return _pcbnew.MODULE_List_GetStatus(self)

    def SetStatus(self, *args):
        """SetStatus(MODULE_List self, int aStatus)"""
        return _pcbnew.MODULE_List_SetStatus(self, *args)

    def SetFlags(self, *args):
        """SetFlags(MODULE_List self, int aMask)"""
        return _pcbnew.MODULE_List_SetFlags(self, *args)

    def ClearFlags(self, *args):
        """
        ClearFlags(MODULE_List self, int aMask=-1)
        ClearFlags(MODULE_List self)
        """
        return _pcbnew.MODULE_List_ClearFlags(self, *args)

    def GetFlags(self):
        """GetFlags(MODULE_List self) -> int"""
        return _pcbnew.MODULE_List_GetFlags(self)

    def SetImage(self, *args):
        """SetImage(MODULE_List self, EDA_ITEM aItem)"""
        return _pcbnew.MODULE_List_SetImage(self, *args)

    def SetForceVisible(self, *args):
        """SetForceVisible(MODULE_List self, bool aEnable)"""
        return _pcbnew.MODULE_List_SetForceVisible(self, *args)

    def IterateForward(self, *args):
        """IterateForward(MODULE_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.MODULE_List_IterateForward(self, *args)

    def Matches(self, *args):
        """
        Matches(MODULE_List self, wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool
        Matches(MODULE_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.MODULE_List_Matches(self, *args)

    def Replace(self, *args):
        """
        Replace(MODULE_List self, wxFindReplaceData & aSearchData, wxString & aText) -> bool
        Replace(MODULE_List self, wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool
        Replace(MODULE_List self, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.MODULE_List_Replace(self, *args)

    def IsReplaceable(self):
        """IsReplaceable(MODULE_List self) -> bool"""
        return _pcbnew.MODULE_List_IsReplaceable(self)

    def __lt__(self, *args):
        """__lt__(MODULE_List self, EDA_ITEM aItem) -> bool"""
        return _pcbnew.MODULE_List___lt__(self, *args)

    def Sort(self, *args):
        """Sort(MODULE_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"""
        return _pcbnew.MODULE_List_Sort(self, *args)

MODULE_List_swigregister = _pcbnew.MODULE_List_swigregister
MODULE_List_swigregister(MODULE_List)

class SEGZONE_List(DHEAD):
    """Proxy of C++ DLIST<(SEGZONE)> class"""
    __swig_setmethods__ = {}
    for _s in [DHEAD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEGZONE_List, name, value)
    __swig_getmethods__ = {}
    for _s in [DHEAD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEGZONE_List, name)
    __repr__ = _swig_repr
    def Get(self):
        """Get(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_Get(self)

    def __deref__(self):
        """__deref__(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List___deref__(self)

    def GetFirst(self):
        """GetFirst(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_GetFirst(self)

    def GetLast(self):
        """GetLast(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_GetLast(self)

    def Append(self, *args):
        """
        Append(SEGZONE_List self, SEGZONE aNewElement)
        Append(SEGZONE_List self, SEGZONE_List aList)
        """
        return _pcbnew.SEGZONE_List_Append(self, *args)

    def Insert(self, *args):
        """Insert(SEGZONE_List self, SEGZONE aNewElement, SEGZONE aElementAfterMe)"""
        return _pcbnew.SEGZONE_List_Insert(self, *args)

    def Remove(self, *args):
        """Remove(SEGZONE_List self, SEGZONE aElement) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_Remove(self, *args)

    def begin(self):
        """begin(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_begin(self)

    def end(self):
        """end(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_end(self)

    def PopFront(self):
        """PopFront(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_PopFront(self)

    def PopBack(self):
        """PopBack(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_PopBack(self)

    def PushFront(self, *args):
        """PushFront(SEGZONE_List self, SEGZONE aNewElement)"""
        return _pcbnew.SEGZONE_List_PushFront(self, *args)

    def PushBack(self, *args):
        """PushBack(SEGZONE_List self, SEGZONE aNewElement)"""
        return _pcbnew.SEGZONE_List_PushBack(self, *args)

    class DLISTIter:
    	def __init__(self,aList):
    		self.last = aList   # last item is the start of list

    	def next(self):         # get the next item
    	
    		item = self.last
    		try:
    		  item = item.Get()
    		except:
    		  pass
    		     
    		if item is None:    # if the item is None, then finish the iteration
    			raise StopIteration
    		else:
    			ret = None
    			
    			
    			try:
    				ret = self.last.Get()
    			except: 
    				ret = self.last # next items do not..
    			
    			self.last = self.last.Next()
    			
    			
    			
    			if 'Cast' in dir(ret):
    				ret = ret.Cast()
    				
    			return ret

    def __iter__(self):
    	return self.DLISTIter(self)
    	

    def __init__(self): 
        """__init__(DLIST<(SEGZONE)> self) -> SEGZONE_List"""
        this = _pcbnew.new_SEGZONE_List()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_SEGZONE_List
    __del__ = lambda self : None;
    def GetClass(self):
        """GetClass(SEGZONE_List self) -> wxString"""
        return _pcbnew.SEGZONE_List_GetClass(self)

    def Next(self):
        """Next(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_Next(self)

    def GetSelectMenuText(self):
        """GetSelectMenuText(SEGZONE_List self) -> wxString"""
        return _pcbnew.SEGZONE_List_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(SEGZONE_List self) -> BITMAP_DEF"""
        return _pcbnew.SEGZONE_List_GetMenuImage(self)

    def Clone(self):
        """Clone(SEGZONE_List self) -> EDA_ITEM"""
        return _pcbnew.SEGZONE_List_Clone(self)

    __swig_setmethods__["m_Width"] = _pcbnew.SEGZONE_List_m_Width_set
    __swig_getmethods__["m_Width"] = _pcbnew.SEGZONE_List_m_Width_get
    if _newclass:m_Width = _swig_property(_pcbnew.SEGZONE_List_m_Width_get, _pcbnew.SEGZONE_List_m_Width_set)
    __swig_setmethods__["m_Start"] = _pcbnew.SEGZONE_List_m_Start_set
    __swig_getmethods__["m_Start"] = _pcbnew.SEGZONE_List_m_Start_get
    if _newclass:m_Start = _swig_property(_pcbnew.SEGZONE_List_m_Start_get, _pcbnew.SEGZONE_List_m_Start_set)
    __swig_setmethods__["m_End"] = _pcbnew.SEGZONE_List_m_End_set
    __swig_getmethods__["m_End"] = _pcbnew.SEGZONE_List_m_End_get
    if _newclass:m_End = _swig_property(_pcbnew.SEGZONE_List_m_End_get, _pcbnew.SEGZONE_List_m_End_set)
    __swig_setmethods__["m_Shape"] = _pcbnew.SEGZONE_List_m_Shape_set
    __swig_getmethods__["m_Shape"] = _pcbnew.SEGZONE_List_m_Shape_get
    if _newclass:m_Shape = _swig_property(_pcbnew.SEGZONE_List_m_Shape_get, _pcbnew.SEGZONE_List_m_Shape_set)
    __swig_setmethods__["start"] = _pcbnew.SEGZONE_List_start_set
    __swig_getmethods__["start"] = _pcbnew.SEGZONE_List_start_get
    if _newclass:start = _swig_property(_pcbnew.SEGZONE_List_start_get, _pcbnew.SEGZONE_List_start_set)
    __swig_setmethods__["end"] = _pcbnew.SEGZONE_List_end_set
    __swig_getmethods__["end"] = _pcbnew.SEGZONE_List_end_get
    if _newclass:end = _swig_property(_pcbnew.SEGZONE_List_end_get, _pcbnew.SEGZONE_List_end_set)
    __swig_setmethods__["m_Param"] = _pcbnew.SEGZONE_List_m_Param_set
    __swig_getmethods__["m_Param"] = _pcbnew.SEGZONE_List_m_Param_get
    if _newclass:m_Param = _swig_property(_pcbnew.SEGZONE_List_m_Param_get, _pcbnew.SEGZONE_List_m_Param_set)
    def Back(self):
        """Back(SEGZONE_List self) -> TRACK"""
        return _pcbnew.SEGZONE_List_Back(self)

    def Move(self, *args):
        """Move(SEGZONE_List self, wxPoint aMoveVector)"""
        return _pcbnew.SEGZONE_List_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(SEGZONE_List self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.SEGZONE_List_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(SEGZONE_List self, wxPoint aCentre)"""
        return _pcbnew.SEGZONE_List_Flip(self, *args)

    def SetPosition(self, *args):
        """SetPosition(SEGZONE_List self, wxPoint aPos)"""
        return _pcbnew.SEGZONE_List_SetPosition(self, *args)

    def GetPosition(self):
        """GetPosition(SEGZONE_List self) -> wxPoint"""
        return _pcbnew.SEGZONE_List_GetPosition(self)

    def SetWidth(self, *args):
        """SetWidth(SEGZONE_List self, int aWidth)"""
        return _pcbnew.SEGZONE_List_SetWidth(self, *args)

    def GetWidth(self):
        """GetWidth(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetWidth(self)

    def SetEnd(self, *args):
        """SetEnd(SEGZONE_List self, wxPoint aEnd)"""
        return _pcbnew.SEGZONE_List_SetEnd(self, *args)

    def GetEnd(self):
        """GetEnd(SEGZONE_List self) -> wxPoint"""
        return _pcbnew.SEGZONE_List_GetEnd(self)

    def SetStart(self, *args):
        """SetStart(SEGZONE_List self, wxPoint aStart)"""
        return _pcbnew.SEGZONE_List_SetStart(self, *args)

    def GetStart(self):
        """GetStart(SEGZONE_List self) -> wxPoint"""
        return _pcbnew.SEGZONE_List_GetStart(self)

    def GetBoundingBox(self):
        """GetBoundingBox(SEGZONE_List self) -> EDA_RECT"""
        return _pcbnew.SEGZONE_List_GetBoundingBox(self)

    def GetBestInsertPoint(self, *args):
        """GetBestInsertPoint(SEGZONE_List self, BOARD aPcb) -> TRACK"""
        return _pcbnew.SEGZONE_List_GetBestInsertPoint(self, *args)

    def GetStartNetCode(self, *args):
        """GetStartNetCode(SEGZONE_List self, int NetCode) -> TRACK"""
        return _pcbnew.SEGZONE_List_GetStartNetCode(self, *args)

    def GetEndNetCode(self, *args):
        """GetEndNetCode(SEGZONE_List self, int NetCode) -> TRACK"""
        return _pcbnew.SEGZONE_List_GetEndNetCode(self, *args)

    def GetLength(self):
        """GetLength(SEGZONE_List self) -> double"""
        return _pcbnew.SEGZONE_List_GetLength(self)

    def Draw(self, *args):
        """
        Draw(SEGZONE_List self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)
        Draw(SEGZONE_List self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.SEGZONE_List_Draw(self, *args)

    def GetShape(self):
        """GetShape(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetShape(self)

    def SetShape(self, *args):
        """SetShape(SEGZONE_List self, int aShape)"""
        return _pcbnew.SEGZONE_List_SetShape(self, *args)

    def TransformShapeWithClearanceToPolygon(self, *args):
        """
        TransformShapeWithClearanceToPolygon(SEGZONE_List self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, int aClearanceValue, 
            int aCircleToSegmentsCount, double aCorrectionFactor)
        """
        return _pcbnew.SEGZONE_List_TransformShapeWithClearanceToPolygon(self, *args)

    def SetDrill(self, *args):
        """SetDrill(SEGZONE_List self, int aDrill)"""
        return _pcbnew.SEGZONE_List_SetDrill(self, *args)

    def GetDrill(self):
        """GetDrill(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetDrill(self)

    def GetDrillValue(self):
        """GetDrillValue(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetDrillValue(self)

    def SetDrillDefault(self):
        """SetDrillDefault(SEGZONE_List self)"""
        return _pcbnew.SEGZONE_List_SetDrillDefault(self)

    def IsDrillDefault(self):
        """IsDrillDefault(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsDrillDefault(self)

    def ReturnMaskLayer(self):
        """ReturnMaskLayer(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_ReturnMaskLayer(self)

    def IsPointOnEnds(self, *args):
        """
        IsPointOnEnds(SEGZONE_List self, wxPoint point, int min_dist=0) -> int
        IsPointOnEnds(SEGZONE_List self, wxPoint point) -> int
        """
        return _pcbnew.SEGZONE_List_IsPointOnEnds(self, *args)

    def IsNull(self):
        """IsNull(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsNull(self)

    def DisplayInfo(self, *args):
        """DisplayInfo(SEGZONE_List self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.SEGZONE_List_DisplayInfo(self, *args)

    def DisplayInfoBase(self, *args):
        """DisplayInfoBase(SEGZONE_List self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.SEGZONE_List_DisplayInfoBase(self, *args)

    def ShowWidth(self):
        """ShowWidth(SEGZONE_List self) -> wxString"""
        return _pcbnew.SEGZONE_List_ShowWidth(self)

    def Visit(self, *args):
        """Visit(SEGZONE_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.SEGZONE_List_Visit(self, *args)

    def HitTest(self, *args):
        """
        HitTest(SEGZONE_List self, wxPoint aPosition) -> bool
        HitTest(SEGZONE_List self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.SEGZONE_List_HitTest(self, *args)

    def GetVia(self, *args):
        """
        GetVia(SEGZONE_List self, wxPoint aPosition, int aLayerMask=-1) -> TRACK
        GetVia(SEGZONE_List self, wxPoint aPosition) -> TRACK
        GetVia(SEGZONE_List self, TRACK aEndTrace, wxPoint aPosition, int aLayerMask) -> TRACK
        """
        return _pcbnew.SEGZONE_List_GetVia(self, *args)

    def GetTrace(self, *args):
        """GetTrace(SEGZONE_List self, TRACK aStartTrace, TRACK aEndTrace, int aEndPoint) -> TRACK"""
        return _pcbnew.SEGZONE_List_GetTrace(self, *args)

    def GetEndSegments(self, *args):
        """GetEndSegments(SEGZONE_List self, int NbSegm, TRACK ** StartTrack, TRACK ** EndTrack) -> int"""
        return _pcbnew.SEGZONE_List_GetEndSegments(self, *args)

    def GetClearance(self, aItem=None):
        """
        GetClearance(SEGZONE_List self, BOARD_CONNECTED_ITEM aItem=None) -> int
        GetClearance(SEGZONE_List self) -> int
        """
        return _pcbnew.SEGZONE_List_GetClearance(self, aItem)

    __swig_setmethods__["m_TracksConnected"] = _pcbnew.SEGZONE_List_m_TracksConnected_set
    __swig_getmethods__["m_TracksConnected"] = _pcbnew.SEGZONE_List_m_TracksConnected_get
    if _newclass:m_TracksConnected = _swig_property(_pcbnew.SEGZONE_List_m_TracksConnected_get, _pcbnew.SEGZONE_List_m_TracksConnected_set)
    __swig_setmethods__["m_PadsConnected"] = _pcbnew.SEGZONE_List_m_PadsConnected_set
    __swig_getmethods__["m_PadsConnected"] = _pcbnew.SEGZONE_List_m_PadsConnected_get
    if _newclass:m_PadsConnected = _swig_property(_pcbnew.SEGZONE_List_m_PadsConnected_get, _pcbnew.SEGZONE_List_m_PadsConnected_set)
    def GetNet(self):
        """GetNet(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetNet(self)

    def SetNet(self, *args):
        """SetNet(SEGZONE_List self, int aNetCode)"""
        return _pcbnew.SEGZONE_List_SetNet(self, *args)

    def GetSubNet(self):
        """GetSubNet(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetSubNet(self)

    def SetSubNet(self, *args):
        """SetSubNet(SEGZONE_List self, int aSubNetCode)"""
        return _pcbnew.SEGZONE_List_SetSubNet(self, *args)

    def GetZoneSubNet(self):
        """GetZoneSubNet(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetZoneSubNet(self)

    def SetZoneSubNet(self, *args):
        """SetZoneSubNet(SEGZONE_List self, int aSubNetCode)"""
        return _pcbnew.SEGZONE_List_SetZoneSubNet(self, *args)

    def GetNetClass(self):
        """GetNetClass(SEGZONE_List self) -> NETCLASS"""
        return _pcbnew.SEGZONE_List_GetNetClass(self)

    def GetNetClassName(self):
        """GetNetClassName(SEGZONE_List self) -> wxString"""
        return _pcbnew.SEGZONE_List_GetNetClassName(self)

    def GetParent(self):
        """GetParent(SEGZONE_List self) -> BOARD_ITEM"""
        return _pcbnew.SEGZONE_List_GetParent(self)

    def GetLayer(self):
        """GetLayer(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetLayer(self)

    def SetLayer(self, *args):
        """SetLayer(SEGZONE_List self, int aLayer)"""
        return _pcbnew.SEGZONE_List_SetLayer(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(SEGZONE_List self, int aLayer) -> bool"""
        return _pcbnew.SEGZONE_List_IsOnLayer(self, *args)

    def IsTrack(self):
        """IsTrack(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsTrack(self)

    def IsLocked(self):
        """IsLocked(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsLocked(self)

    def UnLink(self):
        """UnLink(SEGZONE_List self)"""
        return _pcbnew.SEGZONE_List_UnLink(self)

    def DeleteStructure(self):
        """DeleteStructure(SEGZONE_List self)"""
        return _pcbnew.SEGZONE_List_DeleteStructure(self)

    def ShowShape(self, *args):
        """ShowShape(SEGZONE_List self, STROKE_T aShape) -> wxString"""
        return _pcbnew.SEGZONE_List_ShowShape(self, *args)

    def GetBoard(self):
        """GetBoard(SEGZONE_List self) -> BOARD"""
        return _pcbnew.SEGZONE_List_GetBoard(self)

    def GetLayerName(self):
        """GetLayerName(SEGZONE_List self) -> wxString"""
        return _pcbnew.SEGZONE_List_GetLayerName(self)

    def FormatInternalUnits(self, *args):
        """
        FormatInternalUnits(SEGZONE_List self, int aValue) -> std::string
        FormatInternalUnits(SEGZONE_List self, wxPoint aPoint) -> std::string
        FormatInternalUnits(SEGZONE_List self, wxSize aSize) -> std::string
        """
        return _pcbnew.SEGZONE_List_FormatInternalUnits(self, *args)

    def FormatAngle(self, *args):
        """FormatAngle(SEGZONE_List self, double aAngle) -> std::string"""
        return _pcbnew.SEGZONE_List_FormatAngle(self, *args)

    def Cast_to_TEXTE_PCB(self):
        """Cast_to_TEXTE_PCB(SEGZONE_List self) -> TEXTE_PCB"""
        return _pcbnew.SEGZONE_List_Cast_to_TEXTE_PCB(self)

    def Cast_to_DIMENSION(self):
        """Cast_to_DIMENSION(SEGZONE_List self) -> DIMENSION"""
        return _pcbnew.SEGZONE_List_Cast_to_DIMENSION(self)

    def Cast_to_MODULE(self):
        """Cast_to_MODULE(SEGZONE_List self) -> MODULE"""
        return _pcbnew.SEGZONE_List_Cast_to_MODULE(self)

    def Cast_to_TEXTE_MODULE(self):
        """Cast_to_TEXTE_MODULE(SEGZONE_List self) -> TEXTE_MODULE"""
        return _pcbnew.SEGZONE_List_Cast_to_TEXTE_MODULE(self)

    def Cast_to_DRAWSEGMENT(self):
        """Cast_to_DRAWSEGMENT(SEGZONE_List self) -> DRAWSEGMENT"""
        return _pcbnew.SEGZONE_List_Cast_to_DRAWSEGMENT(self)

    def Cast_to_MARKER_PCB(self):
        """Cast_to_MARKER_PCB(SEGZONE_List self) -> MARKER_PCB"""
        return _pcbnew.SEGZONE_List_Cast_to_MARKER_PCB(self)

    def Cast_to_BOARD(self):
        """Cast_to_BOARD(SEGZONE_List self) -> BOARD"""
        return _pcbnew.SEGZONE_List_Cast_to_BOARD(self)

    def Cast_to_EDGE_MODULE(self):
        """Cast_to_EDGE_MODULE(SEGZONE_List self) -> EDGE_MODULE"""
        return _pcbnew.SEGZONE_List_Cast_to_EDGE_MODULE(self)

    def Cast_to_D_PAD(self):
        """Cast_to_D_PAD(SEGZONE_List self) -> D_PAD"""
        return _pcbnew.SEGZONE_List_Cast_to_D_PAD(self)

    def Cast_to_TRACK(self):
        """Cast_to_TRACK(SEGZONE_List self) -> TRACK"""
        return _pcbnew.SEGZONE_List_Cast_to_TRACK(self)

    def Cast_to_SEGZONE(self):
        """Cast_to_SEGZONE(SEGZONE_List self) -> SEGZONE"""
        return _pcbnew.SEGZONE_List_Cast_to_SEGZONE(self)

    def Cast_to_SEGVIA(self):
        """Cast_to_SEGVIA(SEGZONE_List self) -> SEGVIA"""
        return _pcbnew.SEGZONE_List_Cast_to_SEGVIA(self)

    def Type(self):
        """Type(SEGZONE_List self) -> KICAD_T"""
        return _pcbnew.SEGZONE_List_Type(self)

    def SetTimeStamp(self, *args):
        """SetTimeStamp(SEGZONE_List self, time_t aNewTimeStamp)"""
        return _pcbnew.SEGZONE_List_SetTimeStamp(self, *args)

    def GetTimeStamp(self):
        """GetTimeStamp(SEGZONE_List self) -> time_t"""
        return _pcbnew.SEGZONE_List_GetTimeStamp(self)

    def GetSon(self):
        """GetSon(SEGZONE_List self) -> EDA_ITEM"""
        return _pcbnew.SEGZONE_List_GetSon(self)

    def GetList(self):
        """GetList(SEGZONE_List self) -> DHEAD"""
        return _pcbnew.SEGZONE_List_GetList(self)

    def SetParent(self, *args):
        """SetParent(SEGZONE_List self, EDA_ITEM aParent)"""
        return _pcbnew.SEGZONE_List_SetParent(self, *args)

    def SetSon(self, *args):
        """SetSon(SEGZONE_List self, EDA_ITEM aSon)"""
        return _pcbnew.SEGZONE_List_SetSon(self, *args)

    def SetList(self, *args):
        """SetList(SEGZONE_List self, DHEAD aList)"""
        return _pcbnew.SEGZONE_List_SetList(self, *args)

    def IsNew(self):
        """IsNew(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsNew(self)

    def IsModified(self):
        """IsModified(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsModified(self)

    def IsMoving(self):
        """IsMoving(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsMoving(self)

    def IsDragging(self):
        """IsDragging(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsDragging(self)

    def IsSelected(self):
        """IsSelected(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsSelected(self)

    def IsResized(self):
        """IsResized(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsResized(self)

    def SetModified(self):
        """SetModified(SEGZONE_List self)"""
        return _pcbnew.SEGZONE_List_SetModified(self)

    def GetState(self, *args):
        """GetState(SEGZONE_List self, int type) -> int"""
        return _pcbnew.SEGZONE_List_GetState(self, *args)

    def SetState(self, *args):
        """SetState(SEGZONE_List self, int type, int state)"""
        return _pcbnew.SEGZONE_List_SetState(self, *args)

    def GetStatus(self):
        """GetStatus(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetStatus(self)

    def SetStatus(self, *args):
        """SetStatus(SEGZONE_List self, int aStatus)"""
        return _pcbnew.SEGZONE_List_SetStatus(self, *args)

    def SetFlags(self, *args):
        """SetFlags(SEGZONE_List self, int aMask)"""
        return _pcbnew.SEGZONE_List_SetFlags(self, *args)

    def ClearFlags(self, *args):
        """
        ClearFlags(SEGZONE_List self, int aMask=-1)
        ClearFlags(SEGZONE_List self)
        """
        return _pcbnew.SEGZONE_List_ClearFlags(self, *args)

    def GetFlags(self):
        """GetFlags(SEGZONE_List self) -> int"""
        return _pcbnew.SEGZONE_List_GetFlags(self)

    def SetImage(self, *args):
        """SetImage(SEGZONE_List self, EDA_ITEM aItem)"""
        return _pcbnew.SEGZONE_List_SetImage(self, *args)

    def SetForceVisible(self, *args):
        """SetForceVisible(SEGZONE_List self, bool aEnable)"""
        return _pcbnew.SEGZONE_List_SetForceVisible(self, *args)

    def IterateForward(self, *args):
        """IterateForward(SEGZONE_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.SEGZONE_List_IterateForward(self, *args)

    def Matches(self, *args):
        """
        Matches(SEGZONE_List self, wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool
        Matches(SEGZONE_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.SEGZONE_List_Matches(self, *args)

    def Replace(self, *args):
        """
        Replace(SEGZONE_List self, wxFindReplaceData & aSearchData, wxString & aText) -> bool
        Replace(SEGZONE_List self, wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool
        Replace(SEGZONE_List self, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.SEGZONE_List_Replace(self, *args)

    def IsReplaceable(self):
        """IsReplaceable(SEGZONE_List self) -> bool"""
        return _pcbnew.SEGZONE_List_IsReplaceable(self)

    def __lt__(self, *args):
        """__lt__(SEGZONE_List self, EDA_ITEM aItem) -> bool"""
        return _pcbnew.SEGZONE_List___lt__(self, *args)

    def Sort(self, *args):
        """Sort(SEGZONE_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"""
        return _pcbnew.SEGZONE_List_Sort(self, *args)

SEGZONE_List_swigregister = _pcbnew.SEGZONE_List_swigregister
SEGZONE_List_swigregister(SEGZONE_List)

class TRACK_List(DHEAD):
    """Proxy of C++ DLIST<(TRACK)> class"""
    __swig_setmethods__ = {}
    for _s in [DHEAD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRACK_List, name, value)
    __swig_getmethods__ = {}
    for _s in [DHEAD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TRACK_List, name)
    __repr__ = _swig_repr
    def Get(self):
        """Get(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_Get(self)

    def __deref__(self):
        """__deref__(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List___deref__(self)

    def GetFirst(self):
        """GetFirst(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_GetFirst(self)

    def GetLast(self):
        """GetLast(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_GetLast(self)

    def Append(self, *args):
        """
        Append(TRACK_List self, TRACK aNewElement)
        Append(TRACK_List self, TRACK_List aList)
        """
        return _pcbnew.TRACK_List_Append(self, *args)

    def Insert(self, *args):
        """Insert(TRACK_List self, TRACK aNewElement, TRACK aElementAfterMe)"""
        return _pcbnew.TRACK_List_Insert(self, *args)

    def Remove(self, *args):
        """Remove(TRACK_List self, TRACK aElement) -> TRACK"""
        return _pcbnew.TRACK_List_Remove(self, *args)

    def begin(self):
        """begin(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_begin(self)

    def end(self):
        """end(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_end(self)

    def PopFront(self):
        """PopFront(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_PopFront(self)

    def PopBack(self):
        """PopBack(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_PopBack(self)

    def PushFront(self, *args):
        """PushFront(TRACK_List self, TRACK aNewElement)"""
        return _pcbnew.TRACK_List_PushFront(self, *args)

    def PushBack(self, *args):
        """PushBack(TRACK_List self, TRACK aNewElement)"""
        return _pcbnew.TRACK_List_PushBack(self, *args)

    class DLISTIter:
    	def __init__(self,aList):
    		self.last = aList   # last item is the start of list

    	def next(self):         # get the next item
    	
    		item = self.last
    		try:
    		  item = item.Get()
    		except:
    		  pass
    		     
    		if item is None:    # if the item is None, then finish the iteration
    			raise StopIteration
    		else:
    			ret = None
    			
    			
    			try:
    				ret = self.last.Get()
    			except: 
    				ret = self.last # next items do not..
    			
    			self.last = self.last.Next()
    			
    			
    			
    			if 'Cast' in dir(ret):
    				ret = ret.Cast()
    				
    			return ret

    def __iter__(self):
    	return self.DLISTIter(self)
    	

    def __init__(self): 
        """__init__(DLIST<(TRACK)> self) -> TRACK_List"""
        this = _pcbnew.new_TRACK_List()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_TRACK_List
    __del__ = lambda self : None;
    __swig_setmethods__["m_Width"] = _pcbnew.TRACK_List_m_Width_set
    __swig_getmethods__["m_Width"] = _pcbnew.TRACK_List_m_Width_get
    if _newclass:m_Width = _swig_property(_pcbnew.TRACK_List_m_Width_get, _pcbnew.TRACK_List_m_Width_set)
    __swig_setmethods__["m_Start"] = _pcbnew.TRACK_List_m_Start_set
    __swig_getmethods__["m_Start"] = _pcbnew.TRACK_List_m_Start_get
    if _newclass:m_Start = _swig_property(_pcbnew.TRACK_List_m_Start_get, _pcbnew.TRACK_List_m_Start_set)
    __swig_setmethods__["m_End"] = _pcbnew.TRACK_List_m_End_set
    __swig_getmethods__["m_End"] = _pcbnew.TRACK_List_m_End_get
    if _newclass:m_End = _swig_property(_pcbnew.TRACK_List_m_End_get, _pcbnew.TRACK_List_m_End_set)
    __swig_setmethods__["m_Shape"] = _pcbnew.TRACK_List_m_Shape_set
    __swig_getmethods__["m_Shape"] = _pcbnew.TRACK_List_m_Shape_get
    if _newclass:m_Shape = _swig_property(_pcbnew.TRACK_List_m_Shape_get, _pcbnew.TRACK_List_m_Shape_set)
    __swig_setmethods__["start"] = _pcbnew.TRACK_List_start_set
    __swig_getmethods__["start"] = _pcbnew.TRACK_List_start_get
    if _newclass:start = _swig_property(_pcbnew.TRACK_List_start_get, _pcbnew.TRACK_List_start_set)
    __swig_setmethods__["end"] = _pcbnew.TRACK_List_end_set
    __swig_getmethods__["end"] = _pcbnew.TRACK_List_end_get
    if _newclass:end = _swig_property(_pcbnew.TRACK_List_end_get, _pcbnew.TRACK_List_end_set)
    __swig_setmethods__["m_Param"] = _pcbnew.TRACK_List_m_Param_set
    __swig_getmethods__["m_Param"] = _pcbnew.TRACK_List_m_Param_get
    if _newclass:m_Param = _swig_property(_pcbnew.TRACK_List_m_Param_get, _pcbnew.TRACK_List_m_Param_set)
    def Next(self):
        """Next(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_Next(self)

    def Back(self):
        """Back(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_Back(self)

    def Move(self, *args):
        """Move(TRACK_List self, wxPoint aMoveVector)"""
        return _pcbnew.TRACK_List_Move(self, *args)

    def Rotate(self, *args):
        """Rotate(TRACK_List self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.TRACK_List_Rotate(self, *args)

    def Flip(self, *args):
        """Flip(TRACK_List self, wxPoint aCentre)"""
        return _pcbnew.TRACK_List_Flip(self, *args)

    def SetPosition(self, *args):
        """SetPosition(TRACK_List self, wxPoint aPos)"""
        return _pcbnew.TRACK_List_SetPosition(self, *args)

    def GetPosition(self):
        """GetPosition(TRACK_List self) -> wxPoint"""
        return _pcbnew.TRACK_List_GetPosition(self)

    def SetWidth(self, *args):
        """SetWidth(TRACK_List self, int aWidth)"""
        return _pcbnew.TRACK_List_SetWidth(self, *args)

    def GetWidth(self):
        """GetWidth(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetWidth(self)

    def SetEnd(self, *args):
        """SetEnd(TRACK_List self, wxPoint aEnd)"""
        return _pcbnew.TRACK_List_SetEnd(self, *args)

    def GetEnd(self):
        """GetEnd(TRACK_List self) -> wxPoint"""
        return _pcbnew.TRACK_List_GetEnd(self)

    def SetStart(self, *args):
        """SetStart(TRACK_List self, wxPoint aStart)"""
        return _pcbnew.TRACK_List_SetStart(self, *args)

    def GetStart(self):
        """GetStart(TRACK_List self) -> wxPoint"""
        return _pcbnew.TRACK_List_GetStart(self)

    def GetBoundingBox(self):
        """GetBoundingBox(TRACK_List self) -> EDA_RECT"""
        return _pcbnew.TRACK_List_GetBoundingBox(self)

    def GetBestInsertPoint(self, *args):
        """GetBestInsertPoint(TRACK_List self, BOARD aPcb) -> TRACK"""
        return _pcbnew.TRACK_List_GetBestInsertPoint(self, *args)

    def GetStartNetCode(self, *args):
        """GetStartNetCode(TRACK_List self, int NetCode) -> TRACK"""
        return _pcbnew.TRACK_List_GetStartNetCode(self, *args)

    def GetEndNetCode(self, *args):
        """GetEndNetCode(TRACK_List self, int NetCode) -> TRACK"""
        return _pcbnew.TRACK_List_GetEndNetCode(self, *args)

    def GetLength(self):
        """GetLength(TRACK_List self) -> double"""
        return _pcbnew.TRACK_List_GetLength(self)

    def Draw(self, *args):
        """
        Draw(TRACK_List self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)
        Draw(TRACK_List self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)
        """
        return _pcbnew.TRACK_List_Draw(self, *args)

    def GetShape(self):
        """GetShape(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetShape(self)

    def SetShape(self, *args):
        """SetShape(TRACK_List self, int aShape)"""
        return _pcbnew.TRACK_List_SetShape(self, *args)

    def TransformShapeWithClearanceToPolygon(self, *args):
        """
        TransformShapeWithClearanceToPolygon(TRACK_List self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, int aClearanceValue, 
            int aCircleToSegmentsCount, double aCorrectionFactor)
        """
        return _pcbnew.TRACK_List_TransformShapeWithClearanceToPolygon(self, *args)

    def SetDrill(self, *args):
        """SetDrill(TRACK_List self, int aDrill)"""
        return _pcbnew.TRACK_List_SetDrill(self, *args)

    def GetDrill(self):
        """GetDrill(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetDrill(self)

    def GetDrillValue(self):
        """GetDrillValue(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetDrillValue(self)

    def SetDrillDefault(self):
        """SetDrillDefault(TRACK_List self)"""
        return _pcbnew.TRACK_List_SetDrillDefault(self)

    def IsDrillDefault(self):
        """IsDrillDefault(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsDrillDefault(self)

    def ReturnMaskLayer(self):
        """ReturnMaskLayer(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_ReturnMaskLayer(self)

    def IsPointOnEnds(self, *args):
        """
        IsPointOnEnds(TRACK_List self, wxPoint point, int min_dist=0) -> int
        IsPointOnEnds(TRACK_List self, wxPoint point) -> int
        """
        return _pcbnew.TRACK_List_IsPointOnEnds(self, *args)

    def IsNull(self):
        """IsNull(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsNull(self)

    def DisplayInfo(self, *args):
        """DisplayInfo(TRACK_List self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.TRACK_List_DisplayInfo(self, *args)

    def DisplayInfoBase(self, *args):
        """DisplayInfoBase(TRACK_List self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.TRACK_List_DisplayInfoBase(self, *args)

    def ShowWidth(self):
        """ShowWidth(TRACK_List self) -> wxString"""
        return _pcbnew.TRACK_List_ShowWidth(self)

    def Visit(self, *args):
        """Visit(TRACK_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.TRACK_List_Visit(self, *args)

    def HitTest(self, *args):
        """
        HitTest(TRACK_List self, wxPoint aPosition) -> bool
        HitTest(TRACK_List self, EDA_RECT aRect) -> bool
        """
        return _pcbnew.TRACK_List_HitTest(self, *args)

    def GetVia(self, *args):
        """
        GetVia(TRACK_List self, wxPoint aPosition, int aLayerMask=-1) -> TRACK
        GetVia(TRACK_List self, wxPoint aPosition) -> TRACK
        GetVia(TRACK_List self, TRACK aEndTrace, wxPoint aPosition, int aLayerMask) -> TRACK
        """
        return _pcbnew.TRACK_List_GetVia(self, *args)

    def GetTrace(self, *args):
        """GetTrace(TRACK_List self, TRACK aStartTrace, TRACK aEndTrace, int aEndPoint) -> TRACK"""
        return _pcbnew.TRACK_List_GetTrace(self, *args)

    def GetEndSegments(self, *args):
        """GetEndSegments(TRACK_List self, int NbSegm, TRACK ** StartTrack, TRACK ** EndTrack) -> int"""
        return _pcbnew.TRACK_List_GetEndSegments(self, *args)

    def GetClass(self):
        """GetClass(TRACK_List self) -> wxString"""
        return _pcbnew.TRACK_List_GetClass(self)

    def GetClearance(self, aItem=None):
        """
        GetClearance(TRACK_List self, BOARD_CONNECTED_ITEM aItem=None) -> int
        GetClearance(TRACK_List self) -> int
        """
        return _pcbnew.TRACK_List_GetClearance(self, aItem)

    def GetSelectMenuText(self):
        """GetSelectMenuText(TRACK_List self) -> wxString"""
        return _pcbnew.TRACK_List_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(TRACK_List self) -> BITMAP_DEF"""
        return _pcbnew.TRACK_List_GetMenuImage(self)

    def Clone(self):
        """Clone(TRACK_List self) -> EDA_ITEM"""
        return _pcbnew.TRACK_List_Clone(self)

    __swig_setmethods__["m_TracksConnected"] = _pcbnew.TRACK_List_m_TracksConnected_set
    __swig_getmethods__["m_TracksConnected"] = _pcbnew.TRACK_List_m_TracksConnected_get
    if _newclass:m_TracksConnected = _swig_property(_pcbnew.TRACK_List_m_TracksConnected_get, _pcbnew.TRACK_List_m_TracksConnected_set)
    __swig_setmethods__["m_PadsConnected"] = _pcbnew.TRACK_List_m_PadsConnected_set
    __swig_getmethods__["m_PadsConnected"] = _pcbnew.TRACK_List_m_PadsConnected_get
    if _newclass:m_PadsConnected = _swig_property(_pcbnew.TRACK_List_m_PadsConnected_get, _pcbnew.TRACK_List_m_PadsConnected_set)
    def GetNet(self):
        """GetNet(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetNet(self)

    def SetNet(self, *args):
        """SetNet(TRACK_List self, int aNetCode)"""
        return _pcbnew.TRACK_List_SetNet(self, *args)

    def GetSubNet(self):
        """GetSubNet(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetSubNet(self)

    def SetSubNet(self, *args):
        """SetSubNet(TRACK_List self, int aSubNetCode)"""
        return _pcbnew.TRACK_List_SetSubNet(self, *args)

    def GetZoneSubNet(self):
        """GetZoneSubNet(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetZoneSubNet(self)

    def SetZoneSubNet(self, *args):
        """SetZoneSubNet(TRACK_List self, int aSubNetCode)"""
        return _pcbnew.TRACK_List_SetZoneSubNet(self, *args)

    def GetNetClass(self):
        """GetNetClass(TRACK_List self) -> NETCLASS"""
        return _pcbnew.TRACK_List_GetNetClass(self)

    def GetNetClassName(self):
        """GetNetClassName(TRACK_List self) -> wxString"""
        return _pcbnew.TRACK_List_GetNetClassName(self)

    def GetParent(self):
        """GetParent(TRACK_List self) -> BOARD_ITEM"""
        return _pcbnew.TRACK_List_GetParent(self)

    def GetLayer(self):
        """GetLayer(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetLayer(self)

    def SetLayer(self, *args):
        """SetLayer(TRACK_List self, int aLayer)"""
        return _pcbnew.TRACK_List_SetLayer(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(TRACK_List self, int aLayer) -> bool"""
        return _pcbnew.TRACK_List_IsOnLayer(self, *args)

    def IsTrack(self):
        """IsTrack(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsTrack(self)

    def IsLocked(self):
        """IsLocked(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsLocked(self)

    def UnLink(self):
        """UnLink(TRACK_List self)"""
        return _pcbnew.TRACK_List_UnLink(self)

    def DeleteStructure(self):
        """DeleteStructure(TRACK_List self)"""
        return _pcbnew.TRACK_List_DeleteStructure(self)

    def ShowShape(self, *args):
        """ShowShape(TRACK_List self, STROKE_T aShape) -> wxString"""
        return _pcbnew.TRACK_List_ShowShape(self, *args)

    def GetBoard(self):
        """GetBoard(TRACK_List self) -> BOARD"""
        return _pcbnew.TRACK_List_GetBoard(self)

    def GetLayerName(self):
        """GetLayerName(TRACK_List self) -> wxString"""
        return _pcbnew.TRACK_List_GetLayerName(self)

    def FormatInternalUnits(self, *args):
        """
        FormatInternalUnits(TRACK_List self, int aValue) -> std::string
        FormatInternalUnits(TRACK_List self, wxPoint aPoint) -> std::string
        FormatInternalUnits(TRACK_List self, wxSize aSize) -> std::string
        """
        return _pcbnew.TRACK_List_FormatInternalUnits(self, *args)

    def FormatAngle(self, *args):
        """FormatAngle(TRACK_List self, double aAngle) -> std::string"""
        return _pcbnew.TRACK_List_FormatAngle(self, *args)

    def Cast_to_TEXTE_PCB(self):
        """Cast_to_TEXTE_PCB(TRACK_List self) -> TEXTE_PCB"""
        return _pcbnew.TRACK_List_Cast_to_TEXTE_PCB(self)

    def Cast_to_DIMENSION(self):
        """Cast_to_DIMENSION(TRACK_List self) -> DIMENSION"""
        return _pcbnew.TRACK_List_Cast_to_DIMENSION(self)

    def Cast_to_MODULE(self):
        """Cast_to_MODULE(TRACK_List self) -> MODULE"""
        return _pcbnew.TRACK_List_Cast_to_MODULE(self)

    def Cast_to_TEXTE_MODULE(self):
        """Cast_to_TEXTE_MODULE(TRACK_List self) -> TEXTE_MODULE"""
        return _pcbnew.TRACK_List_Cast_to_TEXTE_MODULE(self)

    def Cast_to_DRAWSEGMENT(self):
        """Cast_to_DRAWSEGMENT(TRACK_List self) -> DRAWSEGMENT"""
        return _pcbnew.TRACK_List_Cast_to_DRAWSEGMENT(self)

    def Cast_to_MARKER_PCB(self):
        """Cast_to_MARKER_PCB(TRACK_List self) -> MARKER_PCB"""
        return _pcbnew.TRACK_List_Cast_to_MARKER_PCB(self)

    def Cast_to_BOARD(self):
        """Cast_to_BOARD(TRACK_List self) -> BOARD"""
        return _pcbnew.TRACK_List_Cast_to_BOARD(self)

    def Cast_to_EDGE_MODULE(self):
        """Cast_to_EDGE_MODULE(TRACK_List self) -> EDGE_MODULE"""
        return _pcbnew.TRACK_List_Cast_to_EDGE_MODULE(self)

    def Cast_to_D_PAD(self):
        """Cast_to_D_PAD(TRACK_List self) -> D_PAD"""
        return _pcbnew.TRACK_List_Cast_to_D_PAD(self)

    def Cast_to_TRACK(self):
        """Cast_to_TRACK(TRACK_List self) -> TRACK"""
        return _pcbnew.TRACK_List_Cast_to_TRACK(self)

    def Cast_to_SEGZONE(self):
        """Cast_to_SEGZONE(TRACK_List self) -> SEGZONE"""
        return _pcbnew.TRACK_List_Cast_to_SEGZONE(self)

    def Cast_to_SEGVIA(self):
        """Cast_to_SEGVIA(TRACK_List self) -> SEGVIA"""
        return _pcbnew.TRACK_List_Cast_to_SEGVIA(self)

    def Type(self):
        """Type(TRACK_List self) -> KICAD_T"""
        return _pcbnew.TRACK_List_Type(self)

    def SetTimeStamp(self, *args):
        """SetTimeStamp(TRACK_List self, time_t aNewTimeStamp)"""
        return _pcbnew.TRACK_List_SetTimeStamp(self, *args)

    def GetTimeStamp(self):
        """GetTimeStamp(TRACK_List self) -> time_t"""
        return _pcbnew.TRACK_List_GetTimeStamp(self)

    def GetSon(self):
        """GetSon(TRACK_List self) -> EDA_ITEM"""
        return _pcbnew.TRACK_List_GetSon(self)

    def GetList(self):
        """GetList(TRACK_List self) -> DHEAD"""
        return _pcbnew.TRACK_List_GetList(self)

    def SetParent(self, *args):
        """SetParent(TRACK_List self, EDA_ITEM aParent)"""
        return _pcbnew.TRACK_List_SetParent(self, *args)

    def SetSon(self, *args):
        """SetSon(TRACK_List self, EDA_ITEM aSon)"""
        return _pcbnew.TRACK_List_SetSon(self, *args)

    def SetList(self, *args):
        """SetList(TRACK_List self, DHEAD aList)"""
        return _pcbnew.TRACK_List_SetList(self, *args)

    def IsNew(self):
        """IsNew(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsNew(self)

    def IsModified(self):
        """IsModified(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsModified(self)

    def IsMoving(self):
        """IsMoving(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsMoving(self)

    def IsDragging(self):
        """IsDragging(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsDragging(self)

    def IsSelected(self):
        """IsSelected(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsSelected(self)

    def IsResized(self):
        """IsResized(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsResized(self)

    def SetModified(self):
        """SetModified(TRACK_List self)"""
        return _pcbnew.TRACK_List_SetModified(self)

    def GetState(self, *args):
        """GetState(TRACK_List self, int type) -> int"""
        return _pcbnew.TRACK_List_GetState(self, *args)

    def SetState(self, *args):
        """SetState(TRACK_List self, int type, int state)"""
        return _pcbnew.TRACK_List_SetState(self, *args)

    def GetStatus(self):
        """GetStatus(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetStatus(self)

    def SetStatus(self, *args):
        """SetStatus(TRACK_List self, int aStatus)"""
        return _pcbnew.TRACK_List_SetStatus(self, *args)

    def SetFlags(self, *args):
        """SetFlags(TRACK_List self, int aMask)"""
        return _pcbnew.TRACK_List_SetFlags(self, *args)

    def ClearFlags(self, *args):
        """
        ClearFlags(TRACK_List self, int aMask=-1)
        ClearFlags(TRACK_List self)
        """
        return _pcbnew.TRACK_List_ClearFlags(self, *args)

    def GetFlags(self):
        """GetFlags(TRACK_List self) -> int"""
        return _pcbnew.TRACK_List_GetFlags(self)

    def SetImage(self, *args):
        """SetImage(TRACK_List self, EDA_ITEM aItem)"""
        return _pcbnew.TRACK_List_SetImage(self, *args)

    def SetForceVisible(self, *args):
        """SetForceVisible(TRACK_List self, bool aEnable)"""
        return _pcbnew.TRACK_List_SetForceVisible(self, *args)

    def IterateForward(self, *args):
        """IterateForward(TRACK_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.TRACK_List_IterateForward(self, *args)

    def Matches(self, *args):
        """
        Matches(TRACK_List self, wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool
        Matches(TRACK_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.TRACK_List_Matches(self, *args)

    def Replace(self, *args):
        """
        Replace(TRACK_List self, wxFindReplaceData & aSearchData, wxString & aText) -> bool
        Replace(TRACK_List self, wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool
        Replace(TRACK_List self, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.TRACK_List_Replace(self, *args)

    def IsReplaceable(self):
        """IsReplaceable(TRACK_List self) -> bool"""
        return _pcbnew.TRACK_List_IsReplaceable(self)

    def __lt__(self, *args):
        """__lt__(TRACK_List self, EDA_ITEM aItem) -> bool"""
        return _pcbnew.TRACK_List___lt__(self, *args)

    def Sort(self, *args):
        """Sort(TRACK_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"""
        return _pcbnew.TRACK_List_Sort(self, *args)

TRACK_List_swigregister = _pcbnew.TRACK_List_swigregister
TRACK_List_swigregister(TRACK_List)

class PAD_List(DHEAD):
    """Proxy of C++ DLIST<(D_PAD)> class"""
    __swig_setmethods__ = {}
    for _s in [DHEAD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAD_List, name, value)
    __swig_getmethods__ = {}
    for _s in [DHEAD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PAD_List, name)
    __repr__ = _swig_repr
    def Get(self):
        """Get(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List_Get(self)

    def __deref__(self):
        """__deref__(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List___deref__(self)

    def GetFirst(self):
        """GetFirst(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List_GetFirst(self)

    def GetLast(self):
        """GetLast(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List_GetLast(self)

    def Append(self, *args):
        """
        Append(PAD_List self, D_PAD aNewElement)
        Append(PAD_List self, PAD_List aList)
        """
        return _pcbnew.PAD_List_Append(self, *args)

    def Insert(self, *args):
        """Insert(PAD_List self, D_PAD aNewElement, D_PAD aElementAfterMe)"""
        return _pcbnew.PAD_List_Insert(self, *args)

    def Remove(self, *args):
        """Remove(PAD_List self, D_PAD aElement) -> D_PAD"""
        return _pcbnew.PAD_List_Remove(self, *args)

    def begin(self):
        """begin(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List_begin(self)

    def end(self):
        """end(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List_end(self)

    def PopFront(self):
        """PopFront(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List_PopFront(self)

    def PopBack(self):
        """PopBack(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List_PopBack(self)

    def PushFront(self, *args):
        """PushFront(PAD_List self, D_PAD aNewElement)"""
        return _pcbnew.PAD_List_PushFront(self, *args)

    def PushBack(self, *args):
        """PushBack(PAD_List self, D_PAD aNewElement)"""
        return _pcbnew.PAD_List_PushBack(self, *args)

    class DLISTIter:
    	def __init__(self,aList):
    		self.last = aList   # last item is the start of list

    	def next(self):         # get the next item
    	
    		item = self.last
    		try:
    		  item = item.Get()
    		except:
    		  pass
    		     
    		if item is None:    # if the item is None, then finish the iteration
    			raise StopIteration
    		else:
    			ret = None
    			
    			
    			try:
    				ret = self.last.Get()
    			except: 
    				ret = self.last # next items do not..
    			
    			self.last = self.last.Next()
    			
    			
    			
    			if 'Cast' in dir(ret):
    				ret = ret.Cast()
    				
    			return ret

    def __iter__(self):
    	return self.DLISTIter(self)
    	

    def __init__(self): 
        """__init__(DLIST<(D_PAD)> self) -> PAD_List"""
        this = _pcbnew.new_PAD_List()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_PAD_List
    __del__ = lambda self : None;
    def Copy(self, *args):
        """Copy(PAD_List self, D_PAD source)"""
        return _pcbnew.PAD_List_Copy(self, *args)

    def Next(self):
        """Next(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List_Next(self)

    def GetParent(self):
        """GetParent(PAD_List self) -> MODULE"""
        return _pcbnew.PAD_List_GetParent(self)

    def SetPadName(self, *args):
        """SetPadName(PAD_List self, wxString const & name)"""
        return _pcbnew.PAD_List_SetPadName(self, *args)

    def GetPadName(self):
        """GetPadName(PAD_List self) -> wxString const"""
        return _pcbnew.PAD_List_GetPadName(self)

    def PadNameEqual(self, *args):
        """PadNameEqual(PAD_List self, D_PAD other) -> bool"""
        return _pcbnew.PAD_List_PadNameEqual(self, *args)

    def SetNetname(self, *args):
        """SetNetname(PAD_List self, wxString const & aNetname)"""
        return _pcbnew.PAD_List_SetNetname(self, *args)

    def GetNetname(self):
        """GetNetname(PAD_List self) -> wxString const &"""
        return _pcbnew.PAD_List_GetNetname(self)

    def GetShortNetname(self):
        """GetShortNetname(PAD_List self) -> wxString const &"""
        return _pcbnew.PAD_List_GetShortNetname(self)

    def GetShape(self):
        """GetShape(PAD_List self) -> PAD_SHAPE_T"""
        return _pcbnew.PAD_List_GetShape(self)

    def SetShape(self, *args):
        """SetShape(PAD_List self, PAD_SHAPE_T aShape)"""
        return _pcbnew.PAD_List_SetShape(self, *args)

    def SetPosition(self, *args):
        """SetPosition(PAD_List self, wxPoint aPos)"""
        return _pcbnew.PAD_List_SetPosition(self, *args)

    def GetPosition(self):
        """GetPosition(PAD_List self) -> wxPoint"""
        return _pcbnew.PAD_List_GetPosition(self)

    def SetY(self, *args):
        """SetY(PAD_List self, int y)"""
        return _pcbnew.PAD_List_SetY(self, *args)

    def SetX(self, *args):
        """SetX(PAD_List self, int x)"""
        return _pcbnew.PAD_List_SetX(self, *args)

    def SetPos0(self, *args):
        """SetPos0(PAD_List self, wxPoint aPos)"""
        return _pcbnew.PAD_List_SetPos0(self, *args)

    def GetPos0(self):
        """GetPos0(PAD_List self) -> wxPoint"""
        return _pcbnew.PAD_List_GetPos0(self)

    def SetY0(self, *args):
        """SetY0(PAD_List self, int y)"""
        return _pcbnew.PAD_List_SetY0(self, *args)

    def SetX0(self, *args):
        """SetX0(PAD_List self, int x)"""
        return _pcbnew.PAD_List_SetX0(self, *args)

    def SetSize(self, *args):
        """SetSize(PAD_List self, wxSize aSize)"""
        return _pcbnew.PAD_List_SetSize(self, *args)

    def GetSize(self):
        """GetSize(PAD_List self) -> wxSize"""
        return _pcbnew.PAD_List_GetSize(self)

    def SetDelta(self, *args):
        """SetDelta(PAD_List self, wxSize aSize)"""
        return _pcbnew.PAD_List_SetDelta(self, *args)

    def GetDelta(self):
        """GetDelta(PAD_List self) -> wxSize"""
        return _pcbnew.PAD_List_GetDelta(self)

    def SetDrillSize(self, *args):
        """SetDrillSize(PAD_List self, wxSize aSize)"""
        return _pcbnew.PAD_List_SetDrillSize(self, *args)

    def GetDrillSize(self):
        """GetDrillSize(PAD_List self) -> wxSize"""
        return _pcbnew.PAD_List_GetDrillSize(self)

    def SetOffset(self, *args):
        """SetOffset(PAD_List self, wxPoint aOffset)"""
        return _pcbnew.PAD_List_SetOffset(self, *args)

    def GetOffset(self):
        """GetOffset(PAD_List self) -> wxPoint"""
        return _pcbnew.PAD_List_GetOffset(self)

    def Flip(self, *args):
        """Flip(PAD_List self, int aTranslationY)"""
        return _pcbnew.PAD_List_Flip(self, *args)

    def SetOrientation(self, *args):
        """SetOrientation(PAD_List self, double aAngle)"""
        return _pcbnew.PAD_List_SetOrientation(self, *args)

    def GetOrientation(self):
        """GetOrientation(PAD_List self) -> double"""
        return _pcbnew.PAD_List_GetOrientation(self)

    def SetDrillShape(self, *args):
        """SetDrillShape(PAD_List self, PAD_SHAPE_T aDrillShape)"""
        return _pcbnew.PAD_List_SetDrillShape(self, *args)

    def GetDrillShape(self):
        """GetDrillShape(PAD_List self) -> PAD_SHAPE_T"""
        return _pcbnew.PAD_List_GetDrillShape(self)

    def SetLayerMask(self, *args):
        """SetLayerMask(PAD_List self, int aLayerMask)"""
        return _pcbnew.PAD_List_SetLayerMask(self, *args)

    def GetLayerMask(self):
        """GetLayerMask(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetLayerMask(self)

    def SetAttribute(self, *args):
        """SetAttribute(PAD_List self, PAD_ATTR_T aAttribute)"""
        return _pcbnew.PAD_List_SetAttribute(self, *args)

    def GetAttribute(self):
        """GetAttribute(PAD_List self) -> PAD_ATTR_T"""
        return _pcbnew.PAD_List_GetAttribute(self)

    def SetDieLength(self, *args):
        """SetDieLength(PAD_List self, int aLength)"""
        return _pcbnew.PAD_List_SetDieLength(self, *args)

    def GetDieLength(self):
        """GetDieLength(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetDieLength(self)

    def GetLocalSolderMaskMargin(self):
        """GetLocalSolderMaskMargin(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetLocalSolderMaskMargin(self)

    def SetLocalSolderMaskMargin(self, *args):
        """SetLocalSolderMaskMargin(PAD_List self, int aMargin)"""
        return _pcbnew.PAD_List_SetLocalSolderMaskMargin(self, *args)

    def GetLocalClearance(self):
        """GetLocalClearance(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetLocalClearance(self)

    def SetLocalClearance(self, *args):
        """SetLocalClearance(PAD_List self, int aClearance)"""
        return _pcbnew.PAD_List_SetLocalClearance(self, *args)

    def GetLocalSolderPasteMargin(self):
        """GetLocalSolderPasteMargin(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetLocalSolderPasteMargin(self)

    def SetLocalSolderPasteMargin(self, *args):
        """SetLocalSolderPasteMargin(PAD_List self, int aMargin)"""
        return _pcbnew.PAD_List_SetLocalSolderPasteMargin(self, *args)

    def GetLocalSolderPasteMarginRatio(self):
        """GetLocalSolderPasteMarginRatio(PAD_List self) -> double"""
        return _pcbnew.PAD_List_GetLocalSolderPasteMarginRatio(self)

    def SetLocalSolderPasteMarginRatio(self, *args):
        """SetLocalSolderPasteMarginRatio(PAD_List self, double aRatio)"""
        return _pcbnew.PAD_List_SetLocalSolderPasteMarginRatio(self, *args)

    def TransformShapeWithClearanceToPolygon(self, *args):
        """
        TransformShapeWithClearanceToPolygon(PAD_List self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, int aClearanceValue, 
            int aCircleToSegmentsCount, double aCorrectionFactor)
        """
        return _pcbnew.PAD_List_TransformShapeWithClearanceToPolygon(self, *args)

    def GetClearance(self, aItem=None):
        """
        GetClearance(PAD_List self, BOARD_CONNECTED_ITEM aItem=None) -> int
        GetClearance(PAD_List self) -> int
        """
        return _pcbnew.PAD_List_GetClearance(self, aItem)

    def GetSolderMaskMargin(self):
        """GetSolderMaskMargin(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetSolderMaskMargin(self)

    def GetSolderPasteMargin(self):
        """GetSolderPasteMargin(PAD_List self) -> wxSize"""
        return _pcbnew.PAD_List_GetSolderPasteMargin(self)

    def SetZoneConnection(self, *args):
        """SetZoneConnection(PAD_List self, ZoneConnection aType)"""
        return _pcbnew.PAD_List_SetZoneConnection(self, *args)

    def GetZoneConnection(self):
        """GetZoneConnection(PAD_List self) -> ZoneConnection"""
        return _pcbnew.PAD_List_GetZoneConnection(self)

    def SetThermalWidth(self, *args):
        """SetThermalWidth(PAD_List self, int aWidth)"""
        return _pcbnew.PAD_List_SetThermalWidth(self, *args)

    def GetThermalWidth(self):
        """GetThermalWidth(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetThermalWidth(self)

    def SetThermalGap(self, *args):
        """SetThermalGap(PAD_List self, int aGap)"""
        return _pcbnew.PAD_List_SetThermalGap(self, *args)

    def GetThermalGap(self):
        """GetThermalGap(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetThermalGap(self)

    def Draw(self, *args):
        """
        Draw(PAD_List self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)
        Draw(PAD_List self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)
        """
        return _pcbnew.PAD_List_Draw(self, *args)

    def Draw3D(self, *args):
        """Draw3D(PAD_List self, EDA_3D_CANVAS * glcanvas)"""
        return _pcbnew.PAD_List_Draw3D(self, *args)

    def DrawShape(self, *args):
        """DrawShape(PAD_List self, EDA_RECT aClipBox, wxDC * aDC, PAD_DRAWINFO aDrawInfo)"""
        return _pcbnew.PAD_List_DrawShape(self, *args)

    def BuildPadPolygon(self, *args):
        """BuildPadPolygon(PAD_List self, wxPoint aCoord, wxSize aInflateValue, int aRotation)"""
        return _pcbnew.PAD_List_BuildPadPolygon(self, *args)

    def BuildSegmentFromOvalShape(self, *args):
        """BuildSegmentFromOvalShape(PAD_List self, wxPoint aSegStart, wxPoint aSegEnd, int aRotation) -> int"""
        return _pcbnew.PAD_List_BuildSegmentFromOvalShape(self, *args)

    def ReturnStringPadName(self, *args):
        """ReturnStringPadName(PAD_List self, wxString & text)"""
        return _pcbnew.PAD_List_ReturnStringPadName(self, *args)

    def GetBoundingRadius(self):
        """GetBoundingRadius(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetBoundingRadius(self)

    def ReturnShapePos(self):
        """ReturnShapePos(PAD_List self) -> wxPoint"""
        return _pcbnew.PAD_List_ReturnShapePos(self)

    def GetSubRatsnest(self):
        """GetSubRatsnest(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetSubRatsnest(self)

    def SetSubRatsnest(self, *args):
        """SetSubRatsnest(PAD_List self, int aSubRatsnest)"""
        return _pcbnew.PAD_List_SetSubRatsnest(self, *args)

    def DisplayInfo(self, *args):
        """DisplayInfo(PAD_List self, EDA_DRAW_FRAME * frame)"""
        return _pcbnew.PAD_List_DisplayInfo(self, *args)

    def IsOnLayer(self, *args):
        """IsOnLayer(PAD_List self, int aLayer) -> bool"""
        return _pcbnew.PAD_List_IsOnLayer(self, *args)

    def HitTest(self, *args):
        """HitTest(PAD_List self, wxPoint aPosition) -> bool"""
        return _pcbnew.PAD_List_HitTest(self, *args)

    def GetClass(self):
        """GetClass(PAD_List self) -> wxString"""
        return _pcbnew.PAD_List_GetClass(self)

    def GetBoundingBox(self):
        """GetBoundingBox(PAD_List self) -> EDA_RECT"""
        return _pcbnew.PAD_List_GetBoundingBox(self)

    def Compare(self, *args):
        """Compare(PAD_List self, D_PAD padref, D_PAD padcmp) -> int"""
        return _pcbnew.PAD_List_Compare(self, *args)

    def Move(self, *args):
        """Move(PAD_List self, wxPoint aMoveVector)"""
        return _pcbnew.PAD_List_Move(self, *args)

    def GetSelectMenuText(self):
        """GetSelectMenuText(PAD_List self) -> wxString"""
        return _pcbnew.PAD_List_GetSelectMenuText(self)

    def GetMenuImage(self):
        """GetMenuImage(PAD_List self) -> BITMAP_DEF"""
        return _pcbnew.PAD_List_GetMenuImage(self)

    def ShowPadShape(self):
        """ShowPadShape(PAD_List self) -> wxString"""
        return _pcbnew.PAD_List_ShowPadShape(self)

    def ShowPadAttr(self):
        """ShowPadAttr(PAD_List self) -> wxString"""
        return _pcbnew.PAD_List_ShowPadAttr(self)

    def AppendConfigs(self, *args):
        """AppendConfigs(PAD_List self, PARAM_CFG_ARRAY * aResult)"""
        return _pcbnew.PAD_List_AppendConfigs(self, *args)

    def Clone(self):
        """Clone(PAD_List self) -> EDA_ITEM"""
        return _pcbnew.PAD_List_Clone(self)

    __swig_setmethods__["m_TracksConnected"] = _pcbnew.PAD_List_m_TracksConnected_set
    __swig_getmethods__["m_TracksConnected"] = _pcbnew.PAD_List_m_TracksConnected_get
    if _newclass:m_TracksConnected = _swig_property(_pcbnew.PAD_List_m_TracksConnected_get, _pcbnew.PAD_List_m_TracksConnected_set)
    __swig_setmethods__["m_PadsConnected"] = _pcbnew.PAD_List_m_PadsConnected_set
    __swig_getmethods__["m_PadsConnected"] = _pcbnew.PAD_List_m_PadsConnected_get
    if _newclass:m_PadsConnected = _swig_property(_pcbnew.PAD_List_m_PadsConnected_get, _pcbnew.PAD_List_m_PadsConnected_set)
    def GetNet(self):
        """GetNet(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetNet(self)

    def SetNet(self, *args):
        """SetNet(PAD_List self, int aNetCode)"""
        return _pcbnew.PAD_List_SetNet(self, *args)

    def GetSubNet(self):
        """GetSubNet(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetSubNet(self)

    def SetSubNet(self, *args):
        """SetSubNet(PAD_List self, int aSubNetCode)"""
        return _pcbnew.PAD_List_SetSubNet(self, *args)

    def GetZoneSubNet(self):
        """GetZoneSubNet(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetZoneSubNet(self)

    def SetZoneSubNet(self, *args):
        """SetZoneSubNet(PAD_List self, int aSubNetCode)"""
        return _pcbnew.PAD_List_SetZoneSubNet(self, *args)

    def GetNetClass(self):
        """GetNetClass(PAD_List self) -> NETCLASS"""
        return _pcbnew.PAD_List_GetNetClass(self)

    def GetNetClassName(self):
        """GetNetClassName(PAD_List self) -> wxString"""
        return _pcbnew.PAD_List_GetNetClassName(self)

    def Back(self):
        """Back(PAD_List self) -> BOARD_ITEM"""
        return _pcbnew.PAD_List_Back(self)

    def GetLayer(self):
        """GetLayer(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetLayer(self)

    def SetLayer(self, *args):
        """SetLayer(PAD_List self, int aLayer)"""
        return _pcbnew.PAD_List_SetLayer(self, *args)

    def IsTrack(self):
        """IsTrack(PAD_List self) -> bool"""
        return _pcbnew.PAD_List_IsTrack(self)

    def IsLocked(self):
        """IsLocked(PAD_List self) -> bool"""
        return _pcbnew.PAD_List_IsLocked(self)

    def UnLink(self):
        """UnLink(PAD_List self)"""
        return _pcbnew.PAD_List_UnLink(self)

    def DeleteStructure(self):
        """DeleteStructure(PAD_List self)"""
        return _pcbnew.PAD_List_DeleteStructure(self)

    def ShowShape(self, *args):
        """ShowShape(PAD_List self, STROKE_T aShape) -> wxString"""
        return _pcbnew.PAD_List_ShowShape(self, *args)

    def Rotate(self, *args):
        """Rotate(PAD_List self, wxPoint aRotCentre, double aAngle)"""
        return _pcbnew.PAD_List_Rotate(self, *args)

    def GetBoard(self):
        """GetBoard(PAD_List self) -> BOARD"""
        return _pcbnew.PAD_List_GetBoard(self)

    def GetLayerName(self):
        """GetLayerName(PAD_List self) -> wxString"""
        return _pcbnew.PAD_List_GetLayerName(self)

    def FormatInternalUnits(self, *args):
        """
        FormatInternalUnits(PAD_List self, int aValue) -> std::string
        FormatInternalUnits(PAD_List self, wxPoint aPoint) -> std::string
        FormatInternalUnits(PAD_List self, wxSize aSize) -> std::string
        """
        return _pcbnew.PAD_List_FormatInternalUnits(self, *args)

    def FormatAngle(self, *args):
        """FormatAngle(PAD_List self, double aAngle) -> std::string"""
        return _pcbnew.PAD_List_FormatAngle(self, *args)

    def Cast_to_TEXTE_PCB(self):
        """Cast_to_TEXTE_PCB(PAD_List self) -> TEXTE_PCB"""
        return _pcbnew.PAD_List_Cast_to_TEXTE_PCB(self)

    def Cast_to_DIMENSION(self):
        """Cast_to_DIMENSION(PAD_List self) -> DIMENSION"""
        return _pcbnew.PAD_List_Cast_to_DIMENSION(self)

    def Cast_to_MODULE(self):
        """Cast_to_MODULE(PAD_List self) -> MODULE"""
        return _pcbnew.PAD_List_Cast_to_MODULE(self)

    def Cast_to_TEXTE_MODULE(self):
        """Cast_to_TEXTE_MODULE(PAD_List self) -> TEXTE_MODULE"""
        return _pcbnew.PAD_List_Cast_to_TEXTE_MODULE(self)

    def Cast_to_DRAWSEGMENT(self):
        """Cast_to_DRAWSEGMENT(PAD_List self) -> DRAWSEGMENT"""
        return _pcbnew.PAD_List_Cast_to_DRAWSEGMENT(self)

    def Cast_to_MARKER_PCB(self):
        """Cast_to_MARKER_PCB(PAD_List self) -> MARKER_PCB"""
        return _pcbnew.PAD_List_Cast_to_MARKER_PCB(self)

    def Cast_to_BOARD(self):
        """Cast_to_BOARD(PAD_List self) -> BOARD"""
        return _pcbnew.PAD_List_Cast_to_BOARD(self)

    def Cast_to_EDGE_MODULE(self):
        """Cast_to_EDGE_MODULE(PAD_List self) -> EDGE_MODULE"""
        return _pcbnew.PAD_List_Cast_to_EDGE_MODULE(self)

    def Cast_to_D_PAD(self):
        """Cast_to_D_PAD(PAD_List self) -> D_PAD"""
        return _pcbnew.PAD_List_Cast_to_D_PAD(self)

    def Cast_to_TRACK(self):
        """Cast_to_TRACK(PAD_List self) -> TRACK"""
        return _pcbnew.PAD_List_Cast_to_TRACK(self)

    def Cast_to_SEGZONE(self):
        """Cast_to_SEGZONE(PAD_List self) -> SEGZONE"""
        return _pcbnew.PAD_List_Cast_to_SEGZONE(self)

    def Cast_to_SEGVIA(self):
        """Cast_to_SEGVIA(PAD_List self) -> SEGVIA"""
        return _pcbnew.PAD_List_Cast_to_SEGVIA(self)

    def Type(self):
        """Type(PAD_List self) -> KICAD_T"""
        return _pcbnew.PAD_List_Type(self)

    def SetTimeStamp(self, *args):
        """SetTimeStamp(PAD_List self, time_t aNewTimeStamp)"""
        return _pcbnew.PAD_List_SetTimeStamp(self, *args)

    def GetTimeStamp(self):
        """GetTimeStamp(PAD_List self) -> time_t"""
        return _pcbnew.PAD_List_GetTimeStamp(self)

    def GetSon(self):
        """GetSon(PAD_List self) -> EDA_ITEM"""
        return _pcbnew.PAD_List_GetSon(self)

    def GetList(self):
        """GetList(PAD_List self) -> DHEAD"""
        return _pcbnew.PAD_List_GetList(self)

    def SetParent(self, *args):
        """SetParent(PAD_List self, EDA_ITEM aParent)"""
        return _pcbnew.PAD_List_SetParent(self, *args)

    def SetSon(self, *args):
        """SetSon(PAD_List self, EDA_ITEM aSon)"""
        return _pcbnew.PAD_List_SetSon(self, *args)

    def SetList(self, *args):
        """SetList(PAD_List self, DHEAD aList)"""
        return _pcbnew.PAD_List_SetList(self, *args)

    def IsNew(self):
        """IsNew(PAD_List self) -> bool"""
        return _pcbnew.PAD_List_IsNew(self)

    def IsModified(self):
        """IsModified(PAD_List self) -> bool"""
        return _pcbnew.PAD_List_IsModified(self)

    def IsMoving(self):
        """IsMoving(PAD_List self) -> bool"""
        return _pcbnew.PAD_List_IsMoving(self)

    def IsDragging(self):
        """IsDragging(PAD_List self) -> bool"""
        return _pcbnew.PAD_List_IsDragging(self)

    def IsSelected(self):
        """IsSelected(PAD_List self) -> bool"""
        return _pcbnew.PAD_List_IsSelected(self)

    def IsResized(self):
        """IsResized(PAD_List self) -> bool"""
        return _pcbnew.PAD_List_IsResized(self)

    def SetModified(self):
        """SetModified(PAD_List self)"""
        return _pcbnew.PAD_List_SetModified(self)

    def GetState(self, *args):
        """GetState(PAD_List self, int type) -> int"""
        return _pcbnew.PAD_List_GetState(self, *args)

    def SetState(self, *args):
        """SetState(PAD_List self, int type, int state)"""
        return _pcbnew.PAD_List_SetState(self, *args)

    def GetStatus(self):
        """GetStatus(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetStatus(self)

    def SetStatus(self, *args):
        """SetStatus(PAD_List self, int aStatus)"""
        return _pcbnew.PAD_List_SetStatus(self, *args)

    def SetFlags(self, *args):
        """SetFlags(PAD_List self, int aMask)"""
        return _pcbnew.PAD_List_SetFlags(self, *args)

    def ClearFlags(self, *args):
        """
        ClearFlags(PAD_List self, int aMask=-1)
        ClearFlags(PAD_List self)
        """
        return _pcbnew.PAD_List_ClearFlags(self, *args)

    def GetFlags(self):
        """GetFlags(PAD_List self) -> int"""
        return _pcbnew.PAD_List_GetFlags(self)

    def SetImage(self, *args):
        """SetImage(PAD_List self, EDA_ITEM aItem)"""
        return _pcbnew.PAD_List_SetImage(self, *args)

    def SetForceVisible(self, *args):
        """SetForceVisible(PAD_List self, bool aEnable)"""
        return _pcbnew.PAD_List_SetForceVisible(self, *args)

    def IterateForward(self, *args):
        """IterateForward(PAD_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.PAD_List_IterateForward(self, *args)

    def Visit(self, *args):
        """Visit(PAD_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"""
        return _pcbnew.PAD_List_Visit(self, *args)

    def Matches(self, *args):
        """
        Matches(PAD_List self, wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool
        Matches(PAD_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.PAD_List_Matches(self, *args)

    def Replace(self, *args):
        """
        Replace(PAD_List self, wxFindReplaceData & aSearchData, wxString & aText) -> bool
        Replace(PAD_List self, wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool
        Replace(PAD_List self, wxFindReplaceData & aSearchData) -> bool
        """
        return _pcbnew.PAD_List_Replace(self, *args)

    def IsReplaceable(self):
        """IsReplaceable(PAD_List self) -> bool"""
        return _pcbnew.PAD_List_IsReplaceable(self)

    def __lt__(self, *args):
        """__lt__(PAD_List self, EDA_ITEM aItem) -> bool"""
        return _pcbnew.PAD_List___lt__(self, *args)

    def Sort(self, *args):
        """Sort(PAD_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"""
        return _pcbnew.PAD_List_Sort(self, *args)

PAD_List_swigregister = _pcbnew.PAD_List_swigregister
PAD_List_swigregister(PAD_List)

class VIA_DIMENSION_Vector(_object):
    """Proxy of C++ std::vector<(VIA_DIMENSION)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VIA_DIMENSION_Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VIA_DIMENSION_Vector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(VIA_DIMENSION_Vector self) -> SwigPyIterator"""
        return _pcbnew.VIA_DIMENSION_Vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(VIA_DIMENSION_Vector self) -> bool"""
        return _pcbnew.VIA_DIMENSION_Vector___nonzero__(self)

    def __bool__(self):
        """__bool__(VIA_DIMENSION_Vector self) -> bool"""
        return _pcbnew.VIA_DIMENSION_Vector___bool__(self)

    def __len__(self):
        """__len__(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::size_type"""
        return _pcbnew.VIA_DIMENSION_Vector___len__(self)

    def pop(self):
        """pop(VIA_DIMENSION_Vector self) -> VIA_DIMENSION"""
        return _pcbnew.VIA_DIMENSION_Vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i, std::vector< VIA_DIMENSION >::difference_type j) -> VIA_DIMENSION_Vector"""
        return _pcbnew.VIA_DIMENSION_Vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i, std::vector< VIA_DIMENSION >::difference_type j, 
            VIA_DIMENSION_Vector v=std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > >())
        __setslice__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i, std::vector< VIA_DIMENSION >::difference_type j)
        """
        return _pcbnew.VIA_DIMENSION_Vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i, std::vector< VIA_DIMENSION >::difference_type j)"""
        return _pcbnew.VIA_DIMENSION_Vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i)
        __delitem__(VIA_DIMENSION_Vector self, PySliceObject * slice)
        """
        return _pcbnew.VIA_DIMENSION_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(VIA_DIMENSION_Vector self, PySliceObject * slice) -> VIA_DIMENSION_Vector
        __getitem__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i) -> VIA_DIMENSION
        """
        return _pcbnew.VIA_DIMENSION_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(VIA_DIMENSION_Vector self, PySliceObject * slice, VIA_DIMENSION_Vector v)
        __setitem__(VIA_DIMENSION_Vector self, PySliceObject * slice)
        __setitem__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i, VIA_DIMENSION x)
        """
        return _pcbnew.VIA_DIMENSION_Vector___setitem__(self, *args)

    def append(self, *args):
        """append(VIA_DIMENSION_Vector self, VIA_DIMENSION x)"""
        return _pcbnew.VIA_DIMENSION_Vector_append(self, *args)

    def empty(self):
        """empty(VIA_DIMENSION_Vector self) -> bool"""
        return _pcbnew.VIA_DIMENSION_Vector_empty(self)

    def size(self):
        """size(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::size_type"""
        return _pcbnew.VIA_DIMENSION_Vector_size(self)

    def clear(self):
        """clear(VIA_DIMENSION_Vector self)"""
        return _pcbnew.VIA_DIMENSION_Vector_clear(self)

    def swap(self, *args):
        """swap(VIA_DIMENSION_Vector self, VIA_DIMENSION_Vector v)"""
        return _pcbnew.VIA_DIMENSION_Vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::allocator_type"""
        return _pcbnew.VIA_DIMENSION_Vector_get_allocator(self)

    def begin(self):
        """begin(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::iterator"""
        return _pcbnew.VIA_DIMENSION_Vector_begin(self)

    def end(self):
        """end(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::iterator"""
        return _pcbnew.VIA_DIMENSION_Vector_end(self)

    def rbegin(self):
        """rbegin(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::reverse_iterator"""
        return _pcbnew.VIA_DIMENSION_Vector_rbegin(self)

    def rend(self):
        """rend(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::reverse_iterator"""
        return _pcbnew.VIA_DIMENSION_Vector_rend(self)

    def pop_back(self):
        """pop_back(VIA_DIMENSION_Vector self)"""
        return _pcbnew.VIA_DIMENSION_Vector_pop_back(self)

    def erase(self, *args):
        """
        erase(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::iterator pos) -> std::vector< VIA_DIMENSION >::iterator
        erase(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::iterator first, std::vector< VIA_DIMENSION >::iterator last) -> std::vector< VIA_DIMENSION >::iterator
        """
        return _pcbnew.VIA_DIMENSION_Vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(VIA_DIMENSION)> self) -> VIA_DIMENSION_Vector
        __init__(std::vector<(VIA_DIMENSION)> self, VIA_DIMENSION_Vector arg2) -> VIA_DIMENSION_Vector
        __init__(std::vector<(VIA_DIMENSION)> self, std::vector< VIA_DIMENSION >::size_type size) -> VIA_DIMENSION_Vector
        __init__(std::vector<(VIA_DIMENSION)> self, std::vector< VIA_DIMENSION >::size_type size, VIA_DIMENSION value) -> VIA_DIMENSION_Vector
        """
        this = _pcbnew.new_VIA_DIMENSION_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(VIA_DIMENSION_Vector self, VIA_DIMENSION x)"""
        return _pcbnew.VIA_DIMENSION_Vector_push_back(self, *args)

    def front(self):
        """front(VIA_DIMENSION_Vector self) -> VIA_DIMENSION"""
        return _pcbnew.VIA_DIMENSION_Vector_front(self)

    def back(self):
        """back(VIA_DIMENSION_Vector self) -> VIA_DIMENSION"""
        return _pcbnew.VIA_DIMENSION_Vector_back(self)

    def assign(self, *args):
        """assign(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::size_type n, VIA_DIMENSION x)"""
        return _pcbnew.VIA_DIMENSION_Vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::size_type new_size)
        resize(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::size_type new_size, VIA_DIMENSION x)
        """
        return _pcbnew.VIA_DIMENSION_Vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::iterator pos, VIA_DIMENSION x) -> std::vector< VIA_DIMENSION >::iterator
        insert(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::iterator pos, std::vector< VIA_DIMENSION >::size_type n, 
            VIA_DIMENSION x)
        """
        return _pcbnew.VIA_DIMENSION_Vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::size_type n)"""
        return _pcbnew.VIA_DIMENSION_Vector_reserve(self, *args)

    def capacity(self):
        """capacity(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::size_type"""
        return _pcbnew.VIA_DIMENSION_Vector_capacity(self)

    __swig_destroy__ = _pcbnew.delete_VIA_DIMENSION_Vector
    __del__ = lambda self : None;
VIA_DIMENSION_Vector_swigregister = _pcbnew.VIA_DIMENSION_Vector_swigregister
VIA_DIMENSION_Vector_swigregister(VIA_DIMENSION_Vector)

class RASTNET_Vector(_object):
    """Proxy of C++ std::vector<(RATSNEST_ITEM)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RASTNET_Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RASTNET_Vector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(RASTNET_Vector self) -> SwigPyIterator"""
        return _pcbnew.RASTNET_Vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(RASTNET_Vector self) -> bool"""
        return _pcbnew.RASTNET_Vector___nonzero__(self)

    def __bool__(self):
        """__bool__(RASTNET_Vector self) -> bool"""
        return _pcbnew.RASTNET_Vector___bool__(self)

    def __len__(self):
        """__len__(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::size_type"""
        return _pcbnew.RASTNET_Vector___len__(self)

    def pop(self):
        """pop(RASTNET_Vector self) -> RATSNEST_ITEM"""
        return _pcbnew.RASTNET_Vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i, std::vector< RATSNEST_ITEM >::difference_type j) -> RASTNET_Vector"""
        return _pcbnew.RASTNET_Vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i, std::vector< RATSNEST_ITEM >::difference_type j, 
            RASTNET_Vector v=std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >())
        __setslice__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i, std::vector< RATSNEST_ITEM >::difference_type j)
        """
        return _pcbnew.RASTNET_Vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i, std::vector< RATSNEST_ITEM >::difference_type j)"""
        return _pcbnew.RASTNET_Vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i)
        __delitem__(RASTNET_Vector self, PySliceObject * slice)
        """
        return _pcbnew.RASTNET_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(RASTNET_Vector self, PySliceObject * slice) -> RASTNET_Vector
        __getitem__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i) -> RATSNEST_ITEM
        """
        return _pcbnew.RASTNET_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(RASTNET_Vector self, PySliceObject * slice, RASTNET_Vector v)
        __setitem__(RASTNET_Vector self, PySliceObject * slice)
        __setitem__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i, RATSNEST_ITEM x)
        """
        return _pcbnew.RASTNET_Vector___setitem__(self, *args)

    def append(self, *args):
        """append(RASTNET_Vector self, RATSNEST_ITEM x)"""
        return _pcbnew.RASTNET_Vector_append(self, *args)

    def empty(self):
        """empty(RASTNET_Vector self) -> bool"""
        return _pcbnew.RASTNET_Vector_empty(self)

    def size(self):
        """size(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::size_type"""
        return _pcbnew.RASTNET_Vector_size(self)

    def clear(self):
        """clear(RASTNET_Vector self)"""
        return _pcbnew.RASTNET_Vector_clear(self)

    def swap(self, *args):
        """swap(RASTNET_Vector self, RASTNET_Vector v)"""
        return _pcbnew.RASTNET_Vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::allocator_type"""
        return _pcbnew.RASTNET_Vector_get_allocator(self)

    def begin(self):
        """begin(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::iterator"""
        return _pcbnew.RASTNET_Vector_begin(self)

    def end(self):
        """end(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::iterator"""
        return _pcbnew.RASTNET_Vector_end(self)

    def rbegin(self):
        """rbegin(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::reverse_iterator"""
        return _pcbnew.RASTNET_Vector_rbegin(self)

    def rend(self):
        """rend(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::reverse_iterator"""
        return _pcbnew.RASTNET_Vector_rend(self)

    def pop_back(self):
        """pop_back(RASTNET_Vector self)"""
        return _pcbnew.RASTNET_Vector_pop_back(self)

    def erase(self, *args):
        """
        erase(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::iterator pos) -> std::vector< RATSNEST_ITEM >::iterator
        erase(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::iterator first, std::vector< RATSNEST_ITEM >::iterator last) -> std::vector< RATSNEST_ITEM >::iterator
        """
        return _pcbnew.RASTNET_Vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(RATSNEST_ITEM)> self) -> RASTNET_Vector
        __init__(std::vector<(RATSNEST_ITEM)> self, RASTNET_Vector arg2) -> RASTNET_Vector
        __init__(std::vector<(RATSNEST_ITEM)> self, std::vector< RATSNEST_ITEM >::size_type size) -> RASTNET_Vector
        __init__(std::vector<(RATSNEST_ITEM)> self, std::vector< RATSNEST_ITEM >::size_type size, RATSNEST_ITEM value) -> RASTNET_Vector
        """
        this = _pcbnew.new_RASTNET_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(RASTNET_Vector self, RATSNEST_ITEM x)"""
        return _pcbnew.RASTNET_Vector_push_back(self, *args)

    def front(self):
        """front(RASTNET_Vector self) -> RATSNEST_ITEM"""
        return _pcbnew.RASTNET_Vector_front(self)

    def back(self):
        """back(RASTNET_Vector self) -> RATSNEST_ITEM"""
        return _pcbnew.RASTNET_Vector_back(self)

    def assign(self, *args):
        """assign(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::size_type n, RATSNEST_ITEM x)"""
        return _pcbnew.RASTNET_Vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::size_type new_size)
        resize(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::size_type new_size, RATSNEST_ITEM x)
        """
        return _pcbnew.RASTNET_Vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::iterator pos, RATSNEST_ITEM x) -> std::vector< RATSNEST_ITEM >::iterator
        insert(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::iterator pos, std::vector< RATSNEST_ITEM >::size_type n, 
            RATSNEST_ITEM x)
        """
        return _pcbnew.RASTNET_Vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::size_type n)"""
        return _pcbnew.RASTNET_Vector_reserve(self, *args)

    def capacity(self):
        """capacity(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::size_type"""
        return _pcbnew.RASTNET_Vector_capacity(self)

    __swig_destroy__ = _pcbnew.delete_RASTNET_Vector
    __del__ = lambda self : None;
RASTNET_Vector_swigregister = _pcbnew.RASTNET_Vector_swigregister
RASTNET_Vector_swigregister(RASTNET_Vector)

def GetPluginForPath(lpath):
        return IO_MGR.PluginFind(IO_MGR.LEGACY)
	
def FootprintEnumerate(lpath):
        plug = GetPluginForPath(lpath)
        return plug.FootprintEnumerate(lpath)
	
def FootprintLoad(lpath,name):
        plug = GetPluginForPath(lpath)
        return plug.FootprintLoad(lpath,name)
	
def FootprintSave(lpath,module):
	plug = GetPluginForPath(lpath)
        return plug.FootprintSave(lpath,module)
	
def FootprintDelete(lpath,name):
        plug = GetPluginForPath(lpath)
        plug.FootprintDelete(lpath,name)
	
def FootprintLibCreate(lpath):
        plug = GetPluginForPath(lpath)
        plug.FootprintLibCreate(lpath)
	
def FootprintLibDelete(lpath):
        plug = GetPluginForPath(lpath)
        plug.FootprintLibDelete(lpath)
	
def FootprintIsWritable(lpath):
        plug = GetPluginForPath(lpath)
        plug.FootprintLibIsWritable(lpath)
  
    

class PYTHON_FOOTPRINT_WIZARDS(_object):
    """Proxy of C++ PYTHON_FOOTPRINT_WIZARDS class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PYTHON_FOOTPRINT_WIZARDS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PYTHON_FOOTPRINT_WIZARDS, name)
    __repr__ = _swig_repr
    def register_wizard(*args):
        """register_wizard(PyObject * wizard)"""
        return _pcbnew.PYTHON_FOOTPRINT_WIZARDS_register_wizard(*args)

    if _newclass:register_wizard = staticmethod(register_wizard)
    __swig_getmethods__["register_wizard"] = lambda x: register_wizard
    def __init__(self): 
        """__init__(PYTHON_FOOTPRINT_WIZARDS self) -> PYTHON_FOOTPRINT_WIZARDS"""
        this = _pcbnew.new_PYTHON_FOOTPRINT_WIZARDS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcbnew.delete_PYTHON_FOOTPRINT_WIZARDS
    __del__ = lambda self : None;
PYTHON_FOOTPRINT_WIZARDS_swigregister = _pcbnew.PYTHON_FOOTPRINT_WIZARDS_swigregister
PYTHON_FOOTPRINT_WIZARDS_swigregister(PYTHON_FOOTPRINT_WIZARDS)

def PYTHON_FOOTPRINT_WIZARDS_register_wizard(*args):
  """PYTHON_FOOTPRINT_WIZARDS_register_wizard(PyObject * wizard)"""
  return _pcbnew.PYTHON_FOOTPRINT_WIZARDS_register_wizard(*args)

def ToMM(iu): 
   if type(iu) in [int,float]:
      return float(iu) / float((1e4 / 25.4))
   elif type(iu) in [wxPoint,wxSize]:
      return tuple(map(ToMM,iu))
   
def FromMM(mm): 
   if type(mm) in [int,float]:
      return int(float(mm) * float((1e4 / 25.4)))
   elif type(mm) in [wxPoint,wxSize]:
     return tuple(map(FromMM,mm))
 
def ToMils(iu): 
   if type(iu) in [int,float]:
   	return float(iu) / float(10.0)
   elif type(iu) in [wxPoint,wxSize]:
   	return tuple(map(ToMils,iu))
   	
def FromMils(mils): 
   if type(mils) in [int,float]:
      return int(float(mils)*float(10.0))
   elif type(mils) in [wxPoint,wxSize]:
   	return tuple(map(FromMils,mils))
   	
def wxSizeMM(mmx,mmy): return wxSize(FromMM(mmx),FromMM(mmy))
def wxSizeMils(mmx,mmy): return wxSize(FromMils(mmx),FromMils(mmy))
	
def wxPointMM(mmx,mmy): return wxPoint(FromMM(mmx),FromMM(mmy))
def wxPointMils(mmx,mmy): return wxPoint(FromMils(mmx),FromMils(mmy))

def wxRectMM(x,y,wx,wy):
	x = int(FromMM(x))
	y = int(FromMM(y))
	wx = int(FromMM(wx))
	wy = int (FromMM(wy))
	return wxRect(x,y,wx,wy)

def wxRectMils(x,y,wx,wy):
	x = int(FromMils(x))
	y = int(FromMils(y))
	wx = int(FromMils(wx))
	wy = int (FromMils(wy))
	return wxRect(x,y,wx,wy)


# This file is compatible with both classic and new-style classes.


