/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    if (inst) {
      Py_DECREF(robj);
      robj = inst;
    }
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BITMAP_DEF swig_types[0]
#define SWIGTYPE_p_BOARD swig_types[1]
#define SWIGTYPE_p_BOARD_CONNECTED_ITEM swig_types[2]
#define SWIGTYPE_p_BOARD_DESIGN_SETTINGS swig_types[3]
#define SWIGTYPE_p_BOARD_ITEM swig_types[4]
#define SWIGTYPE_p_COLORS_DESIGN_SETTINGS swig_types[5]
#define SWIGTYPE_p_DHEAD swig_types[6]
#define SWIGTYPE_p_DIMENSION swig_types[7]
#define SWIGTYPE_p_DLISTT_BOARD_ITEM_t swig_types[8]
#define SWIGTYPE_p_DLISTT_D_PAD_t swig_types[9]
#define SWIGTYPE_p_DLISTT_MODULE_t swig_types[10]
#define SWIGTYPE_p_DLISTT_S3D_MASTER_t swig_types[11]
#define SWIGTYPE_p_DLISTT_SEGZONE_t swig_types[12]
#define SWIGTYPE_p_DLISTT_TRACK_t swig_types[13]
#define SWIGTYPE_p_DRAWSEGMENT swig_types[14]
#define SWIGTYPE_p_DRC_ITEM swig_types[15]
#define SWIGTYPE_p_D_PAD swig_types[16]
#define SWIGTYPE_p_EDA_3D_CANVAS swig_types[17]
#define SWIGTYPE_p_EDA_COLOR_T swig_types[18]
#define SWIGTYPE_p_EDA_DRAW_FRAME swig_types[19]
#define SWIGTYPE_p_EDA_DRAW_PANEL swig_types[20]
#define SWIGTYPE_p_EDA_ITEM swig_types[21]
#define SWIGTYPE_p_EDA_RECT swig_types[22]
#define SWIGTYPE_p_EDA_TEXT swig_types[23]
#define SWIGTYPE_p_EDGE_MODULE swig_types[24]
#define SWIGTYPE_p_HIGH_LIGHT_INFO swig_types[25]
#define SWIGTYPE_p_INSPECTOR swig_types[26]
#define SWIGTYPE_p_IO_ERROR swig_types[27]
#define SWIGTYPE_p_IO_MGR swig_types[28]
#define SWIGTYPE_p_KICAD_T swig_types[29]
#define SWIGTYPE_p_LAYER swig_types[30]
#define SWIGTYPE_p_LOCALE_IO swig_types[31]
#define SWIGTYPE_p_MARKER_BASE swig_types[32]
#define SWIGTYPE_p_MARKER_PCB swig_types[33]
#define SWIGTYPE_p_MODULE swig_types[34]
#define SWIGTYPE_p_NETCLASS swig_types[35]
#define SWIGTYPE_p_NETCLASSES swig_types[36]
#define SWIGTYPE_p_NETCLASSES__NETCLASSMAP__const_iterator swig_types[37]
#define SWIGTYPE_p_NETCLASSES__NETCLASSMAP__iterator swig_types[38]
#define SWIGTYPE_p_NETCLASS__STRINGSET__const_iterator swig_types[39]
#define SWIGTYPE_p_NETCLASS__STRINGSET__iterator swig_types[40]
#define SWIGTYPE_p_NETINFO_ITEM swig_types[41]
#define SWIGTYPE_p_NETINFO_LIST swig_types[42]
#define SWIGTYPE_p_OUTPUTFORMATTER swig_types[43]
#define SWIGTYPE_p_PAD_DRAWINFO swig_types[44]
#define SWIGTYPE_p_PAGE_INFO swig_types[45]
#define SWIGTYPE_p_PARAM_CFG_ARRAY swig_types[46]
#define SWIGTYPE_p_PCB_IO swig_types[47]
#define SWIGTYPE_p_PCB_PLOT_PARAMS swig_types[48]
#define SWIGTYPE_p_PICKED_ITEMS_LIST swig_types[49]
#define SWIGTYPE_p_PLUGIN swig_types[50]
#define SWIGTYPE_p_PROPERTIES swig_types[51]
#define SWIGTYPE_p_PYTHON_FOOTPRINT_WIZARDS swig_types[52]
#define SWIGTYPE_p_RATSNEST_ITEM swig_types[53]
#define SWIGTYPE_p_S3D_MASTER swig_types[54]
#define SWIGTYPE_p_SEGVIA swig_types[55]
#define SWIGTYPE_p_SEGZONE swig_types[56]
#define SWIGTYPE_p_TEXTE_MODULE swig_types[57]
#define SWIGTYPE_p_TEXTE_PCB swig_types[58]
#define SWIGTYPE_p_TITLE_BLOCK swig_types[59]
#define SWIGTYPE_p_TRACK swig_types[60]
#define SWIGTYPE_p_VIA_DIMENSION swig_types[61]
#define SWIGTYPE_p_ZONE_CONTAINER swig_types[62]
#define SWIGTYPE_p_ZONE_SETTINGS swig_types[63]
#define SWIGTYPE_p_ZoneConnection swig_types[64]
#define SWIGTYPE_p_allocator_type swig_types[65]
#define SWIGTYPE_p_char swig_types[66]
#define SWIGTYPE_p_const_iterator swig_types[67]
#define SWIGTYPE_p_difference_type swig_types[68]
#define SWIGTYPE_p_int swig_types[69]
#define SWIGTYPE_p_iterator swig_types[70]
#define SWIGTYPE_p_p_PyObject swig_types[71]
#define SWIGTYPE_p_p_SEGVIA swig_types[72]
#define SWIGTYPE_p_p_SEGZONE swig_types[73]
#define SWIGTYPE_p_p_TRACK swig_types[74]
#define SWIGTYPE_p_size_type swig_types[75]
#define SWIGTYPE_p_std__allocatorT_RATSNEST_ITEM_t swig_types[76]
#define SWIGTYPE_p_std__allocatorT_VIA_DIMENSION_t swig_types[77]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[78]
#define SWIGTYPE_p_std__invalid_argument swig_types[79]
#define SWIGTYPE_p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t swig_types[80]
#define SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t swig_types[81]
#define SWIGTYPE_p_std__vectorT_EDA_ITEM_p_std__allocatorT_EDA_ITEM_p_t_t swig_types[82]
#define SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t swig_types[83]
#define SWIGTYPE_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t swig_types[84]
#define SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t swig_types[85]
#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[86]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[87]
#define SWIGTYPE_p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t swig_types[88]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[89]
#define SWIGTYPE_p_time_t swig_types[90]
#define SWIGTYPE_p_value_type swig_types[91]
#define SWIGTYPE_p_wxArrayString swig_types[92]
#define SWIGTYPE_p_wxChar swig_types[93]
#define SWIGTYPE_p_wxCoord swig_types[94]
#define SWIGTYPE_p_wxDC swig_types[95]
#define SWIGTYPE_p_wxFindReplaceData swig_types[96]
#define SWIGTYPE_p_wxPaperSize swig_types[97]
#define SWIGTYPE_p_wxPoint swig_types[98]
#define SWIGTYPE_p_wxRect swig_types[99]
#define SWIGTYPE_p_wxSize swig_types[100]
#define SWIGTYPE_p_wxStaticText swig_types[101]
#define SWIGTYPE_p_wxString swig_types[102]
#define SWIGTYPE_p_wxTextCtrl swig_types[103]
#define SWIGTYPE_p_wxWindow swig_types[104]
static swig_type_info *swig_types[106];
static swig_module_info swig_module = {swig_types, 105, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _pcbnew.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__pcbnew

#else
#  define SWIG_init    init_pcbnew

#endif
#define SWIG_name    "_pcbnew"

#define SWIGVERSION 0x020007 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <string>


    #include <cstddef>
	#include <dlist.h>
	#include <base_struct.h>
	#include <common.h>
	#include <wx_python_helpers.h>
	#include <cstddef>
  	#include <vector>
	
	using namespace std;
	
	#include <class_title_block.h>
	#include <class_colors_design_settings.h>
	#include <class_marker_base.h>
    	#include <eda_text.h>
	#include <convert_from_iu.h>
	#include <convert_to_biu.h>



#include <wx_python_helpers.h>


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}

SWIGINTERN PyObject *wxRect_Get(wxRect *self){
            PyObject* res = PyTuple_New(4);
            PyTuple_SET_ITEM(res, 0, PyInt_FromLong(self->x));
            PyTuple_SET_ITEM(res, 1, PyInt_FromLong(self->y));
            PyTuple_SET_ITEM(res, 2, PyInt_FromLong(self->width));
            PyTuple_SET_ITEM(res, 3, PyInt_FromLong(self->height));
            return res;
        }
SWIGINTERN PyObject *wxSize_Get(wxSize *self){
            PyObject* res = PyTuple_New(2);
            PyTuple_SET_ITEM(res, 0, PyInt_FromLong(self->x));
            PyTuple_SET_ITEM(res, 1, PyInt_FromLong(self->y));
            return res;
        }
SWIGINTERN wxPoint wxPoint___add__(wxPoint *self,wxPoint const &pt){   return *self + pt;  }
SWIGINTERN wxPoint wxPoint___sub__(wxPoint *self,wxPoint const &pt){   return *self - pt;  }
SWIGINTERN void wxPoint_Set(wxPoint *self,long x,long y){  self->x = x;     self->y = y;  }
SWIGINTERN PyObject *wxPoint_Get(wxPoint *self){
            PyObject* tup = PyTuple_New(2);
            PyTuple_SET_ITEM(tup, 0, PyInt_FromLong(self->x));
            PyTuple_SET_ITEM(tup, 1, PyInt_FromLong(self->y));
            return tup;
        }

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            if (it==self->end())
              break;
            for (Py_ssize_t c=0; c<(step-1); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          self->erase((++it).base());
          if (it==self->rend())
            break;
          for (Py_ssize_t c=0; c<(-step-1); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v=std::vector< int,std::allocator< int > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
 
  #include <wx_python_helpers.h>
  #include <class_board_item.h>
  #include <class_board_connected_item.h>
  #include <class_board_design_settings.h>
  #include <class_board.h>
  #include <class_module.h>
  #include <class_track.h>  
  #include <layers_id_colors_and_visibility.h>
  #include <class_pad.h>
  #include <pad_shapes.h>
  #include <class_netinfo.h>
  #include <class_pcb_text.h>
  #include <class_dimension.h>
  #include <class_drawsegment.h>
  #include <class_marker_pcb.h>
  #include <class_text_mod.h>
  #include <class_edge_mod.h>
  #include <dlist.h>
  #include <class_zone_settings.h>
  #include <class_netclass.h>
  #include <class_netinfo.h>
  #include <pcbnew_scripting_helpers.h>
  
      
  BOARD *GetBoard(); /* get current editor board */


  #include <io_mgr.h>
  #include <kicad_plugin.h>


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN TEXTE_PCB *BOARD_ITEM_Cast_to_TEXTE_PCB(BOARD_ITEM *self){  return dynamic_cast<TEXTE_PCB*>(self);     }
SWIGINTERN DIMENSION *BOARD_ITEM_Cast_to_DIMENSION(BOARD_ITEM *self){  return dynamic_cast<DIMENSION*>(self);     }
SWIGINTERN MODULE *BOARD_ITEM_Cast_to_MODULE(BOARD_ITEM *self){  return dynamic_cast<MODULE*>(self);        }
SWIGINTERN TEXTE_MODULE *BOARD_ITEM_Cast_to_TEXTE_MODULE(BOARD_ITEM *self){  return dynamic_cast<TEXTE_MODULE*>(self);  }
SWIGINTERN DRAWSEGMENT *BOARD_ITEM_Cast_to_DRAWSEGMENT(BOARD_ITEM *self){  return dynamic_cast<DRAWSEGMENT*>(self);   }
SWIGINTERN MARKER_PCB *BOARD_ITEM_Cast_to_MARKER_PCB(BOARD_ITEM *self){  return dynamic_cast<MARKER_PCB*>(self);    }
SWIGINTERN BOARD *BOARD_ITEM_Cast_to_BOARD(BOARD_ITEM *self){  return dynamic_cast<BOARD*>(self);         }
SWIGINTERN EDGE_MODULE *BOARD_ITEM_Cast_to_EDGE_MODULE(BOARD_ITEM *self){  return dynamic_cast<EDGE_MODULE*>(self);   }
SWIGINTERN D_PAD *BOARD_ITEM_Cast_to_D_PAD(BOARD_ITEM *self){  return dynamic_cast<D_PAD*>(self);         }
SWIGINTERN TRACK *BOARD_ITEM_Cast_to_TRACK(BOARD_ITEM *self){  return dynamic_cast<TRACK*>(self);         }
SWIGINTERN SEGZONE *BOARD_ITEM_Cast_to_SEGZONE(BOARD_ITEM *self){  return dynamic_cast<SEGZONE*>(self);       }
SWIGINTERN SEGVIA *BOARD_ITEM_Cast_to_SEGVIA(BOARD_ITEM *self){  return dynamic_cast<SEGVIA*>(self);        }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


  BOARD_ITEM*   Cast_to_BOARD_ITEM(EDA_ITEM* base)    {  return dynamic_cast<BOARD_ITEM*>(base);    }


  namespace swig {
    template <>  struct traits<VIA_DIMENSION > {
      typedef pointer_category category;
      static const char* type_name() { return"VIA_DIMENSION"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<VIA_DIMENSION, std::allocator< VIA_DIMENSION > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "VIA_DIMENSION" "," "std::allocator< VIA_DIMENSION >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_VIA_DIMENSION_Sg__iterator(std::vector< VIA_DIMENSION > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_VIA_DIMENSION_Sg____nonzero__(std::vector< VIA_DIMENSION > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_VIA_DIMENSION_Sg____bool__(std::vector< VIA_DIMENSION > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< VIA_DIMENSION >::size_type std_vector_Sl_VIA_DIMENSION_Sg____len__(std::vector< VIA_DIMENSION > const *self){
      return self->size();
    }
SWIGINTERN std::vector< VIA_DIMENSION >::value_type std_vector_Sl_VIA_DIMENSION_Sg__pop(std::vector< VIA_DIMENSION > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *std_vector_Sl_VIA_DIMENSION_Sg____getslice__(std::vector< VIA_DIMENSION > *self,std::vector< VIA_DIMENSION >::difference_type i,std::vector< VIA_DIMENSION >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_VIA_DIMENSION_Sg____setslice____SWIG_0(std::vector< VIA_DIMENSION > *self,std::vector< VIA_DIMENSION >::difference_type i,std::vector< VIA_DIMENSION >::difference_type j,std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &v=std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_VIA_DIMENSION_Sg____delslice__(std::vector< VIA_DIMENSION > *self,std::vector< VIA_DIMENSION >::difference_type i,std::vector< VIA_DIMENSION >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_VIA_DIMENSION_Sg____delitem____SWIG_0(std::vector< VIA_DIMENSION > *self,std::vector< VIA_DIMENSION >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *std_vector_Sl_VIA_DIMENSION_Sg____getitem____SWIG_0(std::vector< VIA_DIMENSION > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >::difference_type id = i;
      std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_VIA_DIMENSION_Sg____setitem____SWIG_0(std::vector< VIA_DIMENSION > *self,PySliceObject *slice,std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >::difference_type id = i;
      std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_VIA_DIMENSION_Sg____setitem____SWIG_1(std::vector< VIA_DIMENSION > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >::difference_type id = i;
      std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_VIA_DIMENSION_Sg____delitem____SWIG_1(std::vector< VIA_DIMENSION > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >::difference_type id = i;
      std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< VIA_DIMENSION >::value_type const &std_vector_Sl_VIA_DIMENSION_Sg____getitem____SWIG_1(std::vector< VIA_DIMENSION > const *self,std::vector< VIA_DIMENSION >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_VIA_DIMENSION_Sg____setitem____SWIG_2(std::vector< VIA_DIMENSION > *self,std::vector< VIA_DIMENSION >::difference_type i,std::vector< VIA_DIMENSION >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_VIA_DIMENSION_Sg__append(std::vector< VIA_DIMENSION > *self,std::vector< VIA_DIMENSION >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<RATSNEST_ITEM > {
      typedef pointer_category category;
      static const char* type_name() { return"RATSNEST_ITEM"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<RATSNEST_ITEM, std::allocator< RATSNEST_ITEM > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "RATSNEST_ITEM" "," "std::allocator< RATSNEST_ITEM >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_RATSNEST_ITEM_Sg__iterator(std::vector< RATSNEST_ITEM > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_RATSNEST_ITEM_Sg____nonzero__(std::vector< RATSNEST_ITEM > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_RATSNEST_ITEM_Sg____bool__(std::vector< RATSNEST_ITEM > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< RATSNEST_ITEM >::size_type std_vector_Sl_RATSNEST_ITEM_Sg____len__(std::vector< RATSNEST_ITEM > const *self){
      return self->size();
    }
SWIGINTERN std::vector< RATSNEST_ITEM >::value_type std_vector_Sl_RATSNEST_ITEM_Sg__pop(std::vector< RATSNEST_ITEM > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *std_vector_Sl_RATSNEST_ITEM_Sg____getslice__(std::vector< RATSNEST_ITEM > *self,std::vector< RATSNEST_ITEM >::difference_type i,std::vector< RATSNEST_ITEM >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_RATSNEST_ITEM_Sg____setslice____SWIG_0(std::vector< RATSNEST_ITEM > *self,std::vector< RATSNEST_ITEM >::difference_type i,std::vector< RATSNEST_ITEM >::difference_type j,std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &v=std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_RATSNEST_ITEM_Sg____delslice__(std::vector< RATSNEST_ITEM > *self,std::vector< RATSNEST_ITEM >::difference_type i,std::vector< RATSNEST_ITEM >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_RATSNEST_ITEM_Sg____delitem____SWIG_0(std::vector< RATSNEST_ITEM > *self,std::vector< RATSNEST_ITEM >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *std_vector_Sl_RATSNEST_ITEM_Sg____getitem____SWIG_0(std::vector< RATSNEST_ITEM > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >::difference_type id = i;
      std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_RATSNEST_ITEM_Sg____setitem____SWIG_0(std::vector< RATSNEST_ITEM > *self,PySliceObject *slice,std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >::difference_type id = i;
      std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_RATSNEST_ITEM_Sg____setitem____SWIG_1(std::vector< RATSNEST_ITEM > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >::difference_type id = i;
      std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_RATSNEST_ITEM_Sg____delitem____SWIG_1(std::vector< RATSNEST_ITEM > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >::difference_type id = i;
      std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< RATSNEST_ITEM >::value_type const &std_vector_Sl_RATSNEST_ITEM_Sg____getitem____SWIG_1(std::vector< RATSNEST_ITEM > const *self,std::vector< RATSNEST_ITEM >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_RATSNEST_ITEM_Sg____setitem____SWIG_2(std::vector< RATSNEST_ITEM > *self,std::vector< RATSNEST_ITEM >::difference_type i,std::vector< RATSNEST_ITEM >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_RATSNEST_ITEM_Sg__append(std::vector< RATSNEST_ITEM > *self,std::vector< RATSNEST_ITEM >::value_type const &x){
      self->push_back(x);
    }

    MODULE *PyModule_to_MODULE(PyObject *obj0) 
    {
        void *argp;
        int res1 = SWIG_ConvertPtr(obj0, &argp,SWIGTYPE_p_MODULE, 0 |  0 );
        if (!SWIG_IsOK(res1)) 
        {
            SWIG_exception_fail(SWIG_ArgError(res1), "Converting object to MODULE*"); 
        }
        
        return (MODULE*)argp;
        
        fail:
        return NULL;

    }



#include <scripting/pcbnew_footprint_wizards.h>

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_wxSetDefaultPyEncoding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxSetDefaultPyEncoding",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSetDefaultPyEncoding" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  wxSetDefaultPyEncoding((char const *)arg1);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxGetDefaultPyEncoding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":wxGetDefaultPyEncoding")) SWIG_fail;
  result = (char *)wxGetDefaultPyEncoding();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxRect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_wxRect")) SWIG_fail;
  result = (wxRect *)new wxRect();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxRect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxRect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  wxRect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_wxRect",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_wxRect" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_wxRect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_wxRect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_wxRect" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (wxRect *)new wxRect(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxRect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxRect__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxRect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_wxRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_wxRect" "', argument " "1"" of type '" "wxPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_wxRect" "', argument " "1"" of type '" "wxPoint const &""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_wxRect" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_wxRect" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  result = (wxRect *)new wxRect((wxPoint const &)*arg1,(wxPoint const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxRect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxRect__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxRect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_wxRect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_wxRect" "', argument " "1"" of type '" "wxPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_wxRect" "', argument " "1"" of type '" "wxPoint const &""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_wxRect" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_wxRect" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  result = (wxRect *)new wxRect((wxPoint const &)*arg1,(wxSize const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxRect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxRect__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxRect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_wxRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_wxRect" "', argument " "1"" of type '" "wxSize const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_wxRect" "', argument " "1"" of type '" "wxSize const &""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  result = (wxRect *)new wxRect((wxSize const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxRect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxRect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_wxRect__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wxSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_wxRect__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wxPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_wxRect__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wxPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_wxRect__SWIG_2(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_wxRect__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_wxRect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wxRect::wxRect()\n"
    "    wxRect::wxRect(int,int,int,int)\n"
    "    wxRect::wxRect(wxPoint const &,wxPoint const &)\n"
    "    wxRect::wxRect(wxPoint const &,wxSize const &)\n"
    "    wxRect::wxRect(wxSize const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_wxRect_GetX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_GetX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_GetX" "', argument " "1"" of type '" "wxRect const *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = (int)((wxRect const *)arg1)->GetX();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_SetX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxRect_SetX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_SetX" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxRect_SetX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetX(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_GetY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_GetY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_GetY" "', argument " "1"" of type '" "wxRect const *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = (int)((wxRect const *)arg1)->GetY();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_SetY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxRect_SetY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_SetY" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxRect_SetY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetY(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_GetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_GetWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_GetWidth" "', argument " "1"" of type '" "wxRect const *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = (int)((wxRect const *)arg1)->GetWidth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_SetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxRect_SetWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_SetWidth" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxRect_SetWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetWidth(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_GetHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_GetHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_GetHeight" "', argument " "1"" of type '" "wxRect const *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = (int)((wxRect const *)arg1)->GetHeight();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_SetHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxRect_SetHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_SetHeight" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxRect_SetHeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetHeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_GetPosition" "', argument " "1"" of type '" "wxRect const *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = ((wxRect const *)arg1)->GetPosition();
  resultobj = SWIG_NewPointerObj((new wxPoint(static_cast< const wxPoint& >(result))), SWIGTYPE_p_wxPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxRect_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_SetPosition" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "wxRect_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "wxRect_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  (arg1)->SetPosition((wxPoint const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxRect_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_x_set" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxRect_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_x_get" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxRect_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_y_set" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxRect_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_y_get" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxRect_width_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_width_set" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxRect_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->width = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_width_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_width_get" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = (int) ((arg1)->width);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxRect_height_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_height_set" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxRect_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->height = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_height_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_height_get" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = (int) ((arg1)->height);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxRect_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxRect_Get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxRect_Get" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  result = (PyObject *)wxRect_Get(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_wxRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxRect *arg1 = (wxRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_wxRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxRect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_wxRect" "', argument " "1"" of type '" "wxRect *""'"); 
  }
  arg1 = reinterpret_cast< wxRect * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *wxRect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wxRect, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_wxSize_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxSize_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSize_x_set" "', argument " "1"" of type '" "wxSize *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxSize_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxSize_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxSize_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSize_x_get" "', argument " "1"" of type '" "wxSize *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxSize_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxSize_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSize_y_set" "', argument " "1"" of type '" "wxSize *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxSize_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxSize_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxSize_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSize_y_get" "', argument " "1"" of type '" "wxSize *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxSize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_wxSize",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_wxSize" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_wxSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (wxSize *)new wxSize(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxSize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_wxSize",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_wxSize" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_wxSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (wxSize *)new wxSize(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxSize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_wxSize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_wxSize__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_wxSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wxSize::wxSize(int,int)\n"
    "    wxSize::wxSize(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_wxSize_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxSize_Get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSize_Get" "', argument " "1"" of type '" "wxSize *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  result = (PyObject *)wxSize_Get(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_wxSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_wxSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_wxSize" "', argument " "1"" of type '" "wxSize *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxSize_SetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxSize_SetWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSize_SetWidth" "', argument " "1"" of type '" "wxSize *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxSize_SetWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetWidth(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxSize_SetHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxSize_SetHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSize_SetHeight" "', argument " "1"" of type '" "wxSize *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxSize_SetHeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetHeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxSize_GetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxSize_GetWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSize_GetWidth" "', argument " "1"" of type '" "wxSize const *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  result = (int)((wxSize const *)arg1)->GetWidth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxSize_GetHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxSize_GetHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxSize_GetHeight" "', argument " "1"" of type '" "wxSize const *""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  result = (int)((wxSize const *)arg1)->GetHeight();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *wxSize_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wxSize, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_wxPoint_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = (wxPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxPoint_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxPoint_x_set" "', argument " "1"" of type '" "wxPoint *""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxPoint_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxPoint_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxPoint_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxPoint_x_get" "', argument " "1"" of type '" "wxPoint *""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxPoint_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = (wxPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxPoint_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxPoint_y_set" "', argument " "1"" of type '" "wxPoint *""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxPoint_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxPoint_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxPoint_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxPoint_y_get" "', argument " "1"" of type '" "wxPoint *""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_wxPoint",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_wxPoint" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_wxPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (wxPoint *)new wxPoint(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_wxPoint",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_wxPoint" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_wxPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (wxPoint *)new wxPoint(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_wxPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_wxPoint__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_wxPoint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_wxPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wxPoint::wxPoint(int,int)\n"
    "    wxPoint::wxPoint(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_wxPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_wxPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_wxPoint" "', argument " "1"" of type '" "wxPoint *""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxPoint___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = (wxPoint *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< wxPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxPoint___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxPoint___add__" "', argument " "1"" of type '" "wxPoint *""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "wxPoint___add__" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "wxPoint___add__" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  result = wxPoint___add__(arg1,(wxPoint const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wxPoint(static_cast< const wxPoint& >(result))), SWIGTYPE_p_wxPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxPoint___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = (wxPoint *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< wxPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxPoint___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxPoint___sub__" "', argument " "1"" of type '" "wxPoint *""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "wxPoint___sub__" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "wxPoint___sub__" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  result = wxPoint___sub__(arg1,(wxPoint const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wxPoint(static_cast< const wxPoint& >(result))), SWIGTYPE_p_wxPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxPoint_Set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = (wxPoint *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:wxPoint_Set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxPoint_Set" "', argument " "1"" of type '" "wxPoint *""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wxPoint_Set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "wxPoint_Set" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  wxPoint_Set(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxPoint_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:wxPoint_Get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wxPoint_Get" "', argument " "1"" of type '" "wxPoint *""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  result = (PyObject *)wxPoint_Get(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *wxPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wxPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DHEAD_DeleteAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DHEAD *arg1 = (DHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DHEAD_DeleteAll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DHEAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DHEAD_DeleteAll" "', argument " "1"" of type '" "DHEAD *""'"); 
  }
  arg1 = reinterpret_cast< DHEAD * >(argp1);
  (arg1)->DeleteAll();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DHEAD_SetOwnership(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DHEAD *arg1 = (DHEAD *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DHEAD_SetOwnership",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DHEAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DHEAD_SetOwnership" "', argument " "1"" of type '" "DHEAD *""'"); 
  }
  arg1 = reinterpret_cast< DHEAD * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DHEAD_SetOwnership" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetOwnership(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DHEAD_GetCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DHEAD *arg1 = (DHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DHEAD_GetCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DHEAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DHEAD_GetCount" "', argument " "1"" of type '" "DHEAD const *""'"); 
  }
  arg1 = reinterpret_cast< DHEAD * >(argp1);
  result = (unsigned int)((DHEAD const *)arg1)->GetCount();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DHEAD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DHEAD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_INSPECTOR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INSPECTOR *arg1 = (INSPECTOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_INSPECTOR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INSPECTOR, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_INSPECTOR" "', argument " "1"" of type '" "INSPECTOR *""'"); 
  }
  arg1 = reinterpret_cast< INSPECTOR * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INSPECTOR_Inspect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INSPECTOR *arg1 = (INSPECTOR *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:INSPECTOR_Inspect",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INSPECTOR_Inspect" "', argument " "1"" of type '" "INSPECTOR *""'"); 
  }
  arg1 = reinterpret_cast< INSPECTOR * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INSPECTOR_Inspect" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "INSPECTOR_Inspect" "', argument " "3"" of type '" "void const *""'"); 
  }
  result = (SEARCH_RESULT)(arg1)->Inspect(arg2,(void const *)arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *INSPECTOR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_INSPECTOR, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EDA_RECT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EDA_RECT")) SWIG_fail;
  result = (EDA_RECT *)new EDA_RECT();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EDA_RECT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EDA_RECT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_EDA_RECT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EDA_RECT" "', argument " "1"" of type '" "wxPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EDA_RECT" "', argument " "1"" of type '" "wxPoint const &""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_EDA_RECT" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EDA_RECT" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  result = (EDA_RECT *)new EDA_RECT((wxPoint const &)*arg1,(wxSize const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EDA_RECT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_EDA_RECT__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wxPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_EDA_RECT__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EDA_RECT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_RECT::EDA_RECT()\n"
    "    EDA_RECT::EDA_RECT(wxPoint const &,wxSize const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Centre(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_Centre",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Centre" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (arg1)->Centre();
  resultobj = SWIG_NewPointerObj((new wxPoint(static_cast< const wxPoint& >(result))), SWIGTYPE_p_wxPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Move" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  (arg1)->Move((wxPoint const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_Normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Normalize" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  (arg1)->Normalize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Contains" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_Contains" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_Contains" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  result = (bool)((EDA_RECT const *)arg1)->Contains((wxPoint const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_RECT_Contains",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Contains" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_Contains" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_RECT_Contains" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((EDA_RECT const *)arg1)->Contains(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Contains__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Contains" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_Contains" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_Contains" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  result = (bool)((EDA_RECT const *)arg1)->Contains((EDA_RECT const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_RECT_Contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_RECT_Contains__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EDA_RECT_Contains__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_RECT_Contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_RECT::Contains(wxPoint const &) const\n"
    "    EDA_RECT::Contains(int,int) const\n"
    "    EDA_RECT::Contains(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetSize" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (wxSize *) &((EDA_RECT const *)arg1)->GetSize();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetX" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (int)((EDA_RECT const *)arg1)->GetX();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetY" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (int)((EDA_RECT const *)arg1)->GetY();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetOrigin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetOrigin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetOrigin" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (wxPoint *) &((EDA_RECT const *)arg1)->GetOrigin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetPosition" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (wxPoint *) &((EDA_RECT const *)arg1)->GetPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetEnd" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = ((EDA_RECT const *)arg1)->GetEnd();
  resultobj = SWIG_NewPointerObj((new wxPoint(static_cast< const wxPoint& >(result))), SWIGTYPE_p_wxPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetWidth" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (int)((EDA_RECT const *)arg1)->GetWidth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetHeight" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (int)((EDA_RECT const *)arg1)->GetHeight();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetRight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetRight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetRight" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (int)((EDA_RECT const *)arg1)->GetRight();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetBottom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetBottom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetBottom" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (int)((EDA_RECT const *)arg1)->GetBottom();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetOrigin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_SetOrigin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetOrigin" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_SetOrigin" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_SetOrigin" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  (arg1)->SetOrigin((wxPoint const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetOrigin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_RECT_SetOrigin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetOrigin" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_SetOrigin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_RECT_SetOrigin" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetOrigin(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetOrigin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_RECT_SetOrigin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EDA_RECT_SetOrigin__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_RECT_SetOrigin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_RECT::SetOrigin(wxPoint const &)\n"
    "    EDA_RECT::SetOrigin(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetSize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_SetSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetSize" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_SetSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_SetSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  (arg1)->SetSize((wxSize const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetSize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_RECT_SetSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetSize" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_SetSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_RECT_SetSize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetSize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetSize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_RECT_SetSize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EDA_RECT_SetSize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_RECT_SetSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_RECT::SetSize(wxSize const &)\n"
    "    EDA_RECT::SetSize(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Offset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_RECT_Offset",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Offset" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_Offset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_RECT_Offset" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->Offset(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Offset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_Offset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Offset" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_Offset" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_Offset" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  (arg1)->Offset((wxPoint const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Offset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_RECT_Offset__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EDA_RECT_Offset__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_RECT_Offset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_RECT::Offset(int,int)\n"
    "    EDA_RECT::Offset(wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_SetX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetX" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_SetX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetX(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_SetY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetY" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_SetY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetY(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_SetWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetWidth" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_SetWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetWidth(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_SetHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetHeight" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_SetHeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetHeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetEnd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_RECT_SetEnd",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetEnd" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_SetEnd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_RECT_SetEnd" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetEnd(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetEnd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_SetEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_SetEnd" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  (arg1)->SetEnd((wxPoint const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_SetEnd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_RECT_SetEnd__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EDA_RECT_SetEnd__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_RECT_SetEnd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_RECT::SetEnd(int,int)\n"
    "    EDA_RECT::SetEnd(wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Intersects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_Intersects",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Intersects" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_Intersects" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_Intersects" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  result = (bool)((EDA_RECT const *)arg1)->Intersects((EDA_RECT const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_getWxRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxRect result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_getWxRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_getWxRect" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = ((EDA_RECT const *)arg1)->operator wxRect();
  resultobj = SWIG_NewPointerObj((new wxRect(static_cast< const wxRect& >(result))), SWIGTYPE_p_wxRect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Inflate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  wxCoord arg2 ;
  wxCoord arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  EDA_RECT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_RECT_Inflate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Inflate" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxCoord,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_Inflate" "', argument " "2"" of type '" "wxCoord""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_Inflate" "', argument " "2"" of type '" "wxCoord""'");
    } else {
      wxCoord * temp = reinterpret_cast< wxCoord * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxCoord,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDA_RECT_Inflate" "', argument " "3"" of type '" "wxCoord""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_Inflate" "', argument " "3"" of type '" "wxCoord""'");
    } else {
      wxCoord * temp = reinterpret_cast< wxCoord * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (EDA_RECT *) &(arg1)->Inflate(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_RECT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Inflate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EDA_RECT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_Inflate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Inflate" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_RECT_Inflate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (EDA_RECT *) &(arg1)->Inflate(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_RECT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Inflate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EDA_RECT_Inflate__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxCoord, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wxCoord, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_EDA_RECT_Inflate__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_RECT_Inflate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_RECT::Inflate(wxCoord,wxCoord)\n"
    "    EDA_RECT::Inflate(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Merge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_Merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Merge" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_Merge" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_Merge" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  (arg1)->Merge((EDA_RECT const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Merge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_RECT_Merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_Merge" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_RECT_Merge" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_RECT_Merge" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  (arg1)->Merge((wxPoint const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_Merge(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_RECT_Merge__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_RECT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_RECT_Merge__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_RECT_Merge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_RECT::Merge(EDA_RECT const &)\n"
    "    EDA_RECT::Merge(wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_RECT_GetArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_RECT_GetArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_RECT_GetArea" "', argument " "1"" of type '" "EDA_RECT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  result = (double)((EDA_RECT const *)arg1)->GetArea();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EDA_RECT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_RECT *arg1 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EDA_RECT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_RECT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EDA_RECT" "', argument " "1"" of type '" "EDA_RECT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_RECT * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EDA_RECT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EDA_RECT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_EDA_ITEM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EDA_ITEM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EDA_ITEM" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  KICAD_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_Type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Type" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (KICAD_T)((EDA_ITEM const *)arg1)->Type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_SetTimeStamp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetTimeStamp" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_time_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_SetTimeStamp" "', argument " "2"" of type '" "time_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_ITEM_SetTimeStamp" "', argument " "2"" of type '" "time_t""'");
    } else {
      time_t * temp = reinterpret_cast< time_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetTimeStamp(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  time_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetTimeStamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetTimeStamp" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = ((EDA_ITEM const *)arg1)->GetTimeStamp();
  resultobj = SWIG_NewPointerObj((new time_t(static_cast< const time_t& >(result))), SWIGTYPE_p_time_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Next" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (EDA_ITEM *)((EDA_ITEM const *)arg1)->Next();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Back" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (EDA_ITEM *)((EDA_ITEM const *)arg1)->Back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetParent" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (EDA_ITEM *)((EDA_ITEM const *)arg1)->GetParent();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetSon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetSon" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (EDA_ITEM *)((EDA_ITEM const *)arg1)->GetSon();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DHEAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetList" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (DHEAD *)((EDA_ITEM const *)arg1)->GetList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DHEAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_SetParent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetParent" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_SetParent" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (arg1)->SetParent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_SetSon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetSon" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_SetSon" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (arg1)->SetSon(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  DHEAD *arg2 = (DHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_SetList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetList" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DHEAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_SetList" "', argument " "2"" of type '" "DHEAD *""'"); 
  }
  arg2 = reinterpret_cast< DHEAD * >(argp2);
  (arg1)->SetList(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_IsNew(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_IsNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_IsNew" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (bool)((EDA_ITEM const *)arg1)->IsNew();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_IsModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_IsModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_IsModified" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (bool)((EDA_ITEM const *)arg1)->IsModified();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_IsMoving(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_IsMoving",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_IsMoving" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (bool)((EDA_ITEM const *)arg1)->IsMoving();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_IsDragging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_IsDragging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_IsDragging" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (bool)((EDA_ITEM const *)arg1)->IsDragging();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_IsSelected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_IsSelected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_IsSelected" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (bool)((EDA_ITEM const *)arg1)->IsSelected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_IsResized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_IsResized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_IsResized" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (bool)((EDA_ITEM const *)arg1)->IsResized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_SetModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetModified" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  (arg1)->SetModified();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_GetState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetState" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_ITEM_GetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((EDA_ITEM const *)arg1)->GetState(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_ITEM_SetState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetState" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_ITEM_SetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_ITEM_SetState" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetState(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetStatus" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (int)((EDA_ITEM const *)arg1)->GetStatus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_SetStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetStatus" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_ITEM_SetStatus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetStatus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_SetFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetFlags" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_ITEM_SetFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_ClearFlags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_ClearFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_ClearFlags" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_ITEM_ClearFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->ClearFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_ClearFlags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_ClearFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_ClearFlags" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  (arg1)->ClearFlags();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_ClearFlags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EDA_ITEM_ClearFlags__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EDA_ITEM_ClearFlags__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_ITEM_ClearFlags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::ClearFlags(int)\n"
    "    EDA_ITEM::ClearFlags()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetFlags" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (int)((EDA_ITEM const *)arg1)->GetFlags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_SetImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetImage" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_SetImage" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (arg1)->SetImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_SetForceVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_SetForceVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_SetForceVisible" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_ITEM_SetForceVisible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetForceVisible(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_DisplayInfo" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  (arg1)->DisplayInfo(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_HitTest" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_ITEM_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  result = (bool)(arg1)->HitTest((wxPoint const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_HitTest" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_ITEM_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  result = (bool)((EDA_ITEM const *)arg1)->HitTest((EDA_RECT const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_ITEM_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_ITEM_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_ITEM_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::HitTest(wxPoint const &)\n"
    "    EDA_ITEM::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetBoundingBox" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = ((EDA_ITEM const *)arg1)->GetBoundingBox();
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Clone" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (EDA_ITEM *)((EDA_ITEM const *)arg1)->Clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_IterateForward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EDA_ITEM_IterateForward",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_IterateForward" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_IterateForward" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDA_ITEM_IterateForward" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EDA_ITEM_IterateForward" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  result = (SEARCH_RESULT)EDA_ITEM::IterateForward(arg1,arg2,(void const *)arg3,(enum KICAD_T const (*))arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Visit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EDA_ITEM_Visit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Visit" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_Visit" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDA_ITEM_Visit" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EDA_ITEM_Visit" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  result = (SEARCH_RESULT)(arg1)->Visit(arg2,(void const *)arg3,(KICAD_T const (*))arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetClass" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = ((EDA_ITEM const *)arg1)->GetClass();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetSelectMenuText" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = ((EDA_ITEM const *)arg1)->GetSelectMenuText();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_GetMenuImage" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = ((EDA_ITEM const *)arg1)->GetMenuImage();
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Matches__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  wxPoint *arg4 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EDA_ITEM_Matches",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Matches" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_ITEM_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDA_ITEM_Matches" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EDA_ITEM_Matches" "', argument " "4"" of type '" "wxPoint *""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  result = (bool)(arg1)->Matches(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Matches__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  wxString *arg2 = 0 ;
  wxFindReplaceData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_ITEM_Matches",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Matches" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDA_ITEM_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_ITEM_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  arg3 = reinterpret_cast< wxFindReplaceData * >(argp3);
  result = (bool)(arg1)->Matches((wxString const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Matches(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_EDA_ITEM_Matches__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_EDA_ITEM_Matches__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_ITEM_Matches'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Matches(wxFindReplaceData &,void *,wxPoint *)\n"
    "    EDA_ITEM::Matches(wxString const &,wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  wxString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_ITEM_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Replace" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_ITEM_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  result = (bool)(arg1)->Replace(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_ITEM_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Replace" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_ITEM_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDA_ITEM_Replace" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (bool)(arg1)->Replace(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Replace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_Replace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Replace" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_ITEM_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  result = (bool)(arg1)->Replace(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Replace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_ITEM_Replace__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          return _wrap_EDA_ITEM_Replace__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_EDA_ITEM_Replace__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_ITEM_Replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,wxString &)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,void *)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_IsReplaceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_ITEM_IsReplaceable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_IsReplaceable" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (bool)((EDA_ITEM const *)arg1)->IsReplaceable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM___lt__" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_ITEM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_ITEM___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  result = (bool)((EDA_ITEM const *)arg1)->operator <((EDA_ITEM const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_ITEM_Sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_ITEM_Sort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_ITEM_Sort" "', argument " "1"" of type '" "EDA_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_ITEM_Sort" "', argument " "2"" of type '" "EDA_ITEM const *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  result = (bool)EDA_ITEM::Sort((EDA_ITEM const *)arg1,(EDA_ITEM const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EDA_ITEM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EDA_ITEM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_EDA_ITEM,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_clone" "', argument " "1"" of type '" "EDA_ITEM const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_clone" "', argument " "1"" of type '" "EDA_ITEM const &""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  result = (EDA_ITEM *)new_clone((EDA_ITEM const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KiROUND(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KiROUND",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "KiROUND" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (int)KiROUND(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mm2mils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mm2mils",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mm2mils" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (int)Mm2mils(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mils2mm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mils2mm",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mils2mm" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (int)Mils2mm(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsGOST(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":IsGOST")) SWIG_fail;
  result = (bool)IsGOST();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PAGE_INFO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  bool arg2 ;
  bool temp1 = false ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PAGE_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PAGE_INFO",&obj0,&obj1)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PAGE_INFO" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (PAGE_INFO *)new PAGE_INFO((wxString const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PAGE_INFO, SWIG_POINTER_NEW |  0 );
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PAGE_INFO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  bool temp1 = false ;
  PyObject * obj0 = 0 ;
  PAGE_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PAGE_INFO",&obj0)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  result = (PAGE_INFO *)new PAGE_INFO((wxString const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PAGE_INFO, SWIG_POINTER_NEW |  0 );
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PAGE_INFO__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PAGE_INFO")) SWIG_fail;
  result = (PAGE_INFO *)new PAGE_INFO();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PAGE_INFO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PAGE_INFO(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PAGE_INFO__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      return _wrap_new_PAGE_INFO__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PAGE_INFO__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PAGE_INFO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PAGE_INFO::PAGE_INFO(wxString const &,bool)\n"
    "    PAGE_INFO::PAGE_INFO(wxString const &)\n"
    "    PAGE_INFO::PAGE_INFO()\n");
  return 0;
}


SWIGINTERN int Swig_var_PAGE_INFO_A4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_A4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_A4_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::A4)->c_str(), (&PAGE_INFO::A4)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::A4)->c_str(), (&PAGE_INFO::A4)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_A3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_A3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_A3_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::A3)->c_str(), (&PAGE_INFO::A3)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::A3)->c_str(), (&PAGE_INFO::A3)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_A2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_A2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_A2_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::A2)->c_str(), (&PAGE_INFO::A2)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::A2)->c_str(), (&PAGE_INFO::A2)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_A1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_A1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_A1_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::A1)->c_str(), (&PAGE_INFO::A1)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::A1)->c_str(), (&PAGE_INFO::A1)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_A0_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_A0 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_A0_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::A0)->c_str(), (&PAGE_INFO::A0)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::A0)->c_str(), (&PAGE_INFO::A0)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_A_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_A is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_A_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::A)->c_str(), (&PAGE_INFO::A)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::A)->c_str(), (&PAGE_INFO::A)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_B_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_B is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_B_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::B)->c_str(), (&PAGE_INFO::B)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::B)->c_str(), (&PAGE_INFO::B)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_C_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_C is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_C_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::C)->c_str(), (&PAGE_INFO::C)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::C)->c_str(), (&PAGE_INFO::C)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_D_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_D is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_D_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::D)->c_str(), (&PAGE_INFO::D)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::D)->c_str(), (&PAGE_INFO::D)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_E_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_E is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_E_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::E)->c_str(), (&PAGE_INFO::E)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::E)->c_str(), (&PAGE_INFO::E)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_GERBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_GERBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_GERBER_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::GERBER)->c_str(), (&PAGE_INFO::GERBER)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::GERBER)->c_str(), (&PAGE_INFO::GERBER)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_USLetter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_USLetter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_USLetter_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::USLetter)->c_str(), (&PAGE_INFO::USLetter)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::USLetter)->c_str(), (&PAGE_INFO::USLetter)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_USLegal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_USLegal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_USLegal_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::USLegal)->c_str(), (&PAGE_INFO::USLegal)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::USLegal)->c_str(), (&PAGE_INFO::USLegal)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_USLedger_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_USLedger is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_USLedger_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::USLedger)->c_str(), (&PAGE_INFO::USLedger)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::USLedger)->c_str(), (&PAGE_INFO::USLedger)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_PAGE_INFO_Custom_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PAGE_INFO_Custom is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PAGE_INFO_Custom_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&PAGE_INFO::Custom)->c_str(), (&PAGE_INFO::Custom)->Len());
#else
    pyobj = PyString_FromStringAndSize((&PAGE_INFO::Custom)->c_str(), (&PAGE_INFO::Custom)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  wxString *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PAGE_INFO_SetType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_SetType" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PAGE_INFO_SetType" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->SetType((wxString const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAGE_INFO_SetType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_SetType" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  result = (bool)(arg1)->SetType((wxString const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PAGE_INFO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PAGE_INFO_SetType__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PAGE_INFO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PAGE_INFO_SetType__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PAGE_INFO_SetType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PAGE_INFO::SetType(wxString const &,bool)\n"
    "    PAGE_INFO::SetType(wxString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetType" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (wxString *) &((PAGE_INFO const *)arg1)->GetType();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_IsDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_IsDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_IsDefault" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (bool)((PAGE_INFO const *)arg1)->IsDefault();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_IsCustom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_IsCustom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_IsCustom" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (bool)((PAGE_INFO const *)arg1)->IsCustom();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetPortrait(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAGE_INFO_SetPortrait",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_SetPortrait" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAGE_INFO_SetPortrait" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetPortrait(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_IsPortrait(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_IsPortrait",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_IsPortrait" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (bool)((PAGE_INFO const *)arg1)->IsPortrait();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetWxOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetWxOrientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetWxOrientation" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (int)((PAGE_INFO const *)arg1)->GetWxOrientation();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetPaperId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPaperSize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetPaperId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetPaperId" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = ((PAGE_INFO const *)arg1)->GetPaperId();
  resultobj = SWIG_NewPointerObj((new wxPaperSize(static_cast< const wxPaperSize& >(result))), SWIGTYPE_p_wxPaperSize, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetWidthMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAGE_INFO_SetWidthMils",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_SetWidthMils" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAGE_INFO_SetWidthMils" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetWidthMils(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetWidthMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetWidthMils",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetWidthMils" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (int)((PAGE_INFO const *)arg1)->GetWidthMils();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetHeightMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAGE_INFO_SetHeightMils",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_SetHeightMils" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAGE_INFO_SetHeightMils" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetHeightMils(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetHeightMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetHeightMils",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetHeightMils" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (int)((PAGE_INFO const *)arg1)->GetHeightMils();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetSizeMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetSizeMils",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetSizeMils" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (wxSize *) &((PAGE_INFO const *)arg1)->GetSizeMils();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetWidthIU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetWidthIU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetWidthIU" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (int)((PAGE_INFO const *)arg1)->GetWidthIU();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetHeightIU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetHeightIU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetHeightIU" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (int)((PAGE_INFO const *)arg1)->GetHeightIU();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetSizeIU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxSize > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetSizeIU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetSizeIU" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = ((PAGE_INFO const *)arg1)->GetSizeIU();
  resultobj = SWIG_NewPointerObj((new wxSize(static_cast< const wxSize& >(result))), SWIGTYPE_p_wxSize, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetLeftMarginMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetLeftMarginMils",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetLeftMarginMils" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (int)((PAGE_INFO const *)arg1)->GetLeftMarginMils();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetRightMarginMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetRightMarginMils",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetRightMarginMils" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (int)((PAGE_INFO const *)arg1)->GetRightMarginMils();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetTopMarginMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetTopMarginMils",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetTopMarginMils" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (int)((PAGE_INFO const *)arg1)->GetTopMarginMils();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetBottomMarginMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_GetBottomMarginMils",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_GetBottomMarginMils" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  result = (int)((PAGE_INFO const *)arg1)->GetBottomMarginMils();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetLeftMarginMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAGE_INFO_SetLeftMarginMils",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_SetLeftMarginMils" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAGE_INFO_SetLeftMarginMils" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetLeftMarginMils(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetRightMarginMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAGE_INFO_SetRightMarginMils",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_SetRightMarginMils" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAGE_INFO_SetRightMarginMils" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetRightMarginMils(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetTopMarginMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAGE_INFO_SetTopMarginMils",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_SetTopMarginMils" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAGE_INFO_SetTopMarginMils" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetTopMarginMils(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetBottomMarginMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAGE_INFO_SetBottomMarginMils",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_SetBottomMarginMils" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAGE_INFO_SetBottomMarginMils" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetBottomMarginMils(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetCustomWidthMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_SetCustomWidthMils",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PAGE_INFO_SetCustomWidthMils" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  PAGE_INFO::SetCustomWidthMils(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_SetCustomHeightMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAGE_INFO_SetCustomHeightMils",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PAGE_INFO_SetCustomHeightMils" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  PAGE_INFO::SetCustomHeightMils(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetCustomWidthMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PAGE_INFO_GetCustomWidthMils")) SWIG_fail;
  result = (int)PAGE_INFO::GetCustomWidthMils();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_GetCustomHeightMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PAGE_INFO_GetCustomHeightMils")) SWIG_fail;
  result = (int)PAGE_INFO::GetCustomHeightMils();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAGE_INFO_Format(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  OUTPUTFORMATTER *arg2 = (OUTPUTFORMATTER *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PAGE_INFO_Format",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAGE_INFO_Format" "', argument " "1"" of type '" "PAGE_INFO const *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OUTPUTFORMATTER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAGE_INFO_Format" "', argument " "2"" of type '" "OUTPUTFORMATTER *""'"); 
  }
  arg2 = reinterpret_cast< OUTPUTFORMATTER * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PAGE_INFO_Format" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PAGE_INFO_Format" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  try {
    ((PAGE_INFO const *)arg1)->Format(arg2,arg3,arg4);
  }
  catch(IO_ERROR &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new IO_ERROR(static_cast< const IO_ERROR& >(_e))),SWIGTYPE_p_IO_ERROR,SWIG_POINTER_OWN), "IO_ERROR", SWIGTYPE_p_IO_ERROR); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PAGE_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAGE_INFO *arg1 = (PAGE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PAGE_INFO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAGE_INFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PAGE_INFO" "', argument " "1"" of type '" "PAGE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< PAGE_INFO * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PAGE_INFO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PAGE_INFO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_g_ProductName_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_wxString,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""g_ProductName""' of type '""wxString""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""g_ProductName""' of type '""wxString""'");
    } else {
      wxString * temp;
      temp  = reinterpret_cast< wxString * >(argp);
      g_ProductName = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_ProductName_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&g_ProductName)->c_str(), (&g_ProductName)->Len());
#else
    pyobj = PyString_FromStringAndSize((&g_ProductName)->c_str(), (&g_ProductName)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_g_UserLibDirBuffer_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_wxString,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""g_UserLibDirBuffer""' of type '""wxString""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""g_UserLibDirBuffer""' of type '""wxString""'");
    } else {
      wxString * temp;
      temp  = reinterpret_cast< wxString * >(argp);
      g_UserLibDirBuffer = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_UserLibDirBuffer_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&g_UserLibDirBuffer)->c_str(), (&g_UserLibDirBuffer)->Len());
#else
    pyobj = PyString_FromStringAndSize((&g_UserLibDirBuffer)->c_str(), (&g_UserLibDirBuffer)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_g_ShowPageLimits_set(PyObject *_val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""g_ShowPageLimits""' of type '""bool""'");
    }
    g_ShowPageLimits = static_cast< bool >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_ShowPageLimits_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(g_ShowPageLimits));
  return pyobj;
}


SWIGINTERN int Swig_var_g_Prj_Default_Config_FullFilename_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_wxString,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""g_Prj_Default_Config_FullFilename""' of type '""wxString""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""g_Prj_Default_Config_FullFilename""' of type '""wxString""'");
    } else {
      wxString * temp;
      temp  = reinterpret_cast< wxString * >(argp);
      g_Prj_Default_Config_FullFilename = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Prj_Default_Config_FullFilename_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&g_Prj_Default_Config_FullFilename)->c_str(), (&g_Prj_Default_Config_FullFilename)->Len());
#else
    pyobj = PyString_FromStringAndSize((&g_Prj_Default_Config_FullFilename)->c_str(), (&g_Prj_Default_Config_FullFilename)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_g_Prj_Config_LocalFilename_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_wxString,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""g_Prj_Config_LocalFilename""' of type '""wxString""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""g_Prj_Config_LocalFilename""' of type '""wxString""'");
    } else {
      wxString * temp;
      temp  = reinterpret_cast< wxString * >(argp);
      g_Prj_Config_LocalFilename = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Prj_Config_LocalFilename_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&g_Prj_Config_LocalFilename)->c_str(), (&g_Prj_Config_LocalFilename)->Len());
#else
    pyobj = PyString_FromStringAndSize((&g_Prj_Config_LocalFilename)->c_str(), (&g_Prj_Config_LocalFilename)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN int Swig_var_g_UserUnit_set(PyObject *_val) {
  if (sizeof(int) != sizeof(g_UserUnit)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only g_UserUnit""' of type '""EDA_UNITS_T""'");
  }  else {
    int ecode = SWIG_AsVal_int (_val, reinterpret_cast< int* >(&g_UserUnit));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""g_UserUnit""' of type '""EDA_UNITS_T""'");
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_UserUnit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(g_UserUnit));
  return pyobj;
}


SWIGINTERN int Swig_var_g_GhostColor_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""g_GhostColor""' of type '""int""'");
    }
    g_GhostColor = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_GhostColor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(g_GhostColor));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_SetLocaleTo_C_standard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SetLocaleTo_C_standard")) SWIG_fail;
  SetLocaleTo_C_standard();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetLocaleTo_Default(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SetLocaleTo_Default")) SWIG_fail;
  SetLocaleTo_Default();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LOCALE_IO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE_IO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LOCALE_IO")) SWIG_fail;
  result = (LOCALE_IO *)new LOCALE_IO();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LOCALE_IO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LOCALE_IO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE_IO *arg1 = (LOCALE_IO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LOCALE_IO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE_IO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LOCALE_IO" "', argument " "1"" of type '" "LOCALE_IO *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE_IO * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LOCALE_IO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LOCALE_IO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GetTextSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  bool temp1 = false ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< wxSize > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetTextSize",&obj0,&obj1)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxWindow, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetTextSize" "', argument " "2"" of type '" "wxWindow *""'"); 
  }
  arg2 = reinterpret_cast< wxWindow * >(argp2);
  result = GetTextSize((wxString const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new wxSize(static_cast< const wxSize& >(result))), SWIGTYPE_p_wxSize, SWIG_POINTER_OWN |  0 );
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_EnsureTextCtrlWidth__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxTextCtrl *arg1 = (wxTextCtrl *) 0 ;
  wxString *arg2 = (wxString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EnsureTextCtrlWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxTextCtrl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnsureTextCtrlWidth" "', argument " "1"" of type '" "wxTextCtrl *""'"); 
  }
  arg1 = reinterpret_cast< wxTextCtrl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxString, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnsureTextCtrlWidth" "', argument " "2"" of type '" "wxString const *""'"); 
  }
  arg2 = reinterpret_cast< wxString * >(argp2);
  result = (bool)EnsureTextCtrlWidth(arg1,(wxString const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EnsureTextCtrlWidth__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxTextCtrl *arg1 = (wxTextCtrl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EnsureTextCtrlWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxTextCtrl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnsureTextCtrlWidth" "', argument " "1"" of type '" "wxTextCtrl *""'"); 
  }
  arg1 = reinterpret_cast< wxTextCtrl * >(argp1);
  result = (bool)EnsureTextCtrlWidth(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EnsureTextCtrlWidth(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wxTextCtrl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EnsureTextCtrlWidth__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wxTextCtrl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxString, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EnsureTextCtrlWidth__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EnsureTextCtrlWidth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EnsureTextCtrlWidth(wxTextCtrl *,wxString const *)\n"
    "    EnsureTextCtrlWidth(wxTextCtrl *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProcessExecute__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  int arg2 ;
  bool temp1 = false ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProcessExecute",&obj0,&obj1)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProcessExecute" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)ProcessExecute((wxString const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProcessExecute__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  bool temp1 = false ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ProcessExecute",&obj0)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  result = (bool)ProcessExecute((wxString const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProcessExecute(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      return _wrap_ProcessExecute__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ProcessExecute__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ProcessExecute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ProcessExecute(wxString const &,int)\n"
    "    ProcessExecute(wxString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GetNewTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  time_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetNewTimeStamp")) SWIG_fail;
  result = GetNewTimeStamp();
  resultobj = SWIG_NewPointerObj((new time_t(static_cast< const time_t& >(result))), SWIGTYPE_p_time_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DisplayColorFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayColorFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wxWindow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayColorFrame" "', argument " "1"" of type '" "wxWindow *""'"); 
  }
  arg1 = reinterpret_cast< wxWindow * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DisplayColorFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DisplayColorFrame(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReturnUnitSymbol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_UNITS_T arg1 ;
  wxString *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReturnUnitSymbol",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ReturnUnitSymbol" "', argument " "1"" of type '" "EDA_UNITS_T""'");
  } 
  arg1 = static_cast< EDA_UNITS_T >(val1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  result = ReturnUnitSymbol(arg1,(wxString const &)*arg2);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReturnUnitSymbol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_UNITS_T arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReturnUnitSymbol",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ReturnUnitSymbol" "', argument " "1"" of type '" "EDA_UNITS_T""'");
  } 
  arg1 = static_cast< EDA_UNITS_T >(val1);
  result = ReturnUnitSymbol(arg1);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReturnUnitSymbol__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)":ReturnUnitSymbol")) SWIG_fail;
  result = ReturnUnitSymbol();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReturnUnitSymbol(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_ReturnUnitSymbol__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ReturnUnitSymbol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ReturnUnitSymbol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ReturnUnitSymbol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ReturnUnitSymbol(EDA_UNITS_T,wxString const &)\n"
    "    ReturnUnitSymbol(EDA_UNITS_T)\n"
    "    ReturnUnitSymbol()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GetUnitsLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_UNITS_T arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetUnitsLabel",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetUnitsLabel" "', argument " "1"" of type '" "EDA_UNITS_T""'");
  } 
  arg1 = static_cast< EDA_UNITS_T >(val1);
  result = GetUnitsLabel(arg1);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetAbbreviatedUnitsLabel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_UNITS_T arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetAbbreviatedUnitsLabel",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetAbbreviatedUnitsLabel" "', argument " "1"" of type '" "EDA_UNITS_T""'");
  } 
  arg1 = static_cast< EDA_UNITS_T >(val1);
  result = GetAbbreviatedUnitsLabel(arg1);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetAbbreviatedUnitsLabel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetAbbreviatedUnitsLabel")) SWIG_fail;
  result = GetAbbreviatedUnitsLabel();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetAbbreviatedUnitsLabel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_GetAbbreviatedUnitsLabel__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_GetAbbreviatedUnitsLabel__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GetAbbreviatedUnitsLabel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GetAbbreviatedUnitsLabel(EDA_UNITS_T)\n"
    "    GetAbbreviatedUnitsLabel()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AddUnitSymbol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxStaticText *arg1 = 0 ;
  EDA_UNITS_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AddUnitSymbol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wxStaticText,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddUnitSymbol" "', argument " "1"" of type '" "wxStaticText &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddUnitSymbol" "', argument " "1"" of type '" "wxStaticText &""'"); 
  }
  arg1 = reinterpret_cast< wxStaticText * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AddUnitSymbol" "', argument " "2"" of type '" "EDA_UNITS_T""'");
  } 
  arg2 = static_cast< EDA_UNITS_T >(val2);
  AddUnitSymbol(*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddUnitSymbol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxStaticText *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AddUnitSymbol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wxStaticText,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddUnitSymbol" "', argument " "1"" of type '" "wxStaticText &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddUnitSymbol" "', argument " "1"" of type '" "wxStaticText &""'"); 
  }
  arg1 = reinterpret_cast< wxStaticText * >(argp1);
  AddUnitSymbol(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddUnitSymbol(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wxStaticText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AddUnitSymbol__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wxStaticText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AddUnitSymbol__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AddUnitSymbol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddUnitSymbol(wxStaticText &,EDA_UNITS_T)\n"
    "    AddUnitSymbol(wxStaticText &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoundTo0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoundTo0",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RoundTo0" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoundTo0" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)RoundTo0(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wxStringSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString arg1 ;
  wxChar arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxArrayString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:wxStringSplit",&obj0,&obj1)) SWIG_fail;
  {
    wxString* sptr = newWxStringFromPy(obj0);
    if (sptr == NULL) SWIG_fail;
    arg1 = *sptr;
    delete sptr;
  }
  {
    wxString str = Py2wxString(obj1); arg2 = str[0];   
  }
  result = (wxArrayString *)wxStringSplit(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxArrayString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)":GenDate")) SWIG_fail;
  result = GenDate();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRunningMicroSecs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetRunningMicroSecs")) SWIG_fail;
  result = (unsigned int)GetRunningMicroSecs();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TITLE_BLOCK_SetTitle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_SetTitle" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  (arg1)->SetTitle((wxString const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_GetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_GetTitle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_GetTitle" "', argument " "1"" of type '" "TITLE_BLOCK const *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  result = (wxString *) &((TITLE_BLOCK const *)arg1)->GetTitle();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetDate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TITLE_BLOCK_SetDate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_SetDate" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  (arg1)->SetDate((wxString const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetDate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_SetDate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_SetDate" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  (arg1)->SetDate();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetDate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TITLE_BLOCK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TITLE_BLOCK_SetDate__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TITLE_BLOCK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TITLE_BLOCK_SetDate__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TITLE_BLOCK_SetDate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TITLE_BLOCK::SetDate(wxString const &)\n"
    "    TITLE_BLOCK::SetDate()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_GetDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_GetDate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_GetDate" "', argument " "1"" of type '" "TITLE_BLOCK const *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  result = (wxString *) &((TITLE_BLOCK const *)arg1)->GetDate();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetRevision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TITLE_BLOCK_SetRevision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_SetRevision" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  (arg1)->SetRevision((wxString const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_GetRevision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_GetRevision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_GetRevision" "', argument " "1"" of type '" "TITLE_BLOCK const *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  result = (wxString *) &((TITLE_BLOCK const *)arg1)->GetRevision();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetCompany(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TITLE_BLOCK_SetCompany",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_SetCompany" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  (arg1)->SetCompany((wxString const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_GetCompany(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_GetCompany",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_GetCompany" "', argument " "1"" of type '" "TITLE_BLOCK const *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  result = (wxString *) &((TITLE_BLOCK const *)arg1)->GetCompany();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetComment1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TITLE_BLOCK_SetComment1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_SetComment1" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  (arg1)->SetComment1((wxString const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_GetComment1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_GetComment1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_GetComment1" "', argument " "1"" of type '" "TITLE_BLOCK const *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  result = (wxString *) &((TITLE_BLOCK const *)arg1)->GetComment1();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetComment2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TITLE_BLOCK_SetComment2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_SetComment2" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  (arg1)->SetComment2((wxString const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_GetComment2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_GetComment2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_GetComment2" "', argument " "1"" of type '" "TITLE_BLOCK const *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  result = (wxString *) &((TITLE_BLOCK const *)arg1)->GetComment2();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetComment3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TITLE_BLOCK_SetComment3",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_SetComment3" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  (arg1)->SetComment3((wxString const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_GetComment3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_GetComment3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_GetComment3" "', argument " "1"" of type '" "TITLE_BLOCK const *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  result = (wxString *) &((TITLE_BLOCK const *)arg1)->GetComment3();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_SetComment4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TITLE_BLOCK_SetComment4",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_SetComment4" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  (arg1)->SetComment4((wxString const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_GetComment4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_GetComment4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_GetComment4" "', argument " "1"" of type '" "TITLE_BLOCK const *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  result = (wxString *) &((TITLE_BLOCK const *)arg1)->GetComment4();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TITLE_BLOCK_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_Clear" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TITLE_BLOCK_Format(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  OUTPUTFORMATTER *arg2 = (OUTPUTFORMATTER *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TITLE_BLOCK_Format",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TITLE_BLOCK_Format" "', argument " "1"" of type '" "TITLE_BLOCK const *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OUTPUTFORMATTER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TITLE_BLOCK_Format" "', argument " "2"" of type '" "OUTPUTFORMATTER *""'"); 
  }
  arg2 = reinterpret_cast< OUTPUTFORMATTER * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TITLE_BLOCK_Format" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TITLE_BLOCK_Format" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  try {
    ((TITLE_BLOCK const *)arg1)->Format(arg2,arg3,arg4);
  }
  catch(IO_ERROR &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new IO_ERROR(static_cast< const IO_ERROR& >(_e))),SWIGTYPE_p_IO_ERROR,SWIG_POINTER_OWN), "IO_ERROR", SWIGTYPE_p_IO_ERROR); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TITLE_BLOCK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TITLE_BLOCK")) SWIG_fail;
  {
    try{
      result = (TITLE_BLOCK *)new TITLE_BLOCK();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TITLE_BLOCK, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TITLE_BLOCK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TITLE_BLOCK *arg1 = (TITLE_BLOCK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TITLE_BLOCK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TITLE_BLOCK, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TITLE_BLOCK" "', argument " "1"" of type '" "TITLE_BLOCK *""'"); 
  }
  arg1 = reinterpret_cast< TITLE_BLOCK * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TITLE_BLOCK_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TITLE_BLOCK, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_COLORS_DESIGN_SETTINGS_m_LayersColors_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:COLORS_DESIGN_SETTINGS_m_LayersColors_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COLORS_DESIGN_SETTINGS_m_LayersColors_set" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "COLORS_DESIGN_SETTINGS_m_LayersColors_set" "', argument " "2"" of type '" "int [32]""'"); 
  } 
  arg2 = reinterpret_cast< int * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) arg1->m_LayersColors[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_LayersColors""' of type '""int [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COLORS_DESIGN_SETTINGS_m_LayersColors_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:COLORS_DESIGN_SETTINGS_m_LayersColors_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COLORS_DESIGN_SETTINGS_m_LayersColors_get" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  result = (int *)(int *) ((arg1)->m_LayersColors);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COLORS_DESIGN_SETTINGS_m_ItemsColors_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:COLORS_DESIGN_SETTINGS_m_ItemsColors_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COLORS_DESIGN_SETTINGS_m_ItemsColors_set" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "COLORS_DESIGN_SETTINGS_m_ItemsColors_set" "', argument " "2"" of type '" "int [32]""'"); 
  } 
  arg2 = reinterpret_cast< int * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) arg1->m_ItemsColors[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_ItemsColors""' of type '""int [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COLORS_DESIGN_SETTINGS_m_ItemsColors_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:COLORS_DESIGN_SETTINGS_m_ItemsColors_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COLORS_DESIGN_SETTINGS_m_ItemsColors_get" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  result = (int *)(int *) ((arg1)->m_ItemsColors);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_COLORS_DESIGN_SETTINGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_COLORS_DESIGN_SETTINGS")) SWIG_fail;
  result = (COLORS_DESIGN_SETTINGS *)new COLORS_DESIGN_SETTINGS();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_COLORS_DESIGN_SETTINGS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COLORS_DESIGN_SETTINGS_GetLayerColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:COLORS_DESIGN_SETTINGS_GetLayerColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COLORS_DESIGN_SETTINGS_GetLayerColor" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "COLORS_DESIGN_SETTINGS_GetLayerColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetLayerColor(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COLORS_DESIGN_SETTINGS_SetLayerColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:COLORS_DESIGN_SETTINGS_SetLayerColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COLORS_DESIGN_SETTINGS_SetLayerColor" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "COLORS_DESIGN_SETTINGS_SetLayerColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "COLORS_DESIGN_SETTINGS_SetLayerColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetLayerColor(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COLORS_DESIGN_SETTINGS_GetItemColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:COLORS_DESIGN_SETTINGS_GetItemColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COLORS_DESIGN_SETTINGS_GetItemColor" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "COLORS_DESIGN_SETTINGS_GetItemColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetItemColor(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COLORS_DESIGN_SETTINGS_SetItemColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:COLORS_DESIGN_SETTINGS_SetItemColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COLORS_DESIGN_SETTINGS_SetItemColor" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "COLORS_DESIGN_SETTINGS_SetItemColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "COLORS_DESIGN_SETTINGS_SetItemColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetItemColor(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COLORS_DESIGN_SETTINGS_SetAllColorsAs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:COLORS_DESIGN_SETTINGS_SetAllColorsAs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COLORS_DESIGN_SETTINGS_SetAllColorsAs" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "COLORS_DESIGN_SETTINGS_SetAllColorsAs" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetAllColorsAs(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_COLORS_DESIGN_SETTINGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COLORS_DESIGN_SETTINGS *arg1 = (COLORS_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_COLORS_DESIGN_SETTINGS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_COLORS_DESIGN_SETTINGS" "', argument " "1"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *COLORS_DESIGN_SETTINGS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_COLORS_DESIGN_SETTINGS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MARKER_BASE_m_Pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_BASE_m_Pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_m_Pos_set" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_BASE_m_Pos_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (arg1)->m_Pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_m_Pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_BASE_m_Pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_m_Pos_get" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  result = (wxPoint *)& ((arg1)->m_Pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MARKER_BASE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MARKER_BASE")) SWIG_fail;
  result = (MARKER_BASE *)new MARKER_BASE();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_BASE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MARKER_BASE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  wxPoint *arg2 = 0 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxString *arg5 = 0 ;
  wxPoint *arg6 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool temp5 = false ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  MARKER_BASE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_MARKER_BASE",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MARKER_BASE" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MARKER_BASE" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_BASE" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_MARKER_BASE" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_BASE" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  {
    arg5 = newWxStringFromPy(obj4);
    if (arg5 == NULL) SWIG_fail;
    temp5 = true;
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_MARKER_BASE" "', argument " "6"" of type '" "wxPoint const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_BASE" "', argument " "6"" of type '" "wxPoint const &""'"); 
  }
  arg6 = reinterpret_cast< wxPoint * >(argp6);
  result = (MARKER_BASE *)new MARKER_BASE(arg1,(wxPoint const &)*arg2,(wxString const &)*arg3,(wxPoint const &)*arg4,(wxString const &)*arg5,(wxPoint const &)*arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_BASE, SWIG_POINTER_NEW |  0 );
  {
    if (temp3)
    delete arg3;
  }
  {
    if (temp5)
    delete arg5;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  {
    if (temp5)
    delete arg5;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MARKER_BASE__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  wxPoint *arg2 = 0 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  MARKER_BASE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_MARKER_BASE",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MARKER_BASE" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MARKER_BASE" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_BASE" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_MARKER_BASE" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_BASE" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  result = (MARKER_BASE *)new MARKER_BASE(arg1,(wxPoint const &)*arg2,(wxString const &)*arg3,(wxPoint const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_BASE, SWIG_POINTER_NEW |  0 );
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MARKER_BASE__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MARKER_BASE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MARKER_BASE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_MARKER_BASE,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MARKER_BASE" "', argument " "1"" of type '" "MARKER_BASE const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_BASE" "', argument " "1"" of type '" "MARKER_BASE const &""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  result = (MARKER_BASE *)new MARKER_BASE((MARKER_BASE const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_BASE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MARKER_BASE(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MARKER_BASE__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_MARKER_BASE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MARKER_BASE__SWIG_3(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_MARKER_BASE__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = PyString_Check(argv[4]) || PyUnicode_Check(argv[4]);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_wxPoint, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_MARKER_BASE__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MARKER_BASE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MARKER_BASE::MARKER_BASE()\n"
    "    MARKER_BASE::MARKER_BASE(int,wxPoint const &,wxString const &,wxPoint const &,wxString const &,wxPoint const &)\n"
    "    MARKER_BASE::MARKER_BASE(int,wxPoint const &,wxString const &,wxPoint const &)\n"
    "    MARKER_BASE::MARKER_BASE(MARKER_BASE const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MARKER_BASE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MARKER_BASE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MARKER_BASE" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_DrawMarker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MARKER_BASE_DrawMarker",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_DrawMarker" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_BASE_DrawMarker" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MARKER_BASE_DrawMarker" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MARKER_BASE_DrawMarker" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MARKER_BASE_DrawMarker" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_BASE_DrawMarker" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  (arg1)->DrawMarker(arg2,arg3,arg4,(wxPoint const &)*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_GetPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_BASE_GetPos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_GetPos" "', argument " "1"" of type '" "MARKER_BASE const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  result = (wxPoint *) &((MARKER_BASE const *)arg1)->GetPos();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_SetColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  EDA_COLOR_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_BASE_SetColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_SetColor" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_COLOR_T,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_BASE_SetColor" "', argument " "2"" of type '" "EDA_COLOR_T""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_BASE_SetColor" "', argument " "2"" of type '" "EDA_COLOR_T""'");
    } else {
      EDA_COLOR_T * temp = reinterpret_cast< EDA_COLOR_T * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetColor(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_SetErrorLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_BASE_SetErrorLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_SetErrorLevel" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MARKER_BASE_SetErrorLevel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetErrorLevel(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_GetErrorLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_BASE_GetErrorLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_GetErrorLevel" "', argument " "1"" of type '" "MARKER_BASE const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  result = (int)((MARKER_BASE const *)arg1)->GetErrorLevel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_SetMarkerType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_BASE_SetMarkerType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_SetMarkerType" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MARKER_BASE_SetMarkerType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetMarkerType(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_GetMarkerType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_BASE_GetMarkerType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_GetMarkerType" "', argument " "1"" of type '" "MARKER_BASE const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  result = (int)((MARKER_BASE const *)arg1)->GetMarkerType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_SetData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  int arg2 ;
  wxPoint *arg3 = 0 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  wxString *arg6 = 0 ;
  wxPoint *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool temp4 = false ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool temp6 = false ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:MARKER_BASE_SetData",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_SetData" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MARKER_BASE_SetData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MARKER_BASE_SetData" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_BASE_SetData" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  {
    arg4 = newWxStringFromPy(obj3);
    if (arg4 == NULL) SWIG_fail;
    temp4 = true;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MARKER_BASE_SetData" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_BASE_SetData" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    arg6 = newWxStringFromPy(obj5);
    if (arg6 == NULL) SWIG_fail;
    temp6 = true;
  }
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "MARKER_BASE_SetData" "', argument " "7"" of type '" "wxPoint const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_BASE_SetData" "', argument " "7"" of type '" "wxPoint const &""'"); 
  }
  arg7 = reinterpret_cast< wxPoint * >(argp7);
  (arg1)->SetData(arg2,(wxPoint const &)*arg3,(wxString const &)*arg4,(wxPoint const &)*arg5,(wxString const &)*arg6,(wxPoint const &)*arg7);
  resultobj = SWIG_Py_Void();
  {
    if (temp4)
    delete arg4;
  }
  {
    if (temp6)
    delete arg6;
  }
  return resultobj;
fail:
  {
    if (temp4)
    delete arg4;
  }
  {
    if (temp6)
    delete arg6;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_SetData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  int arg2 ;
  wxPoint *arg3 = 0 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool temp4 = false ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MARKER_BASE_SetData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_SetData" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MARKER_BASE_SetData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MARKER_BASE_SetData" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_BASE_SetData" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  {
    arg4 = newWxStringFromPy(obj3);
    if (arg4 == NULL) SWIG_fail;
    temp4 = true;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MARKER_BASE_SetData" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_BASE_SetData" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  (arg1)->SetData(arg2,(wxPoint const &)*arg3,(wxString const &)*arg4,(wxPoint const &)*arg5);
  resultobj = SWIG_Py_Void();
  {
    if (temp4)
    delete arg4;
  }
  return resultobj;
fail:
  {
    if (temp4)
    delete arg4;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_SetData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MARKER_BASE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wxPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = PyString_Check(argv[3]) || PyUnicode_Check(argv[3]);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MARKER_BASE_SetData__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MARKER_BASE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wxPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = PyString_Check(argv[3]) || PyUnicode_Check(argv[3]);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = PyString_Check(argv[5]) || PyUnicode_Check(argv[5]);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_wxPoint, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_MARKER_BASE_SetData__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MARKER_BASE_SetData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MARKER_BASE::SetData(int,wxPoint const &,wxString const &,wxPoint const &,wxString const &,wxPoint const &)\n"
    "    MARKER_BASE::SetData(int,wxPoint const &,wxString const &,wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_SetAuxiliaryData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  wxString *arg2 = 0 ;
  wxPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MARKER_BASE_SetAuxiliaryData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_SetAuxiliaryData" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MARKER_BASE_SetAuxiliaryData" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_BASE_SetAuxiliaryData" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  (arg1)->SetAuxiliaryData((wxString const &)*arg2,(wxPoint const &)*arg3);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_SetShowNoCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_BASE_SetShowNoCoordinate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_SetShowNoCoordinate" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  (arg1)->SetShowNoCoordinate();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_GetReporter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRC_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_BASE_GetReporter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_GetReporter" "', argument " "1"" of type '" "MARKER_BASE const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  result = (DRC_ITEM *) &((MARKER_BASE const *)arg1)->GetReporter();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRC_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_DisplayMarkerInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_BASE_DisplayMarkerInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_DisplayMarkerInfo" "', argument " "1"" of type '" "MARKER_BASE *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_BASE_DisplayMarkerInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  (arg1)->DisplayMarkerInfo(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_HitTestMarker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_BASE_HitTestMarker",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_HitTestMarker" "', argument " "1"" of type '" "MARKER_BASE const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_BASE_HitTestMarker" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_BASE_HitTestMarker" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  result = (bool)((MARKER_BASE const *)arg1)->HitTestMarker((wxPoint const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_BASE_GetBoundingBoxMarker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_BASE *arg1 = (MARKER_BASE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_BASE_GetBoundingBoxMarker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_BASE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_BASE_GetBoundingBoxMarker" "', argument " "1"" of type '" "MARKER_BASE const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_BASE * >(argp1);
  result = ((MARKER_BASE const *)arg1)->GetBoundingBoxMarker();
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MARKER_BASE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MARKER_BASE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Text_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_Text_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Text_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (arg1)->m_Text = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Text_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_Text_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Text_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result =  ((arg1)->m_Text);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Thickness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_Thickness_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Thickness_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_m_Thickness_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Thickness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Thickness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_Thickness_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Thickness_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (int) ((arg1)->m_Thickness);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Orient_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_Orient_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Orient_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_m_Orient_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->m_Orient = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Orient_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_Orient_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Orient_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (double) ((arg1)->m_Orient);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_Pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Pos_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_m_Pos_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (arg1)->m_Pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_Pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Pos_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (wxPoint *)& ((arg1)->m_Pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  wxSize *arg2 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_Size_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Size_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_m_Size_set" "', argument " "2"" of type '" "wxSize *""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  if (arg1) (arg1)->m_Size = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_Size_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Size_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (wxSize *)& ((arg1)->m_Size);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Mirror_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_Mirror_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Mirror_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_m_Mirror_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_Mirror = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Mirror_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_Mirror_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Mirror_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (bool) ((arg1)->m_Mirror);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Attributs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_Attributs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Attributs_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_m_Attributs_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Attributs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Attributs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_Attributs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Attributs_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (int) ((arg1)->m_Attributs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Italic_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_Italic_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Italic_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_m_Italic_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_Italic = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Italic_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_Italic_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Italic_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (bool) ((arg1)->m_Italic);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Bold_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_Bold_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Bold_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_m_Bold_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_Bold = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_Bold_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_Bold_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_Bold_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (bool) ((arg1)->m_Bold);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_HJustify_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_TEXT_HJUSTIFY_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_HJustify_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_HJustify_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_m_HJustify_set" "', argument " "2"" of type '" "EDA_TEXT_HJUSTIFY_T""'");
  } 
  arg2 = static_cast< EDA_TEXT_HJUSTIFY_T >(val2);
  if (arg1) (arg1)->m_HJustify = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_HJustify_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_TEXT_HJUSTIFY_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_HJustify_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_HJustify_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (EDA_TEXT_HJUSTIFY_T) ((arg1)->m_HJustify);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_VJustify_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_TEXT_VJUSTIFY_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_VJustify_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_VJustify_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_m_VJustify_set" "', argument " "2"" of type '" "EDA_TEXT_VJUSTIFY_T""'");
  } 
  arg2 = static_cast< EDA_TEXT_VJUSTIFY_T >(val2);
  if (arg1) (arg1)->m_VJustify = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_VJustify_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_TEXT_VJUSTIFY_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_VJustify_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_VJustify_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (EDA_TEXT_VJUSTIFY_T) ((arg1)->m_VJustify);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_MultilineAllowed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_m_MultilineAllowed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_MultilineAllowed_set" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_m_MultilineAllowed_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_MultilineAllowed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_m_MultilineAllowed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_m_MultilineAllowed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_m_MultilineAllowed_get" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (bool) ((arg1)->m_MultilineAllowed);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EDA_TEXT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  bool temp1 = false ;
  PyObject * obj0 = 0 ;
  EDA_TEXT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EDA_TEXT",&obj0)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  result = (EDA_TEXT *)new EDA_TEXT((wxString const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_TEXT, SWIG_POINTER_NEW |  0 );
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EDA_TEXT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EDA_TEXT")) SWIG_fail;
  result = (EDA_TEXT *)new EDA_TEXT();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_TEXT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EDA_TEXT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_TEXT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EDA_TEXT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_EDA_TEXT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EDA_TEXT" "', argument " "1"" of type '" "EDA_TEXT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EDA_TEXT" "', argument " "1"" of type '" "EDA_TEXT const &""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (EDA_TEXT *)new EDA_TEXT((EDA_TEXT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_TEXT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EDA_TEXT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_EDA_TEXT__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      return _wrap_new_EDA_TEXT__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EDA_TEXT__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EDA_TEXT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_TEXT::EDA_TEXT(wxString const &)\n"
    "    EDA_TEXT::EDA_TEXT()\n"
    "    EDA_TEXT::EDA_TEXT(EDA_TEXT const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EDA_TEXT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EDA_TEXT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EDA_TEXT" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetThickness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetThickness",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetThickness" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_SetThickness" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetThickness(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetThickness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetThickness",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetThickness" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (int)((EDA_TEXT const *)arg1)->GetThickness();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetOrientation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetOrientation" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_SetOrientation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetOrientation(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetOrientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetOrientation" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (double)((EDA_TEXT const *)arg1)->GetOrientation();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetItalic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetItalic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetItalic" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_SetItalic" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetItalic(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_IsItalic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_IsItalic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_IsItalic" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (bool)((EDA_TEXT const *)arg1)->IsItalic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetBold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetBold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetBold" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_SetBold" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetBold(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_IsBold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_IsBold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_IsBold" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (bool)((EDA_TEXT const *)arg1)->IsBold();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetVisible" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_SetVisible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetVisible(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_IsVisible",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_IsVisible" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (bool)((EDA_TEXT const *)arg1)->IsVisible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetMirrored(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetMirrored",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetMirrored" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_SetMirrored" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetMirrored(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_IsMirrored(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_IsMirrored",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_IsMirrored" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (bool)((EDA_TEXT const *)arg1)->IsMirrored();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_IsDefaultFormatting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_IsDefaultFormatting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_IsDefaultFormatting" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (bool)((EDA_TEXT const *)arg1)->IsDefaultFormatting();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetSize" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_SetSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_SetSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  (arg1)->SetSize((wxSize const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxSize > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetSize" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = ((EDA_TEXT const *)arg1)->GetSize();
  resultobj = SWIG_NewPointerObj((new wxSize(static_cast< const wxSize& >(result))), SWIGTYPE_p_wxSize, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetPos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetPos" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_SetPos" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_SetPos" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  (arg1)->SetPos((wxPoint const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetPos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetPos" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = ((EDA_TEXT const *)arg1)->GetPos();
  resultobj = SWIG_NewPointerObj((new wxPoint(static_cast< const wxPoint& >(result))), SWIGTYPE_p_wxPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetLength" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (int)((EDA_TEXT const *)arg1)->GetLength();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  wxPoint *arg4 = 0 ;
  EDA_COLOR_T arg5 ;
  int arg6 ;
  EDA_DRAW_MODE_T arg7 ;
  EDA_COLOR_T arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:EDA_TEXT_Draw",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_Draw" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDA_TEXT_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EDA_TEXT_Draw" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_Draw" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_EDA_COLOR_T,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EDA_TEXT_Draw" "', argument " "5"" of type '" "EDA_COLOR_T""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_Draw" "', argument " "5"" of type '" "EDA_COLOR_T""'");
    } else {
      EDA_COLOR_T * temp = reinterpret_cast< EDA_COLOR_T * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EDA_TEXT_Draw" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "EDA_TEXT_Draw" "', argument " "7"" of type '" "EDA_DRAW_MODE_T""'");
  } 
  arg7 = static_cast< EDA_DRAW_MODE_T >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_EDA_COLOR_T,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "EDA_TEXT_Draw" "', argument " "8"" of type '" "EDA_COLOR_T""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_Draw" "', argument " "8"" of type '" "EDA_COLOR_T""'");
    } else {
      EDA_COLOR_T * temp = reinterpret_cast< EDA_COLOR_T * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  (arg1)->Draw(arg2,arg3,(wxPoint const &)*arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  wxPoint *arg4 = 0 ;
  EDA_COLOR_T arg5 ;
  int arg6 ;
  EDA_DRAW_MODE_T arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:EDA_TEXT_Draw",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_Draw" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDA_TEXT_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EDA_TEXT_Draw" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_Draw" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_EDA_COLOR_T,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EDA_TEXT_Draw" "', argument " "5"" of type '" "EDA_COLOR_T""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_Draw" "', argument " "5"" of type '" "EDA_COLOR_T""'");
    } else {
      EDA_COLOR_T * temp = reinterpret_cast< EDA_COLOR_T * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EDA_TEXT_Draw" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "EDA_TEXT_Draw" "', argument " "7"" of type '" "EDA_DRAW_MODE_T""'");
  } 
  arg7 = static_cast< EDA_DRAW_MODE_T >(val7);
  (arg1)->Draw(arg2,arg3,(wxPoint const &)*arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_Draw__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  wxPoint *arg4 = 0 ;
  EDA_COLOR_T arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:EDA_TEXT_Draw",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_Draw" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDA_TEXT_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EDA_TEXT_Draw" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_Draw" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_EDA_COLOR_T,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EDA_TEXT_Draw" "', argument " "5"" of type '" "EDA_COLOR_T""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_Draw" "', argument " "5"" of type '" "EDA_COLOR_T""'");
    } else {
      EDA_COLOR_T * temp = reinterpret_cast< EDA_COLOR_T * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EDA_TEXT_Draw" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  (arg1)->Draw(arg2,arg3,(wxPoint const &)*arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_EDA_COLOR_T, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_EDA_TEXT_Draw__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_EDA_COLOR_T, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_EDA_TEXT_Draw__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_EDA_COLOR_T, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_EDA_COLOR_T, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_EDA_TEXT_Draw__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_TEXT_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_TEXT::Draw(EDA_DRAW_PANEL *,wxDC *,wxPoint const &,EDA_COLOR_T,int,EDA_DRAW_MODE_T,EDA_COLOR_T)\n"
    "    EDA_TEXT::Draw(EDA_DRAW_PANEL *,wxDC *,wxPoint const &,EDA_COLOR_T,int,EDA_DRAW_MODE_T)\n"
    "    EDA_TEXT::Draw(EDA_DRAW_PANEL *,wxDC *,wxPoint const &,EDA_COLOR_T,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_TextHitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_TEXT_TextHitTest",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_TextHitTest" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_TEXT_TextHitTest" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((EDA_TEXT const *)arg1)->TextHitTest((wxPoint const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_TextHitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_TextHitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_TextHitTest" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  result = (bool)((EDA_TEXT const *)arg1)->TextHitTest((wxPoint const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_TextHitTest__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_RECT *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EDA_TEXT_TextHitTest",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_TextHitTest" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_TEXT_TextHitTest" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EDA_TEXT_TextHitTest" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)((EDA_TEXT const *)arg1)->TextHitTest((EDA_RECT const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_TextHitTest__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_RECT *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_TEXT_TextHitTest",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_TextHitTest" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_TEXT_TextHitTest" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)((EDA_TEXT const *)arg1)->TextHitTest((EDA_RECT const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_TextHitTest__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_TextHitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_TextHitTest" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDA_TEXT_TextHitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  result = (bool)((EDA_TEXT const *)arg1)->TextHitTest((EDA_RECT const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_TextHitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_TEXT_TextHitTest__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EDA_TEXT_TextHitTest__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EDA_TEXT_TextHitTest__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EDA_TEXT_TextHitTest__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_EDA_TEXT_TextHitTest__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_TEXT_TextHitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_TEXT::TextHitTest(wxPoint const &,int) const\n"
    "    EDA_TEXT::TextHitTest(wxPoint const &) const\n"
    "    EDA_TEXT::TextHitTest(EDA_RECT const &,bool,int) const\n"
    "    EDA_TEXT::TextHitTest(EDA_RECT const &,bool) const\n"
    "    EDA_TEXT::TextHitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_LenSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_LenSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_LenSize" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  result = (int)((EDA_TEXT const *)arg1)->LenSize((wxString const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetTextBox__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EDA_TEXT_GetTextBox",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetTextBox" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_GetTextBox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_TEXT_GetTextBox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EDA_TEXT_GetTextBox" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = ((EDA_TEXT const *)arg1)->GetTextBox(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetTextBox__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EDA_TEXT_GetTextBox",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetTextBox" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_GetTextBox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_TEXT_GetTextBox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((EDA_TEXT const *)arg1)->GetTextBox(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetTextBox__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_GetTextBox",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetTextBox" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_GetTextBox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((EDA_TEXT const *)arg1)->GetTextBox(arg2);
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetTextBox__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetTextBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetTextBox" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = ((EDA_TEXT const *)arg1)->GetTextBox();
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetTextBox(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EDA_TEXT_GetTextBox__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EDA_TEXT_GetTextBox__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EDA_TEXT_GetTextBox__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDA_TEXT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_EDA_TEXT_GetTextBox__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDA_TEXT_GetTextBox'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_TEXT::GetTextBox(int,int,bool) const\n"
    "    EDA_TEXT::GetTextBox(int,int) const\n"
    "    EDA_TEXT::GetTextBox(int) const\n"
    "    EDA_TEXT::GetTextBox() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetInterline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetInterline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetInterline" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (int)((EDA_TEXT const *)arg1)->GetInterline();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetTextStyleName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetTextStyleName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetTextStyleName" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (arg1)->GetTextStyleName();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetText" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  (arg1)->SetText((wxString const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetText" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = ((EDA_TEXT const *)arg1)->GetText();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetHorizJustify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_TEXT_HJUSTIFY_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetHorizJustify",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetHorizJustify" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (EDA_TEXT_HJUSTIFY_T)((EDA_TEXT const *)arg1)->GetHorizJustify();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_GetVertJustify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_TEXT_VJUSTIFY_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDA_TEXT_GetVertJustify",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_GetVertJustify" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  result = (EDA_TEXT_VJUSTIFY_T)((EDA_TEXT const *)arg1)->GetVertJustify();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetHorizJustify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_TEXT_HJUSTIFY_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetHorizJustify",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetHorizJustify" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_SetHorizJustify" "', argument " "2"" of type '" "EDA_TEXT_HJUSTIFY_T""'");
  } 
  arg2 = static_cast< EDA_TEXT_HJUSTIFY_T >(val2);
  (arg1)->SetHorizJustify(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_SetVertJustify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  EDA_TEXT_VJUSTIFY_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDA_TEXT_SetVertJustify",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_SetVertJustify" "', argument " "1"" of type '" "EDA_TEXT *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDA_TEXT_SetVertJustify" "', argument " "2"" of type '" "EDA_TEXT_VJUSTIFY_T""'");
  } 
  arg2 = static_cast< EDA_TEXT_VJUSTIFY_T >(val2);
  (arg1)->SetVertJustify(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDA_TEXT_Format(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_TEXT *arg1 = (EDA_TEXT *) 0 ;
  OUTPUTFORMATTER *arg2 = (OUTPUTFORMATTER *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EDA_TEXT_Format",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_TEXT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDA_TEXT_Format" "', argument " "1"" of type '" "EDA_TEXT const *""'"); 
  }
  arg1 = reinterpret_cast< EDA_TEXT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OUTPUTFORMATTER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDA_TEXT_Format" "', argument " "2"" of type '" "OUTPUTFORMATTER *""'"); 
  }
  arg2 = reinterpret_cast< OUTPUTFORMATTER * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EDA_TEXT_Format" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EDA_TEXT_Format" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  try {
    ((EDA_TEXT const *)arg1)->Format(arg2,arg3,arg4);
  }
  catch(IO_ERROR &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new IO_ERROR(static_cast< const IO_ERROR& >(_e))),SWIGTYPE_p_IO_ERROR,SWIG_POINTER_OWN), "IO_ERROR", SWIGTYPE_p_IO_ERROR); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EDA_TEXT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EDA_TEXT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Iu2Mils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Iu2Mils",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Iu2Mils" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)Iu2Mils(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Iu2DMils(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Iu2DMils",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Iu2DMils" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)Iu2DMils(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mils2iu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mils2iu",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mils2iu" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)Mils2iu(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DMils2iu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DMils2iu",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DMils2iu" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)DMils2iu(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intVector___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:intVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "intVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_intVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_intVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'intVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_intVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intVector___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "intVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_intVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_intVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'intVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_intVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_intVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_intVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'intVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_intVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intVector___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_intVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_intVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_intVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'intVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_intVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_intVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_intVector")) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_intVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_intVector",&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_intVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_intVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_intVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_intVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_intVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_intVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_intVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'intVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_intVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_intVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_intVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_intVector" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_intVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_intVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_intVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_intVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_intVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_intVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_intVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intVector_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intVector_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_intVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_intVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'intVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_intVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intVector_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:intVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "intVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intVector_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "intVector_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< int >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_intVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_intVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'intVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_intVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intVector_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intVector_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_intVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_intVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *intVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BOARD_ITEM_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Next" "', argument " "1"" of type '" "BOARD_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)((BOARD_ITEM const *)arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Back" "', argument " "1"" of type '" "BOARD_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)((BOARD_ITEM const *)arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_GetParent" "', argument " "1"" of type '" "BOARD_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)((BOARD_ITEM const *)arg1)->GetParent();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_GetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_GetLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_GetLayer" "', argument " "1"" of type '" "BOARD_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (int)((BOARD_ITEM const *)arg1)->GetLayer();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_SetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_SetLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_SetLayer" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_SetLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_ITEM_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Draw" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_ITEM_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BOARD_ITEM_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_ITEM_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Draw" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_ITEM_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BOARD_ITEM_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_BOARD_ITEM_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ITEM_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD_ITEM::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    BOARD_ITEM::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_IsOnLayer" "', argument " "1"" of type '" "BOARD_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((BOARD_ITEM const *)arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_IsTrack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_IsTrack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_IsTrack" "', argument " "1"" of type '" "BOARD_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (bool)((BOARD_ITEM const *)arg1)->IsTrack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_IsLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_IsLocked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_IsLocked" "', argument " "1"" of type '" "BOARD_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (bool)((BOARD_ITEM const *)arg1)->IsLocked();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_UnLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_UnLink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_UnLink" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      (arg1)->UnLink();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_DeleteStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_DeleteStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_DeleteStructure" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      (arg1)->DeleteStructure();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_ShowShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STROKE_T arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_ShowShape",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BOARD_ITEM_ShowShape" "', argument " "1"" of type '" "STROKE_T""'");
  } 
  arg1 = static_cast< STROKE_T >(val1);
  {
    try{
      result = BOARD_ITEM::ShowShape(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Move" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_ITEM_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Rotate" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_ITEM_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Flip" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_GetBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_GetBoard",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_GetBoard" "', argument " "1"" of type '" "BOARD_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (BOARD *)((BOARD_ITEM const *)arg1)->GetBoard();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_GetLayerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_GetLayerName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_GetLayerName" "', argument " "1"" of type '" "BOARD_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = ((BOARD_ITEM const *)arg1)->GetLayerName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_FormatInternalUnits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_FormatInternalUnits",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BOARD_ITEM_FormatInternalUnits" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try{
      result = BOARD_ITEM::FormatInternalUnits(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_FormatAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_FormatAngle",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BOARD_ITEM_FormatAngle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try{
      result = BOARD_ITEM::FormatAngle(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_FormatInternalUnits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxPoint *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_FormatInternalUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_FormatInternalUnits" "', argument " "1"" of type '" "wxPoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_FormatInternalUnits" "', argument " "1"" of type '" "wxPoint const &""'"); 
  }
  arg1 = reinterpret_cast< wxPoint * >(argp1);
  {
    try{
      result = BOARD_ITEM::FormatInternalUnits((wxPoint const &)*arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_FormatInternalUnits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxSize *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_FormatInternalUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_FormatInternalUnits" "', argument " "1"" of type '" "wxSize const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_FormatInternalUnits" "', argument " "1"" of type '" "wxSize const &""'"); 
  }
  arg1 = reinterpret_cast< wxSize * >(argp1);
  {
    try{
      result = BOARD_ITEM::FormatInternalUnits((wxSize const &)*arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_FormatInternalUnits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wxPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BOARD_ITEM_FormatInternalUnits__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wxSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BOARD_ITEM_FormatInternalUnits__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_BOARD_ITEM_FormatInternalUnits__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ITEM_FormatInternalUnits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD_ITEM::FormatInternalUnits(int)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxPoint const &)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxSize const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_TEXTE_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_TEXTE_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_TEXTE_PCB" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (TEXTE_PCB *)BOARD_ITEM_Cast_to_TEXTE_PCB(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_DIMENSION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DIMENSION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_DIMENSION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_DIMENSION" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (DIMENSION *)BOARD_ITEM_Cast_to_DIMENSION(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DIMENSION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_MODULE" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (MODULE *)BOARD_ITEM_Cast_to_MODULE(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_TEXTE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_TEXTE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_TEXTE_MODULE" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *)BOARD_ITEM_Cast_to_TEXTE_MODULE(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_DRAWSEGMENT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_DRAWSEGMENT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_DRAWSEGMENT" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (DRAWSEGMENT *)BOARD_ITEM_Cast_to_DRAWSEGMENT(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_MARKER_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_MARKER_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_MARKER_PCB" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (MARKER_PCB *)BOARD_ITEM_Cast_to_MARKER_PCB(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_BOARD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_BOARD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_BOARD" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (BOARD *)BOARD_ITEM_Cast_to_BOARD(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_EDGE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_EDGE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_EDGE_MODULE" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (EDGE_MODULE *)BOARD_ITEM_Cast_to_EDGE_MODULE(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_D_PAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_D_PAD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_D_PAD" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (D_PAD *)BOARD_ITEM_Cast_to_D_PAD(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_TRACK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_TRACK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_TRACK" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (TRACK *)BOARD_ITEM_Cast_to_TRACK(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_SEGZONE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_SEGZONE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_SEGZONE" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (SEGZONE *)BOARD_ITEM_Cast_to_SEGZONE(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_Cast_to_SEGVIA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGVIA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_Cast_to_SEGVIA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_Cast_to_SEGVIA" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (SEGVIA *)BOARD_ITEM_Cast_to_SEGVIA(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGVIA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BOARD_ITEM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BOARD_ITEM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BOARD_ITEM" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BOARD_ITEM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BOARD_ITEM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_m_TracksConnected_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  std::vector< TRACK *,std::allocator< TRACK * > > *arg2 = (std::vector< TRACK *,std::allocator< TRACK * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_CONNECTED_ITEM_m_TracksConnected_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_m_TracksConnected_set" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_CONNECTED_ITEM_m_TracksConnected_set" "', argument " "2"" of type '" "std::vector< TRACK *,std::allocator< TRACK * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< TRACK *,std::allocator< TRACK * > > * >(argp2);
  if (arg1) (arg1)->m_TracksConnected = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_m_TracksConnected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< TRACK *,std::allocator< TRACK * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_CONNECTED_ITEM_m_TracksConnected_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_m_TracksConnected_get" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  result = (std::vector< TRACK *,std::allocator< TRACK * > > *)& ((arg1)->m_TracksConnected);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_m_PadsConnected_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *arg2 = (std::vector< D_PAD *,std::allocator< D_PAD * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_CONNECTED_ITEM_m_PadsConnected_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_m_PadsConnected_set" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_CONNECTED_ITEM_m_PadsConnected_set" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< D_PAD *,std::allocator< D_PAD * > > * >(argp2);
  if (arg1) (arg1)->m_PadsConnected = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_m_PadsConnected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_CONNECTED_ITEM_m_PadsConnected_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_m_PadsConnected_get" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  result = (std::vector< D_PAD *,std::allocator< D_PAD * > > *)& ((arg1)->m_PadsConnected);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_GetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_CONNECTED_ITEM_GetNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_GetNet" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  {
    try{
      result = (int)((BOARD_CONNECTED_ITEM const *)arg1)->GetNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_SetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_CONNECTED_ITEM_SetNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_SetNet" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_CONNECTED_ITEM_SetNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_GetSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_CONNECTED_ITEM_GetSubNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_GetSubNet" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  {
    try{
      result = (int)((BOARD_CONNECTED_ITEM const *)arg1)->GetSubNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_SetSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_CONNECTED_ITEM_SetSubNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_SetSubNet" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_CONNECTED_ITEM_SetSubNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetSubNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_GetZoneSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_CONNECTED_ITEM_GetZoneSubNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_GetZoneSubNet" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  {
    try{
      result = (int)((BOARD_CONNECTED_ITEM const *)arg1)->GetZoneSubNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_SetZoneSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_CONNECTED_ITEM_SetZoneSubNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_SetZoneSubNet" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_CONNECTED_ITEM_SetZoneSubNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetZoneSubNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_GetClearance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_CONNECTED_ITEM_GetClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_GetClearance" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_CONNECTED_ITEM_GetClearance" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  {
    try{
      result = (int)((BOARD_CONNECTED_ITEM const *)arg1)->GetClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_GetClearance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_CONNECTED_ITEM_GetClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_GetClearance" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  {
    try{
      result = (int)((BOARD_CONNECTED_ITEM const *)arg1)->GetClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_GetClearance(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BOARD_CONNECTED_ITEM_GetClearance__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_CONNECTED_ITEM_GetClearance__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_CONNECTED_ITEM_GetClearance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD_CONNECTED_ITEM::GetClearance(BOARD_CONNECTED_ITEM *) const\n"
    "    BOARD_CONNECTED_ITEM::GetClearance() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_GetNetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_CONNECTED_ITEM_GetNetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_GetNetClass" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  {
    try{
      result = (NETCLASS *)((BOARD_CONNECTED_ITEM const *)arg1)->GetNetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CONNECTED_ITEM_GetNetClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_CONNECTED_ITEM_GetNetClassName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CONNECTED_ITEM_GetNetClassName" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  {
    try{
      result = ((BOARD_CONNECTED_ITEM const *)arg1)->GetNetClassName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BOARD_CONNECTED_ITEM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_CONNECTED_ITEM *arg1 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BOARD_CONNECTED_ITEM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_CONNECTED_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BOARD_CONNECTED_ITEM" "', argument " "1"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BOARD_CONNECTED_ITEM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BOARD_CONNECTED_ITEM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_MicroViasAllowed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (bool) ((arg1)->m_MicroViasAllowed);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_CurrentViaType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_CurrentViaType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_CurrentViaType_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_CurrentViaType_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_CurrentViaType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_CurrentViaType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_CurrentViaType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_CurrentViaType_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_CurrentViaType);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_UseConnectedTrackWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (bool) ((arg1)->m_UseConnectedTrackWidth);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_DrawSegmentWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_DrawSegmentWidth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_EdgeSegmentWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_EdgeSegmentWidth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_PcbTextWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_PcbTextWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_PcbTextWidth_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_PcbTextWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_PcbTextWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_PcbTextWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_PcbTextWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_PcbTextWidth_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_PcbTextWidth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_PcbTextSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  wxSize *arg2 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_PcbTextSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_PcbTextSize_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_DESIGN_SETTINGS_m_PcbTextSize_set" "', argument " "2"" of type '" "wxSize *""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  if (arg1) (arg1)->m_PcbTextSize = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_PcbTextSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_PcbTextSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_PcbTextSize_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (wxSize *)& ((arg1)->m_PcbTextSize);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_TrackMinWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_TrackMinWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_TrackMinWidth_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_TrackMinWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_TrackMinWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_TrackMinWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_TrackMinWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_TrackMinWidth_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_TrackMinWidth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ViasMinSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_ViasMinSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ViasMinSize_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_ViasMinSize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ViasMinSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ViasMinSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_ViasMinSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ViasMinSize_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_ViasMinSize);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ViasMinDrill_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_ViasMinDrill_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ViasMinDrill_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_ViasMinDrill_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ViasMinDrill = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ViasMinDrill_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_ViasMinDrill_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ViasMinDrill_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_ViasMinDrill);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_MicroViasMinSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_MicroViasMinSize);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_MicroViasMinDrill = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_MicroViasMinDrill);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_SolderMaskMargin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_SolderMaskMargin);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_SolderPasteMargin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_SolderPasteMargin);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->m_SolderPasteMarginRatio = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (double) ((arg1)->m_SolderPasteMarginRatio);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ModuleTextSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  wxSize *arg2 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_ModuleTextSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ModuleTextSize_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_DESIGN_SETTINGS_m_ModuleTextSize_set" "', argument " "2"" of type '" "wxSize *""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  if (arg1) (arg1)->m_ModuleTextSize = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ModuleTextSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_ModuleTextSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ModuleTextSize_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (wxSize *)& ((arg1)->m_ModuleTextSize);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ModuleTextWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_ModuleTextWidth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ModuleSegmentWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_ModuleSegmentWidth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_Pad_Master_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_m_Pad_Master_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_Pad_Master_set" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_DESIGN_SETTINGS_m_Pad_Master_set" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  if (arg1) (arg1)->m_Pad_Master = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_m_Pad_Master_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_m_Pad_Master_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_m_Pad_Master_get" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  result = (D_PAD *)& ((arg1)->m_Pad_Master);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BOARD_DESIGN_SETTINGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BOARD_DESIGN_SETTINGS")) SWIG_fail;
  {
    try{
      result = (BOARD_DESIGN_SETTINGS *)new BOARD_DESIGN_SETTINGS();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_DESIGN_SETTINGS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_GetVisibleLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_GetVisibleLayers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_GetVisibleLayers" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  {
    try{
      result = (int)((BOARD_DESIGN_SETTINGS const *)arg1)->GetVisibleLayers();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_SetVisibleAlls(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_SetVisibleAlls",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_SetVisibleAlls" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  {
    try{
      (arg1)->SetVisibleAlls();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_SetVisibleLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_SetVisibleLayers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_SetVisibleLayers" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_SetVisibleLayers" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetVisibleLayers(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_IsLayerVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_IsLayerVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_IsLayerVisible" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_IsLayerVisible" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((BOARD_DESIGN_SETTINGS const *)arg1)->IsLayerVisible(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_SetLayerVisibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_DESIGN_SETTINGS_SetLayerVisibility",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_SetLayerVisibility" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_SetLayerVisibility" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_DESIGN_SETTINGS_SetLayerVisibility" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try{
      (arg1)->SetLayerVisibility(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_GetVisibleElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_GetVisibleElements",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_GetVisibleElements" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  {
    try{
      result = (int)((BOARD_DESIGN_SETTINGS const *)arg1)->GetVisibleElements();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_SetVisibleElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_SetVisibleElements",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_SetVisibleElements" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_SetVisibleElements" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetVisibleElements(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_IsElementVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_IsElementVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_IsElementVisible" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_IsElementVisible" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((BOARD_DESIGN_SETTINGS const *)arg1)->IsElementVisible(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_SetElementVisibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_DESIGN_SETTINGS_SetElementVisibility",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_SetElementVisibility" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_SetElementVisibility" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_DESIGN_SETTINGS_SetElementVisibility" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try{
      (arg1)->SetElementVisibility(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_GetEnabledLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_GetEnabledLayers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_GetEnabledLayers" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  {
    try{
      result = (int)((BOARD_DESIGN_SETTINGS const *)arg1)->GetEnabledLayers();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_SetEnabledLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_SetEnabledLayers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_SetEnabledLayers" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_SetEnabledLayers" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetEnabledLayers(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_IsLayerEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_IsLayerEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_IsLayerEnabled" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_IsLayerEnabled" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((BOARD_DESIGN_SETTINGS const *)arg1)->IsLayerEnabled(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_GetCopperLayerCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_GetCopperLayerCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_GetCopperLayerCount" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  {
    try{
      result = (int)((BOARD_DESIGN_SETTINGS const *)arg1)->GetCopperLayerCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_SetCopperLayerCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_SetCopperLayerCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_SetCopperLayerCount" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_SetCopperLayerCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetCopperLayerCount(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_AppendConfigs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  PARAM_CFG_ARRAY *arg2 = (PARAM_CFG_ARRAY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_AppendConfigs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_AppendConfigs" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PARAM_CFG_ARRAY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_DESIGN_SETTINGS_AppendConfigs" "', argument " "2"" of type '" "PARAM_CFG_ARRAY *""'"); 
  }
  arg2 = reinterpret_cast< PARAM_CFG_ARRAY * >(argp2);
  {
    try{
      (arg1)->AppendConfigs(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_GetBoardThickness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DESIGN_SETTINGS_GetBoardThickness",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_GetBoardThickness" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  {
    try{
      result = (int)((BOARD_DESIGN_SETTINGS const *)arg1)->GetBoardThickness();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DESIGN_SETTINGS_SetBoardThickness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DESIGN_SETTINGS_SetBoardThickness",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DESIGN_SETTINGS_SetBoardThickness" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_DESIGN_SETTINGS_SetBoardThickness" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetBoardThickness(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BOARD_DESIGN_SETTINGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_DESIGN_SETTINGS *arg1 = (BOARD_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BOARD_DESIGN_SETTINGS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_DESIGN_SETTINGS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BOARD_DESIGN_SETTINGS" "', argument " "1"" of type '" "BOARD_DESIGN_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BOARD_DESIGN_SETTINGS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BOARD_DESIGN_SETTINGS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LAYER__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  LAYER_T arg2 ;
  bool arg3 ;
  bool temp1 = false ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  LAYER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LAYER",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LAYER" "', argument " "2"" of type '" "LAYER_T""'");
  } 
  arg2 = static_cast< LAYER_T >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LAYER" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try{
      result = (LAYER *)new LAYER((wxString const &)*arg1,arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LAYER, SWIG_POINTER_NEW |  0 );
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LAYER__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  LAYER_T arg2 ;
  bool temp1 = false ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LAYER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LAYER",&obj0,&obj1)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LAYER" "', argument " "2"" of type '" "LAYER_T""'");
  } 
  arg2 = static_cast< LAYER_T >(val2);
  {
    try{
      result = (LAYER *)new LAYER((wxString const &)*arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LAYER, SWIG_POINTER_NEW |  0 );
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LAYER__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  bool temp1 = false ;
  PyObject * obj0 = 0 ;
  LAYER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LAYER",&obj0)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  {
    try{
      result = (LAYER *)new LAYER((wxString const &)*arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LAYER, SWIG_POINTER_NEW |  0 );
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LAYER__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LAYER")) SWIG_fail;
  {
    try{
      result = (LAYER *)new LAYER();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LAYER, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LAYER(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LAYER__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      return _wrap_new_LAYER__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LAYER__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LAYER__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LAYER'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LAYER::LAYER(wxString const &,LAYER_T,bool)\n"
    "    LAYER::LAYER(wxString const &,LAYER_T)\n"
    "    LAYER::LAYER(wxString const &)\n"
    "    LAYER::LAYER()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LAYER_SetVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *arg1 = (LAYER *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LAYER_SetVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LAYER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LAYER_SetVisible" "', argument " "1"" of type '" "LAYER *""'"); 
  }
  arg1 = reinterpret_cast< LAYER * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LAYER_SetVisible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->SetVisible(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *arg1 = (LAYER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LAYER_IsVisible",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LAYER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LAYER_IsVisible" "', argument " "1"" of type '" "LAYER const *""'"); 
  }
  arg1 = reinterpret_cast< LAYER * >(argp1);
  {
    try{
      result = (bool)((LAYER const *)arg1)->IsVisible();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_SetFixedListIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *arg1 = (LAYER *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LAYER_SetFixedListIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LAYER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LAYER_SetFixedListIndex" "', argument " "1"" of type '" "LAYER *""'"); 
  }
  arg1 = reinterpret_cast< LAYER * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LAYER_SetFixedListIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetFixedListIndex(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_GetFixedListIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *arg1 = (LAYER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LAYER_GetFixedListIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LAYER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LAYER_GetFixedListIndex" "', argument " "1"" of type '" "LAYER const *""'"); 
  }
  arg1 = reinterpret_cast< LAYER * >(argp1);
  {
    try{
      result = (int)((LAYER const *)arg1)->GetFixedListIndex();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_m_Name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *arg1 = (LAYER *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LAYER_m_Name_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LAYER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LAYER_m_Name_set" "', argument " "1"" of type '" "LAYER *""'"); 
  }
  arg1 = reinterpret_cast< LAYER * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (arg1)->m_Name = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_m_Name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *arg1 = (LAYER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LAYER_m_Name_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LAYER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LAYER_m_Name_get" "', argument " "1"" of type '" "LAYER *""'"); 
  }
  arg1 = reinterpret_cast< LAYER * >(argp1);
  result =  ((arg1)->m_Name);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_m_Type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *arg1 = (LAYER *) 0 ;
  LAYER_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LAYER_m_Type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LAYER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LAYER_m_Type_set" "', argument " "1"" of type '" "LAYER *""'"); 
  }
  arg1 = reinterpret_cast< LAYER * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LAYER_m_Type_set" "', argument " "2"" of type '" "LAYER_T""'");
  } 
  arg2 = static_cast< LAYER_T >(val2);
  if (arg1) (arg1)->m_Type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_m_Type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *arg1 = (LAYER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LAYER_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LAYER_m_Type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LAYER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LAYER_m_Type_get" "', argument " "1"" of type '" "LAYER *""'"); 
  }
  arg1 = reinterpret_cast< LAYER * >(argp1);
  result = (LAYER_T) ((arg1)->m_Type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_ShowType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER_T arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LAYER_ShowType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LAYER_ShowType" "', argument " "1"" of type '" "LAYER_T""'");
  } 
  arg1 = static_cast< LAYER_T >(val1);
  {
    try{
      result = (char *)LAYER::ShowType(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_ParseType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  LAYER_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LAYER_ParseType",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LAYER_ParseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try{
      result = (LAYER_T)LAYER::ParseType((char const *)arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LAYER_GetDefaultIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  bool temp1 = false ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LAYER_GetDefaultIndex",&obj0)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  {
    try{
      result = (int)LAYER::GetDefaultIndex((wxString const &)*arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LAYER(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LAYER *arg1 = (LAYER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LAYER",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LAYER, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LAYER" "', argument " "1"" of type '" "LAYER *""'"); 
  }
  arg1 = reinterpret_cast< LAYER * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LAYER_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LAYER, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VIA_DIMENSION_m_Diameter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIA_DIMENSION *arg1 = (VIA_DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_m_Diameter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIA_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_m_Diameter_set" "', argument " "1"" of type '" "VIA_DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< VIA_DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_m_Diameter_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Diameter = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_m_Diameter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIA_DIMENSION *arg1 = (VIA_DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_m_Diameter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIA_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_m_Diameter_get" "', argument " "1"" of type '" "VIA_DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< VIA_DIMENSION * >(argp1);
  result = (int) ((arg1)->m_Diameter);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_m_Drill_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIA_DIMENSION *arg1 = (VIA_DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_m_Drill_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIA_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_m_Drill_set" "', argument " "1"" of type '" "VIA_DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< VIA_DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_m_Drill_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Drill = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_m_Drill_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIA_DIMENSION *arg1 = (VIA_DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_m_Drill_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIA_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_m_Drill_get" "', argument " "1"" of type '" "VIA_DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< VIA_DIMENSION * >(argp1);
  result = (int) ((arg1)->m_Drill);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIA_DIMENSION__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIA_DIMENSION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VIA_DIMENSION")) SWIG_fail;
  {
    try{
      result = (VIA_DIMENSION *)new VIA_DIMENSION();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIA_DIMENSION, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIA_DIMENSION__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  VIA_DIMENSION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VIA_DIMENSION",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VIA_DIMENSION" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VIA_DIMENSION" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (VIA_DIMENSION *)new VIA_DIMENSION(arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIA_DIMENSION, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIA_DIMENSION(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VIA_DIMENSION__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VIA_DIMENSION__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VIA_DIMENSION'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIA_DIMENSION::VIA_DIMENSION()\n"
    "    VIA_DIMENSION::VIA_DIMENSION(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIA_DIMENSION *arg1 = (VIA_DIMENSION *) 0 ;
  VIA_DIMENSION *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIA_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION___eq__" "', argument " "1"" of type '" "VIA_DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< VIA_DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIA_DIMENSION___eq__" "', argument " "2"" of type '" "VIA_DIMENSION const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION___eq__" "', argument " "2"" of type '" "VIA_DIMENSION const &""'"); 
  }
  arg2 = reinterpret_cast< VIA_DIMENSION * >(argp2);
  {
    try{
      result = (bool)((VIA_DIMENSION const *)arg1)->operator ==((VIA_DIMENSION const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIA_DIMENSION *arg1 = (VIA_DIMENSION *) 0 ;
  VIA_DIMENSION *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIA_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION___lt__" "', argument " "1"" of type '" "VIA_DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< VIA_DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIA_DIMENSION___lt__" "', argument " "2"" of type '" "VIA_DIMENSION const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION___lt__" "', argument " "2"" of type '" "VIA_DIMENSION const &""'"); 
  }
  arg2 = reinterpret_cast< VIA_DIMENSION * >(argp2);
  {
    try{
      result = (bool)((VIA_DIMENSION const *)arg1)->operator <((VIA_DIMENSION const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VIA_DIMENSION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIA_DIMENSION *arg1 = (VIA_DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VIA_DIMENSION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIA_DIMENSION, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VIA_DIMENSION" "', argument " "1"" of type '" "VIA_DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< VIA_DIMENSION * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VIA_DIMENSION_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VIA_DIMENSION, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_HIGH_LIGHT_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HIGH_LIGHT_INFO *arg1 = (HIGH_LIGHT_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HIGH_LIGHT_INFO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HIGH_LIGHT_INFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HIGH_LIGHT_INFO" "', argument " "1"" of type '" "HIGH_LIGHT_INFO *""'"); 
  }
  arg1 = reinterpret_cast< HIGH_LIGHT_INFO * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HIGH_LIGHT_INFO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HIGH_LIGHT_INFO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BOARD_m_Status_Pcb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_Status_Pcb_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Status_Pcb_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_m_Status_Pcb_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Status_Pcb = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_Status_Pcb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_Status_Pcb_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Status_Pcb_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (int) ((arg1)->m_Status_Pcb);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_NbNodes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_NbNodes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_NbNodes_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_m_NbNodes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_NbNodes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_NbNodes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_NbNodes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_NbNodes_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (int) ((arg1)->m_NbNodes);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_NbNoconnect_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_NbNoconnect_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_NbNoconnect_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_m_NbNoconnect_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_NbNoconnect = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_NbNoconnect_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_NbNoconnect_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_NbNoconnect_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (int) ((arg1)->m_NbNoconnect);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_Drawings_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  DLIST< BOARD_ITEM > *arg2 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_Drawings_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Drawings_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_Drawings_set" "', argument " "2"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp2);
  if (arg1) (arg1)->m_Drawings = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_Drawings_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< BOARD_ITEM > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_Drawings_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Drawings_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (DLIST< BOARD_ITEM > *)& ((arg1)->m_Drawings);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_Modules_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  DLIST< MODULE > *arg2 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_Modules_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Modules_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_Modules_set" "', argument " "2"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< MODULE > * >(argp2);
  if (arg1) (arg1)->m_Modules = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_Modules_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< MODULE > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_Modules_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Modules_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (DLIST< MODULE > *)& ((arg1)->m_Modules);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_Track_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  DLIST< TRACK > *arg2 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_Track_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Track_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_Track_set" "', argument " "2"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< TRACK > * >(argp2);
  if (arg1) (arg1)->m_Track = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_Track_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< TRACK > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_Track_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Track_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (DLIST< TRACK > *)& ((arg1)->m_Track);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_Zone_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  DLIST< SEGZONE > *arg2 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_Zone_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Zone_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_Zone_set" "', argument " "2"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< SEGZONE > * >(argp2);
  if (arg1) (arg1)->m_Zone = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_Zone_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< SEGZONE > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_Zone_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_Zone_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (DLIST< SEGZONE > *)& ((arg1)->m_Zone);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_FullRatsnest_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *arg2 = (std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_FullRatsnest_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_FullRatsnest_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_FullRatsnest_set" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > * >(argp2);
  if (arg1) (arg1)->m_FullRatsnest = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_FullRatsnest_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_FullRatsnest_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_FullRatsnest_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *)& ((arg1)->m_FullRatsnest);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_LocalRatsnest_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *arg2 = (std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_LocalRatsnest_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_LocalRatsnest_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_LocalRatsnest_set" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > * >(argp2);
  if (arg1) (arg1)->m_LocalRatsnest = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_LocalRatsnest_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_LocalRatsnest_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_LocalRatsnest_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *)& ((arg1)->m_LocalRatsnest);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_CurrentZoneContour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  ZONE_CONTAINER *arg2 = (ZONE_CONTAINER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_CurrentZoneContour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_CurrentZoneContour_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ZONE_CONTAINER, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_CurrentZoneContour_set" "', argument " "2"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg2 = reinterpret_cast< ZONE_CONTAINER * >(argp2);
  if (arg1) (arg1)->m_CurrentZoneContour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_CurrentZoneContour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZONE_CONTAINER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_CurrentZoneContour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_CurrentZoneContour_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (ZONE_CONTAINER *) ((arg1)->m_CurrentZoneContour);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_NetClasses_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  NETCLASSES *arg2 = (NETCLASSES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_NetClasses_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_NetClasses_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_NetClasses_set" "', argument " "2"" of type '" "NETCLASSES *""'"); 
  }
  arg2 = reinterpret_cast< NETCLASSES * >(argp2);
  if (arg1) (arg1)->m_NetClasses = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_NetClasses_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASSES *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_NetClasses_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_NetClasses_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (NETCLASSES *)& ((arg1)->m_NetClasses);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASSES, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_CurrentNetClassName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_CurrentNetClassName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_CurrentNetClassName_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (arg1)->m_CurrentNetClassName = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_CurrentNetClassName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_CurrentNetClassName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_CurrentNetClassName_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result =  ((arg1)->m_CurrentNetClassName);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_ViasDimensionsList_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *arg2 = (std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_ViasDimensionsList_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_ViasDimensionsList_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_ViasDimensionsList_set" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > * >(argp2);
  if (arg1) (arg1)->m_ViasDimensionsList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_ViasDimensionsList_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_ViasDimensionsList_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_ViasDimensionsList_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *)& ((arg1)->m_ViasDimensionsList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_TrackWidthList_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_TrackWidthList_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_TrackWidthList_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_m_TrackWidthList_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->m_TrackWidthList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_TrackWidthList_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_TrackWidthList_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_TrackWidthList_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->m_TrackWidthList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_ViaSizeSelector_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_ViaSizeSelector_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_ViaSizeSelector_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_m_ViaSizeSelector_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_ViaSizeSelector = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_ViaSizeSelector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_ViaSizeSelector_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_ViaSizeSelector_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (unsigned int) ((arg1)->m_ViaSizeSelector);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_TrackWidthSelector_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_m_TrackWidthSelector_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_TrackWidthSelector_set" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_m_TrackWidthSelector_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_TrackWidthSelector = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_m_TrackWidthSelector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_m_TrackWidthSelector_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_m_TrackWidthSelector_get" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  result = (unsigned int) ((arg1)->m_TrackWidthSelector);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BOARD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BOARD")) SWIG_fail;
  {
    try{
      result = (BOARD *)new BOARD();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BOARD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BOARD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BOARD" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_Move" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetFileFormatVersionAtLoad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetFileFormatVersionAtLoad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetFileFormatVersionAtLoad" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetFileFormatVersionAtLoad" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetFileFormatVersionAtLoad(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetFileFormatVersionAtLoad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetFileFormatVersionAtLoad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetFileFormatVersionAtLoad" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetFileFormatVersionAtLoad();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetDefaultLayerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetDefaultLayerName",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BOARD_GetDefaultLayerName" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_GetDefaultLayerName" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      result = BOARD::GetDefaultLayerName(arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ReturnFlippedLayerNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ReturnFlippedLayerNumber",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BOARD_ReturnFlippedLayerNumber" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try{
      result = (int)BOARD::ReturnFlippedLayerNumber(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_AddNative__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_AddNative",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_AddNative" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_AddNative" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_AddNative" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      (arg1)->Add(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_AddNative__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_AddNative",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_AddNative" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_AddNative" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  {
    try{
      (arg1)->Add(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_AddNative(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_AddNative__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BOARD_AddNative__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_AddNative'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::Add(BOARD_ITEM *,int)\n"
    "    BOARD::Add(BOARD_ITEM *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_Delete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_Delete",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_Delete" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_Delete" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  {
    try{
      (arg1)->Delete(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_Remove" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_Remove" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  {
    try{
      result = (BOARD_ITEM *)(arg1)->Remove(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DeleteMARKERs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DeleteMARKERs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DeleteMARKERs" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->DeleteMARKERs();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DeleteZONEOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_DeleteZONEOutlines",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DeleteZONEOutlines" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->DeleteZONEOutlines();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetMARKER(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetMARKER",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetMARKER" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_GetMARKER" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (MARKER_PCB *)((BOARD const *)arg1)->GetMARKER(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetMARKERCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetMARKERCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetMARKERCount" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetMARKERCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ResetHighLight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ResetHighLight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ResetHighLight" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->ResetHighLight();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetHighLightNetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetHighLightNetCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetHighLightNetCode" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)(arg1)->GetHighLightNetCode();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetHighLightNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetHighLightNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetHighLightNet" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetHighLightNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetHighLightNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_IsHighLightNetON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_IsHighLightNetON",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_IsHighLightNetON" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (bool)(arg1)->IsHighLightNetON();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_HighLightOFF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_HighLightOFF",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_HighLightOFF" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->HighLightOFF();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_HighLightON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_HighLightON",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_HighLightON" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->HighLightON();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_PushHighLight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_PushHighLight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_PushHighLight" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->PushHighLight();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_PopHighLight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_PopHighLight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_PopHighLight" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->PopHighLight();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetCopperLayerCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetCopperLayerCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetCopperLayerCount" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetCopperLayerCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetCopperLayerCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetCopperLayerCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetCopperLayerCount" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetCopperLayerCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetCopperLayerCount(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetEnabledLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetEnabledLayers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetEnabledLayers" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetEnabledLayers();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetEnabledLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetEnabledLayers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetEnabledLayers" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetEnabledLayers" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetEnabledLayers(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_IsLayerEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_IsLayerEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_IsLayerEnabled" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_IsLayerEnabled" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((BOARD const *)arg1)->IsLayerEnabled(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_IsLayerVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_IsLayerVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_IsLayerVisible" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_IsLayerVisible" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((BOARD const *)arg1)->IsLayerVisible(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetVisibleLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetVisibleLayers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetVisibleLayers" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetVisibleLayers();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetVisibleLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetVisibleLayers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetVisibleLayers" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetVisibleLayers" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetVisibleLayers(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetVisibleElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetVisibleElements",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetVisibleElements" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetVisibleElements();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetVisibleElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetVisibleElements",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetVisibleElements" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetVisibleElements" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetVisibleElements(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetVisibleAlls(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_SetVisibleAlls",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetVisibleAlls" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->SetVisibleAlls();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_IsElementVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_IsElementVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_IsElementVisible" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_IsElementVisible" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((BOARD const *)arg1)->IsElementVisible(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetElementVisibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_SetElementVisibility",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetElementVisibility" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetElementVisibility" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_SetElementVisibility" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try{
      (arg1)->SetElementVisibility(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_IsModuleLayerVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_IsModuleLayerVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_IsModuleLayerVisible" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_IsModuleLayerVisible" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)(arg1)->IsModuleLayerVisible(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetVisibleElementColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetVisibleElementColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetVisibleElementColor" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_GetVisibleElementColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (int)(arg1)->GetVisibleElementColor(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetVisibleElementColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_SetVisibleElementColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetVisibleElementColor" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetVisibleElementColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_SetVisibleElementColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      (arg1)->SetVisibleElementColor(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetDesignSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_DESIGN_SETTINGS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetDesignSettings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetDesignSettings" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (BOARD_DESIGN_SETTINGS *) &((BOARD const *)arg1)->GetDesignSettings();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_DESIGN_SETTINGS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetDesignSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  BOARD_DESIGN_SETTINGS *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetDesignSettings",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetDesignSettings" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BOARD_DESIGN_SETTINGS,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_SetDesignSettings" "', argument " "2"" of type '" "BOARD_DESIGN_SETTINGS const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_SetDesignSettings" "', argument " "2"" of type '" "BOARD_DESIGN_SETTINGS const &""'"); 
  }
  arg2 = reinterpret_cast< BOARD_DESIGN_SETTINGS * >(argp2);
  {
    try{
      (arg1)->SetDesignSettings((BOARD_DESIGN_SETTINGS const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPageSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PAGE_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetPageSettings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPageSettings" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (PAGE_INFO *) &((BOARD const *)arg1)->GetPageSettings();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PAGE_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetPageSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  PAGE_INFO *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetPageSettings",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetPageSettings" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PAGE_INFO,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_SetPageSettings" "', argument " "2"" of type '" "PAGE_INFO const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_SetPageSettings" "', argument " "2"" of type '" "PAGE_INFO const &""'"); 
  }
  arg2 = reinterpret_cast< PAGE_INFO * >(argp2);
  {
    try{
      (arg1)->SetPageSettings((PAGE_INFO const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPlotOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PCB_PLOT_PARAMS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetPlotOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPlotOptions" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (PCB_PLOT_PARAMS *) &((BOARD const *)arg1)->GetPlotOptions();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PCB_PLOT_PARAMS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetPlotOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  PCB_PLOT_PARAMS *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetPlotOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetPlotOptions" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PCB_PLOT_PARAMS,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_SetPlotOptions" "', argument " "2"" of type '" "PCB_PLOT_PARAMS const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_SetPlotOptions" "', argument " "2"" of type '" "PCB_PLOT_PARAMS const &""'"); 
  }
  arg2 = reinterpret_cast< PCB_PLOT_PARAMS * >(argp2);
  {
    try{
      (arg1)->SetPlotOptions((PCB_PLOT_PARAMS const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetOriginAxisPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetOriginAxisPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetOriginAxisPosition" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (wxPoint *) &((BOARD const *)arg1)->GetOriginAxisPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetOriginAxisPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetOriginAxisPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetOriginAxisPosition" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_SetOriginAxisPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_SetOriginAxisPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetOriginAxisPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetTitleBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TITLE_BLOCK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetTitleBlock",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetTitleBlock" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (TITLE_BLOCK *) &(arg1)->GetTitleBlock();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TITLE_BLOCK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetTitleBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  TITLE_BLOCK *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetTitleBlock",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetTitleBlock" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TITLE_BLOCK,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_SetTitleBlock" "', argument " "2"" of type '" "TITLE_BLOCK const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_SetTitleBlock" "', argument " "2"" of type '" "TITLE_BLOCK const &""'"); 
  }
  arg2 = reinterpret_cast< TITLE_BLOCK * >(argp2);
  {
    try{
      (arg1)->SetTitleBlock((TITLE_BLOCK const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetZoneSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZONE_SETTINGS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetZoneSettings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetZoneSettings" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (ZONE_SETTINGS *) &((BOARD const *)arg1)->GetZoneSettings();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetZoneSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  ZONE_SETTINGS *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetZoneSettings",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetZoneSettings" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZONE_SETTINGS,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_SetZoneSettings" "', argument " "2"" of type '" "ZONE_SETTINGS const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_SetZoneSettings" "', argument " "2"" of type '" "ZONE_SETTINGS const &""'"); 
  }
  arg2 = reinterpret_cast< ZONE_SETTINGS * >(argp2);
  {
    try{
      (arg1)->SetZoneSettings((ZONE_SETTINGS const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetColorsSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  COLORS_DESIGN_SETTINGS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetColorsSettings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetColorsSettings" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (COLORS_DESIGN_SETTINGS *)((BOARD const *)arg1)->GetColorsSettings();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetColorsSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  COLORS_DESIGN_SETTINGS *arg2 = (COLORS_DESIGN_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetColorsSettings",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetColorsSettings" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_COLORS_DESIGN_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_SetColorsSettings" "', argument " "2"" of type '" "COLORS_DESIGN_SETTINGS *""'"); 
  }
  arg2 = reinterpret_cast< COLORS_DESIGN_SETTINGS * >(argp2);
  {
    try{
      (arg1)->SetColorsSettings(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetLayerName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_GetLayerName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetLayerName" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_GetLayerName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_GetLayerName" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try{
      result = ((BOARD const *)arg1)->GetLayerName(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetLayerName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetLayerName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetLayerName" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_GetLayerName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = ((BOARD const *)arg1)->GetLayerName(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetLayerName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BOARD_GetLayerName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BOARD_GetLayerName__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_GetLayerName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::GetLayerName(int,bool) const\n"
    "    BOARD::GetLayerName(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_SetLayerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  wxString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool temp3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_SetLayerName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetLayerName" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetLayerName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  {
    try{
      result = (bool)(arg1)->SetLayerName(arg2,(wxString const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  LAYER *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_SetLayer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetLayer" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_LAYER,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_SetLayer" "', argument " "3"" of type '" "LAYER const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_SetLayer" "', argument " "3"" of type '" "LAYER const &""'"); 
  }
  arg3 = reinterpret_cast< LAYER * >(argp3);
  {
    try{
      result = (bool)(arg1)->SetLayer(arg2,(LAYER const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetLayerType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LAYER_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetLayerType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetLayerType" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_GetLayerType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (LAYER_T)((BOARD const *)arg1)->GetLayerType(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetLayerType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  LAYER_T arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_SetLayerType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetLayerType" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetLayerType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_SetLayerType" "', argument " "3"" of type '" "LAYER_T""'");
  } 
  arg3 = static_cast< LAYER_T >(val3);
  {
    try{
      result = (bool)(arg1)->SetLayerType(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetLayerColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_SetLayerColor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetLayerColor" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_SetLayerColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_SetLayerColor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      (arg1)->SetLayerColor(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetLayerColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetLayerColor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetLayerColor" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_GetLayerColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (int)(arg1)->GetLayerColor(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetNumSegmTrack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetNumSegmTrack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetNumSegmTrack" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetNumSegmTrack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetNumSegmZone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetNumSegmZone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetNumSegmZone" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetNumSegmZone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetNoconnectCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetNoconnectCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetNoconnectCount" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (unsigned int)((BOARD const *)arg1)->GetNoconnectCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetRatsnestsCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetRatsnestsCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetRatsnestsCount" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (unsigned int)((BOARD const *)arg1)->GetRatsnestsCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetNodesCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetNodesCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetNodesCount" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (unsigned int)((BOARD const *)arg1)->GetNodesCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPadCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetPadCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPadCount" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (unsigned int)((BOARD const *)arg1)->GetPadCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetPad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPad" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_GetPad" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try{
      result = (D_PAD *)((BOARD const *)arg1)->GetPad(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< D_PAD *,std::allocator< D_PAD * > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetPads",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPads" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (arg1)->GetPads();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< D_PAD *,std::allocator< D_PAD * > >(static_cast< const std::vector< D_PAD *,std::allocator< D_PAD * > >& >(result))), SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_BuildListOfNets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_BuildListOfNets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_BuildListOfNets" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->BuildListOfNets();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_FindNet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NETINFO_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_FindNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_FindNet" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_FindNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (NETINFO_ITEM *)((BOARD const *)arg1)->FindNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_FindNet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NETINFO_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_FindNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_FindNet" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (NETINFO_ITEM *)((BOARD const *)arg1)->FindNet((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_FindNet(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BOARD_FindNet__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BOARD_FindNet__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_FindNet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::FindNet(int) const\n"
    "    BOARD::FindNet(wxString const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_AppendNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  NETINFO_ITEM *arg2 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_AppendNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_AppendNet" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_AppendNet" "', argument " "2"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< NETINFO_ITEM * >(argp2);
  {
    try{
      (arg1)->AppendNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetNetCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetNetCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetNetCount" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (unsigned int)((BOARD const *)arg1)->GetNetCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ComputeBoundingBox__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ComputeBoundingBox",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ComputeBoundingBox" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ComputeBoundingBox" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      result = (arg1)->ComputeBoundingBox(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ComputeBoundingBox__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ComputeBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ComputeBoundingBox" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (arg1)->ComputeBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ComputeBoundingBox(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BOARD_ComputeBoundingBox__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BOARD_ComputeBoundingBox__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ComputeBoundingBox'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::ComputeBoundingBox(bool)\n"
    "    BOARD::ComputeBoundingBox()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetBoundingBox" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = ((BOARD const *)arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetBoundingBox",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetBoundingBox" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_SetBoundingBox" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_SetBoundingBox" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  {
    try{
      (arg1)->SetBoundingBox((EDA_RECT const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DisplayInfo" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_Draw" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BOARD_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_Draw" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BOARD_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_BOARD_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    BOARD::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_DrawHighLight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_DrawHighLight",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_DrawHighLight" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_DrawHighLight" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_DrawHighLight" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_DrawHighLight" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->DrawHighLight(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Visit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_Visit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_Visit" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_Visit" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_Visit" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BOARD_Visit" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  {
    try{
      result = (SEARCH_RESULT)(arg1)->Visit(arg2,(void const *)arg3,(KICAD_T const (*))arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_FindModuleByReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_FindModuleByReference",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_FindModuleByReference" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (MODULE *)((BOARD const *)arg1)->FindModuleByReference((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ReturnSortedNetnamesList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxArrayString *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_ReturnSortedNetnamesList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ReturnSortedNetnamesList" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    if (!PySequence_Check(obj1)) 
    {
      PyErr_SetString(PyExc_TypeError, "Not a sequence of strings");
      SWIG_fail;
    }
    
    arg2 = new wxArrayString;
    temp2 = true;
    int last=PySequence_Length(obj1);
    for (int i=0; i<last; i++) 
    {
      PyObject* pyStr = PySequence_GetItem(obj1, i);
      wxString* wxS = newWxStringFromPy(pyStr);
      if (PyErr_Occurred())  
      SWIG_fail;
      arg2->Add(*wxS);
      delete wxS;
      Py_DECREF(pyStr);
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_ReturnSortedNetnamesList" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try{
      result = (int)(arg1)->ReturnSortedNetnamesList(*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (temp2) 
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2) 
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SynchronizeNetsAndNetClasses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_SynchronizeNetsAndNetClasses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SynchronizeNetsAndNetClasses" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->SynchronizeNetsAndNetClasses();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetCurrentNetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_SetCurrentNetClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetCurrentNetClass" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (bool)(arg1)->SetCurrentNetClass((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetBiggestClearanceValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetBiggestClearanceValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetBiggestClearanceValue" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)(arg1)->GetBiggestClearanceValue();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetSmallestClearanceValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetSmallestClearanceValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetSmallestClearanceValue" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)(arg1)->GetSmallestClearanceValue();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetCurrentTrackWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetCurrentTrackWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetCurrentTrackWidth" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetCurrentTrackWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetCurrentViaSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetCurrentViaSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetCurrentViaSize" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)(arg1)->GetCurrentViaSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetCurrentViaDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetCurrentViaDrill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetCurrentViaDrill" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)(arg1)->GetCurrentViaDrill();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetCurrentMicroViaSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetCurrentMicroViaSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetCurrentMicroViaSize" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)(arg1)->GetCurrentMicroViaSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetCurrentMicroViaDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetCurrentMicroViaDrill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetCurrentMicroViaDrill" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)(arg1)->GetCurrentMicroViaDrill();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetClass" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = ((BOARD const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_HitTestForAnyFilledArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ZONE_CONTAINER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_HitTestForAnyFilledArea",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_HitTestForAnyFilledArea" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_HitTestForAnyFilledArea" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_HitTestForAnyFilledArea" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_HitTestForAnyFilledArea" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_HitTestForAnyFilledArea" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (ZONE_CONTAINER *)(arg1)->HitTestForAnyFilledArea((wxPoint const &)*arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_HitTestForAnyFilledArea__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ZONE_CONTAINER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_HitTestForAnyFilledArea",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_HitTestForAnyFilledArea" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_HitTestForAnyFilledArea" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_HitTestForAnyFilledArea" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_HitTestForAnyFilledArea" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (ZONE_CONTAINER *)(arg1)->HitTestForAnyFilledArea((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_HitTestForAnyFilledArea(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BOARD_HitTestForAnyFilledArea__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BOARD_HitTestForAnyFilledArea__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_HitTestForAnyFilledArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::HitTestForAnyFilledArea(wxPoint const &,int,int)\n"
    "    BOARD::HitTestForAnyFilledArea(wxPoint const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_RedrawAreasOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_RedrawAreasOutlines",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_RedrawAreasOutlines" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_RedrawAreasOutlines" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_RedrawAreasOutlines" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_RedrawAreasOutlines" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BOARD_RedrawAreasOutlines" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try{
      (arg1)->RedrawAreasOutlines(arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_RedrawFilledAreas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_RedrawFilledAreas",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_RedrawFilledAreas" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_RedrawFilledAreas" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_RedrawFilledAreas" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_RedrawFilledAreas" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BOARD_RedrawFilledAreas" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try{
      (arg1)->RedrawFilledAreas(arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_SetAreasNetCodesFromNetNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_SetAreasNetCodesFromNetNames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_SetAreasNetCodesFromNetNames" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)(arg1)->SetAreasNetCodesFromNetNames();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ZONE_CONTAINER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetArea" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_GetArea" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (ZONE_CONTAINER *)((BOARD const *)arg1)->GetArea(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetAreaIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  ZONE_CONTAINER *arg2 = (ZONE_CONTAINER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetAreaIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetAreaIndex" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetAreaIndex" "', argument " "2"" of type '" "ZONE_CONTAINER const *""'"); 
  }
  arg2 = reinterpret_cast< ZONE_CONTAINER * >(argp2);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetAreaIndex((ZONE_CONTAINER const *)arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetAreaCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_GetAreaCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetAreaCount" "', argument " "1"" of type '" "BOARD const *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (int)((BOARD const *)arg1)->GetAreaCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_AddArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  PICKED_ITEMS_LIST *arg2 = (PICKED_ITEMS_LIST *) 0 ;
  int arg3 ;
  int arg4 ;
  SwigValueWrapper< wxPoint > arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  ZONE_CONTAINER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:BOARD_AddArea",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_AddArea" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PICKED_ITEMS_LIST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_AddArea" "', argument " "2"" of type '" "PICKED_ITEMS_LIST *""'"); 
  }
  arg2 = reinterpret_cast< PICKED_ITEMS_LIST * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_AddArea" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_AddArea" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BOARD_AddArea" "', argument " "5"" of type '" "wxPoint""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_AddArea" "', argument " "5"" of type '" "wxPoint""'");
    } else {
      wxPoint * temp = reinterpret_cast< wxPoint * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BOARD_AddArea" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try{
      result = (ZONE_CONTAINER *)(arg1)->AddArea(arg2,arg3,arg4,arg5,arg6);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_InsertArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  ZONE_CONTAINER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:BOARD_InsertArea",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_InsertArea" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_InsertArea" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_InsertArea" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_InsertArea" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BOARD_InsertArea" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BOARD_InsertArea" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "BOARD_InsertArea" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try{
      result = (ZONE_CONTAINER *)(arg1)->InsertArea(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_TestAreaPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  ZONE_CONTAINER *arg2 = (ZONE_CONTAINER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_TestAreaPolygon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_TestAreaPolygon" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_TestAreaPolygon" "', argument " "2"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg2 = reinterpret_cast< ZONE_CONTAINER * >(argp2);
  {
    try{
      result = (int)(arg1)->TestAreaPolygon(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ClipAreaPolygon__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  PICKED_ITEMS_LIST *arg2 = (PICKED_ITEMS_LIST *) 0 ;
  ZONE_CONTAINER *arg3 = (ZONE_CONTAINER *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:BOARD_ClipAreaPolygon",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ClipAreaPolygon" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PICKED_ITEMS_LIST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ClipAreaPolygon" "', argument " "2"" of type '" "PICKED_ITEMS_LIST *""'"); 
  }
  arg2 = reinterpret_cast< PICKED_ITEMS_LIST * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ClipAreaPolygon" "', argument " "3"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg3 = reinterpret_cast< ZONE_CONTAINER * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_ClipAreaPolygon" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BOARD_ClipAreaPolygon" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BOARD_ClipAreaPolygon" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try{
      result = (int)(arg1)->ClipAreaPolygon(arg2,arg3,arg4,arg5,arg6);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ClipAreaPolygon__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  PICKED_ITEMS_LIST *arg2 = (PICKED_ITEMS_LIST *) 0 ;
  ZONE_CONTAINER *arg3 = (ZONE_CONTAINER *) 0 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_ClipAreaPolygon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ClipAreaPolygon" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PICKED_ITEMS_LIST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ClipAreaPolygon" "', argument " "2"" of type '" "PICKED_ITEMS_LIST *""'"); 
  }
  arg2 = reinterpret_cast< PICKED_ITEMS_LIST * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ClipAreaPolygon" "', argument " "3"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg3 = reinterpret_cast< ZONE_CONTAINER * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_ClipAreaPolygon" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BOARD_ClipAreaPolygon" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try{
      result = (int)(arg1)->ClipAreaPolygon(arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ClipAreaPolygon(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PICKED_ITEMS_LIST, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ZONE_CONTAINER, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_BOARD_ClipAreaPolygon__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_PICKED_ITEMS_LIST, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ZONE_CONTAINER, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_BOARD_ClipAreaPolygon__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ClipAreaPolygon'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::ClipAreaPolygon(PICKED_ITEMS_LIST *,ZONE_CONTAINER *,bool,bool,bool)\n"
    "    BOARD::ClipAreaPolygon(PICKED_ITEMS_LIST *,ZONE_CONTAINER *,bool,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_AreaPolygonModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  PICKED_ITEMS_LIST *arg2 = (PICKED_ITEMS_LIST *) 0 ;
  ZONE_CONTAINER *arg3 = (ZONE_CONTAINER *) 0 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_AreaPolygonModified",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_AreaPolygonModified" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PICKED_ITEMS_LIST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_AreaPolygonModified" "', argument " "2"" of type '" "PICKED_ITEMS_LIST *""'"); 
  }
  arg2 = reinterpret_cast< PICKED_ITEMS_LIST * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_AreaPolygonModified" "', argument " "3"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg3 = reinterpret_cast< ZONE_CONTAINER * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_AreaPolygonModified" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BOARD_AreaPolygonModified" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try{
      result = (int)(arg1)->AreaPolygonModified(arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CombineAllAreasInNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  PICKED_ITEMS_LIST *arg2 = (PICKED_ITEMS_LIST *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_CombineAllAreasInNet",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CombineAllAreasInNet" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PICKED_ITEMS_LIST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_CombineAllAreasInNet" "', argument " "2"" of type '" "PICKED_ITEMS_LIST *""'"); 
  }
  arg2 = reinterpret_cast< PICKED_ITEMS_LIST * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_CombineAllAreasInNet" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_CombineAllAreasInNet" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BOARD_CombineAllAreasInNet" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try{
      result = (int)(arg1)->CombineAllAreasInNet(arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_RemoveArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  PICKED_ITEMS_LIST *arg2 = (PICKED_ITEMS_LIST *) 0 ;
  ZONE_CONTAINER *arg3 = (ZONE_CONTAINER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_RemoveArea",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_RemoveArea" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PICKED_ITEMS_LIST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_RemoveArea" "', argument " "2"" of type '" "PICKED_ITEMS_LIST *""'"); 
  }
  arg2 = reinterpret_cast< PICKED_ITEMS_LIST * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_RemoveArea" "', argument " "3"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg3 = reinterpret_cast< ZONE_CONTAINER * >(argp3);
  {
    try{
      (arg1)->RemoveArea(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_TestAreaIntersections(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  ZONE_CONTAINER *arg2 = (ZONE_CONTAINER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_TestAreaIntersections",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_TestAreaIntersections" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_TestAreaIntersections" "', argument " "2"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg2 = reinterpret_cast< ZONE_CONTAINER * >(argp2);
  {
    try{
      result = (bool)(arg1)->TestAreaIntersections(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_TestAreaIntersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  ZONE_CONTAINER *arg2 = (ZONE_CONTAINER *) 0 ;
  ZONE_CONTAINER *arg3 = (ZONE_CONTAINER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_TestAreaIntersection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_TestAreaIntersection" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_TestAreaIntersection" "', argument " "2"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg2 = reinterpret_cast< ZONE_CONTAINER * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_TestAreaIntersection" "', argument " "3"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg3 = reinterpret_cast< ZONE_CONTAINER * >(argp3);
  {
    try{
      result = (int)(arg1)->TestAreaIntersection(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CombineAreas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  PICKED_ITEMS_LIST *arg2 = (PICKED_ITEMS_LIST *) 0 ;
  ZONE_CONTAINER *arg3 = (ZONE_CONTAINER *) 0 ;
  ZONE_CONTAINER *arg4 = (ZONE_CONTAINER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_CombineAreas",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CombineAreas" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PICKED_ITEMS_LIST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_CombineAreas" "', argument " "2"" of type '" "PICKED_ITEMS_LIST *""'"); 
  }
  arg2 = reinterpret_cast< PICKED_ITEMS_LIST * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_CombineAreas" "', argument " "3"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg3 = reinterpret_cast< ZONE_CONTAINER * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BOARD_CombineAreas" "', argument " "4"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg4 = reinterpret_cast< ZONE_CONTAINER * >(argp4);
  {
    try{
      result = (int)(arg1)->CombineAreas(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Test_Drc_Areas_Outlines_To_Areas_Outlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  ZONE_CONTAINER *arg2 = (ZONE_CONTAINER *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_Test_Drc_Areas_Outlines_To_Areas_Outlines",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_Test_Drc_Areas_Outlines_To_Areas_Outlines" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ZONE_CONTAINER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_Test_Drc_Areas_Outlines_To_Areas_Outlines" "', argument " "2"" of type '" "ZONE_CONTAINER *""'"); 
  }
  arg2 = reinterpret_cast< ZONE_CONTAINER * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_Test_Drc_Areas_Outlines_To_Areas_Outlines" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try{
      result = (int)(arg1)->Test_Drc_Areas_Outlines_To_Areas_Outlines(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Test_Connections_To_Copper_Areas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_Test_Connections_To_Copper_Areas",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_Test_Connections_To_Copper_Areas" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_Test_Connections_To_Copper_Areas" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->Test_Connections_To_Copper_Areas(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Test_Connections_To_Copper_Areas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_Test_Connections_To_Copper_Areas",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_Test_Connections_To_Copper_Areas" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      (arg1)->Test_Connections_To_Copper_Areas();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_Test_Connections_To_Copper_Areas(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BOARD_Test_Connections_To_Copper_Areas__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BOARD_Test_Connections_To_Copper_Areas__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_Test_Connections_To_Copper_Areas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::Test_Connections_To_Copper_Areas(int)\n"
    "    BOARD::Test_Connections_To_Copper_Areas()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_GetViaByPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_GetViaByPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetViaByPosition" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetViaByPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetViaByPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_GetViaByPosition" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (TRACK *)(arg1)->GetViaByPosition((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetViaByPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetViaByPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetViaByPosition" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetViaByPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetViaByPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (TRACK *)(arg1)->GetViaByPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetViaByPosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_GetViaByPosition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BOARD_GetViaByPosition__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_GetViaByPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::GetViaByPosition(wxPoint const &,int)\n"
    "    BOARD::GetViaByPosition(wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_GetPad",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPad" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_GetPad" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (D_PAD *)(arg1)->GetPad((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPad__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetPad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPad" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (D_PAD *)(arg1)->GetPad((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPad__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_GetPad",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPad" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetPad" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_GetPad" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (D_PAD *)(arg1)->GetPad(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPadFast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_GetPadFast",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPadFast" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetPadFast" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetPadFast" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_GetPadFast" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (D_PAD *)(arg1)->GetPadFast((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPad__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *arg2 = 0 ;
  wxPoint *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_GetPad",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetPad" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetPad" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetPad" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< D_PAD *,std::allocator< D_PAD * > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_GetPad" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetPad" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_GetPad" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (D_PAD *)(arg1)->GetPad(*arg2,(wxPoint const &)*arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetPad(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_GetPad__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BOARD_GetPad__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BOARD_GetPad__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TRACK, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BOARD_GetPad__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wxPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BOARD_GetPad__SWIG_4(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_GetPad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::GetPad(unsigned int) const\n"
    "    BOARD::GetPad(wxPoint const &,int)\n"
    "    BOARD::GetPad(wxPoint const &)\n"
    "    BOARD::GetPad(TRACK *,int)\n"
    "    BOARD::GetPad(std::vector< D_PAD *,std::allocator< D_PAD * > > &,wxPoint const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_GetSortedPadListByXthenYCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_GetSortedPadListByXthenYCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetSortedPadListByXthenYCoord" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetSortedPadListByXthenYCoord" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetSortedPadListByXthenYCoord" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< D_PAD *,std::allocator< D_PAD * > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_GetSortedPadListByXthenYCoord" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      (arg1)->GetSortedPadListByXthenYCoord(*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetSortedPadListByXthenYCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_GetSortedPadListByXthenYCoord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetSortedPadListByXthenYCoord" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetSortedPadListByXthenYCoord" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetSortedPadListByXthenYCoord" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< D_PAD *,std::allocator< D_PAD * > > * >(argp2);
  {
    try{
      (arg1)->GetSortedPadListByXthenYCoord(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetSortedPadListByXthenYCoord(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_GetSortedPadListByXthenYCoord__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BOARD_GetSortedPadListByXthenYCoord__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_GetSortedPadListByXthenYCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::GetSortedPadListByXthenYCoord(std::vector< D_PAD *,std::allocator< D_PAD * > > &,int)\n"
    "    BOARD::GetSortedPadListByXthenYCoord(std::vector< D_PAD *,std::allocator< D_PAD * > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_GetTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  wxPoint *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_GetTrace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetTrace" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetTrace" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_GetTrace" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetTrace" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_GetTrace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (TRACK *)(arg1)->GetTrace(arg2,(wxPoint const &)*arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_MarkTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:BOARD_MarkTrace",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_MarkTrace" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_MarkTrace" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_MarkTrace" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BOARD_MarkTrace" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BOARD_MarkTrace" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BOARD_MarkTrace" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try{
      result = (TRACK *)(arg1)->MarkTrace(arg2,arg3,arg4,arg5,arg6);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetFootprint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_GetFootprint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetFootprint" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetFootprint" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetFootprint" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_GetFootprint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_GetFootprint" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BOARD_GetFootprint" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try{
      result = (MODULE *)(arg1)->GetFootprint((wxPoint const &)*arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetFootprint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_GetFootprint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetFootprint" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetFootprint" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetFootprint" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_GetFootprint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_GetFootprint" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try{
      result = (MODULE *)(arg1)->GetFootprint((wxPoint const &)*arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_GetFootprint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BOARD_GetFootprint__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_BOARD_GetFootprint__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_GetFootprint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD::GetFootprint(wxPoint const &,int,bool,bool)\n"
    "    BOARD::GetFootprint(wxPoint const &,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_GetLockPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BOARD_CONNECTED_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_GetLockPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_GetLockPoint" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_GetLockPoint" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_GetLockPoint" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_GetLockPoint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (BOARD_CONNECTED_ITEM *)(arg1)->GetLockPoint((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_CreateLockPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxPoint *arg2 = 0 ;
  TRACK *arg3 = (TRACK *) 0 ;
  PICKED_ITEMS_LIST *arg4 = (PICKED_ITEMS_LIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_CreateLockPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_CreateLockPoint" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_CreateLockPoint" "', argument " "2"" of type '" "wxPoint &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_CreateLockPoint" "', argument " "2"" of type '" "wxPoint &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_CreateLockPoint" "', argument " "3"" of type '" "TRACK *""'"); 
  }
  arg3 = reinterpret_cast< TRACK * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_PICKED_ITEMS_LIST, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BOARD_CreateLockPoint" "', argument " "4"" of type '" "PICKED_ITEMS_LIST *""'"); 
  }
  arg4 = reinterpret_cast< PICKED_ITEMS_LIST * >(argp4);
  {
    try{
      result = (TRACK *)(arg1)->CreateLockPoint(*arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BOARD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BOARD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MODULE_m_Orient_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Orient_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Orient_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_Orient_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->m_Orient = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Orient_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Orient_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Orient_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (double) ((arg1)->m_Orient);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Pos_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_Pos_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (arg1)->m_Pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Pos_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (wxPoint *)& ((arg1)->m_Pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Pads_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  DLIST< D_PAD > *arg2 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Pads_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Pads_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_Pads_set" "', argument " "2"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< D_PAD > * >(argp2);
  if (arg1) (arg1)->m_Pads = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Pads_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< D_PAD > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Pads_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Pads_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (DLIST< D_PAD > *)& ((arg1)->m_Pads);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Drawings_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  DLIST< BOARD_ITEM > *arg2 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Drawings_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Drawings_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_Drawings_set" "', argument " "2"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp2);
  if (arg1) (arg1)->m_Drawings = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Drawings_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< BOARD_ITEM > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Drawings_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Drawings_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (DLIST< BOARD_ITEM > *)& ((arg1)->m_Drawings);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_3D_Drawings_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  DLIST< S3D_MASTER > *arg2 = (DLIST< S3D_MASTER > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_3D_Drawings_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_3D_Drawings_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_S3D_MASTER_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_3D_Drawings_set" "', argument " "2"" of type '" "DLIST< S3D_MASTER > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< S3D_MASTER > * >(argp2);
  if (arg1) (arg1)->m_3D_Drawings = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_3D_Drawings_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< S3D_MASTER > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_3D_Drawings_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_3D_Drawings_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (DLIST< S3D_MASTER > *)& ((arg1)->m_3D_Drawings);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_S3D_MASTER_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Reference_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  TEXTE_MODULE *arg2 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Reference_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Reference_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TEXTE_MODULE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_Reference_set" "', argument " "2"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg2 = reinterpret_cast< TEXTE_MODULE * >(argp2);
  if (arg1) (arg1)->m_Reference = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Reference_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Reference_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Reference_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (TEXTE_MODULE *) ((arg1)->m_Reference);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  TEXTE_MODULE *arg2 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Value_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TEXTE_MODULE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_Value_set" "', argument " "2"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg2 = reinterpret_cast< TEXTE_MODULE * >(argp2);
  if (arg1) (arg1)->m_Value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Value_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (TEXTE_MODULE *) ((arg1)->m_Value);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_LibRef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_LibRef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_LibRef_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (arg1)->m_LibRef = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_LibRef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_LibRef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_LibRef_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result =  ((arg1)->m_LibRef);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Attributs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Attributs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Attributs_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_Attributs_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Attributs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Attributs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Attributs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Attributs_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (int) ((arg1)->m_Attributs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_flag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_flag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_flag_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_flag_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->flag = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_flag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_flag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_flag_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (int) ((arg1)->flag);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_ModuleStatus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_ModuleStatus_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_ModuleStatus_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_ModuleStatus_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ModuleStatus = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_ModuleStatus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_ModuleStatus_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_ModuleStatus_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (int) ((arg1)->m_ModuleStatus);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_BoundaryBox_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  EDA_RECT *arg2 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_BoundaryBox_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_BoundaryBox_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_BoundaryBox_set" "', argument " "2"" of type '" "EDA_RECT *""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  if (arg1) (arg1)->m_BoundaryBox = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_BoundaryBox_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_BoundaryBox_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_BoundaryBox_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (EDA_RECT *)& ((arg1)->m_BoundaryBox);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_RECT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_PadNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_PadNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_PadNum_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_PadNum_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_PadNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_PadNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_PadNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_PadNum_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (int) ((arg1)->m_PadNum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_AltPadNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_AltPadNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_AltPadNum_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_AltPadNum_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_AltPadNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_AltPadNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_AltPadNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_AltPadNum_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (int) ((arg1)->m_AltPadNum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_CntRot90_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_CntRot90_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_CntRot90_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_CntRot90_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_CntRot90 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_CntRot90_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_CntRot90_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_CntRot90_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (int) ((arg1)->m_CntRot90);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_CntRot180_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_CntRot180_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_CntRot180_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_CntRot180_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_CntRot180 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_CntRot180_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_CntRot180_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_CntRot180_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (int) ((arg1)->m_CntRot180);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Ext_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxSize *arg2 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Ext_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Ext_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_Ext_set" "', argument " "2"" of type '" "wxSize *""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  if (arg1) (arg1)->m_Ext = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Ext_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Ext_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Ext_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (wxSize *)& ((arg1)->m_Ext);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Surface_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Surface_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Surface_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_Surface_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->m_Surface = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Surface_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Surface_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Surface_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (double) ((arg1)->m_Surface);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Link_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Link_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Link_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_time_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_Link_set" "', argument " "2"" of type '" "time_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_m_Link_set" "', argument " "2"" of type '" "time_t""'");
    } else {
      time_t * temp = reinterpret_cast< time_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->m_Link = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Link_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  time_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Link_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Link_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result =  ((arg1)->m_Link);
  resultobj = SWIG_NewPointerObj((new time_t(static_cast< const time_t& >(result))), SWIGTYPE_p_time_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_LastEdit_Time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_LastEdit_Time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_LastEdit_Time_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_LastEdit_Time_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->m_LastEdit_Time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_LastEdit_Time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_LastEdit_Time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_LastEdit_Time_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (long) ((arg1)->m_LastEdit_Time);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Path_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Path_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Path_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (arg1)->m_Path = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Path_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Path_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Path_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result =  ((arg1)->m_Path);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Doc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_Doc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Doc_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (arg1)->m_Doc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_Doc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_Doc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_Doc_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result =  ((arg1)->m_Doc);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_KeyWord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_KeyWord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_KeyWord_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (arg1)->m_KeyWord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_KeyWord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_KeyWord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_KeyWord_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result =  ((arg1)->m_KeyWord);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_ZoneConnection_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  ZoneConnection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_ZoneConnection_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_ZoneConnection_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZoneConnection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_m_ZoneConnection_set" "', argument " "2"" of type '" "ZoneConnection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_m_ZoneConnection_set" "', argument " "2"" of type '" "ZoneConnection""'");
    } else {
      ZoneConnection * temp = reinterpret_cast< ZoneConnection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->m_ZoneConnection = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_ZoneConnection_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZoneConnection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_ZoneConnection_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_ZoneConnection_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result =  ((arg1)->m_ZoneConnection);
  resultobj = SWIG_NewPointerObj((new ZoneConnection(static_cast< const ZoneConnection& >(result))), SWIGTYPE_p_ZoneConnection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_ThermalWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_ThermalWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_ThermalWidth_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_ThermalWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ThermalWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_ThermalWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_ThermalWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_ThermalWidth_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (int) ((arg1)->m_ThermalWidth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_ThermalGap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_m_ThermalGap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_ThermalGap_set" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_m_ThermalGap_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ThermalGap = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_m_ThermalGap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_m_ThermalGap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_m_ThermalGap_get" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  result = (int) ((arg1)->m_ThermalGap);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MODULE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MODULE" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (MODULE *)new MODULE(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MODULE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_MODULE,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MODULE" "', argument " "1"" of type '" "MODULE const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MODULE" "', argument " "1"" of type '" "MODULE const &""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (MODULE *)new MODULE((MODULE const &)*arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MODULE(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MODULE__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MODULE__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MODULE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MODULE::MODULE(BOARD *)\n"
    "    MODULE::MODULE(MODULE const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MODULE" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Next" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (MODULE *)((MODULE const *)arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Back" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (MODULE *)((MODULE const *)arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  MODULE *arg2 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_Copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Copy" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_Copy" "', argument " "2"" of type '" "MODULE *""'"); 
  }
  arg2 = reinterpret_cast< MODULE * >(argp2);
  {
    try{
      (arg1)->Copy(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_CalculateBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_CalculateBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_CalculateBoundingBox" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      (arg1)->CalculateBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetFootPrintRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetFootPrintRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetFootPrintRect" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = ((MODULE const *)arg1)->GetFootPrintRect();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetBoundingBox" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = ((MODULE const *)arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetPosition" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetPosition" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (wxPoint *) &((MODULE const *)arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetOrientation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetOrientation" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetOrientation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      (arg1)->SetOrientation(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetOrientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetOrientation" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (double)((MODULE const *)arg1)->GetOrientation();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetLibRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetLibRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetLibRef" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (wxString *) &((MODULE const *)arg1)->GetLibRef();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetLibRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetLibRef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetLibRef" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetLibRef((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetDescription" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (wxString *) &((MODULE const *)arg1)->GetDescription();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetDescription" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetDescription((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetKeywords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetKeywords",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetKeywords" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (wxString *) &((MODULE const *)arg1)->GetKeywords();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetKeywords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetKeywords",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetKeywords" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetKeywords((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetPath" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (wxString *) &((MODULE const *)arg1)->GetPath();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetPath" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetPath((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetLocalSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetLocalSolderMaskMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetLocalSolderMaskMargin" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (int)((MODULE const *)arg1)->GetLocalSolderMaskMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetLocalSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetLocalSolderMaskMargin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetLocalSolderMaskMargin" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetLocalSolderMaskMargin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetLocalSolderMaskMargin(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetLocalClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetLocalClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetLocalClearance" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (int)((MODULE const *)arg1)->GetLocalClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetLocalClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetLocalClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetLocalClearance" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetLocalClearance" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetLocalClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetLocalSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetLocalSolderPasteMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetLocalSolderPasteMargin" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (int)((MODULE const *)arg1)->GetLocalSolderPasteMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetLocalSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetLocalSolderPasteMargin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetLocalSolderPasteMargin" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetLocalSolderPasteMargin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetLocalSolderPasteMargin(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetLocalSolderPasteMarginRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetLocalSolderPasteMarginRatio",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetLocalSolderPasteMarginRatio" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (double)((MODULE const *)arg1)->GetLocalSolderPasteMarginRatio();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetLocalSolderPasteMarginRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetLocalSolderPasteMarginRatio",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetLocalSolderPasteMarginRatio" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetLocalSolderPasteMarginRatio" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      (arg1)->SetLocalSolderPasteMarginRatio(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetZoneConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  ZoneConnection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetZoneConnection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetZoneConnection" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZoneConnection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_SetZoneConnection" "', argument " "2"" of type '" "ZoneConnection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_SetZoneConnection" "', argument " "2"" of type '" "ZoneConnection""'");
    } else {
      ZoneConnection * temp = reinterpret_cast< ZoneConnection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (arg1)->SetZoneConnection(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetZoneConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZoneConnection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetZoneConnection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetZoneConnection" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = ((MODULE const *)arg1)->GetZoneConnection();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new ZoneConnection(static_cast< const ZoneConnection& >(result))), SWIGTYPE_p_ZoneConnection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetThermalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetThermalWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetThermalWidth" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetThermalWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetThermalWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetThermalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetThermalWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetThermalWidth" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (int)((MODULE const *)arg1)->GetThermalWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetThermalGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetThermalGap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetThermalGap" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetThermalGap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetThermalGap(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetThermalGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetThermalGap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetThermalGap" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (int)((MODULE const *)arg1)->GetThermalGap();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetAttributes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetAttributes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetAttributes" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (int)((MODULE const *)arg1)->GetAttributes();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetAttributes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetAttributes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetAttributes" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetAttributes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetAttributes(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Move" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Rotate" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MODULE_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Flip" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_IsLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_IsLocked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_IsLocked" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (bool)((MODULE const *)arg1)->IsLocked();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetLocked",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetLocked" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetLocked" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->SetLocked(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_IsPlaced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_IsPlaced",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_IsPlaced" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (bool)((MODULE const *)arg1)->IsPlaced();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetIsPlaced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetIsPlaced",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetIsPlaced" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetIsPlaced" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->SetIsPlaced(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetLastEditTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetLastEditTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetLastEditTime" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_SetLastEditTime" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try{
      (arg1)->SetLastEditTime(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetLastEditTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetLastEditTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetLastEditTime" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (long)((MODULE const *)arg1)->GetLastEditTime();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Read_GPCB_Descr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_Read_GPCB_Descr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Read_GPCB_Descr" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (bool)(arg1)->Read_GPCB_Descr((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MODULE_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Draw" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MODULE_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MODULE_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MODULE_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Draw" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MODULE_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MODULE_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MODULE_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MODULE::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    MODULE::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_Draw3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  EDA_3D_CANVAS *arg2 = (EDA_3D_CANVAS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_Draw3D",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Draw3D" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_3D_CANVAS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_Draw3D" "', argument " "2"" of type '" "EDA_3D_CANVAS *""'"); 
  }
  arg2 = reinterpret_cast< EDA_3D_CANVAS * >(argp2);
  {
    try{
      (arg1)->Draw3D(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_DrawEdgesOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  wxPoint *arg4 = 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MODULE_DrawEdgesOnly",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_DrawEdgesOnly" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_DrawEdgesOnly" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_DrawEdgesOnly" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MODULE_DrawEdgesOnly" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_DrawEdgesOnly" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MODULE_DrawEdgesOnly" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try{
      (arg1)->DrawEdgesOnly(arg2,arg3,(wxPoint const &)*arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_DrawAncre(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  wxPoint *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:MODULE_DrawAncre",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_DrawAncre" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_DrawAncre" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_DrawAncre" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MODULE_DrawAncre" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_DrawAncre" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MODULE_DrawAncre" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "MODULE_DrawAncre" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try{
      (arg1)->DrawAncre(arg2,arg3,(wxPoint const &)*arg4,arg5,arg6);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_DisplayInfo" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_HitTest" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_HitTest" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  {
    try{
      result = (bool)((MODULE const *)arg1)->HitTest((EDA_RECT const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MODULE::HitTest(wxPoint const &)\n"
    "    MODULE::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_GetReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetReference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetReference" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (wxString *) &((MODULE const *)arg1)->GetReference();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetReference",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetReference" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetReference((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetValue" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (wxString *) &(arg1)->GetValue();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_SetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_SetValue" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetValue((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_Value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Value" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *) &(arg1)->Value();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_Reference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Reference" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *) &(arg1)->Reference();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_FindPadByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_FindPadByName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_FindPadByName" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (D_PAD *)((MODULE const *)arg1)->FindPadByName((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetPad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_GetPad",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetPad" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MODULE_GetPad" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (D_PAD *)(arg1)->GetPad((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetPad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_GetPad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetPad" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (D_PAD *)(arg1)->GetPad((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetPad(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_GetPad__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MODULE_GetPad__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_GetPad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MODULE::GetPad(wxPoint const &,int)\n"
    "    MODULE::GetPad(wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_GetPadCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetPadCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetPadCount" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (unsigned int)((MODULE const *)arg1)->GetPadCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Add3DModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  S3D_MASTER *arg2 = (S3D_MASTER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_Add3DModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Add3DModel" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_S3D_MASTER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_Add3DModel" "', argument " "2"" of type '" "S3D_MASTER *""'"); 
  }
  arg2 = reinterpret_cast< S3D_MASTER * >(argp2);
  {
    try{
      (arg1)->Add3DModel(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_AddPad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_AddPad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_AddPad" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_AddPad" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      (arg1)->AddPad(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Visit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MODULE_Visit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Visit" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_Visit" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_Visit" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MODULE_Visit" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  {
    try{
      result = (SEARCH_RESULT)(arg1)->Visit(arg2,(void const *)arg3,(KICAD_T const (*))arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetClass" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = ((MODULE const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetSelectMenuText" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = ((MODULE const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_GetMenuImage" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = ((MODULE const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_Clone" "', argument " "1"" of type '" "MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((MODULE const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MODULE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MODULE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GetTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  wxPoint *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GetTrace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTrace" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetTrace" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetTrace" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetTrace" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetTrace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (TRACK *)GetTrace(arg1,arg2,(wxPoint const &)*arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_Width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_m_Width_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_Width_set" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_m_Width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Width = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_Width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_m_Width_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_Width_get" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  result = (int) ((arg1)->m_Width);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_Start_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_m_Start_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_Start_set" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_m_Start_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (arg1)->m_Start = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_Start_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_m_Start_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_Start_get" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  result = (wxPoint *)& ((arg1)->m_Start);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_End_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_m_End_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_End_set" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_m_End_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (arg1)->m_End = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_End_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_m_End_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_End_get" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  result = (wxPoint *)& ((arg1)->m_End);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_Shape_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_m_Shape_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_Shape_set" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_m_Shape_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Shape = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_Shape_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_m_Shape_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_Shape_get" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  result = (int) ((arg1)->m_Shape);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_start_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_start_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_start_set" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_start_set" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  if (arg1) (arg1)->start = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_start_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_CONNECTED_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_start_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_start_get" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  result = (BOARD_CONNECTED_ITEM *) ((arg1)->start);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_end_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_end_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_end_set" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_end_set" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  if (arg1) (arg1)->end = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_end_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_CONNECTED_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_end_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_end_get" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  result = (BOARD_CONNECTED_ITEM *) ((arg1)->end);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_Param_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_m_Param_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_Param_set" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_m_Param_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->m_Param = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_m_Param_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_m_Param_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_m_Param_get" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  result = (double) ((arg1)->m_Param);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TRACK__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  KICAD_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TRACK",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TRACK" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TRACK" "', argument " "2"" of type '" "KICAD_T""'");
  } 
  arg2 = static_cast< KICAD_T >(val2);
  {
    try{
      result = (TRACK *)new TRACK(arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TRACK__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TRACK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TRACK" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (TRACK *)new TRACK(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TRACK(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TRACK__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TRACK__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TRACK'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::TRACK(BOARD_ITEM *,KICAD_T)\n"
    "    TRACK::TRACK(BOARD_ITEM *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_Next" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (TRACK *)((TRACK const *)arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_Back" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (TRACK *)((TRACK const *)arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_Move" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_Rotate" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRACK_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_Flip" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_SetPosition" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetPosition" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (wxPoint *) &((TRACK const *)arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_SetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_SetWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_SetWidth" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_SetWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetWidth" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (int)((TRACK const *)arg1)->GetWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_SetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_SetEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_SetEnd" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetEnd((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetEnd" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (wxPoint *) &((TRACK const *)arg1)->GetEnd();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_SetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_SetStart",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_SetStart" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_SetStart" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_SetStart" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetStart((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetStart" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (wxPoint *) &((TRACK const *)arg1)->GetStart();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetBoundingBox" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = ((TRACK const *)arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetBestInsertPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  BOARD *arg2 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_GetBestInsertPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetBestInsertPoint" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_GetBestInsertPoint" "', argument " "2"" of type '" "BOARD *""'"); 
  }
  arg2 = reinterpret_cast< BOARD * >(argp2);
  {
    try{
      result = (TRACK *)(arg1)->GetBestInsertPoint(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetStartNetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_GetStartNetCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetStartNetCode" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_GetStartNetCode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (TRACK *)(arg1)->GetStartNetCode(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetEndNetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_GetEndNetCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetEndNetCode" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_GetEndNetCode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (TRACK *)(arg1)->GetEndNetCode(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetLength" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (double)((TRACK const *)arg1)->GetLength();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TRACK_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_Draw" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TRACK_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_Draw" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TRACK_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TRACK_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    TRACK::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_GetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetShape" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (int)((TRACK const *)arg1)->GetShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_SetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_SetShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_SetShape" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_SetShape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_TransformShapeWithClearanceToPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  std::vector< CPolyPt,std::allocator< CPolyPt > > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TRACK_TransformShapeWithClearanceToPolygon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_TransformShapeWithClearanceToPolygon" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< CPolyPt,std::allocator< CPolyPt > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRACK_TransformShapeWithClearanceToPolygon" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_TransformShapeWithClearanceToPolygon" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TRACK_TransformShapeWithClearanceToPolygon" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try{
      (arg1)->TransformShapeWithClearanceToPolygon(*arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_SetDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_SetDrill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_SetDrill" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_SetDrill" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetDrill(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetDrill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetDrill" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (int)((TRACK const *)arg1)->GetDrill();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetDrillValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetDrillValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetDrillValue" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (int)((TRACK const *)arg1)->GetDrillValue();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_SetDrillDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_SetDrillDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_SetDrillDefault" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      (arg1)->SetDrillDefault();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_IsDrillDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_IsDrillDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_IsDrillDefault" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (bool)(arg1)->IsDrillDefault();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_ReturnMaskLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_ReturnMaskLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_ReturnMaskLayer" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (int)((TRACK const *)arg1)->ReturnMaskLayer();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_IsPointOnEnds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_IsPointOnEnds",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_IsPointOnEnds" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRACK_IsPointOnEnds" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (int)(arg1)->IsPointOnEnds((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_IsPointOnEnds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_IsPointOnEnds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_IsPointOnEnds" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (int)(arg1)->IsPointOnEnds((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_IsPointOnEnds(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_IsPointOnEnds__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TRACK_IsPointOnEnds__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_IsPointOnEnds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::IsPointOnEnds(wxPoint const &,int)\n"
    "    TRACK::IsPointOnEnds(wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_IsNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_IsNull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_IsNull" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (bool)(arg1)->IsNull();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_DisplayInfo" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_DisplayInfoBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_DisplayInfoBase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_DisplayInfoBase" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_DisplayInfoBase" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfoBase(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_ShowWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_ShowWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_ShowWidth" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = ((TRACK const *)arg1)->ShowWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_Visit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_Visit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_Visit" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_Visit" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_Visit" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TRACK_Visit" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  {
    try{
      result = (SEARCH_RESULT)(arg1)->Visit(arg2,(void const *)arg3,(KICAD_T const (*))arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_HitTest" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_HitTest" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  {
    try{
      result = (bool)((TRACK const *)arg1)->HitTest((EDA_RECT const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::HitTest(wxPoint const &)\n"
    "    TRACK::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_GetVia__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_GetVia",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetVia" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRACK_GetVia" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (TRACK *)(arg1)->GetVia((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetVia__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_GetVia",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetVia" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (TRACK *)(arg1)->GetVia((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetVia__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  wxPoint *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_GetVia",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetVia" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_GetVia" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_GetVia" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_GetVia" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_GetVia" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (TRACK *)(arg1)->GetVia(arg2,(wxPoint const &)*arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetVia(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_GetVia__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TRACK_GetVia__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TRACK, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wxPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TRACK_GetVia__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_GetVia'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::GetVia(wxPoint const &,int)\n"
    "    TRACK::GetVia(wxPoint const &)\n"
    "    TRACK::GetVia(TRACK *,wxPoint const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_GetTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  TRACK *arg3 = (TRACK *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_GetTrace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetTrace" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_GetTrace" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_GetTrace" "', argument " "3"" of type '" "TRACK *""'"); 
  }
  arg3 = reinterpret_cast< TRACK * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_GetTrace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (TRACK *)(arg1)->GetTrace(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetEndSegments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  int arg2 ;
  TRACK **arg3 = (TRACK **) 0 ;
  TRACK **arg4 = (TRACK **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_GetEndSegments",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetEndSegments" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_GetEndSegments" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_GetEndSegments" "', argument " "3"" of type '" "TRACK **""'"); 
  }
  arg3 = reinterpret_cast< TRACK ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TRACK_GetEndSegments" "', argument " "4"" of type '" "TRACK **""'"); 
  }
  arg4 = reinterpret_cast< TRACK ** >(argp4);
  {
    try{
      result = (int)(arg1)->GetEndSegments(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetClass" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = ((TRACK const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetClearance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_GetClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetClearance" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_GetClearance" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  {
    try{
      result = (int)((TRACK const *)arg1)->GetClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetClearance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetClearance" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (int)((TRACK const *)arg1)->GetClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetClearance(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TRACK_GetClearance__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TRACK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_GetClearance__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_GetClearance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::GetClearance(BOARD_CONNECTED_ITEM *) const\n"
    "    TRACK::GetClearance() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetSelectMenuText" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = ((TRACK const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_GetMenuImage" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = ((TRACK const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_Clone" "', argument " "1"" of type '" "TRACK const *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((TRACK const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TRACK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TRACK *arg1 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TRACK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TRACK, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TRACK" "', argument " "1"" of type '" "TRACK *""'"); 
  }
  arg1 = reinterpret_cast< TRACK * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TRACK_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TRACK, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SEGZONE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SEGZONE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SEGZONE" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (SEGZONE *)new SEGZONE(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGZONE *arg1 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_GetClass" "', argument " "1"" of type '" "SEGZONE const *""'"); 
  }
  arg1 = reinterpret_cast< SEGZONE * >(argp1);
  {
    try{
      result = ((SEGZONE const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGZONE *arg1 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_Next" "', argument " "1"" of type '" "SEGZONE const *""'"); 
  }
  arg1 = reinterpret_cast< SEGZONE * >(argp1);
  {
    try{
      result = (SEGZONE *)((SEGZONE const *)arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGZONE *arg1 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_GetSelectMenuText" "', argument " "1"" of type '" "SEGZONE const *""'"); 
  }
  arg1 = reinterpret_cast< SEGZONE * >(argp1);
  {
    try{
      result = ((SEGZONE const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGZONE *arg1 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_GetMenuImage" "', argument " "1"" of type '" "SEGZONE const *""'"); 
  }
  arg1 = reinterpret_cast< SEGZONE * >(argp1);
  {
    try{
      result = ((SEGZONE const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGZONE *arg1 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_Clone" "', argument " "1"" of type '" "SEGZONE const *""'"); 
  }
  arg1 = reinterpret_cast< SEGZONE * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((SEGZONE const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SEGZONE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGZONE *arg1 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SEGZONE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGZONE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SEGZONE" "', argument " "1"" of type '" "SEGZONE *""'"); 
  }
  arg1 = reinterpret_cast< SEGZONE * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SEGZONE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SEGZONE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SEGVIA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGVIA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SEGVIA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SEGVIA" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (SEGVIA *)new SEGVIA(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGVIA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SEGVIA_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_Draw" "', argument " "1"" of type '" "SEGVIA *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGVIA_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGVIA_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SEGVIA_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SEGVIA_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGVIA_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SEGVIA_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_Draw" "', argument " "1"" of type '" "SEGVIA *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGVIA_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGVIA_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SEGVIA_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SEGVIA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SEGVIA_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SEGVIA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_SEGVIA_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGVIA_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SEGVIA::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    SEGVIA::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGVIA_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGVIA_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_IsOnLayer" "', argument " "1"" of type '" "SEGVIA const *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGVIA_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((SEGVIA const *)arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_SetLayerPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGVIA_SetLayerPair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_SetLayerPair" "', argument " "1"" of type '" "SEGVIA *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGVIA_SetLayerPair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SEGVIA_SetLayerPair" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      (arg1)->SetLayerPair(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_ReturnLayerPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGVIA_ReturnLayerPair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_ReturnLayerPair" "', argument " "1"" of type '" "SEGVIA const *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGVIA_ReturnLayerPair" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGVIA_ReturnLayerPair" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try{
      ((SEGVIA const *)arg1)->ReturnLayerPair(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGVIA_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_GetPosition" "', argument " "1"" of type '" "SEGVIA const *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  {
    try{
      result = (wxPoint *) &((SEGVIA const *)arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGVIA_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_SetPosition" "', argument " "1"" of type '" "SEGVIA *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGVIA_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGVIA_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGVIA_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_GetClass" "', argument " "1"" of type '" "SEGVIA const *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  {
    try{
      result = ((SEGVIA const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGVIA_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_GetSelectMenuText" "', argument " "1"" of type '" "SEGVIA const *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  {
    try{
      result = ((SEGVIA const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGVIA_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_GetMenuImage" "', argument " "1"" of type '" "SEGVIA const *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  {
    try{
      result = ((SEGVIA const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGVIA_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGVIA_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGVIA_Clone" "', argument " "1"" of type '" "SEGVIA const *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((SEGVIA const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SEGVIA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEGVIA *arg1 = (SEGVIA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SEGVIA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEGVIA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SEGVIA" "', argument " "1"" of type '" "SEGVIA *""'"); 
  }
  arg1 = reinterpret_cast< SEGVIA * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SEGVIA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SEGVIA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IsValidLayerIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsValidLayerIndex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsValidLayerIndex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try{
      result = (bool)IsValidLayerIndex(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsValidCopperLayerIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsValidCopperLayerIndex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsValidCopperLayerIndex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try{
      result = (bool)IsValidCopperLayerIndex(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsValidNonCopperLayerIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsValidNonCopperLayerIndex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsValidNonCopperLayerIndex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try{
      result = (bool)IsValidNonCopperLayerIndex(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_DrawPanel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_DrawPanel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_DrawPanel_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_DRAWINFO_m_DrawPanel_set" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  if (arg1) (arg1)->m_DrawPanel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_DrawPanel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_DRAW_PANEL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_DrawPanel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_DrawPanel_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (EDA_DRAW_PANEL *) ((arg1)->m_DrawPanel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_DrawMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_DrawMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_DrawMode_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_DrawMode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_DrawMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_DrawMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_DrawMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_DrawMode_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (int) ((arg1)->m_DrawMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Color_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_Color_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Color_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_Color_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Color = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Color_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_Color_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Color_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (int) ((arg1)->m_Color);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_HoleColor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_HoleColor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_HoleColor_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_HoleColor_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_HoleColor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_HoleColor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_HoleColor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_HoleColor_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (int) ((arg1)->m_HoleColor);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_NPHoleColor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_NPHoleColor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_NPHoleColor_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_NPHoleColor_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_NPHoleColor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_NPHoleColor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_NPHoleColor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_NPHoleColor_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (int) ((arg1)->m_NPHoleColor);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_PadClearance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_PadClearance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_PadClearance_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_PadClearance_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_PadClearance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_PadClearance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_PadClearance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_PadClearance_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (int) ((arg1)->m_PadClearance);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Mask_margin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  wxSize *arg2 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_Mask_margin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Mask_margin_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_DRAWINFO_m_Mask_margin_set" "', argument " "2"" of type '" "wxSize *""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  if (arg1) (arg1)->m_Mask_margin = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Mask_margin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_Mask_margin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Mask_margin_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (wxSize *)& ((arg1)->m_Mask_margin);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Display_padnum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_Display_padnum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Display_padnum_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_Display_padnum_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_Display_padnum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Display_padnum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_Display_padnum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Display_padnum_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (bool) ((arg1)->m_Display_padnum);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Display_netname_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_Display_netname_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Display_netname_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_Display_netname_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_Display_netname = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Display_netname_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_Display_netname_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Display_netname_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (bool) ((arg1)->m_Display_netname);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_ShowPadFilled_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_ShowPadFilled_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_ShowPadFilled_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_ShowPadFilled_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_ShowPadFilled = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_ShowPadFilled_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_ShowPadFilled_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_ShowPadFilled_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (bool) ((arg1)->m_ShowPadFilled);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_ShowNCMark_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_ShowNCMark_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_ShowNCMark_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_ShowNCMark_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_ShowNCMark = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_ShowNCMark_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_ShowNCMark_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_ShowNCMark_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (bool) ((arg1)->m_ShowNCMark);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_ShowNotPlatedHole_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_ShowNotPlatedHole_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_ShowNotPlatedHole_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_ShowNotPlatedHole_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_ShowNotPlatedHole = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_ShowNotPlatedHole_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_ShowNotPlatedHole_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_ShowNotPlatedHole_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (bool) ((arg1)->m_ShowNotPlatedHole);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_IsPrinting_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_IsPrinting_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_IsPrinting_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_DRAWINFO_m_IsPrinting_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_IsPrinting = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_IsPrinting_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_IsPrinting_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_IsPrinting_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (bool) ((arg1)->m_IsPrinting);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_DRAWINFO_m_Offset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Offset_set" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_DRAWINFO_m_Offset_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (arg1)->m_Offset = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_DRAWINFO_m_Offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_DRAWINFO_m_Offset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_DRAWINFO_m_Offset_get" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  result = (wxPoint *)& ((arg1)->m_Offset);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PAD_DRAWINFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PAD_DRAWINFO")) SWIG_fail;
  {
    try{
      result = (PAD_DRAWINFO *)new PAD_DRAWINFO();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PAD_DRAWINFO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PAD_DRAWINFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PAD_DRAWINFO *arg1 = (PAD_DRAWINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PAD_DRAWINFO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PAD_DRAWINFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PAD_DRAWINFO" "', argument " "1"" of type '" "PAD_DRAWINFO *""'"); 
  }
  arg1 = reinterpret_cast< PAD_DRAWINFO * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PAD_DRAWINFO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PAD_DRAWINFO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_D_PAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_D_PAD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_D_PAD" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (D_PAD *)new D_PAD(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_Copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_Copy" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_Copy" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      (arg1)->Copy(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_Next" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (D_PAD *)((D_PAD const *)arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetParent" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (MODULE *)((D_PAD const *)arg1)->GetParent();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetPadName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetPadName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetPadName" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetPadName((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetPadName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetPadName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetPadName" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = ((D_PAD const *)arg1)->GetPadName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_PadNameEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_PadNameEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_PadNameEqual" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_PadNameEqual" "', argument " "2"" of type '" "D_PAD const *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      result = (bool)((D_PAD const *)arg1)->PadNameEqual((D_PAD const *)arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetNetname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetNetname",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetNetname" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetNetname((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetNetname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetNetname",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetNetname" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (wxString *) &((D_PAD const *)arg1)->GetNetname();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetShortNetname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetShortNetname",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetShortNetname" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (wxString *) &((D_PAD const *)arg1)->GetShortNetname();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PAD_SHAPE_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetShape" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (PAD_SHAPE_T)((D_PAD const *)arg1)->GetShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  PAD_SHAPE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetShape" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetShape" "', argument " "2"" of type '" "PAD_SHAPE_T""'");
  } 
  arg2 = static_cast< PAD_SHAPE_T >(val2);
  {
    try{
      (arg1)->SetShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetPosition" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetPosition" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (wxPoint *) &((D_PAD const *)arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetY" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetY(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetX" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetX(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetPos0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetPos0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetPos0" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_SetPos0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_SetPos0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPos0((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetPos0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetPos0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetPos0" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (wxPoint *) &((D_PAD const *)arg1)->GetPos0();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetY0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetY0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetY0" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetY0" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetY0(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetX0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetX0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetX0" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetX0" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetX0(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetSize" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_SetSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_SetSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      (arg1)->SetSize((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetSize" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (wxSize *) &((D_PAD const *)arg1)->GetSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetDelta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetDelta" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_SetDelta" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_SetDelta" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      (arg1)->SetDelta((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetDelta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetDelta" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (wxSize *) &((D_PAD const *)arg1)->GetDelta();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetDrillSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetDrillSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetDrillSize" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_SetDrillSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_SetDrillSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      (arg1)->SetDrillSize((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetDrillSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetDrillSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetDrillSize" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (wxSize *) &((D_PAD const *)arg1)->GetDrillSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetOffset" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_SetOffset" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_SetOffset" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetOffset((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetOffset" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (wxPoint *) &((D_PAD const *)arg1)->GetOffset();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_Flip" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_Flip" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->Flip(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetOrientation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetOrientation" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetOrientation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      (arg1)->SetOrientation(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetOrientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetOrientation" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (double)((D_PAD const *)arg1)->GetOrientation();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetDrillShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  PAD_SHAPE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetDrillShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetDrillShape" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetDrillShape" "', argument " "2"" of type '" "PAD_SHAPE_T""'");
  } 
  arg2 = static_cast< PAD_SHAPE_T >(val2);
  {
    try{
      (arg1)->SetDrillShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetDrillShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PAD_SHAPE_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetDrillShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetDrillShape" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (PAD_SHAPE_T)((D_PAD const *)arg1)->GetDrillShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetLayerMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetLayerMask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetLayerMask" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetLayerMask" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetLayerMask(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetLayerMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetLayerMask",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetLayerMask" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetLayerMask();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  PAD_ATTR_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetAttribute" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetAttribute" "', argument " "2"" of type '" "PAD_ATTR_T""'");
  } 
  arg2 = static_cast< PAD_ATTR_T >(val2);
  {
    try{
      (arg1)->SetAttribute(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PAD_ATTR_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetAttribute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetAttribute" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (PAD_ATTR_T)((D_PAD const *)arg1)->GetAttribute();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetDieLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetDieLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetDieLength" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetDieLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetDieLength(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetDieLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetDieLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetDieLength" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetDieLength();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetLocalSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetLocalSolderMaskMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetLocalSolderMaskMargin" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetLocalSolderMaskMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetLocalSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetLocalSolderMaskMargin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetLocalSolderMaskMargin" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetLocalSolderMaskMargin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetLocalSolderMaskMargin(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetLocalClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetLocalClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetLocalClearance" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetLocalClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetLocalClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetLocalClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetLocalClearance" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetLocalClearance" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetLocalClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetLocalSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetLocalSolderPasteMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetLocalSolderPasteMargin" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetLocalSolderPasteMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetLocalSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetLocalSolderPasteMargin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetLocalSolderPasteMargin" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetLocalSolderPasteMargin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetLocalSolderPasteMargin(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetLocalSolderPasteMarginRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetLocalSolderPasteMarginRatio",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetLocalSolderPasteMarginRatio" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (double)((D_PAD const *)arg1)->GetLocalSolderPasteMarginRatio();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetLocalSolderPasteMarginRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetLocalSolderPasteMarginRatio",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetLocalSolderPasteMarginRatio" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetLocalSolderPasteMarginRatio" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      (arg1)->SetLocalSolderPasteMarginRatio(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_TransformShapeWithClearanceToPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  std::vector< CPolyPt,std::allocator< CPolyPt > > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:D_PAD_TransformShapeWithClearanceToPolygon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_TransformShapeWithClearanceToPolygon" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< CPolyPt,std::allocator< CPolyPt > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "D_PAD_TransformShapeWithClearanceToPolygon" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "D_PAD_TransformShapeWithClearanceToPolygon" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "D_PAD_TransformShapeWithClearanceToPolygon" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try{
      (arg1)->TransformShapeWithClearanceToPolygon(*arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetClearance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_GetClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetClearance" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_GetClearance" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetClearance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetClearance" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetClearance(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_D_PAD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_D_PAD_GetClearance__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_D_PAD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_D_PAD_GetClearance__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'D_PAD_GetClearance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    D_PAD::GetClearance(BOARD_CONNECTED_ITEM *) const\n"
    "    D_PAD::GetClearance() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetSolderMaskMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetSolderMaskMargin" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)(arg1)->GetSolderMaskMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxSize > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetSolderPasteMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetSolderPasteMargin" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (arg1)->GetSolderPasteMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new wxSize(static_cast< const wxSize& >(result))), SWIGTYPE_p_wxSize, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetZoneConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  ZoneConnection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetZoneConnection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetZoneConnection" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZoneConnection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_SetZoneConnection" "', argument " "2"" of type '" "ZoneConnection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_SetZoneConnection" "', argument " "2"" of type '" "ZoneConnection""'");
    } else {
      ZoneConnection * temp = reinterpret_cast< ZoneConnection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (arg1)->SetZoneConnection(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetZoneConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZoneConnection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetZoneConnection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetZoneConnection" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = ((D_PAD const *)arg1)->GetZoneConnection();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new ZoneConnection(static_cast< const ZoneConnection& >(result))), SWIGTYPE_p_ZoneConnection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetThermalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetThermalWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetThermalWidth" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetThermalWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetThermalWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetThermalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetThermalWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetThermalWidth" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetThermalWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetThermalGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetThermalGap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetThermalGap" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetThermalGap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetThermalGap(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetThermalGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetThermalGap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetThermalGap" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetThermalGap();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:D_PAD_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_Draw" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "D_PAD_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "D_PAD_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "D_PAD_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:D_PAD_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_Draw" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "D_PAD_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "D_PAD_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_D_PAD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_D_PAD_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_D_PAD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_D_PAD_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'D_PAD_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    D_PAD::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    D_PAD::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_D_PAD_Draw3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  EDA_3D_CANVAS *arg2 = (EDA_3D_CANVAS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_Draw3D",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_Draw3D" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_3D_CANVAS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_Draw3D" "', argument " "2"" of type '" "EDA_3D_CANVAS *""'"); 
  }
  arg2 = reinterpret_cast< EDA_3D_CANVAS * >(argp2);
  {
    try{
      (arg1)->Draw3D(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_DrawShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  EDA_RECT *arg2 = (EDA_RECT *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  PAD_DRAWINFO *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:D_PAD_DrawShape",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_DrawShape" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_DrawShape" "', argument " "2"" of type '" "EDA_RECT *""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "D_PAD_DrawShape" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_PAD_DRAWINFO,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "D_PAD_DrawShape" "', argument " "4"" of type '" "PAD_DRAWINFO &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_DrawShape" "', argument " "4"" of type '" "PAD_DRAWINFO &""'"); 
  }
  arg4 = reinterpret_cast< PAD_DRAWINFO * >(argp4);
  {
    try{
      (arg1)->DrawShape(arg2,arg3,*arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_BuildPadPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxPoint *arg2 ;
  SwigValueWrapper< wxSize > arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:D_PAD_BuildPadPolygon",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_BuildPadPolygon" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_BuildPadPolygon" "', argument " "2"" of type '" "wxPoint [4]""'"); 
  } 
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxSize,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "D_PAD_BuildPadPolygon" "', argument " "3"" of type '" "wxSize""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_BuildPadPolygon" "', argument " "3"" of type '" "wxSize""'");
    } else {
      wxSize * temp = reinterpret_cast< wxSize * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "D_PAD_BuildPadPolygon" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      ((D_PAD const *)arg1)->BuildPadPolygon(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_BuildSegmentFromOvalShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxPoint *arg2 = 0 ;
  wxPoint *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:D_PAD_BuildSegmentFromOvalShape",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_BuildSegmentFromOvalShape" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_BuildSegmentFromOvalShape" "', argument " "2"" of type '" "wxPoint &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_BuildSegmentFromOvalShape" "', argument " "2"" of type '" "wxPoint &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "D_PAD_BuildSegmentFromOvalShape" "', argument " "3"" of type '" "wxPoint &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_BuildSegmentFromOvalShape" "', argument " "3"" of type '" "wxPoint &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "D_PAD_BuildSegmentFromOvalShape" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (int)((D_PAD const *)arg1)->BuildSegmentFromOvalShape(*arg2,*arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_ReturnStringPadName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_ReturnStringPadName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_ReturnStringPadName" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      ((D_PAD const *)arg1)->ReturnStringPadName(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetBoundingRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetBoundingRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetBoundingRadius" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)(arg1)->GetBoundingRadius();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_ReturnShapePos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_ReturnShapePos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_ReturnShapePos" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = ((D_PAD const *)arg1)->ReturnShapePos();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new wxPoint(static_cast< const wxPoint& >(result))), SWIGTYPE_p_wxPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetSubRatsnest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetSubRatsnest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetSubRatsnest" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (int)((D_PAD const *)arg1)->GetSubRatsnest();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_SetSubRatsnest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_SetSubRatsnest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_SetSubRatsnest" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_SetSubRatsnest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetSubRatsnest(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_DisplayInfo" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_IsOnLayer" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "D_PAD_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((D_PAD const *)arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_HitTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_HitTest" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetClass" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = ((D_PAD const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetBoundingBox" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = ((D_PAD const *)arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_Compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_Compare",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_Compare" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_Compare" "', argument " "2"" of type '" "D_PAD const *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      result = (int)D_PAD::Compare((D_PAD const *)arg1,(D_PAD const *)arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_Move" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "D_PAD_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetSelectMenuText" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = ((D_PAD const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_GetMenuImage" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = ((D_PAD const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_ShowPadShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_ShowPadShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_ShowPadShape" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = ((D_PAD const *)arg1)->ShowPadShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_ShowPadAttr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_ShowPadAttr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_ShowPadAttr" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = ((D_PAD const *)arg1)->ShowPadAttr();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_AppendConfigs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  PARAM_CFG_ARRAY *arg2 = (PARAM_CFG_ARRAY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:D_PAD_AppendConfigs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_AppendConfigs" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PARAM_CFG_ARRAY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "D_PAD_AppendConfigs" "', argument " "2"" of type '" "PARAM_CFG_ARRAY *""'"); 
  }
  arg2 = reinterpret_cast< PARAM_CFG_ARRAY * >(argp2);
  {
    try{
      (arg1)->AppendConfigs(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_D_PAD_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:D_PAD_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_PAD_Clone" "', argument " "1"" of type '" "D_PAD const *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((D_PAD const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_D_PAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  D_PAD *arg1 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_D_PAD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_D_PAD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_D_PAD" "', argument " "1"" of type '" "D_PAD *""'"); 
  }
  arg1 = reinterpret_cast< D_PAD * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *D_PAD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_D_PAD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_m_Status_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RATSNEST_ITEM_m_Status_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_m_Status_set" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RATSNEST_ITEM_m_Status_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Status = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_m_Status_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RATSNEST_ITEM_m_Status_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_m_Status_get" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  result = (int) ((arg1)->m_Status);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_m_PadStart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RATSNEST_ITEM_m_PadStart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_m_PadStart_set" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RATSNEST_ITEM_m_PadStart_set" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  if (arg1) (arg1)->m_PadStart = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_m_PadStart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RATSNEST_ITEM_m_PadStart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_m_PadStart_get" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  result = (D_PAD *) ((arg1)->m_PadStart);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_m_PadEnd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RATSNEST_ITEM_m_PadEnd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_m_PadEnd_set" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RATSNEST_ITEM_m_PadEnd_set" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  if (arg1) (arg1)->m_PadEnd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_m_PadEnd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RATSNEST_ITEM_m_PadEnd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_m_PadEnd_get" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  result = (D_PAD *) ((arg1)->m_PadEnd);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_m_Lenght_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RATSNEST_ITEM_m_Lenght_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_m_Lenght_set" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RATSNEST_ITEM_m_Lenght_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Lenght = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_m_Lenght_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RATSNEST_ITEM_m_Lenght_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_m_Lenght_get" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  result = (int) ((arg1)->m_Lenght);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RATSNEST_ITEM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RATSNEST_ITEM")) SWIG_fail;
  {
    try{
      result = (RATSNEST_ITEM *)new RATSNEST_ITEM();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RATSNEST_ITEM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_GetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RATSNEST_ITEM_GetNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_GetNet" "', argument " "1"" of type '" "RATSNEST_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  {
    try{
      result = (int)((RATSNEST_ITEM const *)arg1)->GetNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_SetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RATSNEST_ITEM_SetNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_SetNet" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RATSNEST_ITEM_SetNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RATSNEST_ITEM_IsVisible",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_IsVisible" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  {
    try{
      result = (bool)(arg1)->IsVisible();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_IsActive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RATSNEST_ITEM_IsActive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_IsActive" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  {
    try{
      result = (bool)(arg1)->IsActive();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_IsLocal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RATSNEST_ITEM_IsLocal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_IsLocal" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  {
    try{
      result = (bool)(arg1)->IsLocal();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RATSNEST_ITEM_Draw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RATSNEST_ITEM_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RATSNEST_ITEM_Draw" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RATSNEST_ITEM_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RATSNEST_ITEM_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RATSNEST_ITEM_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RATSNEST_ITEM_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RATSNEST_ITEM_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RATSNEST_ITEM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RATSNEST_ITEM *arg1 = (RATSNEST_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RATSNEST_ITEM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RATSNEST_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RATSNEST_ITEM" "', argument " "1"" of type '" "RATSNEST_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< RATSNEST_ITEM * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RATSNEST_ITEM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RATSNEST_ITEM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NETINFO_LIST(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETINFO_LIST *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NETINFO_LIST",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NETINFO_LIST" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (NETINFO_LIST *)new NETINFO_LIST(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETINFO_LIST, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NETINFO_LIST(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_LIST *arg1 = (NETINFO_LIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NETINFO_LIST",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_LIST, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NETINFO_LIST" "', argument " "1"" of type '" "NETINFO_LIST *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_LIST * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_LIST_GetNetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_LIST *arg1 = (NETINFO_LIST *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NETINFO_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_LIST_GetNetItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_LIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_LIST_GetNetItem" "', argument " "1"" of type '" "NETINFO_LIST const *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_LIST * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETINFO_LIST_GetNetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (NETINFO_ITEM *)((NETINFO_LIST const *)arg1)->GetNetItem(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_LIST_GetNetCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_LIST *arg1 = (NETINFO_LIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_LIST_GetNetCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_LIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_LIST_GetNetCount" "', argument " "1"" of type '" "NETINFO_LIST const *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_LIST * >(argp1);
  {
    try{
      result = (unsigned int)((NETINFO_LIST const *)arg1)->GetNetCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_LIST_AppendNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_LIST *arg1 = (NETINFO_LIST *) 0 ;
  NETINFO_ITEM *arg2 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_LIST_AppendNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_LIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_LIST_AppendNet" "', argument " "1"" of type '" "NETINFO_LIST *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_LIST * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETINFO_LIST_AppendNet" "', argument " "2"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< NETINFO_ITEM * >(argp2);
  {
    try{
      (arg1)->AppendNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_LIST_GetPadCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_LIST *arg1 = (NETINFO_LIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_LIST_GetPadCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_LIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_LIST_GetPadCount" "', argument " "1"" of type '" "NETINFO_LIST const *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_LIST * >(argp1);
  {
    try{
      result = (unsigned int)((NETINFO_LIST const *)arg1)->GetPadCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_LIST_GetPad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_LIST *arg1 = (NETINFO_LIST *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_LIST_GetPad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_LIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_LIST_GetPad" "', argument " "1"" of type '" "NETINFO_LIST const *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_LIST * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETINFO_LIST_GetPad" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try{
      result = (D_PAD *)((NETINFO_LIST const *)arg1)->GetPad(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NETINFO_LIST_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NETINFO_LIST, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_NbNodes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_m_NbNodes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_NbNodes_set" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETINFO_ITEM_m_NbNodes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_NbNodes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_NbNodes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_m_NbNodes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_NbNodes_get" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  result = (int) ((arg1)->m_NbNodes);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_NbLink_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_m_NbLink_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_NbLink_set" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETINFO_ITEM_m_NbLink_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_NbLink = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_NbLink_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_m_NbLink_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_NbLink_get" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  result = (int) ((arg1)->m_NbLink);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_NbNoconn_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_m_NbNoconn_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_NbNoconn_set" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETINFO_ITEM_m_NbNoconn_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_NbNoconn = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_NbNoconn_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_m_NbNoconn_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_NbNoconn_get" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  result = (int) ((arg1)->m_NbNoconn);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_Flag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_m_Flag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_Flag_set" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETINFO_ITEM_m_Flag_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Flag = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_Flag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_m_Flag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_Flag_get" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  result = (int) ((arg1)->m_Flag);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_PadInNetList_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *arg2 = (std::vector< D_PAD *,std::allocator< D_PAD * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_m_PadInNetList_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_PadInNetList_set" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETINFO_ITEM_m_PadInNetList_set" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< D_PAD *,std::allocator< D_PAD * > > * >(argp2);
  if (arg1) (arg1)->m_PadInNetList = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_PadInNetList_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_m_PadInNetList_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_PadInNetList_get" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  result = (std::vector< D_PAD *,std::allocator< D_PAD * > > *)& ((arg1)->m_PadInNetList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_RatsnestStartIdx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_m_RatsnestStartIdx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_RatsnestStartIdx_set" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETINFO_ITEM_m_RatsnestStartIdx_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_RatsnestStartIdx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_RatsnestStartIdx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_m_RatsnestStartIdx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_RatsnestStartIdx_get" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  result = (unsigned int) ((arg1)->m_RatsnestStartIdx);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_RatsnestEndIdx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_m_RatsnestEndIdx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_RatsnestEndIdx_set" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETINFO_ITEM_m_RatsnestEndIdx_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_RatsnestEndIdx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_m_RatsnestEndIdx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_m_RatsnestEndIdx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_m_RatsnestEndIdx_get" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  result = (unsigned int) ((arg1)->m_RatsnestEndIdx);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NETINFO_ITEM__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  wxString *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  NETINFO_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_NETINFO_ITEM",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NETINFO_ITEM" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NETINFO_ITEM" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (NETINFO_ITEM *)new NETINFO_ITEM(arg1,(wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETINFO_ITEM, SWIG_POINTER_NEW |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NETINFO_ITEM__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NETINFO_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NETINFO_ITEM",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NETINFO_ITEM" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (NETINFO_ITEM *)new NETINFO_ITEM(arg1,(wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETINFO_ITEM, SWIG_POINTER_NEW |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NETINFO_ITEM__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETINFO_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NETINFO_ITEM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NETINFO_ITEM" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (NETINFO_ITEM *)new NETINFO_ITEM(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETINFO_ITEM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NETINFO_ITEM(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NETINFO_ITEM__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_new_NETINFO_ITEM__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_NETINFO_ITEM__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NETINFO_ITEM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NETINFO_ITEM::NETINFO_ITEM(BOARD_ITEM *,wxString const &,int)\n"
    "    NETINFO_ITEM::NETINFO_ITEM(BOARD_ITEM *,wxString const &)\n"
    "    NETINFO_ITEM::NETINFO_ITEM(BOARD_ITEM *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NETINFO_ITEM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NETINFO_ITEM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NETINFO_ITEM" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_SetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  NETCLASS *arg2 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_SetClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_SetClass" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETINFO_ITEM_SetClass" "', argument " "2"" of type '" "NETCLASS const *""'"); 
  }
  arg2 = reinterpret_cast< NETCLASS * >(argp2);
  {
    try{
      (arg1)->SetClass((NETCLASS const *)arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetNetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetNetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetNetClass" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = (NETCLASS *)(arg1)->GetNetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetClassName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetClassName" "', argument " "1"" of type '" "NETINFO_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = (wxString *) &((NETINFO_ITEM const *)arg1)->GetClassName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetTrackWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetTrackWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetTrackWidth" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = (int)(arg1)->GetTrackWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetViaSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetViaSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetViaSize" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = (int)(arg1)->GetViaSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetMicroViaSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetMicroViaSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetMicroViaSize" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = (int)(arg1)->GetMicroViaSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetViaDrillSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetViaDrillSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetViaDrillSize" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = (int)(arg1)->GetViaDrillSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetMicroViaDrillSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetMicroViaDrillSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetMicroViaDrillSize" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = (int)(arg1)->GetMicroViaDrillSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_GetClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetClearance" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETINFO_ITEM_GetClearance" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  {
    try{
      result = (int)(arg1)->GetClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_Draw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NETINFO_ITEM_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_Draw" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETINFO_ITEM_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NETINFO_ITEM_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NETINFO_ITEM_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "NETINFO_ITEM_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NETINFO_ITEM_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetNet" "', argument " "1"" of type '" "NETINFO_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = (int)((NETINFO_ITEM const *)arg1)->GetNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_SetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_SetNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_SetNet" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETINFO_ITEM_SetNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetNodesCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetNodesCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetNodesCount" "', argument " "1"" of type '" "NETINFO_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = (int)((NETINFO_ITEM const *)arg1)->GetNodesCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetNetname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetNetname",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetNetname" "', argument " "1"" of type '" "NETINFO_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = ((NETINFO_ITEM const *)arg1)->GetNetname();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_GetShortNetname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETINFO_ITEM_GetShortNetname",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_GetShortNetname" "', argument " "1"" of type '" "NETINFO_ITEM const *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    try{
      result = ((NETINFO_ITEM const *)arg1)->GetShortNetname();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_SetNetname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_SetNetname",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_SetNetname" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetNetname((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETINFO_ITEM_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETINFO_ITEM *arg1 = (NETINFO_ITEM *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETINFO_ITEM_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETINFO_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETINFO_ITEM_DisplayInfo" "', argument " "1"" of type '" "NETINFO_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< NETINFO_ITEM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETINFO_ITEM_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NETINFO_ITEM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NETINFO_ITEM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TEXTE_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TEXTE_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TEXTE_PCB" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (TEXTE_PCB *)new TEXTE_PCB(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_PCB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TEXTE_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TEXTE_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TEXTE_PCB" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_PCB_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_GetPosition" "', argument " "1"" of type '" "TEXTE_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  {
    try{
      result = (wxPoint *) &((TEXTE_PCB const *)arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_PCB_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_SetPosition" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_PCB_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_PCB_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_Move" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_PCB_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TEXTE_PCB_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_Rotate" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_PCB_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TEXTE_PCB_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_PCB_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_Flip" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_PCB_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  TEXTE_PCB *arg2 = (TEXTE_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_PCB_Copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_Copy" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_Copy" "', argument " "2"" of type '" "TEXTE_PCB *""'"); 
  }
  arg2 = reinterpret_cast< TEXTE_PCB * >(argp2);
  {
    try{
      (arg1)->Copy(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TEXTE_PCB_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_Draw" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TEXTE_PCB_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TEXTE_PCB_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TEXTE_PCB_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_PCB_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TEXTE_PCB_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_Draw" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TEXTE_PCB_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TEXTE_PCB_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TEXTE_PCB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TEXTE_PCB_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TEXTE_PCB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TEXTE_PCB_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TEXTE_PCB_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TEXTE_PCB::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    TEXTE_PCB::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_PCB_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_DisplayInfo" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_PCB_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_HitTest" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_PCB_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_PCB_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_HitTest" "', argument " "1"" of type '" "TEXTE_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_PCB_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  {
    try{
      result = (bool)((TEXTE_PCB const *)arg1)->HitTest((EDA_RECT const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TEXTE_PCB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TEXTE_PCB_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TEXTE_PCB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TEXTE_PCB_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TEXTE_PCB_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TEXTE_PCB::HitTest(wxPoint const &)\n"
    "    TEXTE_PCB::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_PCB_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_GetClass" "', argument " "1"" of type '" "TEXTE_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  {
    try{
      result = ((TEXTE_PCB const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_TransformShapeWithClearanceToPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  std::vector< CPolyPt,std::allocator< CPolyPt > > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TEXTE_PCB_TransformShapeWithClearanceToPolygon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_TransformShapeWithClearanceToPolygon" "', argument " "1"" of type '" "TEXTE_PCB *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_PCB_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_PCB_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< CPolyPt,std::allocator< CPolyPt > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TEXTE_PCB_TransformShapeWithClearanceToPolygon" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TEXTE_PCB_TransformShapeWithClearanceToPolygon" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TEXTE_PCB_TransformShapeWithClearanceToPolygon" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try{
      (arg1)->TransformShapeWithClearanceToPolygon(*arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_PCB_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_GetSelectMenuText" "', argument " "1"" of type '" "TEXTE_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  {
    try{
      result = ((TEXTE_PCB const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_PCB_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_GetMenuImage" "', argument " "1"" of type '" "TEXTE_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  {
    try{
      result = ((TEXTE_PCB const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_PCB_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_GetBoundingBox" "', argument " "1"" of type '" "TEXTE_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  {
    try{
      result = ((TEXTE_PCB const *)arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_PCB_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_PCB *arg1 = (TEXTE_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_PCB_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_PCB_Clone" "', argument " "1"" of type '" "TEXTE_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_PCB * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((TEXTE_PCB const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TEXTE_PCB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TEXTE_PCB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DIMENSION_m_Width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_Width_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Width_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_Width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Width = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_Width_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Width_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_Width);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_Pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Pos_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_m_Pos_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (arg1)->m_Pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_Pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Pos_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (wxPoint *)& ((arg1)->m_Pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Shape_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_Shape_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Shape_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_Shape_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Shape = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Shape_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_Shape_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Shape_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_Shape);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Unit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_Unit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Unit_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_Unit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Unit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Unit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_Unit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Unit_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_Unit);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_Value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Value_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_Value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_Value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Value_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_Value);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Text_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  TEXTE_PCB *arg2 = (TEXTE_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_Text_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Text_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_m_Text_set" "', argument " "2"" of type '" "TEXTE_PCB *""'"); 
  }
  arg2 = reinterpret_cast< TEXTE_PCB * >(argp2);
  if (arg1) (arg1)->m_Text = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_Text_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_Text_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_Text_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (TEXTE_PCB *)& ((arg1)->m_Text);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_crossBarOx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_crossBarOx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_crossBarOx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_crossBarOx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_crossBarOx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_crossBarOx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_crossBarOx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_crossBarOx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_crossBarOx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_crossBarOy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_crossBarOy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_crossBarOy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_crossBarOy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_crossBarOy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_crossBarOy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_crossBarOy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_crossBarOy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_crossBarOy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_crossBarFx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_crossBarFx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_crossBarFx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_crossBarFx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_crossBarFx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_crossBarFx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_crossBarFx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_crossBarFx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_crossBarFx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_crossBarFy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_crossBarFy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_crossBarFy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_crossBarFy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_crossBarFy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_crossBarFy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_crossBarFy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_crossBarFy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_crossBarFy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineGOx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_featureLineGOx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineGOx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_featureLineGOx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_featureLineGOx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineGOx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_featureLineGOx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineGOx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_featureLineGOx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineGOy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_featureLineGOy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineGOy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_featureLineGOy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_featureLineGOy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineGOy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_featureLineGOy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineGOy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_featureLineGOy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineGFx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_featureLineGFx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineGFx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_featureLineGFx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_featureLineGFx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineGFx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_featureLineGFx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineGFx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_featureLineGFx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineGFy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_featureLineGFy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineGFy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_featureLineGFy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_featureLineGFy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineGFy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_featureLineGFy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineGFy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_featureLineGFy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineDOx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_featureLineDOx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineDOx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_featureLineDOx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_featureLineDOx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineDOx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_featureLineDOx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineDOx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_featureLineDOx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineDOy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_featureLineDOy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineDOy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_featureLineDOy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_featureLineDOy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineDOy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_featureLineDOy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineDOy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_featureLineDOy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineDFx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_featureLineDFx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineDFx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_featureLineDFx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_featureLineDFx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineDFx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_featureLineDFx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineDFx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_featureLineDFx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineDFy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_featureLineDFy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineDFy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_featureLineDFy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_featureLineDFy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_featureLineDFy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_featureLineDFy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_featureLineDFy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_featureLineDFy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD1Ox_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowD1Ox_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD1Ox_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowD1Ox_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowD1Ox = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD1Ox_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowD1Ox_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD1Ox_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowD1Ox);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD1Oy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowD1Oy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD1Oy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowD1Oy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowD1Oy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD1Oy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowD1Oy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD1Oy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowD1Oy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD1Fx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowD1Fx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD1Fx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowD1Fx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowD1Fx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD1Fx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowD1Fx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD1Fx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowD1Fx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD1Fy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowD1Fy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD1Fy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowD1Fy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowD1Fy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD1Fy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowD1Fy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD1Fy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowD1Fy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD2Ox_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowD2Ox_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD2Ox_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowD2Ox_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowD2Ox = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD2Ox_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowD2Ox_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD2Ox_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowD2Ox);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD2Oy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowD2Oy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD2Oy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowD2Oy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowD2Oy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD2Oy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowD2Oy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD2Oy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowD2Oy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD2Fx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowD2Fx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD2Fx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowD2Fx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowD2Fx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD2Fx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowD2Fx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD2Fx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowD2Fx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD2Fy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowD2Fy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD2Fy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowD2Fy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowD2Fy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowD2Fy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowD2Fy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowD2Fy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowD2Fy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG1Ox_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowG1Ox_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG1Ox_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowG1Ox_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowG1Ox = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG1Ox_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowG1Ox_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG1Ox_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowG1Ox);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG1Oy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowG1Oy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG1Oy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowG1Oy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowG1Oy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG1Oy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowG1Oy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG1Oy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowG1Oy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG1Fx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowG1Fx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG1Fx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowG1Fx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowG1Fx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG1Fx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowG1Fx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG1Fx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowG1Fx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG1Fy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowG1Fy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG1Fy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowG1Fy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowG1Fy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG1Fy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowG1Fy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG1Fy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowG1Fy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG2Ox_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowG2Ox_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG2Ox_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowG2Ox_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowG2Ox = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG2Ox_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowG2Ox_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG2Ox_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowG2Ox);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG2Oy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowG2Oy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG2Oy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowG2Oy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowG2Oy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG2Oy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowG2Oy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG2Oy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowG2Oy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG2Fx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowG2Fx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG2Fx_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowG2Fx_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowG2Fx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG2Fx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowG2Fx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG2Fx_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowG2Fx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG2Fy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_m_arrowG2Fy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG2Fy_set" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_m_arrowG2Fy_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_arrowG2Fy = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_m_arrowG2Fy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_m_arrowG2Fy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_m_arrowG2Fy_get" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  result = (int) ((arg1)->m_arrowG2Fy);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DIMENSION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DIMENSION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DIMENSION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DIMENSION" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (DIMENSION *)new DIMENSION(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DIMENSION, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DIMENSION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DIMENSION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DIMENSION" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_GetPosition" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      result = (wxPoint *) &((DIMENSION const *)arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_SetPosition" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DIMENSION_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_SetTextSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_SetTextSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_SetTextSize" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_SetTextSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DIMENSION_SetTextSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      (arg1)->SetTextSize((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_SetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_SetLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_SetLayer" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_SetLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_SetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_SetShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_SetShape" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_SetShape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_GetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_GetShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_GetShape" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      result = (int)((DIMENSION const *)arg1)->GetShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_GetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_GetWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_GetWidth" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      result = (int)((DIMENSION const *)arg1)->GetWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_SetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_SetWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_SetWidth" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_SetWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_AdjustDimensionDetails__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_AdjustDimensionDetails",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_AdjustDimensionDetails" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DIMENSION_AdjustDimensionDetails" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->AdjustDimensionDetails(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_AdjustDimensionDetails__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_AdjustDimensionDetails",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_AdjustDimensionDetails" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      (arg1)->AdjustDimensionDetails();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_AdjustDimensionDetails(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DIMENSION, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DIMENSION_AdjustDimensionDetails__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DIMENSION, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DIMENSION_AdjustDimensionDetails__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DIMENSION_AdjustDimensionDetails'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DIMENSION::AdjustDimensionDetails(bool)\n"
    "    DIMENSION::AdjustDimensionDetails()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DIMENSION_SetText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_SetText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_SetText" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetText((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_GetText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_GetText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_GetText" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      result = ((DIMENSION const *)arg1)->GetText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  DIMENSION *arg2 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_Copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_Copy" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_Copy" "', argument " "2"" of type '" "DIMENSION *""'"); 
  }
  arg2 = reinterpret_cast< DIMENSION * >(argp2);
  {
    try{
      (arg1)->Copy(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DIMENSION_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_Draw" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DIMENSION_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DIMENSION_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DIMENSION_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DIMENSION_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DIMENSION_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_Draw" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DIMENSION_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DIMENSION_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DIMENSION, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DIMENSION_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DIMENSION, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_DIMENSION_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DIMENSION_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DIMENSION::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    DIMENSION::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DIMENSION_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_Move" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DIMENSION_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DIMENSION_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_Rotate" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DIMENSION_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DIMENSION_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_Flip" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DIMENSION_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_Mirror(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_Mirror",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_Mirror" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_Mirror" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DIMENSION_Mirror" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Mirror((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_DisplayInfo" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_HitTest" "', argument " "1"" of type '" "DIMENSION *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DIMENSION_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DIMENSION_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_HitTest" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DIMENSION_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DIMENSION_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  {
    try{
      result = (bool)((DIMENSION const *)arg1)->HitTest((EDA_RECT const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DIMENSION, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DIMENSION_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DIMENSION, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DIMENSION_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DIMENSION_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DIMENSION::HitTest(wxPoint const &)\n"
    "    DIMENSION::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DIMENSION_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_GetClass" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      result = ((DIMENSION const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_GetBoundingBox" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      result = ((DIMENSION const *)arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_GetSelectMenuText" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      result = ((DIMENSION const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_GetMenuImage" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      result = ((DIMENSION const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DIMENSION_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DIMENSION *arg1 = (DIMENSION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DIMENSION_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DIMENSION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DIMENSION_Clone" "', argument " "1"" of type '" "DIMENSION const *""'"); 
  }
  arg1 = reinterpret_cast< DIMENSION * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((DIMENSION const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DIMENSION_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DIMENSION, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DRAWSEGMENT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  KICAD_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DRAWSEGMENT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DRAWSEGMENT" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DRAWSEGMENT" "', argument " "2"" of type '" "KICAD_T""'");
  } 
  arg2 = static_cast< KICAD_T >(val2);
  {
    try{
      result = (DRAWSEGMENT *)new DRAWSEGMENT(arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DRAWSEGMENT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DRAWSEGMENT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DRAWSEGMENT" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (DRAWSEGMENT *)new DRAWSEGMENT(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DRAWSEGMENT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DRAWSEGMENT")) SWIG_fail;
  {
    try{
      result = (DRAWSEGMENT *)new DRAWSEGMENT();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DRAWSEGMENT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DRAWSEGMENT__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DRAWSEGMENT__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DRAWSEGMENT__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DRAWSEGMENT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DRAWSEGMENT::DRAWSEGMENT(BOARD_ITEM *,KICAD_T)\n"
    "    DRAWSEGMENT::DRAWSEGMENT(BOARD_ITEM *)\n"
    "    DRAWSEGMENT::DRAWSEGMENT()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DRAWSEGMENT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DRAWSEGMENT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DRAWSEGMENT" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_Next" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (DRAWSEGMENT *)((DRAWSEGMENT const *)arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_Back" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (DRAWSEGMENT *)((DRAWSEGMENT const *)arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetWidth" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DRAWSEGMENT_SetWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetWidth" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (int)((DRAWSEGMENT const *)arg1)->GetWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetAngle" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DRAWSEGMENT_SetAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      (arg1)->SetAngle(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetAngle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetAngle" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (double)((DRAWSEGMENT const *)arg1)->GetAngle();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetType" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DRAWSEGMENT_SetType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetType(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetType" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (int)((DRAWSEGMENT const *)arg1)->GetType();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  STROKE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetShape" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DRAWSEGMENT_SetShape" "', argument " "2"" of type '" "STROKE_T""'");
  } 
  arg2 = static_cast< STROKE_T >(val2);
  {
    try{
      (arg1)->SetShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STROKE_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetShape" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (STROKE_T)((DRAWSEGMENT const *)arg1)->GetShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetBezControl1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetBezControl1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetBezControl1" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_SetBezControl1" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_SetBezControl1" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetBezControl1((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetBezControl1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetBezControl1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetBezControl1" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (wxPoint *) &((DRAWSEGMENT const *)arg1)->GetBezControl1();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetBezControl2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetBezControl2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetBezControl2" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_SetBezControl2" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_SetBezControl2" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetBezControl2((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetBezControl2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetBezControl2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetBezControl2" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (wxPoint *) &((DRAWSEGMENT const *)arg1)->GetBezControl2();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetPosition" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetPosition" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (wxPoint *) &((DRAWSEGMENT const *)arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetStart" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (wxPoint *) &((DRAWSEGMENT const *)arg1)->GetStart();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetStart",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetStart" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_SetStart" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_SetStart" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetStart((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetStartY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetStartY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetStartY" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DRAWSEGMENT_SetStartY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetStartY(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetStartX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetStartX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetStartX" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DRAWSEGMENT_SetStartX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetStartX(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetEnd" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (wxPoint *) &((DRAWSEGMENT const *)arg1)->GetEnd();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetEnd" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetEnd((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetEndY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetEndY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetEndY" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DRAWSEGMENT_SetEndY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetEndY(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetEndX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetEndX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetEndX" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DRAWSEGMENT_SetEndX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetEndX(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetCenter" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (wxPoint *) &((DRAWSEGMENT const *)arg1)->GetCenter();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetArcStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetArcStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetArcStart" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (wxPoint *) &((DRAWSEGMENT const *)arg1)->GetArcStart();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetArcEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetArcEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetArcEnd" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = ((DRAWSEGMENT const *)arg1)->GetArcEnd();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new wxPoint(static_cast< const wxPoint& >(result))), SWIGTYPE_p_wxPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetArcAngleStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetArcAngleStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetArcAngleStart" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (double)((DRAWSEGMENT const *)arg1)->GetArcAngleStart();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetRadius" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (int)((DRAWSEGMENT const *)arg1)->GetRadius();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetParentModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetParentModule",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetParentModule" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (MODULE *)((DRAWSEGMENT const *)arg1)->GetParentModule();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetBezierPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wxPoint,std::allocator< wxPoint > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetBezierPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetBezierPoints" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (std::vector< wxPoint,std::allocator< wxPoint > > *) &((DRAWSEGMENT const *)arg1)->GetBezierPoints();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetPolyPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wxPoint,std::allocator< wxPoint > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetPolyPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetPolyPoints" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (std::vector< wxPoint,std::allocator< wxPoint > > *) &((DRAWSEGMENT const *)arg1)->GetPolyPoints();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetBezierPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  std::vector< wxPoint,std::allocator< wxPoint > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetBezierPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetBezierPoints" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_SetBezierPoints" "', argument " "2"" of type '" "std::vector< wxPoint,std::allocator< wxPoint > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_SetBezierPoints" "', argument " "2"" of type '" "std::vector< wxPoint,std::allocator< wxPoint > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< wxPoint,std::allocator< wxPoint > > * >(argp2);
  {
    try{
      (arg1)->SetBezierPoints((std::vector< wxPoint,std::allocator< wxPoint > > const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_SetPolyPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  std::vector< wxPoint,std::allocator< wxPoint > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_SetPolyPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_SetPolyPoints" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_SetPolyPoints" "', argument " "2"" of type '" "std::vector< wxPoint,std::allocator< wxPoint > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_SetPolyPoints" "', argument " "2"" of type '" "std::vector< wxPoint,std::allocator< wxPoint > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< wxPoint,std::allocator< wxPoint > > * >(argp2);
  {
    try{
      (arg1)->SetPolyPoints((std::vector< wxPoint,std::allocator< wxPoint > > const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  DRAWSEGMENT *arg2 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_Copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_Copy" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_Copy" "', argument " "2"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg2 = reinterpret_cast< DRAWSEGMENT * >(argp2);
  {
    try{
      (arg1)->Copy(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DRAWSEGMENT_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_Draw" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DRAWSEGMENT_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DRAWSEGMENT_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DRAWSEGMENT_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DRAWSEGMENT_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_Draw" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DRAWSEGMENT_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DRAWSEGMENT_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DRAWSEGMENT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DRAWSEGMENT_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DRAWSEGMENT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_DRAWSEGMENT_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DRAWSEGMENT_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DRAWSEGMENT::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    DRAWSEGMENT::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_DisplayInfo" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetBoundingBox" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = ((DRAWSEGMENT const *)arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_HitTest" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_HitTest" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  {
    try{
      result = (bool)((DRAWSEGMENT const *)arg1)->HitTest((EDA_RECT const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DRAWSEGMENT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DRAWSEGMENT_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DRAWSEGMENT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DRAWSEGMENT_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DRAWSEGMENT_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DRAWSEGMENT::HitTest(wxPoint const &)\n"
    "    DRAWSEGMENT::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetClass" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = ((DRAWSEGMENT const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetLength" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (double)((DRAWSEGMENT const *)arg1)->GetLength();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_Move" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DRAWSEGMENT_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_Rotate" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DRAWSEGMENT_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DRAWSEGMENT_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_Flip" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_TransformShapeWithClearanceToPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  std::vector< CPolyPt,std::allocator< CPolyPt > > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DRAWSEGMENT_TransformShapeWithClearanceToPolygon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_TransformShapeWithClearanceToPolygon" "', argument " "1"" of type '" "DRAWSEGMENT *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DRAWSEGMENT_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DRAWSEGMENT_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< CPolyPt,std::allocator< CPolyPt > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DRAWSEGMENT_TransformShapeWithClearanceToPolygon" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DRAWSEGMENT_TransformShapeWithClearanceToPolygon" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DRAWSEGMENT_TransformShapeWithClearanceToPolygon" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try{
      (arg1)->TransformShapeWithClearanceToPolygon(*arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetSelectMenuText" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = ((DRAWSEGMENT const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_GetMenuImage" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = ((DRAWSEGMENT const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRAWSEGMENT_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DRAWSEGMENT *arg1 = (DRAWSEGMENT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DRAWSEGMENT_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRAWSEGMENT_Clone" "', argument " "1"" of type '" "DRAWSEGMENT const *""'"); 
  }
  arg1 = reinterpret_cast< DRAWSEGMENT * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((DRAWSEGMENT const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DRAWSEGMENT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DRAWSEGMENT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MARKER_PCB__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD_ITEM *arg1 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MARKER_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MARKER_PCB" "', argument " "1"" of type '" "BOARD_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< BOARD_ITEM * >(argp1);
  {
    try{
      result = (MARKER_PCB *)new MARKER_PCB(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MARKER_PCB__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  wxPoint *arg2 = 0 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxString *arg5 = 0 ;
  wxPoint *arg6 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool temp5 = false ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_MARKER_PCB",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MARKER_PCB" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MARKER_PCB" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_PCB" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_MARKER_PCB" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_PCB" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  {
    arg5 = newWxStringFromPy(obj4);
    if (arg5 == NULL) SWIG_fail;
    temp5 = true;
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_MARKER_PCB" "', argument " "6"" of type '" "wxPoint const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_PCB" "', argument " "6"" of type '" "wxPoint const &""'"); 
  }
  arg6 = reinterpret_cast< wxPoint * >(argp6);
  {
    try{
      result = (MARKER_PCB *)new MARKER_PCB(arg1,(wxPoint const &)*arg2,(wxString const &)*arg3,(wxPoint const &)*arg4,(wxString const &)*arg5,(wxPoint const &)*arg6);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, SWIG_POINTER_NEW |  0 );
  {
    if (temp3)
    delete arg3;
  }
  {
    if (temp5)
    delete arg5;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  {
    if (temp5)
    delete arg5;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MARKER_PCB__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  wxPoint *arg2 = 0 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_MARKER_PCB",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MARKER_PCB" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MARKER_PCB" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_PCB" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_MARKER_PCB" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MARKER_PCB" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  {
    try{
      result = (MARKER_PCB *)new MARKER_PCB(arg1,(wxPoint const &)*arg2,(wxString const &)*arg3,(wxPoint const &)*arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, SWIG_POINTER_NEW |  0 );
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MARKER_PCB(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MARKER_PCB__SWIG_0(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_MARKER_PCB__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = PyString_Check(argv[4]) || PyUnicode_Check(argv[4]);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_wxPoint, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_MARKER_PCB__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MARKER_PCB'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MARKER_PCB::MARKER_PCB(BOARD_ITEM *)\n"
    "    MARKER_PCB::MARKER_PCB(int,wxPoint const &,wxString const &,wxPoint const &,wxString const &,wxPoint const &)\n"
    "    MARKER_PCB::MARKER_PCB(int,wxPoint const &,wxString const &,wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MARKER_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MARKER_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MARKER_PCB" "', argument " "1"" of type '" "MARKER_PCB *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_PCB_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_Move" "', argument " "1"" of type '" "MARKER_PCB *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_PCB_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_PCB_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MARKER_PCB_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_Rotate" "', argument " "1"" of type '" "MARKER_PCB *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_PCB_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_PCB_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MARKER_PCB_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_PCB_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_Flip" "', argument " "1"" of type '" "MARKER_PCB *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_PCB_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_PCB_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MARKER_PCB_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_Draw" "', argument " "1"" of type '" "MARKER_PCB *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_PCB_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MARKER_PCB_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MARKER_PCB_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MARKER_PCB_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_PCB_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MARKER_PCB_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_Draw" "', argument " "1"" of type '" "MARKER_PCB *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_PCB_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MARKER_PCB_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MARKER_PCB_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MARKER_PCB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MARKER_PCB_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MARKER_PCB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MARKER_PCB_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MARKER_PCB_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MARKER_PCB::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    MARKER_PCB::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_PCB_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_GetPosition" "', argument " "1"" of type '" "MARKER_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  {
    try{
      result = (wxPoint *) &((MARKER_PCB const *)arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_PCB_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_SetPosition" "', argument " "1"" of type '" "MARKER_PCB *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_PCB_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_PCB_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_HitTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_PCB_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_HitTest" "', argument " "1"" of type '" "MARKER_PCB *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_PCB_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MARKER_PCB_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_PCB_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_IsOnLayer" "', argument " "1"" of type '" "MARKER_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MARKER_PCB_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((MARKER_PCB const *)arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MARKER_PCB_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_DisplayInfo" "', argument " "1"" of type '" "MARKER_PCB *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MARKER_PCB_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_PCB_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_GetSelectMenuText" "', argument " "1"" of type '" "MARKER_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  {
    try{
      result = ((MARKER_PCB const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MARKER_PCB_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MARKER_PCB *arg1 = (MARKER_PCB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MARKER_PCB_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MARKER_PCB_GetMenuImage" "', argument " "1"" of type '" "MARKER_PCB const *""'"); 
  }
  arg1 = reinterpret_cast< MARKER_PCB * >(argp1);
  {
    try{
      result = ((MARKER_PCB const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MARKER_PCB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MARKER_PCB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TEXTE_MODULE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TEXTE_MODULE",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TEXTE_MODULE" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TEXTE_MODULE" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (TEXTE_MODULE *)new TEXTE_MODULE(arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TEXTE_MODULE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TEXTE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TEXTE_MODULE" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *)new TEXTE_MODULE(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TEXTE_MODULE(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TEXTE_MODULE__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TEXTE_MODULE__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TEXTE_MODULE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TEXTE_MODULE::TEXTE_MODULE(MODULE *,int)\n"
    "    TEXTE_MODULE::TEXTE_MODULE(MODULE *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TEXTE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TEXTE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TEXTE_MODULE" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_Next" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *)((TEXTE_MODULE const *)arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_Back" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *)((TEXTE_MODULE const *)arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_MODULE_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_SetPosition" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_MODULE_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_MODULE_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetPosition" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = (wxPoint *) &((TEXTE_MODULE const *)arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_SetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_MODULE_SetType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_SetType" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TEXTE_MODULE_SetType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetType(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetType" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = (int)((TEXTE_MODULE const *)arg1)->GetType();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_SetVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_MODULE_SetVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_SetVisible" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TEXTE_MODULE_SetVisible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->SetVisible(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_IsVisible",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_IsVisible" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = (bool)((TEXTE_MODULE const *)arg1)->IsVisible();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_SetPos0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_MODULE_SetPos0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_SetPos0" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_MODULE_SetPos0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_MODULE_SetPos0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetPos0((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetPos0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetPos0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetPos0" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = (wxPoint *) &((TEXTE_MODULE const *)arg1)->GetPos0();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  TEXTE_MODULE *arg2 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_MODULE_Copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_Copy" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_MODULE_Copy" "', argument " "2"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg2 = reinterpret_cast< TEXTE_MODULE * >(argp2);
  {
    try{
      (arg1)->Copy(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetLength" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = (int)((TEXTE_MODULE const *)arg1)->GetLength();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetDrawRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetDrawRotation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetDrawRotation" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = (int)((TEXTE_MODULE const *)arg1)->GetDrawRotation();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetTextRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetTextRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetTextRect" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = ((TEXTE_MODULE const *)arg1)->GetTextRect();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetBoundingBox" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = ((TEXTE_MODULE const *)arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_SetDrawCoord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_SetDrawCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_SetDrawCoord" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      (arg1)->SetDrawCoord();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_SetLocalCoord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_SetLocalCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_SetLocalCoord" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      (arg1)->SetLocalCoord();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TEXTE_MODULE_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_Draw" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_MODULE_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TEXTE_MODULE_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TEXTE_MODULE_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TEXTE_MODULE_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_MODULE_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TEXTE_MODULE_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_Draw" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_MODULE_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TEXTE_MODULE_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TEXTE_MODULE_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TEXTE_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TEXTE_MODULE_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TEXTE_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TEXTE_MODULE_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TEXTE_MODULE_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TEXTE_MODULE::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    TEXTE_MODULE::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_DrawUmbilical__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TEXTE_MODULE_DrawUmbilical",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->DrawUmbilical(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_DrawUmbilical__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TEXTE_MODULE_DrawUmbilical",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TEXTE_MODULE_DrawUmbilical" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->DrawUmbilical(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_DrawUmbilical(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TEXTE_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TEXTE_MODULE_DrawUmbilical__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TEXTE_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TEXTE_MODULE_DrawUmbilical__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TEXTE_MODULE_DrawUmbilical'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TEXTE_MODULE::DrawUmbilical(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    TEXTE_MODULE::DrawUmbilical(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_MODULE_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_DisplayInfo" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_MODULE_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_HitTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_MODULE_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_HitTest" "', argument " "1"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TEXTE_MODULE_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TEXTE_MODULE_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TEXTE_MODULE_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_IsOnLayer" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TEXTE_MODULE_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)((TEXTE_MODULE const *)arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetClass" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = ((TEXTE_MODULE const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetSelectMenuText" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = ((TEXTE_MODULE const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_GetMenuImage" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = ((TEXTE_MODULE const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TEXTE_MODULE_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TEXTE_MODULE *arg1 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TEXTE_MODULE_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TEXTE_MODULE_Clone" "', argument " "1"" of type '" "TEXTE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< TEXTE_MODULE * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((TEXTE_MODULE const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TEXTE_MODULE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TEXTE_MODULE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EDGE_MODULE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  STROKE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_EDGE_MODULE",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EDGE_MODULE" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EDGE_MODULE" "', argument " "2"" of type '" "STROKE_T""'");
  } 
  arg2 = static_cast< STROKE_T >(val2);
  {
    try{
      result = (EDGE_MODULE *)new EDGE_MODULE(arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EDGE_MODULE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MODULE *arg1 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EDGE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EDGE_MODULE" "', argument " "1"" of type '" "MODULE *""'"); 
  }
  arg1 = reinterpret_cast< MODULE * >(argp1);
  {
    try{
      result = (EDGE_MODULE *)new EDGE_MODULE(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EDGE_MODULE(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EDGE_MODULE__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_EDGE_MODULE__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EDGE_MODULE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDGE_MODULE::EDGE_MODULE(MODULE *,STROKE_T)\n"
    "    EDGE_MODULE::EDGE_MODULE(MODULE *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EDGE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EDGE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EDGE_MODULE" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_Next" "', argument " "1"" of type '" "EDGE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      result = (EDGE_MODULE *)((EDGE_MODULE const *)arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_Back" "', argument " "1"" of type '" "EDGE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      result = (EDGE_MODULE *)((EDGE_MODULE const *)arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  EDGE_MODULE *arg2 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDGE_MODULE_Copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_Copy" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDGE_MODULE_Copy" "', argument " "2"" of type '" "EDGE_MODULE *""'"); 
  }
  arg2 = reinterpret_cast< EDGE_MODULE * >(argp2);
  {
    try{
      (arg1)->Copy(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_SetStart0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDGE_MODULE_SetStart0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_SetStart0" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDGE_MODULE_SetStart0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDGE_MODULE_SetStart0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetStart0((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_GetStart0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_GetStart0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_GetStart0" "', argument " "1"" of type '" "EDGE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      result = (wxPoint *) &((EDGE_MODULE const *)arg1)->GetStart0();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_SetEnd0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDGE_MODULE_SetEnd0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_SetEnd0" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDGE_MODULE_SetEnd0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDGE_MODULE_SetEnd0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (arg1)->SetEnd0((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_GetEnd0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_GetEnd0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_GetEnd0" "', argument " "1"" of type '" "EDGE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      result = (wxPoint *) &((EDGE_MODULE const *)arg1)->GetEnd0();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_SetDrawCoord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_SetDrawCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_SetDrawCoord" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      (arg1)->SetDrawCoord();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:EDGE_MODULE_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_Draw" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDGE_MODULE_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDGE_MODULE_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EDGE_MODULE_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EDGE_MODULE_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDGE_MODULE_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EDGE_MODULE_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_Draw" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDGE_MODULE_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDGE_MODULE_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EDGE_MODULE_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDGE_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_EDGE_MODULE_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EDGE_MODULE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_EDGE_MODULE_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EDGE_MODULE_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDGE_MODULE::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    EDGE_MODULE::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_Draw3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  EDA_3D_CANVAS *arg2 = (EDA_3D_CANVAS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDGE_MODULE_Draw3D",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_Draw3D" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_3D_CANVAS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDGE_MODULE_Draw3D" "', argument " "2"" of type '" "EDA_3D_CANVAS *""'"); 
  }
  arg2 = reinterpret_cast< EDA_3D_CANVAS * >(argp2);
  {
    try{
      (arg1)->Draw3D(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDGE_MODULE_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_DisplayInfo" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDGE_MODULE_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_GetClass" "', argument " "1"" of type '" "EDGE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      result = ((EDGE_MODULE const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_GetSelectMenuText" "', argument " "1"" of type '" "EDGE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      result = ((EDGE_MODULE const *)arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_GetMenuImage" "', argument " "1"" of type '" "EDGE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      result = ((EDGE_MODULE const *)arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_Clone" "', argument " "1"" of type '" "EDGE_MODULE const *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  {
    try{
      result = (EDA_ITEM *)((EDGE_MODULE const *)arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_m_Start0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDGE_MODULE_m_Start0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_m_Start0_set" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDGE_MODULE_m_Start0_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (arg1)->m_Start0 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_m_Start0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_m_Start0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_m_Start0_get" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  result = (wxPoint *)& ((arg1)->m_Start0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_m_End0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EDGE_MODULE_m_End0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_m_End0_set" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EDGE_MODULE_m_End0_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (arg1)->m_End0 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EDGE_MODULE_m_End0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDGE_MODULE *arg1 = (EDGE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EDGE_MODULE_m_End0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDGE_MODULE_m_End0_get" "', argument " "1"" of type '" "EDGE_MODULE *""'"); 
  }
  arg1 = reinterpret_cast< EDGE_MODULE * >(argp1);
  result = (wxPoint *)& ((arg1)->m_End0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EDGE_MODULE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EDGE_MODULE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_FillMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_FillMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_FillMode_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_FillMode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_FillMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_FillMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_FillMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_FillMode_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_FillMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ZonePriority_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_ZonePriority_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ZonePriority_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_ZonePriority_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ZonePriority = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ZonePriority_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_ZonePriority_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ZonePriority_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_ZonePriority);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ZoneClearance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_ZoneClearance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ZoneClearance_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_ZoneClearance_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ZoneClearance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ZoneClearance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_ZoneClearance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ZoneClearance_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_ZoneClearance);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ZoneMinThickness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_ZoneMinThickness_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ZoneMinThickness_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_ZoneMinThickness_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ZoneMinThickness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ZoneMinThickness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_ZoneMinThickness_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ZoneMinThickness_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_ZoneMinThickness);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_NetcodeSelection_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_NetcodeSelection_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_NetcodeSelection_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_NetcodeSelection_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_NetcodeSelection = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_NetcodeSelection_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_NetcodeSelection_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_NetcodeSelection_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_NetcodeSelection);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_CurrentZone_Layer_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_CurrentZone_Layer_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_CurrentZone_Layer_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_CurrentZone_Layer_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_CurrentZone_Layer = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_CurrentZone_Layer_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_CurrentZone_Layer_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_CurrentZone_Layer_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_CurrentZone_Layer);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_Zone_HatchingStyle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_Zone_HatchingStyle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_Zone_HatchingStyle_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_Zone_HatchingStyle_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_Zone_HatchingStyle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_Zone_HatchingStyle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_Zone_HatchingStyle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_Zone_HatchingStyle_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_Zone_HatchingStyle);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ArcToSegmentsCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_ArcToSegmentsCount_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ArcToSegmentsCount_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_ArcToSegmentsCount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_ArcToSegmentsCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ArcToSegmentsCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_ArcToSegmentsCount_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ArcToSegmentsCount_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (int) ((arg1)->m_ArcToSegmentsCount);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ThermalReliefGap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_ThermalReliefGap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ThermalReliefGap_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_ThermalReliefGap_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->m_ThermalReliefGap = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ThermalReliefGap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_ThermalReliefGap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ThermalReliefGap_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (long) ((arg1)->m_ThermalReliefGap);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ThermalReliefCopperBridge_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_ThermalReliefCopperBridge_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ThermalReliefCopperBridge_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_ThermalReliefCopperBridge_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->m_ThermalReliefCopperBridge = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_ThermalReliefCopperBridge_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_ThermalReliefCopperBridge_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_ThermalReliefCopperBridge_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (long) ((arg1)->m_ThermalReliefCopperBridge);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_Zone_45_Only_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_m_Zone_45_Only_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_Zone_45_Only_set" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_m_Zone_45_Only_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_Zone_45_Only = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_m_Zone_45_Only_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_m_Zone_45_Only_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_m_Zone_45_Only_get" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  result = (bool) ((arg1)->m_Zone_45_Only);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ZONE_SETTINGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ZONE_SETTINGS")) SWIG_fail;
  {
    try{
      result = (ZONE_SETTINGS *)new ZONE_SETTINGS();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZONE_SETTINGS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS___lshift__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  ZONE_CONTAINER *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ZONE_SETTINGS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS___lshift__" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZONE_CONTAINER,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZONE_SETTINGS___lshift__" "', argument " "2"" of type '" "ZONE_CONTAINER const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZONE_SETTINGS___lshift__" "', argument " "2"" of type '" "ZONE_CONTAINER const &""'"); 
  }
  arg2 = reinterpret_cast< ZONE_CONTAINER * >(argp2);
  {
    try{
      result = (ZONE_SETTINGS *) &(arg1)->operator <<((ZONE_CONTAINER const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_ExportSetting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  ZONE_CONTAINER *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ZONE_SETTINGS_ExportSetting",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_ExportSetting" "', argument " "1"" of type '" "ZONE_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZONE_CONTAINER,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZONE_SETTINGS_ExportSetting" "', argument " "2"" of type '" "ZONE_CONTAINER &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZONE_SETTINGS_ExportSetting" "', argument " "2"" of type '" "ZONE_CONTAINER &""'"); 
  }
  arg2 = reinterpret_cast< ZONE_CONTAINER * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZONE_SETTINGS_ExportSetting" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try{
      ((ZONE_SETTINGS const *)arg1)->ExportSetting(*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_ExportSetting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  ZONE_CONTAINER *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_ExportSetting",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_ExportSetting" "', argument " "1"" of type '" "ZONE_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZONE_CONTAINER,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZONE_SETTINGS_ExportSetting" "', argument " "2"" of type '" "ZONE_CONTAINER &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZONE_SETTINGS_ExportSetting" "', argument " "2"" of type '" "ZONE_CONTAINER &""'"); 
  }
  arg2 = reinterpret_cast< ZONE_CONTAINER * >(argp2);
  {
    try{
      ((ZONE_SETTINGS const *)arg1)->ExportSetting(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_ExportSetting(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZONE_SETTINGS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ZONE_CONTAINER, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ZONE_SETTINGS_ExportSetting__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZONE_SETTINGS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ZONE_CONTAINER, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ZONE_SETTINGS_ExportSetting__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ZONE_SETTINGS_ExportSetting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ZONE_SETTINGS::ExportSetting(ZONE_CONTAINER &,bool) const\n"
    "    ZONE_SETTINGS::ExportSetting(ZONE_CONTAINER &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_SetCornerSmoothingType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_SetCornerSmoothingType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_SetCornerSmoothingType" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_SetCornerSmoothingType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetCornerSmoothingType(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_GetCornerSmoothingType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_GetCornerSmoothingType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_GetCornerSmoothingType" "', argument " "1"" of type '" "ZONE_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  {
    try{
      result = (int)((ZONE_SETTINGS const *)arg1)->GetCornerSmoothingType();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_SetCornerRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_SetCornerRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_SetCornerRadius" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_SetCornerRadius" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetCornerRadius(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_GetCornerRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_GetCornerRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_GetCornerRadius" "', argument " "1"" of type '" "ZONE_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  {
    try{
      result = (unsigned int)((ZONE_SETTINGS const *)arg1)->GetCornerRadius();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_GetPadConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZoneConnection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_GetPadConnection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_GetPadConnection" "', argument " "1"" of type '" "ZONE_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  {
    try{
      result = ((ZONE_SETTINGS const *)arg1)->GetPadConnection();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new ZoneConnection(static_cast< const ZoneConnection& >(result))), SWIGTYPE_p_ZoneConnection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_SetPadConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  ZoneConnection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_SetPadConnection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_SetPadConnection" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZoneConnection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZONE_SETTINGS_SetPadConnection" "', argument " "2"" of type '" "ZoneConnection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZONE_SETTINGS_SetPadConnection" "', argument " "2"" of type '" "ZoneConnection""'");
    } else {
      ZoneConnection * temp = reinterpret_cast< ZoneConnection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (arg1)->SetPadConnection(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_GetIsKeepout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_GetIsKeepout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_GetIsKeepout" "', argument " "1"" of type '" "ZONE_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  {
    try{
      result = (bool)((ZONE_SETTINGS const *)arg1)->GetIsKeepout();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_GetDoNotAllowCopperPour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_GetDoNotAllowCopperPour",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_GetDoNotAllowCopperPour" "', argument " "1"" of type '" "ZONE_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  {
    try{
      result = (bool)((ZONE_SETTINGS const *)arg1)->GetDoNotAllowCopperPour();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_GetDoNotAllowVias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_GetDoNotAllowVias",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_GetDoNotAllowVias" "', argument " "1"" of type '" "ZONE_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  {
    try{
      result = (bool)((ZONE_SETTINGS const *)arg1)->GetDoNotAllowVias();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_GetDoNotAllowTracks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZONE_SETTINGS_GetDoNotAllowTracks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_GetDoNotAllowTracks" "', argument " "1"" of type '" "ZONE_SETTINGS const *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  {
    try{
      result = (bool)((ZONE_SETTINGS const *)arg1)->GetDoNotAllowTracks();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_SetIsKeepout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_SetIsKeepout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_SetIsKeepout" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_SetIsKeepout" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->SetIsKeepout(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_SetDoNotAllowCopperPour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_SetDoNotAllowCopperPour",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_SetDoNotAllowCopperPour" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_SetDoNotAllowCopperPour" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->SetDoNotAllowCopperPour(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_SetDoNotAllowVias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_SetDoNotAllowVias",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_SetDoNotAllowVias" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_SetDoNotAllowVias" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->SetDoNotAllowVias(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZONE_SETTINGS_SetDoNotAllowTracks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZONE_SETTINGS_SetDoNotAllowTracks",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZONE_SETTINGS_SetDoNotAllowTracks" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZONE_SETTINGS_SetDoNotAllowTracks" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->SetDoNotAllowTracks(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ZONE_SETTINGS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZONE_SETTINGS *arg1 = (ZONE_SETTINGS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ZONE_SETTINGS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZONE_SETTINGS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ZONE_SETTINGS" "', argument " "1"" of type '" "ZONE_SETTINGS *""'"); 
  }
  arg1 = reinterpret_cast< ZONE_SETTINGS * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ZONE_SETTINGS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ZONE_SETTINGS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_NETCLASS_Default_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NETCLASS_Default is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NETCLASS_Default_get(void) {
  PyObject *pyobj = 0;
  
  {
#if wxUSE_UNICODE
    pyobj = PyUnicode_FromWideChar((&NETCLASS::Default)->c_str(), (&NETCLASS::Default)->Len());
#else
    pyobj = PyString_FromStringAndSize((&NETCLASS::Default)->c_str(), (&NETCLASS::Default)->Len());
#endif
  }
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_NETCLASS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxString *arg2 = 0 ;
  NETCLASS *arg3 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_NETCLASS",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NETCLASS" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NETCLASS" "', argument " "3"" of type '" "NETCLASS const *""'"); 
  }
  arg3 = reinterpret_cast< NETCLASS * >(argp3);
  {
    try{
      result = (NETCLASS *)new NETCLASS(arg1,(wxString const &)*arg2,(NETCLASS const *)arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, SWIG_POINTER_NEW |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NETCLASS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NETCLASS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NETCLASS" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (NETCLASS *)new NETCLASS(arg1,(wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, SWIG_POINTER_NEW |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NETCLASS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_new_NETCLASS__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_NETCLASS, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_NETCLASS__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NETCLASS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NETCLASS::NETCLASS(BOARD *,wxString const &,NETCLASS const *)\n"
    "    NETCLASS::NETCLASS(BOARD *,wxString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NETCLASS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NETCLASS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NETCLASS" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetClass" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = ((NETCLASS const *)arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetName" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (wxString *) &((NETCLASS const *)arg1)->GetName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_SetName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetName" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetName((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetCount" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (unsigned int)((NETCLASS const *)arg1)->GetCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_Clear" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      (arg1)->Clear();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_AddNative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_AddNative",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_AddNative" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->Add((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_begin" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new NETCLASS::iterator(static_cast< const NETCLASS::iterator& >(result))), SWIGTYPE_p_NETCLASS__STRINGSET__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_end" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new NETCLASS::iterator(static_cast< const NETCLASS::iterator& >(result))), SWIGTYPE_p_NETCLASS__STRINGSET__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_begin" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = ((NETCLASS const *)arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new NETCLASS::const_iterator(static_cast< const NETCLASS::const_iterator& >(result))), SWIGTYPE_p_NETCLASS__STRINGSET__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NETCLASS_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NETCLASS_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NETCLASS_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NETCLASS::begin()\n"
    "    NETCLASS::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NETCLASS_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_end" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = ((NETCLASS const *)arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new NETCLASS::const_iterator(static_cast< const NETCLASS::const_iterator& >(result))), SWIGTYPE_p_NETCLASS__STRINGSET__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NETCLASS_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NETCLASS_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NETCLASS_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NETCLASS::end()\n"
    "    NETCLASS::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NETCLASS_Remove__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  NETCLASS::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_Remove" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NETCLASS__STRINGSET__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETCLASS_Remove" "', argument " "2"" of type '" "NETCLASS::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NETCLASS_Remove" "', argument " "2"" of type '" "NETCLASS::iterator""'");
    } else {
      NETCLASS::iterator * temp = reinterpret_cast< NETCLASS::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (arg1)->Remove(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_Remove__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_Remove" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->Remove((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_Remove(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_NETCLASS__STRINGSET__iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NETCLASS_Remove__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NETCLASS_Remove__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NETCLASS_Remove'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NETCLASS::Remove(NETCLASS::iterator)\n"
    "    NETCLASS::Remove(wxString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetDescription" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (wxString *) &((NETCLASS const *)arg1)->GetDescription();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_SetDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetDescription" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->SetDescription((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetClearance" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_SetClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetClearance" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETCLASS_SetClearance" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetTrackWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetTrackWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetTrackWidth" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetTrackWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetTrackMinWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetTrackMinWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetTrackMinWidth" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetTrackMinWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetTrackWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_SetTrackWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetTrackWidth" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETCLASS_SetTrackWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetTrackWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetViaDiameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetViaDiameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetViaDiameter" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetViaDiameter();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetViaMinDiameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetViaMinDiameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetViaMinDiameter" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetViaMinDiameter();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetViaDiameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_SetViaDiameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetViaDiameter" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETCLASS_SetViaDiameter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetViaDiameter(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetViaDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetViaDrill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetViaDrill" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetViaDrill();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetViaMinDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetViaMinDrill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetViaMinDrill" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetViaMinDrill();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetViaDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_SetViaDrill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetViaDrill" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETCLASS_SetViaDrill" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetViaDrill(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetuViaDiameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetuViaDiameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetuViaDiameter" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetuViaDiameter();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetuViaMinDiameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetuViaMinDiameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetuViaMinDiameter" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetuViaMinDiameter();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetuViaDiameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_SetuViaDiameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetuViaDiameter" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETCLASS_SetuViaDiameter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetuViaDiameter(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetuViaDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetuViaDrill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetuViaDrill" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetuViaDrill();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_GetuViaMinDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_GetuViaMinDrill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_GetuViaMinDrill" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      result = (int)((NETCLASS const *)arg1)->GetuViaMinDrill();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetuViaDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_SetuViaDrill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetuViaDrill" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NETCLASS_SetuViaDrill" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->SetuViaDrill(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetParams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  NETCLASS *arg2 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASS_SetParams",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetParams" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETCLASS_SetParams" "', argument " "2"" of type '" "NETCLASS const *""'"); 
  }
  arg2 = reinterpret_cast< NETCLASS * >(argp2);
  {
    try{
      (arg1)->SetParams((NETCLASS const *)arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetParams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASS_SetParams",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_SetParams" "', argument " "1"" of type '" "NETCLASS *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  {
    try{
      (arg1)->SetParams();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASS_SetParams(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NETCLASS_SetParams__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_NETCLASS, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NETCLASS_SetParams__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NETCLASS_SetParams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NETCLASS::SetParams(NETCLASS const *)\n"
    "    NETCLASS::SetParams()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NETCLASS_Format(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASS *arg1 = (NETCLASS *) 0 ;
  OUTPUTFORMATTER *arg2 = (OUTPUTFORMATTER *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NETCLASS_Format",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASS_Format" "', argument " "1"" of type '" "NETCLASS const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OUTPUTFORMATTER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETCLASS_Format" "', argument " "2"" of type '" "OUTPUTFORMATTER *""'"); 
  }
  arg2 = reinterpret_cast< OUTPUTFORMATTER * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NETCLASS_Format" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NETCLASS_Format" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      try {
        ((NETCLASS const *)arg1)->Format(arg2,arg3,arg4);
      }
      catch(IO_ERROR &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new IO_ERROR(static_cast< const IO_ERROR& >(_e))),SWIGTYPE_p_IO_ERROR,SWIG_POINTER_OWN), "IO_ERROR", SWIGTYPE_p_IO_ERROR); SWIG_fail;
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NETCLASS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NETCLASS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NETCLASSES__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *arg1 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASSES *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NETCLASSES",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NETCLASSES" "', argument " "1"" of type '" "BOARD *""'"); 
  }
  arg1 = reinterpret_cast< BOARD * >(argp1);
  {
    try{
      result = (NETCLASSES *)new NETCLASSES(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASSES, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NETCLASSES__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NETCLASSES")) SWIG_fail;
  {
    try{
      result = (NETCLASSES *)new NETCLASSES();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASSES, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NETCLASSES(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NETCLASSES__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BOARD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NETCLASSES__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NETCLASSES'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NETCLASSES::NETCLASSES(BOARD *)\n"
    "    NETCLASSES::NETCLASSES()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NETCLASSES(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NETCLASSES",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NETCLASSES" "', argument " "1"" of type '" "NETCLASSES *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASSES_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_Clear" "', argument " "1"" of type '" "NETCLASSES *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    try{
      (arg1)->Clear();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASSES::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASSES_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_begin" "', argument " "1"" of type '" "NETCLASSES *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new NETCLASSES::iterator(static_cast< const NETCLASSES::iterator& >(result))), SWIGTYPE_p_NETCLASSES__NETCLASSMAP__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASSES::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASSES_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_end" "', argument " "1"" of type '" "NETCLASSES *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new NETCLASSES::iterator(static_cast< const NETCLASSES::iterator& >(result))), SWIGTYPE_p_NETCLASSES__NETCLASSMAP__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASSES::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASSES_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_begin" "', argument " "1"" of type '" "NETCLASSES const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    try{
      result = ((NETCLASSES const *)arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new NETCLASSES::const_iterator(static_cast< const NETCLASSES::const_iterator& >(result))), SWIGTYPE_p_NETCLASSES__NETCLASSMAP__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASSES, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NETCLASSES_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASSES, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NETCLASSES_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NETCLASSES_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NETCLASSES::begin()\n"
    "    NETCLASSES::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASSES::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASSES_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_end" "', argument " "1"" of type '" "NETCLASSES const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    try{
      result = ((NETCLASSES const *)arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new NETCLASSES::const_iterator(static_cast< const NETCLASSES::const_iterator& >(result))), SWIGTYPE_p_NETCLASSES__NETCLASSMAP__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASSES, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NETCLASSES_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NETCLASSES, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NETCLASSES_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NETCLASSES_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NETCLASSES::end()\n"
    "    NETCLASSES::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_GetCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASSES_GetCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_GetCount" "', argument " "1"" of type '" "NETCLASSES const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    try{
      result = (unsigned int)((NETCLASSES const *)arg1)->GetCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_GetDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NETCLASSES_GetDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_GetDefault" "', argument " "1"" of type '" "NETCLASSES const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    try{
      result = (NETCLASS *)((NETCLASSES const *)arg1)->GetDefault();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_AddNative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  NETCLASS *arg2 = (NETCLASS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASSES_AddNative",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_AddNative" "', argument " "1"" of type '" "NETCLASSES *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NETCLASS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NETCLASSES_AddNative" "', argument " "2"" of type '" "NETCLASS *""'"); 
  }
  arg2 = reinterpret_cast< NETCLASS * >(argp2);
  {
    try{
      result = (bool)(arg1)->Add(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASSES_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_Remove" "', argument " "1"" of type '" "NETCLASSES *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (NETCLASS *)(arg1)->Remove((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_NETCLASSES_Find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NETCLASSES *arg1 = (NETCLASSES *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NETCLASSES_Find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NETCLASSES, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NETCLASSES_Find" "', argument " "1"" of type '" "NETCLASSES const *""'"); 
  }
  arg1 = reinterpret_cast< NETCLASSES * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (NETCLASS *)((NETCLASSES const *)arg1)->Find((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *NETCLASSES_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NETCLASSES, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Cast_to_BOARD_ITEM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EDA_ITEM *arg1 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cast_to_BOARD_ITEM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cast_to_BOARD_ITEM" "', argument " "1"" of type '" "EDA_ITEM *""'"); 
  }
  arg1 = reinterpret_cast< EDA_ITEM * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)Cast_to_BOARD_ITEM(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GetBoard")) SWIG_fail;
  {
    try{
      result = (BOARD *)GetBoard();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadBoard__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  IO_MGR::PCB_FILE_T arg2 ;
  bool temp1 = false ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LoadBoard",&obj0,&obj1)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoadBoard" "', argument " "2"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg2 = static_cast< IO_MGR::PCB_FILE_T >(val2);
  {
    try{
      result = (BOARD *)LoadBoard(*arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadBoard__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  bool temp1 = false ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LoadBoard",&obj0)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  {
    try{
      result = (BOARD *)LoadBoard(*arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadBoard(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      return _wrap_LoadBoard__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LoadBoard__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LoadBoard'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LoadBoard(wxString &,IO_MGR::PCB_FILE_T)\n"
    "    LoadBoard(wxString &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SaveBoard__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  BOARD *arg2 = (BOARD *) 0 ;
  IO_MGR::PCB_FILE_T arg3 ;
  bool temp1 = false ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SaveBoard",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveBoard" "', argument " "2"" of type '" "BOARD *""'"); 
  }
  arg2 = reinterpret_cast< BOARD * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SaveBoard" "', argument " "3"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg3 = static_cast< IO_MGR::PCB_FILE_T >(val3);
  {
    try{
      result = (bool)SaveBoard(*arg1,arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveBoard__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wxString *arg1 = 0 ;
  BOARD *arg2 = (BOARD *) 0 ;
  bool temp1 = false ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SaveBoard",&obj0,&obj1)) SWIG_fail;
  {
    arg1 = newWxStringFromPy(obj0);
    if (arg1 == NULL) SWIG_fail;
    temp1 = true;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveBoard" "', argument " "2"" of type '" "BOARD *""'"); 
  }
  arg2 = reinterpret_cast< BOARD * >(argp2);
  {
    try{
      result = (bool)SaveBoard(*arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp1)
    delete arg1;
  }
  return resultobj;
fail:
  {
    if (temp1)
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SaveBoard(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SaveBoard__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = PyString_Check(argv[0]) || PyUnicode_Check(argv[0]);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SaveBoard__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SaveBoard'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SaveBoard(wxString &,BOARD *,IO_MGR::PCB_FILE_T)\n"
    "    SaveBoard(wxString &,BOARD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IO_MGR_PluginFind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR::PCB_FILE_T arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PLUGIN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IO_MGR_PluginFind",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IO_MGR_PluginFind" "', argument " "1"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg1 = static_cast< IO_MGR::PCB_FILE_T >(val1);
  {
    try{
      result = (PLUGIN *)IO_MGR::PluginFind(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PLUGIN, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IO_MGR_PluginRelease(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IO_MGR_PluginRelease",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IO_MGR_PluginRelease" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    try{
      IO_MGR::PluginRelease(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IO_MGR_ShowType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR::PCB_FILE_T arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IO_MGR_ShowType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IO_MGR_ShowType" "', argument " "1"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg1 = static_cast< IO_MGR::PCB_FILE_T >(val1);
  {
    try{
      result = IO_MGR::ShowType(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IO_MGR_GetFileExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR::PCB_FILE_T arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IO_MGR_GetFileExtension",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IO_MGR_GetFileExtension" "', argument " "1"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg1 = static_cast< IO_MGR::PCB_FILE_T >(val1);
  {
    try{
      result = IO_MGR::GetFileExtension(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IO_MGR_Load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR::PCB_FILE_T arg1 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  PROPERTIES *arg4 = (PROPERTIES *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IO_MGR_Load",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IO_MGR_Load" "', argument " "1"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg1 = static_cast< IO_MGR::PCB_FILE_T >(val1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IO_MGR_Load" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IO_MGR_Load" "', argument " "4"" of type '" "PROPERTIES *""'"); 
  }
  arg4 = reinterpret_cast< PROPERTIES * >(argp4);
  {
    try{
      result = (BOARD *)IO_MGR::Load(arg1,(wxString const &)*arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_IO_MGR_Load__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR::PCB_FILE_T arg1 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IO_MGR_Load",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IO_MGR_Load" "', argument " "1"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg1 = static_cast< IO_MGR::PCB_FILE_T >(val1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IO_MGR_Load" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  {
    try{
      result = (BOARD *)IO_MGR::Load(arg1,(wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_IO_MGR_Load__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR::PCB_FILE_T arg1 ;
  wxString *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IO_MGR_Load",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IO_MGR_Load" "', argument " "1"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg1 = static_cast< IO_MGR::PCB_FILE_T >(val1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (BOARD *)IO_MGR::Load(arg1,(wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_IO_MGR_Load(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IO_MGR_Load__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IO_MGR_Load__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_PROPERTIES, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IO_MGR_Load__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IO_MGR_Load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IO_MGR::Load(IO_MGR::PCB_FILE_T,wxString const &,BOARD *,PROPERTIES *)\n"
    "    IO_MGR::Load(IO_MGR::PCB_FILE_T,wxString const &,BOARD *)\n"
    "    IO_MGR::Load(IO_MGR::PCB_FILE_T,wxString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IO_MGR_Save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR::PCB_FILE_T arg1 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  PROPERTIES *arg4 = (PROPERTIES *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IO_MGR_Save",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IO_MGR_Save" "', argument " "1"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg1 = static_cast< IO_MGR::PCB_FILE_T >(val1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IO_MGR_Save" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IO_MGR_Save" "', argument " "4"" of type '" "PROPERTIES *""'"); 
  }
  arg4 = reinterpret_cast< PROPERTIES * >(argp4);
  {
    try{
      IO_MGR::Save(arg1,(wxString const &)*arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_IO_MGR_Save__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR::PCB_FILE_T arg1 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IO_MGR_Save",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IO_MGR_Save" "', argument " "1"" of type '" "IO_MGR::PCB_FILE_T""'");
  } 
  arg1 = static_cast< IO_MGR::PCB_FILE_T >(val1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IO_MGR_Save" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  {
    try{
      IO_MGR::Save(arg1,(wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_IO_MGR_Save(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IO_MGR_Save__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_PROPERTIES, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IO_MGR_Save__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IO_MGR_Save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IO_MGR::Save(IO_MGR::PCB_FILE_T,wxString const &,BOARD *,PROPERTIES *)\n"
    "    IO_MGR::Save(IO_MGR::PCB_FILE_T,wxString const &,BOARD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_IO_MGR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IO_MGR")) SWIG_fail;
  {
    try{
      result = (IO_MGR *)new IO_MGR();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IO_MGR, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IO_MGR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IO_MGR *arg1 = (IO_MGR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IO_MGR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IO_MGR, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IO_MGR" "', argument " "1"" of type '" "IO_MGR *""'"); 
  }
  arg1 = reinterpret_cast< IO_MGR * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IO_MGR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IO_MGR, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PLUGIN_PluginName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLUGIN_PluginName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_PluginName" "', argument " "1"" of type '" "PLUGIN const *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    try{
      result = (wxString *) &((PLUGIN const *)arg1)->PluginName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_GetFileExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLUGIN_GetFileExtension",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_GetFileExtension" "', argument " "1"" of type '" "PLUGIN const *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    try{
      result = (wxString *) &((PLUGIN const *)arg1)->GetFileExtension();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_Load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  PROPERTIES *arg4 = (PROPERTIES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PLUGIN_Load",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_Load" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PLUGIN_Load" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PLUGIN_Load" "', argument " "4"" of type '" "PROPERTIES *""'"); 
  }
  arg4 = reinterpret_cast< PROPERTIES * >(argp4);
  {
    try{
      result = (BOARD *)(arg1)->Load((wxString const &)*arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_Load__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PLUGIN_Load",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_Load" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PLUGIN_Load" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  {
    try{
      result = (BOARD *)(arg1)->Load((wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_Load(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PLUGIN_Load__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_PROPERTIES, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PLUGIN_Load__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PLUGIN_Load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PLUGIN::Load(wxString const &,BOARD *,PROPERTIES *)\n"
    "    PLUGIN::Load(wxString const &,BOARD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PLUGIN_Save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  PROPERTIES *arg4 = (PROPERTIES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PLUGIN_Save",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_Save" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PLUGIN_Save" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PLUGIN_Save" "', argument " "4"" of type '" "PROPERTIES *""'"); 
  }
  arg4 = reinterpret_cast< PROPERTIES * >(argp4);
  {
    try{
      (arg1)->Save((wxString const &)*arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_Save__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PLUGIN_Save",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_Save" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PLUGIN_Save" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  {
    try{
      (arg1)->Save((wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_Save(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PLUGIN_Save__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_PROPERTIES, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PLUGIN_Save__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PLUGIN_Save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PLUGIN::Save(wxString const &,BOARD *,PROPERTIES *)\n"
    "    PLUGIN::Save(wxString const &,BOARD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintEnumerate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  PROPERTIES *arg3 = (PROPERTIES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  wxArrayString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PLUGIN_FootprintEnumerate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintEnumerate" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PLUGIN_FootprintEnumerate" "', argument " "3"" of type '" "PROPERTIES *""'"); 
  }
  arg3 = reinterpret_cast< PROPERTIES * >(argp3);
  {
    try{
      result = (arg1)->FootprintEnumerate((wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
    resultobj = wxArrayString2PyList(result);
  }
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintEnumerate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxArrayString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PLUGIN_FootprintEnumerate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintEnumerate" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (arg1)->FootprintEnumerate((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
    resultobj = wxArrayString2PyList(result);
  }
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintEnumerate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PLUGIN_FootprintEnumerate__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_PROPERTIES, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PLUGIN_FootprintEnumerate__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PLUGIN_FootprintEnumerate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PLUGIN::FootprintEnumerate(wxString const &,PROPERTIES *)\n"
    "    PLUGIN::FootprintEnumerate(wxString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintLoad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  wxString *arg3 = 0 ;
  PROPERTIES *arg4 = (PROPERTIES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  bool temp3 = false ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PLUGIN_FootprintLoad",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintLoad" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PLUGIN_FootprintLoad" "', argument " "4"" of type '" "PROPERTIES *""'"); 
  }
  arg4 = reinterpret_cast< PROPERTIES * >(argp4);
  {
    try{
      result = (MODULE *)(arg1)->FootprintLoad((wxString const &)*arg2,(wxString const &)*arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintLoad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  wxString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  bool temp3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PLUGIN_FootprintLoad",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintLoad" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  {
    try{
      result = (MODULE *)(arg1)->FootprintLoad((wxString const &)*arg2,(wxString const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintLoad(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          return _wrap_PLUGIN_FootprintLoad__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_PROPERTIES, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PLUGIN_FootprintLoad__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PLUGIN_FootprintLoad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PLUGIN::FootprintLoad(wxString const &,wxString const &,PROPERTIES *)\n"
    "    PLUGIN::FootprintLoad(wxString const &,wxString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintSave__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  MODULE *arg3 = (MODULE *) 0 ;
  PROPERTIES *arg4 = (PROPERTIES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PLUGIN_FootprintSave",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintSave" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PLUGIN_FootprintSave" "', argument " "3"" of type '" "MODULE const *""'"); 
  }
  arg3 = reinterpret_cast< MODULE * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PLUGIN_FootprintSave" "', argument " "4"" of type '" "PROPERTIES *""'"); 
  }
  arg4 = reinterpret_cast< PROPERTIES * >(argp4);
  {
    try{
      (arg1)->FootprintSave((wxString const &)*arg2,(MODULE const *)arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintSave__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  MODULE *arg3 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PLUGIN_FootprintSave",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintSave" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PLUGIN_FootprintSave" "', argument " "3"" of type '" "MODULE const *""'"); 
  }
  arg3 = reinterpret_cast< MODULE * >(argp3);
  {
    try{
      (arg1)->FootprintSave((wxString const &)*arg2,(MODULE const *)arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintSave(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_MODULE, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PLUGIN_FootprintSave__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_MODULE, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_PROPERTIES, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PLUGIN_FootprintSave__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PLUGIN_FootprintSave'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PLUGIN::FootprintSave(wxString const &,MODULE const *,PROPERTIES *)\n"
    "    PLUGIN::FootprintSave(wxString const &,MODULE const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintDelete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  wxString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  bool temp3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PLUGIN_FootprintDelete",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintDelete" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  {
    try{
      (arg1)->FootprintDelete((wxString const &)*arg2,(wxString const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintLibCreate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  PROPERTIES *arg3 = (PROPERTIES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PLUGIN_FootprintLibCreate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintLibCreate" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PLUGIN_FootprintLibCreate" "', argument " "3"" of type '" "PROPERTIES *""'"); 
  }
  arg3 = reinterpret_cast< PROPERTIES * >(argp3);
  {
    try{
      (arg1)->FootprintLibCreate((wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintLibCreate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PLUGIN_FootprintLibCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintLibCreate" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->FootprintLibCreate((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintLibCreate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PLUGIN_FootprintLibCreate__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_PROPERTIES, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PLUGIN_FootprintLibCreate__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PLUGIN_FootprintLibCreate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PLUGIN::FootprintLibCreate(wxString const &,PROPERTIES *)\n"
    "    PLUGIN::FootprintLibCreate(wxString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintLibDelete__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  PROPERTIES *arg3 = (PROPERTIES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PLUGIN_FootprintLibDelete",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintLibDelete" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PLUGIN_FootprintLibDelete" "', argument " "3"" of type '" "PROPERTIES *""'"); 
  }
  arg3 = reinterpret_cast< PROPERTIES * >(argp3);
  {
    try{
      (arg1)->FootprintLibDelete((wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintLibDelete__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PLUGIN_FootprintLibDelete",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_FootprintLibDelete" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (arg1)->FootprintLibDelete((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLUGIN_FootprintLibDelete(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PLUGIN_FootprintLibDelete__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PLUGIN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_PROPERTIES, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PLUGIN_FootprintLibDelete__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PLUGIN_FootprintLibDelete'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PLUGIN::FootprintLibDelete(wxString const &,PROPERTIES *)\n"
    "    PLUGIN::FootprintLibDelete(wxString const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PLUGIN_IsFootprintLibWritable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PLUGIN_IsFootprintLibWritable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLUGIN_IsFootprintLibWritable" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (bool)(arg1)->IsFootprintLibWritable((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PLUGIN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PLUGIN *arg1 = (PLUGIN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PLUGIN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PLUGIN, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PLUGIN" "', argument " "1"" of type '" "PLUGIN *""'"); 
  }
  arg1 = reinterpret_cast< PLUGIN * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PLUGIN_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PLUGIN, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PCB_IO_PluginName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PCB_IO_PluginName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PCB_IO_PluginName" "', argument " "1"" of type '" "PCB_IO const *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  {
    try{
      result = (wxString *) &((PCB_IO const *)arg1)->PluginName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PCB_IO_GetFileExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PCB_IO_GetFileExtension",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PCB_IO_GetFileExtension" "', argument " "1"" of type '" "PCB_IO const *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  {
    try{
      result = (wxString *) &((PCB_IO const *)arg1)->GetFileExtension();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PCB_IO_Save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  PROPERTIES *arg4 = (PROPERTIES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PCB_IO_Save",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PCB_IO_Save" "', argument " "1"" of type '" "PCB_IO *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PCB_IO_Save" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PCB_IO_Save" "', argument " "4"" of type '" "PROPERTIES *""'"); 
  }
  arg4 = reinterpret_cast< PROPERTIES * >(argp4);
  {
    try{
      (arg1)->Save((wxString const &)*arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PCB_IO_Save__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PCB_IO_Save",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PCB_IO_Save" "', argument " "1"" of type '" "PCB_IO *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PCB_IO_Save" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  {
    try{
      (arg1)->Save((wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PCB_IO_Save(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PCB_IO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PCB_IO_Save__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PCB_IO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_PROPERTIES, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PCB_IO_Save__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PCB_IO_Save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PCB_IO::Save(wxString const &,BOARD *,PROPERTIES *)\n"
    "    PCB_IO::Save(wxString const &,BOARD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PCB_IO_Load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  PROPERTIES *arg4 = (PROPERTIES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PCB_IO_Load",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PCB_IO_Load" "', argument " "1"" of type '" "PCB_IO *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PCB_IO_Load" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_PROPERTIES, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PCB_IO_Load" "', argument " "4"" of type '" "PROPERTIES *""'"); 
  }
  arg4 = reinterpret_cast< PROPERTIES * >(argp4);
  {
    try{
      result = (BOARD *)(arg1)->Load((wxString const &)*arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PCB_IO_Load__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  wxString *arg2 = 0 ;
  BOARD *arg3 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PCB_IO_Load",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PCB_IO_Load" "', argument " "1"" of type '" "PCB_IO *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PCB_IO_Load" "', argument " "3"" of type '" "BOARD *""'"); 
  }
  arg3 = reinterpret_cast< BOARD * >(argp3);
  {
    try{
      result = (BOARD *)(arg1)->Load((wxString const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PCB_IO_Load(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PCB_IO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PCB_IO_Load__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PCB_IO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BOARD, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_PROPERTIES, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PCB_IO_Load__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PCB_IO_Load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PCB_IO::Load(wxString const &,BOARD *,PROPERTIES *)\n"
    "    PCB_IO::Load(wxString const &,BOARD *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PCB_IO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PCB_IO")) SWIG_fail;
  {
    try{
      result = (PCB_IO *)new PCB_IO();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PCB_IO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PCB_IO_Format__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PCB_IO_Format",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PCB_IO_Format" "', argument " "1"" of type '" "PCB_IO const *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PCB_IO_Format" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PCB_IO_Format" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      try {
        ((PCB_IO const *)arg1)->Format(arg2,arg3);
      }
      catch(IO_ERROR &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new IO_ERROR(static_cast< const IO_ERROR& >(_e))),SWIGTYPE_p_IO_ERROR,SWIG_POINTER_OWN), "IO_ERROR", SWIGTYPE_p_IO_ERROR); SWIG_fail;
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PCB_IO_Format__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PCB_IO_Format",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PCB_IO_Format" "', argument " "1"" of type '" "PCB_IO const *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PCB_IO_Format" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  {
    try{
      try {
        ((PCB_IO const *)arg1)->Format(arg2);
      }
      catch(IO_ERROR &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new IO_ERROR(static_cast< const IO_ERROR& >(_e))),SWIGTYPE_p_IO_ERROR,SWIG_POINTER_OWN), "IO_ERROR", SWIGTYPE_p_IO_ERROR); SWIG_fail;
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PCB_IO_Format(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PCB_IO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PCB_IO_Format__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PCB_IO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PCB_IO_Format__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PCB_IO_Format'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PCB_IO::Format(BOARD_ITEM *,int) const\n"
    "    PCB_IO::Format(BOARD_ITEM *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PCB_IO_GetStringOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PCB_IO_GetStringOutput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PCB_IO_GetStringOutput" "', argument " "1"" of type '" "PCB_IO *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PCB_IO_GetStringOutput" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      result = (arg1)->GetStringOutput(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PCB_IO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PCB_IO *arg1 = (PCB_IO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PCB_IO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PCB_IO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PCB_IO" "', argument " "1"" of type '" "PCB_IO *""'"); 
  }
  arg1 = reinterpret_cast< PCB_IO * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PCB_IO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PCB_IO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Get" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)((DLIST< BOARD_ITEM > const *)arg1)->operator BOARD_ITEM*();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List___deref__" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)((DLIST< BOARD_ITEM > const *)arg1)->operator ->();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetFirst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetFirst" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)((DLIST< BOARD_ITEM > const *)arg1)->GetFirst();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetLast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetLast" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)((DLIST< BOARD_ITEM > const *)arg1)->GetLast();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Append__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Append" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Append" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  {
    try{
      (arg1)->Append(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Append__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  DLIST< BOARD_ITEM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Append" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DLISTT_BOARD_ITEM_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Append" "', argument " "2"" of type '" "DLIST< BOARD_ITEM > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Append" "', argument " "2"" of type '" "DLIST< BOARD_ITEM > &""'"); 
  }
  arg2 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp2);
  {
    try{
      (arg1)->Append(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Append(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_ITEM_List_Append__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_ITEM_List_Append__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ITEM_List_Append'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DLIST< BOARD_ITEM >::Append(BOARD_ITEM *)\n"
    "    DLIST< BOARD_ITEM >::Append(DLIST< BOARD_ITEM > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  BOARD_ITEM *arg3 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_ITEM_List_Insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Insert" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Insert" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_List_Insert" "', argument " "3"" of type '" "BOARD_ITEM *""'"); 
  }
  arg3 = reinterpret_cast< BOARD_ITEM * >(argp3);
  {
    try{
      (arg1)->Insert(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Remove" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Remove" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  {
    try{
      result = (BOARD_ITEM *)(arg1)->Remove(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_begin" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)((DLIST< BOARD_ITEM > const *)arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_end" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)((DLIST< BOARD_ITEM > const *)arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_PopFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_PopFront",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_PopFront" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)(arg1)->PopFront();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_PopBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_PopBack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_PopBack" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)(arg1)->PopBack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_PushFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_PushFront",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_PushFront" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_PushFront" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  {
    try{
      (arg1)->PushFront(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_PushBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  BOARD_ITEM *arg2 = (BOARD_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_PushBack",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_PushBack" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_PushBack" "', argument " "2"" of type '" "BOARD_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_ITEM * >(argp2);
  {
    try{
      (arg1)->PushBack(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BOARD_ITEM_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BOARD_ITEM_List")) SWIG_fail;
  {
    try{
      result = (DLIST< BOARD_ITEM > *)new DLIST< BOARD_ITEM >();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_BOARD_ITEM_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BOARD_ITEM_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BOARD_ITEM_List",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BOARD_ITEM_List" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Next" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)(*arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Back" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)(*arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetParent" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)(*arg1)->GetParent();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetLayer" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLayer();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_SetLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetLayer" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_SetLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_ITEM_List_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Draw" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_ITEM_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BOARD_ITEM_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_ITEM_List_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Draw" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BOARD_ITEM_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BOARD_ITEM_List_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_BOARD_ITEM_List_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ITEM_List_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD_ITEM::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    BOARD_ITEM::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsOnLayer" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)(*arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsTrack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_IsTrack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsTrack" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsTrack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_IsLocked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsLocked" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsLocked();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_UnLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_UnLink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_UnLink" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      (*arg1)->UnLink();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_DeleteStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_DeleteStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_DeleteStructure" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      (*arg1)->DeleteStructure();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_ShowShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  STROKE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_ShowShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_ShowShape" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_ShowShape" "', argument " "2"" of type '" "STROKE_T""'");
  } 
  arg2 = static_cast< STROKE_T >(val2);
  {
    try{
      result = (*arg1)->ShowShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Move" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_ITEM_List_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Rotate" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_ITEM_List_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (*arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Flip" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetBoard",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetBoard" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD *)(*arg1)->GetBoard();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetLayerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetLayerName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetLayerName" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (*arg1)->GetLayerName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_FormatInternalUnits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_FormatInternalUnits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (*arg1)->FormatInternalUnits(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_FormatInternalUnits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_FormatInternalUnits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_FormatInternalUnits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_ITEM_List_FormatInternalUnits__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_ITEM_List_FormatInternalUnits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BOARD_ITEM_List_FormatInternalUnits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ITEM_List_FormatInternalUnits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD_ITEM::FormatInternalUnits(int)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxPoint const &)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxSize const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_FormatAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_FormatAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_FormatAngle" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_FormatAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      result = (*arg1)->FormatAngle(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_TEXTE_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_TEXTE_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_TEXTE_PCB" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (TEXTE_PCB *)BOARD_ITEM_Cast_to_TEXTE_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_DIMENSION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DIMENSION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_DIMENSION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_DIMENSION" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (DIMENSION *)BOARD_ITEM_Cast_to_DIMENSION((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DIMENSION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_MODULE" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (MODULE *)BOARD_ITEM_Cast_to_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_TEXTE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_TEXTE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_TEXTE_MODULE" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *)BOARD_ITEM_Cast_to_TEXTE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_DRAWSEGMENT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_DRAWSEGMENT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_DRAWSEGMENT" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (DRAWSEGMENT *)BOARD_ITEM_Cast_to_DRAWSEGMENT((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_MARKER_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_MARKER_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_MARKER_PCB" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (MARKER_PCB *)BOARD_ITEM_Cast_to_MARKER_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_BOARD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_BOARD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_BOARD" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (BOARD *)BOARD_ITEM_Cast_to_BOARD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_EDGE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_EDGE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_EDGE_MODULE" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (EDGE_MODULE *)BOARD_ITEM_Cast_to_EDGE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_D_PAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_D_PAD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_D_PAD" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (D_PAD *)BOARD_ITEM_Cast_to_D_PAD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_TRACK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_TRACK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_TRACK" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (TRACK *)BOARD_ITEM_Cast_to_TRACK((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_SEGZONE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_SEGZONE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_SEGZONE" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (SEGZONE *)BOARD_ITEM_Cast_to_SEGZONE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Cast_to_SEGVIA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGVIA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Cast_to_SEGVIA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Cast_to_SEGVIA" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    try{
      result = (SEGVIA *)BOARD_ITEM_Cast_to_SEGVIA((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGVIA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  KICAD_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Type" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (KICAD_T)(*arg1)->Type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_SetTimeStamp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetTimeStamp" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_time_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'");
    } else {
      time_t * temp = reinterpret_cast< time_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (*arg1)->SetTimeStamp(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  time_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetTimeStamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetTimeStamp" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (*arg1)->GetTimeStamp();
  resultobj = SWIG_NewPointerObj((new time_t(static_cast< const time_t& >(result))), SWIGTYPE_p_time_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetSon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetSon" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (EDA_ITEM *)(*arg1)->GetSon();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DHEAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetList" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (DHEAD *)(*arg1)->GetList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DHEAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_SetParent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetParent" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_SetParent" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetParent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_SetSon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetSon" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_SetSon" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetSon(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  DHEAD *arg2 = (DHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_SetList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetList" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DHEAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_SetList" "', argument " "2"" of type '" "DHEAD *""'"); 
  }
  arg2 = reinterpret_cast< DHEAD * >(argp2);
  (*arg1)->SetList(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsNew(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_IsNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsNew" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (bool)(*arg1)->IsNew();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_IsModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsModified" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (bool)(*arg1)->IsModified();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsMoving(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_IsMoving",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsMoving" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (bool)(*arg1)->IsMoving();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsDragging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_IsDragging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsDragging" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (bool)(*arg1)->IsDragging();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsSelected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_IsSelected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsSelected" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (bool)(*arg1)->IsSelected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsResized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_IsResized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsResized" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (bool)(*arg1)->IsResized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_SetModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetModified" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  (*arg1)->SetModified();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_GetState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetState" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_GetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(*arg1)->GetState(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_ITEM_List_SetState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetState" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_SetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BOARD_ITEM_List_SetState" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (*arg1)->SetState(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetStatus" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (int)(*arg1)->GetStatus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_SetStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetStatus" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_SetStatus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetStatus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_SetFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetFlags" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_SetFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_ClearFlags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_ClearFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_ClearFlags" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_ClearFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->ClearFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_ClearFlags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_ClearFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_ClearFlags" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  (*arg1)->ClearFlags();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_ClearFlags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BOARD_ITEM_List_ClearFlags__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BOARD_ITEM_List_ClearFlags__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ITEM_List_ClearFlags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::ClearFlags(int)\n"
    "    EDA_ITEM::ClearFlags()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetFlags" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (int)(*arg1)->GetFlags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_SetImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetImage" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_SetImage" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_SetForceVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_SetForceVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_SetForceVisible" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BOARD_ITEM_List_SetForceVisible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->SetForceVisible(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_DisplayInfo" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  (*arg1)->DisplayInfo(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_HitTest" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  result = (bool)(*arg1)->HitTest((wxPoint const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_HitTest" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  result = (bool)(*arg1)->HitTest((EDA_RECT const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_ITEM_List_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_ITEM_List_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ITEM_List_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::HitTest(wxPoint const &)\n"
    "    EDA_ITEM::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetBoundingBox" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (*arg1)->GetBoundingBox();
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Clone" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (EDA_ITEM *)(*arg1)->Clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IterateForward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  INSPECTOR *arg3 = (INSPECTOR *) 0 ;
  void *arg4 = (void *) 0 ;
  KICAD_T *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BOARD_ITEM_List_IterateForward",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IterateForward" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_IterateForward" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_List_IterateForward" "', argument " "3"" of type '" "INSPECTOR *""'"); 
  }
  arg3 = reinterpret_cast< INSPECTOR * >(argp3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BOARD_ITEM_List_IterateForward" "', argument " "4"" of type '" "void const *""'"); 
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BOARD_ITEM_List_IterateForward" "', argument " "5"" of type '" "KICAD_T const []""'"); 
  } 
  arg5 = reinterpret_cast< KICAD_T * >(argp5);
  result = (SEARCH_RESULT)(*arg1)->IterateForward(arg2,arg3,(void const *)arg4,(KICAD_T const (*))arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Visit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_ITEM_List_Visit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Visit" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Visit" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_List_Visit" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BOARD_ITEM_List_Visit" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  result = (SEARCH_RESULT)(*arg1)->Visit(arg2,(void const *)arg3,(KICAD_T const (*))arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetClass" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (*arg1)->GetClass();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetSelectMenuText" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (*arg1)->GetSelectMenuText();
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_GetMenuImage" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (*arg1)->GetMenuImage();
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Matches__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  wxPoint *arg4 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BOARD_ITEM_List_Matches",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Matches" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_List_Matches" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BOARD_ITEM_List_Matches" "', argument " "4"" of type '" "wxPoint *""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  result = (bool)(*arg1)->Matches(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Matches__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxString *arg2 = 0 ;
  wxFindReplaceData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_ITEM_List_Matches",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Matches" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  arg3 = reinterpret_cast< wxFindReplaceData * >(argp3);
  result = (bool)(*arg1)->Matches((wxString const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Matches(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BOARD_ITEM_List_Matches__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BOARD_ITEM_List_Matches__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ITEM_List_Matches'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Matches(wxFindReplaceData &,void *,wxPoint *)\n"
    "    EDA_ITEM::Matches(wxString const &,wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  wxString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_ITEM_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Replace" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  result = (bool)(*arg1)->Replace(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_ITEM_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Replace" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_List_Replace" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (bool)(*arg1)->Replace(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Replace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List_Replace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Replace" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  result = (bool)(*arg1)->Replace(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Replace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BOARD_ITEM_List_Replace__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          return _wrap_BOARD_ITEM_List_Replace__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BOARD_ITEM_List_Replace__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BOARD_ITEM_List_Replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,wxString &)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,void *)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_IsReplaceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BOARD_ITEM_List_IsReplaceable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_IsReplaceable" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  result = (bool)(*arg1)->IsReplaceable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_ITEM *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BOARD_ITEM_List___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List___lt__" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_ITEM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BOARD_ITEM_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  result = (bool)(*arg1)->operator <((EDA_ITEM const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BOARD_ITEM_List_Sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< BOARD_ITEM > *arg1 = (DLIST< BOARD_ITEM > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg3 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BOARD_ITEM_List_Sort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BOARD_ITEM_List_Sort" "', argument " "1"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BOARD_ITEM_List_Sort" "', argument " "2"" of type '" "EDA_ITEM const *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BOARD_ITEM_List_Sort" "', argument " "3"" of type '" "EDA_ITEM const *""'"); 
  }
  arg3 = reinterpret_cast< EDA_ITEM * >(argp3);
  result = (bool)(*arg1)->Sort((EDA_ITEM const *)arg2,(EDA_ITEM const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BOARD_ITEM_List_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DLISTT_BOARD_ITEM_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MODULE_List_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Get" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)((DLIST< MODULE > const *)arg1)->operator MODULE*();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List___deref__" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)((DLIST< MODULE > const *)arg1)->operator ->();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetFirst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetFirst" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)((DLIST< MODULE > const *)arg1)->GetFirst();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetLast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetLast" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)((DLIST< MODULE > const *)arg1)->GetLast();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Append__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  MODULE *arg2 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Append" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Append" "', argument " "2"" of type '" "MODULE *""'"); 
  }
  arg2 = reinterpret_cast< MODULE * >(argp2);
  {
    try{
      (arg1)->Append(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Append__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  DLIST< MODULE > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Append" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DLISTT_MODULE_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Append" "', argument " "2"" of type '" "DLIST< MODULE > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Append" "', argument " "2"" of type '" "DLIST< MODULE > &""'"); 
  }
  arg2 = reinterpret_cast< DLIST< MODULE > * >(argp2);
  {
    try{
      (arg1)->Append(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Append(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_MODULE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_List_Append__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_List_Append__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_List_Append'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DLIST< MODULE >::Append(MODULE *)\n"
    "    DLIST< MODULE >::Append(DLIST< MODULE > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  MODULE *arg2 = (MODULE *) 0 ;
  MODULE *arg3 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_List_Insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Insert" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Insert" "', argument " "2"" of type '" "MODULE *""'"); 
  }
  arg2 = reinterpret_cast< MODULE * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_Insert" "', argument " "3"" of type '" "MODULE *""'"); 
  }
  arg3 = reinterpret_cast< MODULE * >(argp3);
  {
    try{
      (arg1)->Insert(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  MODULE *arg2 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Remove" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Remove" "', argument " "2"" of type '" "MODULE *""'"); 
  }
  arg2 = reinterpret_cast< MODULE * >(argp2);
  {
    try{
      result = (MODULE *)(arg1)->Remove(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_begin" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)((DLIST< MODULE > const *)arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_end" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)((DLIST< MODULE > const *)arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_PopFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_PopFront",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_PopFront" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)(arg1)->PopFront();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_PopBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_PopBack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_PopBack" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)(arg1)->PopBack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_PushFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  MODULE *arg2 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_PushFront",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_PushFront" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_PushFront" "', argument " "2"" of type '" "MODULE *""'"); 
  }
  arg2 = reinterpret_cast< MODULE * >(argp2);
  {
    try{
      (arg1)->PushFront(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_PushBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  MODULE *arg2 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_PushBack",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_PushBack" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_PushBack" "', argument " "2"" of type '" "MODULE *""'"); 
  }
  arg2 = reinterpret_cast< MODULE * >(argp2);
  {
    try{
      (arg1)->PushBack(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MODULE_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MODULE_List")) SWIG_fail;
  {
    try{
      result = (DLIST< MODULE > *)new DLIST< MODULE >();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_MODULE_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MODULE_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MODULE_List",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MODULE_List" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Orient_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Orient_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Orient_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_Orient_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (*arg1)->m_Orient = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Orient_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Orient_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Orient_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (double) ((*arg1)->m_Orient);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Pos_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_Pos_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (*arg1)->m_Pos = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Pos_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (wxPoint *)& ((*arg1)->m_Pos);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Pads_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  DLIST< D_PAD > *arg2 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Pads_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Pads_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_Pads_set" "', argument " "2"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< D_PAD > * >(argp2);
  if (arg1) (*arg1)->m_Pads = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Pads_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< D_PAD > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Pads_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Pads_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (DLIST< D_PAD > *)& ((*arg1)->m_Pads);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Drawings_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  DLIST< BOARD_ITEM > *arg2 = (DLIST< BOARD_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Drawings_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Drawings_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_Drawings_set" "', argument " "2"" of type '" "DLIST< BOARD_ITEM > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< BOARD_ITEM > * >(argp2);
  if (arg1) (*arg1)->m_Drawings = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Drawings_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< BOARD_ITEM > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Drawings_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Drawings_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (DLIST< BOARD_ITEM > *)& ((*arg1)->m_Drawings);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_BOARD_ITEM_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_3D_Drawings_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  DLIST< S3D_MASTER > *arg2 = (DLIST< S3D_MASTER > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_3D_Drawings_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_3D_Drawings_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DLISTT_S3D_MASTER_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_3D_Drawings_set" "', argument " "2"" of type '" "DLIST< S3D_MASTER > *""'"); 
  }
  arg2 = reinterpret_cast< DLIST< S3D_MASTER > * >(argp2);
  if (arg1) (*arg1)->m_3D_Drawings = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_3D_Drawings_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DLIST< S3D_MASTER > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_3D_Drawings_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_3D_Drawings_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (DLIST< S3D_MASTER > *)& ((*arg1)->m_3D_Drawings);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_S3D_MASTER_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Reference_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  TEXTE_MODULE *arg2 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Reference_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Reference_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TEXTE_MODULE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_Reference_set" "', argument " "2"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg2 = reinterpret_cast< TEXTE_MODULE * >(argp2);
  if (arg1) (*arg1)->m_Reference = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Reference_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Reference_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Reference_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (TEXTE_MODULE *) ((*arg1)->m_Reference);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  TEXTE_MODULE *arg2 = (TEXTE_MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Value_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TEXTE_MODULE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_Value_set" "', argument " "2"" of type '" "TEXTE_MODULE *""'"); 
  }
  arg2 = reinterpret_cast< TEXTE_MODULE * >(argp2);
  if (arg1) (*arg1)->m_Value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Value_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (TEXTE_MODULE *) ((*arg1)->m_Value);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_LibRef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_LibRef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_LibRef_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (*arg1)->m_LibRef = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_LibRef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_LibRef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_LibRef_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result =  ((*arg1)->m_LibRef);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Attributs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Attributs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Attributs_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_Attributs_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_Attributs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Attributs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Attributs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Attributs_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int) ((*arg1)->m_Attributs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_flag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_flag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_flag_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_flag_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->flag = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_flag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_flag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_flag_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int) ((*arg1)->flag);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_ModuleStatus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_ModuleStatus_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_ModuleStatus_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_ModuleStatus_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_ModuleStatus = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_ModuleStatus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_ModuleStatus_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_ModuleStatus_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int) ((*arg1)->m_ModuleStatus);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_BoundaryBox_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_RECT *arg2 = (EDA_RECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_BoundaryBox_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_BoundaryBox_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_BoundaryBox_set" "', argument " "2"" of type '" "EDA_RECT *""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  if (arg1) (*arg1)->m_BoundaryBox = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_BoundaryBox_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_BoundaryBox_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_BoundaryBox_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (EDA_RECT *)& ((*arg1)->m_BoundaryBox);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_RECT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_PadNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_PadNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_PadNum_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_PadNum_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_PadNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_PadNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_PadNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_PadNum_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int) ((*arg1)->m_PadNum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_AltPadNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_AltPadNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_AltPadNum_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_AltPadNum_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_AltPadNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_AltPadNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_AltPadNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_AltPadNum_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int) ((*arg1)->m_AltPadNum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_CntRot90_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_CntRot90_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_CntRot90_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_CntRot90_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_CntRot90 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_CntRot90_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_CntRot90_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_CntRot90_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int) ((*arg1)->m_CntRot90);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_CntRot180_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_CntRot180_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_CntRot180_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_CntRot180_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_CntRot180 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_CntRot180_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_CntRot180_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_CntRot180_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int) ((*arg1)->m_CntRot180);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Ext_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxSize *arg2 = (wxSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Ext_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Ext_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxSize, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_Ext_set" "', argument " "2"" of type '" "wxSize *""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  if (arg1) (*arg1)->m_Ext = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Ext_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Ext_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Ext_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (wxSize *)& ((*arg1)->m_Ext);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Surface_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Surface_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Surface_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_Surface_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (*arg1)->m_Surface = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Surface_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Surface_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Surface_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (double) ((*arg1)->m_Surface);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Link_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Link_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Link_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_time_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_Link_set" "', argument " "2"" of type '" "time_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_m_Link_set" "', argument " "2"" of type '" "time_t""'");
    } else {
      time_t * temp = reinterpret_cast< time_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (*arg1)->m_Link = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Link_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  time_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Link_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Link_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result =  ((*arg1)->m_Link);
  resultobj = SWIG_NewPointerObj((new time_t(static_cast< const time_t& >(result))), SWIGTYPE_p_time_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_LastEdit_Time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_LastEdit_Time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_LastEdit_Time_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_LastEdit_Time_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (*arg1)->m_LastEdit_Time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_LastEdit_Time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_LastEdit_Time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_LastEdit_Time_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (long) ((*arg1)->m_LastEdit_Time);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Path_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Path_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Path_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (*arg1)->m_Path = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Path_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Path_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Path_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result =  ((*arg1)->m_Path);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Doc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_Doc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Doc_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (*arg1)->m_Doc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_Doc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_Doc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_Doc_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result =  ((*arg1)->m_Doc);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_KeyWord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_KeyWord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_KeyWord_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    wxString* sptr = newWxStringFromPy(obj1);
    if (sptr == NULL) SWIG_fail;
    arg2 = *sptr;
    delete sptr;
  }
  if (arg1) (*arg1)->m_KeyWord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_KeyWord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_KeyWord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_KeyWord_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result =  ((*arg1)->m_KeyWord);
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_ZoneConnection_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  ZoneConnection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_ZoneConnection_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_ZoneConnection_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZoneConnection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_m_ZoneConnection_set" "', argument " "2"" of type '" "ZoneConnection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_m_ZoneConnection_set" "', argument " "2"" of type '" "ZoneConnection""'");
    } else {
      ZoneConnection * temp = reinterpret_cast< ZoneConnection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (*arg1)->m_ZoneConnection = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_ZoneConnection_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZoneConnection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_ZoneConnection_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_ZoneConnection_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result =  ((*arg1)->m_ZoneConnection);
  resultobj = SWIG_NewPointerObj((new ZoneConnection(static_cast< const ZoneConnection& >(result))), SWIGTYPE_p_ZoneConnection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_ThermalWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_ThermalWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_ThermalWidth_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_ThermalWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_ThermalWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_ThermalWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_ThermalWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_ThermalWidth_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int) ((*arg1)->m_ThermalWidth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_ThermalGap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_m_ThermalGap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_ThermalGap_set" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_m_ThermalGap_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_ThermalGap = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_m_ThermalGap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_m_ThermalGap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_m_ThermalGap_get" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int) ((*arg1)->m_ThermalGap);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Next" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)(*arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Back" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)(*arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  MODULE *arg2 = (MODULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Copy" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MODULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Copy" "', argument " "2"" of type '" "MODULE *""'"); 
  }
  arg2 = reinterpret_cast< MODULE * >(argp2);
  {
    try{
      (*arg1)->Copy(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_CalculateBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_CalculateBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_CalculateBoundingBox" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      (*arg1)->CalculateBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetFootPrintRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetFootPrintRect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetFootPrintRect" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (*arg1)->GetFootPrintRect();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetBoundingBox" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (*arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetPosition" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetPosition" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetOrientation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetOrientation" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetOrientation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      (*arg1)->SetOrientation(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetOrientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetOrientation" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (double)(*arg1)->GetOrientation();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetLibRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetLibRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetLibRef" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (wxString *) &(*arg1)->GetLibRef();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetLibRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetLibRef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetLibRef" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (*arg1)->SetLibRef((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetDescription" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (wxString *) &(*arg1)->GetDescription();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetDescription" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (*arg1)->SetDescription((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetKeywords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetKeywords",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetKeywords" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (wxString *) &(*arg1)->GetKeywords();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetKeywords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetKeywords",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetKeywords" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (*arg1)->SetKeywords((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetPath" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (wxString *) &(*arg1)->GetPath();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetPath" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (*arg1)->SetPath((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetLocalSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetLocalSolderMaskMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetLocalSolderMaskMargin" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLocalSolderMaskMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetLocalSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetLocalSolderMaskMargin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetLocalSolderMaskMargin" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetLocalSolderMaskMargin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLocalSolderMaskMargin(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetLocalClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetLocalClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetLocalClearance" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLocalClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetLocalClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetLocalClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetLocalClearance" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetLocalClearance" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLocalClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetLocalSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetLocalSolderPasteMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetLocalSolderPasteMargin" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLocalSolderPasteMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetLocalSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetLocalSolderPasteMargin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetLocalSolderPasteMargin" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetLocalSolderPasteMargin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLocalSolderPasteMargin(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetLocalSolderPasteMarginRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetLocalSolderPasteMarginRatio",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetLocalSolderPasteMarginRatio" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (double)(*arg1)->GetLocalSolderPasteMarginRatio();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetLocalSolderPasteMarginRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetLocalSolderPasteMarginRatio",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetLocalSolderPasteMarginRatio" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetLocalSolderPasteMarginRatio" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      (*arg1)->SetLocalSolderPasteMarginRatio(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetZoneConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  ZoneConnection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetZoneConnection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetZoneConnection" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZoneConnection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_SetZoneConnection" "', argument " "2"" of type '" "ZoneConnection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_SetZoneConnection" "', argument " "2"" of type '" "ZoneConnection""'");
    } else {
      ZoneConnection * temp = reinterpret_cast< ZoneConnection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (*arg1)->SetZoneConnection(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetZoneConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZoneConnection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetZoneConnection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetZoneConnection" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (*arg1)->GetZoneConnection();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new ZoneConnection(static_cast< const ZoneConnection& >(result))), SWIGTYPE_p_ZoneConnection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetThermalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetThermalWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetThermalWidth" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetThermalWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetThermalWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetThermalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetThermalWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetThermalWidth" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetThermalWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetThermalGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetThermalGap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetThermalGap" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetThermalGap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetThermalGap(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetThermalGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetThermalGap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetThermalGap" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetThermalGap();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetAttributes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetAttributes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetAttributes" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetAttributes();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetAttributes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetAttributes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetAttributes" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetAttributes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetAttributes(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Move" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_List_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Rotate" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MODULE_List_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (*arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Flip" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsLocked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsLocked" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsLocked();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetLocked",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetLocked" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetLocked" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (*arg1)->SetLocked(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsPlaced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsPlaced",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsPlaced" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsPlaced();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetIsPlaced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetIsPlaced",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetIsPlaced" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetIsPlaced" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (*arg1)->SetIsPlaced(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetLastEditTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetLastEditTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetLastEditTime" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetLastEditTime" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try{
      (*arg1)->SetLastEditTime(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetLastEditTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetLastEditTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetLastEditTime" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (long)(*arg1)->GetLastEditTime();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Read_GPCB_Descr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Read_GPCB_Descr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Read_GPCB_Descr" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (bool)(*arg1)->Read_GPCB_Descr((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MODULE_List_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Draw" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MODULE_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MODULE_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MODULE_List_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Draw" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MODULE_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MODULE_List_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MODULE_List_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_List_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MODULE::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    MODULE::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Draw3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_3D_CANVAS *arg2 = (EDA_3D_CANVAS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Draw3D",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Draw3D" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_3D_CANVAS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Draw3D" "', argument " "2"" of type '" "EDA_3D_CANVAS *""'"); 
  }
  arg2 = reinterpret_cast< EDA_3D_CANVAS * >(argp2);
  {
    try{
      (*arg1)->Draw3D(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_DrawEdgesOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  wxPoint *arg4 = 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MODULE_List_DrawEdgesOnly",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_DrawEdgesOnly" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_DrawEdgesOnly" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_DrawEdgesOnly" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MODULE_List_DrawEdgesOnly" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_DrawEdgesOnly" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MODULE_List_DrawEdgesOnly" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try{
      (*arg1)->DrawEdgesOnly(arg2,arg3,(wxPoint const &)*arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_DrawAncre(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  wxPoint *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:MODULE_List_DrawAncre",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_DrawAncre" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_DrawAncre" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_DrawAncre" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MODULE_List_DrawAncre" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_DrawAncre" "', argument " "4"" of type '" "wxPoint const &""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MODULE_List_DrawAncre" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "MODULE_List_DrawAncre" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try{
      (*arg1)->DrawAncre(arg2,arg3,(wxPoint const &)*arg4,arg5,arg6);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_DisplayInfo" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (*arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_HitTest" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(*arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_HitTest" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  {
    try{
      result = (bool)(*arg1)->HitTest((EDA_RECT const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_List_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_List_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_List_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MODULE::HitTest(wxPoint const &)\n"
    "    MODULE::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetReference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetReference" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (wxString *) &(*arg1)->GetReference();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetReference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetReference",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetReference" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (*arg1)->SetReference((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetValue" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (wxString *) &(*arg1)->GetValue();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetValue" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (*arg1)->SetValue((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Value" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *) &(*arg1)->Value();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Reference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Reference" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *) &(*arg1)->Reference();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_FindPadByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_FindPadByName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_FindPadByName" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      result = (D_PAD *)(*arg1)->FindPadByName((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetPad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_List_GetPad",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetPad" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MODULE_List_GetPad" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (D_PAD *)(*arg1)->GetPad((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetPad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_GetPad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetPad" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_GetPad" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (D_PAD *)(*arg1)->GetPad((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetPad(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_List_GetPad__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MODULE_List_GetPad__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_List_GetPad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MODULE::GetPad(wxPoint const &,int)\n"
    "    MODULE::GetPad(wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetPadCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetPadCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetPadCount" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (unsigned int)(*arg1)->GetPadCount();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Add3DModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  S3D_MASTER *arg2 = (S3D_MASTER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Add3DModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Add3DModel" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_S3D_MASTER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Add3DModel" "', argument " "2"" of type '" "S3D_MASTER *""'"); 
  }
  arg2 = reinterpret_cast< S3D_MASTER * >(argp2);
  {
    try{
      (*arg1)->Add3DModel(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_AddPad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_AddPad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_AddPad" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_AddPad" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      (*arg1)->AddPad(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Visit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MODULE_List_Visit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Visit" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Visit" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_Visit" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MODULE_List_Visit" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  {
    try{
      result = (SEARCH_RESULT)(*arg1)->Visit(arg2,(void const *)arg3,(KICAD_T const (*))arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetClass" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (*arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetSelectMenuText" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (*arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetMenuImage" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (*arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Clone" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (EDA_ITEM *)(*arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetParent" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)(*arg1)->GetParent();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetLayer" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLayer();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetLayer" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsOnLayer" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)(*arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsTrack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsTrack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsTrack" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsTrack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_UnLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_UnLink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_UnLink" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      (*arg1)->UnLink();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_DeleteStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_DeleteStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_DeleteStructure" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      (*arg1)->DeleteStructure();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_ShowShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  STROKE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_ShowShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_ShowShape" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_ShowShape" "', argument " "2"" of type '" "STROKE_T""'");
  } 
  arg2 = static_cast< STROKE_T >(val2);
  {
    try{
      result = (*arg1)->ShowShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetBoard",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetBoard" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (BOARD *)(*arg1)->GetBoard();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetLayerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetLayerName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetLayerName" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (*arg1)->GetLayerName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_FormatInternalUnits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_FormatInternalUnits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (*arg1)->FormatInternalUnits(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_FormatInternalUnits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_FormatInternalUnits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_FormatInternalUnits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_List_FormatInternalUnits__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_List_FormatInternalUnits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MODULE_List_FormatInternalUnits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_List_FormatInternalUnits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD_ITEM::FormatInternalUnits(int)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxPoint const &)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxSize const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_List_FormatAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_FormatAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_FormatAngle" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_FormatAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      result = (*arg1)->FormatAngle(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_TEXTE_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_TEXTE_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_TEXTE_PCB" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (TEXTE_PCB *)BOARD_ITEM_Cast_to_TEXTE_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_DIMENSION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DIMENSION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_DIMENSION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_DIMENSION" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (DIMENSION *)BOARD_ITEM_Cast_to_DIMENSION((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DIMENSION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_MODULE" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MODULE *)BOARD_ITEM_Cast_to_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_TEXTE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_TEXTE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_TEXTE_MODULE" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *)BOARD_ITEM_Cast_to_TEXTE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_DRAWSEGMENT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_DRAWSEGMENT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_DRAWSEGMENT" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (DRAWSEGMENT *)BOARD_ITEM_Cast_to_DRAWSEGMENT((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_MARKER_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_MARKER_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_MARKER_PCB" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (MARKER_PCB *)BOARD_ITEM_Cast_to_MARKER_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_BOARD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_BOARD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_BOARD" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (BOARD *)BOARD_ITEM_Cast_to_BOARD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_EDGE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_EDGE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_EDGE_MODULE" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (EDGE_MODULE *)BOARD_ITEM_Cast_to_EDGE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_D_PAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_D_PAD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_D_PAD" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (D_PAD *)BOARD_ITEM_Cast_to_D_PAD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_TRACK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_TRACK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_TRACK" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (TRACK *)BOARD_ITEM_Cast_to_TRACK((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_SEGZONE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_SEGZONE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_SEGZONE" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (SEGZONE *)BOARD_ITEM_Cast_to_SEGZONE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Cast_to_SEGVIA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGVIA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Cast_to_SEGVIA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Cast_to_SEGVIA" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    try{
      result = (SEGVIA *)BOARD_ITEM_Cast_to_SEGVIA((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGVIA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  KICAD_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_Type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Type" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (KICAD_T)(*arg1)->Type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetTimeStamp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetTimeStamp" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_time_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'");
    } else {
      time_t * temp = reinterpret_cast< time_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (*arg1)->SetTimeStamp(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  time_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetTimeStamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetTimeStamp" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (*arg1)->GetTimeStamp();
  resultobj = SWIG_NewPointerObj((new time_t(static_cast< const time_t& >(result))), SWIGTYPE_p_time_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetSon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetSon" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (EDA_ITEM *)(*arg1)->GetSon();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DHEAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetList" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (DHEAD *)(*arg1)->GetList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DHEAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetParent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetParent" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_SetParent" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetParent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetSon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetSon" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_SetSon" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetSon(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  DHEAD *arg2 = (DHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetList" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DHEAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_SetList" "', argument " "2"" of type '" "DHEAD *""'"); 
  }
  arg2 = reinterpret_cast< DHEAD * >(argp2);
  (*arg1)->SetList(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsNew(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsNew" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (bool)(*arg1)->IsNew();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsModified" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (bool)(*arg1)->IsModified();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsMoving(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsMoving",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsMoving" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (bool)(*arg1)->IsMoving();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsDragging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsDragging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsDragging" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (bool)(*arg1)->IsDragging();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsSelected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsSelected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsSelected" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (bool)(*arg1)->IsSelected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsResized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsResized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsResized" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (bool)(*arg1)->IsResized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_SetModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetModified" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  (*arg1)->SetModified();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_GetState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetState" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_GetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(*arg1)->GetState(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_List_SetState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetState" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MODULE_List_SetState" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (*arg1)->SetState(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetStatus" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int)(*arg1)->GetStatus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetStatus" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetStatus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetStatus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetFlags" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_ClearFlags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_ClearFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_ClearFlags" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_ClearFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->ClearFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_ClearFlags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_ClearFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_ClearFlags" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  (*arg1)->ClearFlags();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_ClearFlags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MODULE_List_ClearFlags__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MODULE_List_ClearFlags__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_List_ClearFlags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::ClearFlags(int)\n"
    "    EDA_ITEM::ClearFlags()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_List_GetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_GetFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_GetFlags" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (int)(*arg1)->GetFlags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetImage" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_SetImage" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_SetForceVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_SetForceVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_SetForceVisible" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MODULE_List_SetForceVisible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->SetForceVisible(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IterateForward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  INSPECTOR *arg3 = (INSPECTOR *) 0 ;
  void *arg4 = (void *) 0 ;
  KICAD_T *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MODULE_List_IterateForward",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IterateForward" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_IterateForward" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_IterateForward" "', argument " "3"" of type '" "INSPECTOR *""'"); 
  }
  arg3 = reinterpret_cast< INSPECTOR * >(argp3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MODULE_List_IterateForward" "', argument " "4"" of type '" "void const *""'"); 
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MODULE_List_IterateForward" "', argument " "5"" of type '" "KICAD_T const []""'"); 
  } 
  arg5 = reinterpret_cast< KICAD_T * >(argp5);
  result = (SEARCH_RESULT)(*arg1)->IterateForward(arg2,arg3,(void const *)arg4,(KICAD_T const (*))arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Matches__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  wxPoint *arg4 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MODULE_List_Matches",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Matches" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_Matches" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MODULE_List_Matches" "', argument " "4"" of type '" "wxPoint *""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  result = (bool)(*arg1)->Matches(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Matches__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxString *arg2 = 0 ;
  wxFindReplaceData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_List_Matches",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Matches" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  arg3 = reinterpret_cast< wxFindReplaceData * >(argp3);
  result = (bool)(*arg1)->Matches((wxString const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Matches(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MODULE_List_Matches__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MODULE_List_Matches__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_List_Matches'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Matches(wxFindReplaceData &,void *,wxPoint *)\n"
    "    EDA_ITEM::Matches(wxString const &,wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  wxString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Replace" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  result = (bool)(*arg1)->Replace(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Replace" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_Replace" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (bool)(*arg1)->Replace(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Replace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List_Replace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Replace" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  result = (bool)(*arg1)->Replace(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Replace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MODULE_List_Replace__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          return _wrap_MODULE_List_Replace__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_MODULE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MODULE_List_Replace__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MODULE_List_Replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,wxString &)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,void *)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MODULE_List_IsReplaceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MODULE_List_IsReplaceable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_IsReplaceable" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  result = (bool)(*arg1)->IsReplaceable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_ITEM *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MODULE_List___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List___lt__" "', argument " "1"" of type '" "DLIST< MODULE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_ITEM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MODULE_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  result = (bool)(*arg1)->operator <((EDA_ITEM const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MODULE_List_Sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< MODULE > *arg1 = (DLIST< MODULE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg3 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MODULE_List_Sort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_MODULE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MODULE_List_Sort" "', argument " "1"" of type '" "DLIST< MODULE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< MODULE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MODULE_List_Sort" "', argument " "2"" of type '" "EDA_ITEM const *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MODULE_List_Sort" "', argument " "3"" of type '" "EDA_ITEM const *""'"); 
  }
  arg3 = reinterpret_cast< EDA_ITEM * >(argp3);
  result = (bool)(*arg1)->Sort((EDA_ITEM const *)arg2,(EDA_ITEM const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MODULE_List_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DLISTT_MODULE_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SEGZONE_List_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Get" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)((DLIST< SEGZONE > const *)arg1)->operator SEGZONE*();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List___deref__" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)((DLIST< SEGZONE > const *)arg1)->operator ->();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetFirst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetFirst" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)((DLIST< SEGZONE > const *)arg1)->GetFirst();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetLast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetLast" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)((DLIST< SEGZONE > const *)arg1)->GetLast();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Append__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  SEGZONE *arg2 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Append" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Append" "', argument " "2"" of type '" "SEGZONE *""'"); 
  }
  arg2 = reinterpret_cast< SEGZONE * >(argp2);
  {
    try{
      (arg1)->Append(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Append__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  DLIST< SEGZONE > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Append" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DLISTT_SEGZONE_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Append" "', argument " "2"" of type '" "DLIST< SEGZONE > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Append" "', argument " "2"" of type '" "DLIST< SEGZONE > &""'"); 
  }
  arg2 = reinterpret_cast< DLIST< SEGZONE > * >(argp2);
  {
    try{
      (arg1)->Append(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Append(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SEGZONE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_Append__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_Append__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_Append'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DLIST< SEGZONE >::Append(SEGZONE *)\n"
    "    DLIST< SEGZONE >::Append(DLIST< SEGZONE > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  SEGZONE *arg2 = (SEGZONE *) 0 ;
  SEGZONE *arg3 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGZONE_List_Insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Insert" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Insert" "', argument " "2"" of type '" "SEGZONE *""'"); 
  }
  arg2 = reinterpret_cast< SEGZONE * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_Insert" "', argument " "3"" of type '" "SEGZONE *""'"); 
  }
  arg3 = reinterpret_cast< SEGZONE * >(argp3);
  {
    try{
      (arg1)->Insert(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  SEGZONE *arg2 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Remove" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Remove" "', argument " "2"" of type '" "SEGZONE *""'"); 
  }
  arg2 = reinterpret_cast< SEGZONE * >(argp2);
  {
    try{
      result = (SEGZONE *)(arg1)->Remove(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_begin" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)((DLIST< SEGZONE > const *)arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_end" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)((DLIST< SEGZONE > const *)arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_PopFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_PopFront",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_PopFront" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)(arg1)->PopFront();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_PopBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_PopBack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_PopBack" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)(arg1)->PopBack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_PushFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  SEGZONE *arg2 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_PushFront",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_PushFront" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_PushFront" "', argument " "2"" of type '" "SEGZONE *""'"); 
  }
  arg2 = reinterpret_cast< SEGZONE * >(argp2);
  {
    try{
      (arg1)->PushFront(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_PushBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  SEGZONE *arg2 = (SEGZONE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_PushBack",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_PushBack" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SEGZONE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_PushBack" "', argument " "2"" of type '" "SEGZONE *""'"); 
  }
  arg2 = reinterpret_cast< SEGZONE * >(argp2);
  {
    try{
      (arg1)->PushBack(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SEGZONE_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SEGZONE_List")) SWIG_fail;
  {
    try{
      result = (DLIST< SEGZONE > *)new DLIST< SEGZONE >();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_SEGZONE_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SEGZONE_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SEGZONE_List",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SEGZONE_List" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetClass" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (*arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Next" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)(*arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetSelectMenuText" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (*arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetMenuImage" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (*arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Clone" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (EDA_ITEM *)(*arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_Width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_m_Width_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_Width_set" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_m_Width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_Width = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_Width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_m_Width_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_Width_get" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (int) ((*arg1)->m_Width);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_Start_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_m_Start_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_Start_set" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_m_Start_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (*arg1)->m_Start = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_Start_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_m_Start_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_Start_get" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (wxPoint *)& ((*arg1)->m_Start);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_End_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_m_End_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_End_set" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_m_End_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (*arg1)->m_End = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_End_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_m_End_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_End_get" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (wxPoint *)& ((*arg1)->m_End);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_Shape_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_m_Shape_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_Shape_set" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_m_Shape_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_Shape = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_Shape_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_m_Shape_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_Shape_get" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (int) ((*arg1)->m_Shape);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_start_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_start_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_start_set" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_start_set" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  if (arg1) (*arg1)->start = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_start_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_CONNECTED_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_start_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_start_get" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (BOARD_CONNECTED_ITEM *) ((*arg1)->start);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_end_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_end_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_end_set" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_end_set" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  if (arg1) (*arg1)->end = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_end_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_CONNECTED_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_end_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_end_get" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (BOARD_CONNECTED_ITEM *) ((*arg1)->end);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_Param_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_m_Param_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_Param_set" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_m_Param_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (*arg1)->m_Param = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_Param_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_m_Param_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_Param_get" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (double) ((*arg1)->m_Param);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Back" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (TRACK *)(*arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Move" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGZONE_List_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Rotate" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SEGZONE_List_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (*arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Flip" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetPosition" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetPosition" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetWidth" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetWidth" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetEnd" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetEnd((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetEnd" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetEnd();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetStart",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetStart" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_SetStart" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_SetStart" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetStart((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetStart" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetStart();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetBoundingBox" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (*arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetBestInsertPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  BOARD *arg2 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_GetBestInsertPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetBestInsertPoint" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_GetBestInsertPoint" "', argument " "2"" of type '" "BOARD *""'"); 
  }
  arg2 = reinterpret_cast< BOARD * >(argp2);
  {
    try{
      result = (TRACK *)(*arg1)->GetBestInsertPoint(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetStartNetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_GetStartNetCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetStartNetCode" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_GetStartNetCode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (TRACK *)(*arg1)->GetStartNetCode(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetEndNetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_GetEndNetCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetEndNetCode" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_GetEndNetCode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (TRACK *)(*arg1)->GetEndNetCode(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetLength" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (double)(*arg1)->GetLength();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SEGZONE_List_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Draw" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SEGZONE_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SEGZONE_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SEGZONE_List_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Draw" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SEGZONE_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SEGZONE_List_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_SEGZONE_List_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    TRACK::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetShape" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetShape" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetShape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_TransformShapeWithClearanceToPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  std::vector< CPolyPt,std::allocator< CPolyPt > > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SEGZONE_List_TransformShapeWithClearanceToPolygon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_TransformShapeWithClearanceToPolygon" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< CPolyPt,std::allocator< CPolyPt > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SEGZONE_List_TransformShapeWithClearanceToPolygon" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SEGZONE_List_TransformShapeWithClearanceToPolygon" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SEGZONE_List_TransformShapeWithClearanceToPolygon" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try{
      (*arg1)->TransformShapeWithClearanceToPolygon(*arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetDrill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetDrill" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetDrill" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetDrill(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetDrill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetDrill" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetDrill();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetDrillValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetDrillValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetDrillValue" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetDrillValue();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetDrillDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_SetDrillDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetDrillDefault" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      (*arg1)->SetDrillDefault();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsDrillDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsDrillDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsDrillDefault" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsDrillDefault();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_ReturnMaskLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_ReturnMaskLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_ReturnMaskLayer" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->ReturnMaskLayer();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsPointOnEnds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGZONE_List_IsPointOnEnds",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsPointOnEnds" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SEGZONE_List_IsPointOnEnds" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (int)(*arg1)->IsPointOnEnds((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsPointOnEnds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_IsPointOnEnds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsPointOnEnds" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (int)(*arg1)->IsPointOnEnds((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsPointOnEnds(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_IsPointOnEnds__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SEGZONE_List_IsPointOnEnds__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_IsPointOnEnds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::IsPointOnEnds(wxPoint const &,int)\n"
    "    TRACK::IsPointOnEnds(wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsNull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsNull" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsNull();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_DisplayInfo" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (*arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_DisplayInfoBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_DisplayInfoBase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_DisplayInfoBase" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_DisplayInfoBase" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (*arg1)->DisplayInfoBase(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_ShowWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_ShowWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_ShowWidth" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (*arg1)->ShowWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Visit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SEGZONE_List_Visit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Visit" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Visit" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_Visit" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SEGZONE_List_Visit" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  {
    try{
      result = (SEARCH_RESULT)(*arg1)->Visit(arg2,(void const *)arg3,(KICAD_T const (*))arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_HitTest" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(*arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_HitTest" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  {
    try{
      result = (bool)(*arg1)->HitTest((EDA_RECT const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::HitTest(wxPoint const &)\n"
    "    TRACK::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetVia__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGZONE_List_GetVia",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetVia" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SEGZONE_List_GetVia" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (TRACK *)(*arg1)->GetVia((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetVia__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_GetVia",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetVia" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (TRACK *)(*arg1)->GetVia((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetVia__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  wxPoint *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SEGZONE_List_GetVia",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetVia" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_GetVia" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_GetVia" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_GetVia" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SEGZONE_List_GetVia" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (TRACK *)(*arg1)->GetVia(arg2,(wxPoint const &)*arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetVia(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_GetVia__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SEGZONE_List_GetVia__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TRACK, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wxPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SEGZONE_List_GetVia__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_GetVia'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::GetVia(wxPoint const &,int)\n"
    "    TRACK::GetVia(wxPoint const &)\n"
    "    TRACK::GetVia(TRACK *,wxPoint const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  TRACK *arg3 = (TRACK *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SEGZONE_List_GetTrace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetTrace" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_GetTrace" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_GetTrace" "', argument " "3"" of type '" "TRACK *""'"); 
  }
  arg3 = reinterpret_cast< TRACK * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SEGZONE_List_GetTrace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (TRACK *)(*arg1)->GetTrace(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetEndSegments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  TRACK **arg3 = (TRACK **) 0 ;
  TRACK **arg4 = (TRACK **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SEGZONE_List_GetEndSegments",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetEndSegments" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_GetEndSegments" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_GetEndSegments" "', argument " "3"" of type '" "TRACK **""'"); 
  }
  arg3 = reinterpret_cast< TRACK ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SEGZONE_List_GetEndSegments" "', argument " "4"" of type '" "TRACK **""'"); 
  }
  arg4 = reinterpret_cast< TRACK ** >(argp4);
  {
    try{
      result = (int)(*arg1)->GetEndSegments(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetClearance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_GetClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetClearance" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_GetClearance" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  {
    try{
      result = (int)(*arg1)->GetClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetClearance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetClearance" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetClearance(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SEGZONE_List_GetClearance__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_GetClearance__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_GetClearance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::GetClearance(BOARD_CONNECTED_ITEM *) const\n"
    "    TRACK::GetClearance() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_TracksConnected_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  std::vector< TRACK *,std::allocator< TRACK * > > *arg2 = (std::vector< TRACK *,std::allocator< TRACK * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_m_TracksConnected_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_TracksConnected_set" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_m_TracksConnected_set" "', argument " "2"" of type '" "std::vector< TRACK *,std::allocator< TRACK * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< TRACK *,std::allocator< TRACK * > > * >(argp2);
  if (arg1) (*arg1)->m_TracksConnected = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_TracksConnected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< TRACK *,std::allocator< TRACK * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_m_TracksConnected_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_TracksConnected_get" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (std::vector< TRACK *,std::allocator< TRACK * > > *)& ((*arg1)->m_TracksConnected);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_PadsConnected_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *arg2 = (std::vector< D_PAD *,std::allocator< D_PAD * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_m_PadsConnected_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_PadsConnected_set" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_m_PadsConnected_set" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< D_PAD *,std::allocator< D_PAD * > > * >(argp2);
  if (arg1) (*arg1)->m_PadsConnected = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_m_PadsConnected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_m_PadsConnected_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_m_PadsConnected_get" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (std::vector< D_PAD *,std::allocator< D_PAD * > > *)& ((*arg1)->m_PadsConnected);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetNet" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetNet" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetSubNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetSubNet" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetSubNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetSubNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetSubNet" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetSubNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetSubNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetZoneSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetZoneSubNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetZoneSubNet" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetZoneSubNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetZoneSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetZoneSubNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetZoneSubNet" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetZoneSubNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetZoneSubNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetNetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetNetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetNetClass" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (NETCLASS *)(*arg1)->GetNetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetNetClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetNetClassName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetNetClassName" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (*arg1)->GetNetClassName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetParent" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)(*arg1)->GetParent();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetLayer" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLayer();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetLayer" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsOnLayer" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)(*arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsTrack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsTrack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsTrack" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsTrack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsLocked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsLocked" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsLocked();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_UnLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_UnLink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_UnLink" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      (*arg1)->UnLink();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_DeleteStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_DeleteStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_DeleteStructure" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      (*arg1)->DeleteStructure();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_ShowShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  STROKE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_ShowShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_ShowShape" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_ShowShape" "', argument " "2"" of type '" "STROKE_T""'");
  } 
  arg2 = static_cast< STROKE_T >(val2);
  {
    try{
      result = (*arg1)->ShowShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetBoard",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetBoard" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (BOARD *)(*arg1)->GetBoard();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetLayerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetLayerName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetLayerName" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (*arg1)->GetLayerName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_FormatInternalUnits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_FormatInternalUnits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (*arg1)->FormatInternalUnits(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_FormatInternalUnits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_FormatInternalUnits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_FormatInternalUnits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_FormatInternalUnits__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_FormatInternalUnits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SEGZONE_List_FormatInternalUnits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_FormatInternalUnits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD_ITEM::FormatInternalUnits(int)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxPoint const &)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxSize const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_FormatAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_FormatAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_FormatAngle" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_FormatAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      result = (*arg1)->FormatAngle(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_TEXTE_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_TEXTE_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_TEXTE_PCB" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (TEXTE_PCB *)BOARD_ITEM_Cast_to_TEXTE_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_DIMENSION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DIMENSION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_DIMENSION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_DIMENSION" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (DIMENSION *)BOARD_ITEM_Cast_to_DIMENSION((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DIMENSION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_MODULE" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (MODULE *)BOARD_ITEM_Cast_to_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_TEXTE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_TEXTE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_TEXTE_MODULE" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *)BOARD_ITEM_Cast_to_TEXTE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_DRAWSEGMENT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_DRAWSEGMENT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_DRAWSEGMENT" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (DRAWSEGMENT *)BOARD_ITEM_Cast_to_DRAWSEGMENT((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_MARKER_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_MARKER_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_MARKER_PCB" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (MARKER_PCB *)BOARD_ITEM_Cast_to_MARKER_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_BOARD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_BOARD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_BOARD" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (BOARD *)BOARD_ITEM_Cast_to_BOARD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_EDGE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_EDGE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_EDGE_MODULE" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (EDGE_MODULE *)BOARD_ITEM_Cast_to_EDGE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_D_PAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_D_PAD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_D_PAD" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (D_PAD *)BOARD_ITEM_Cast_to_D_PAD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_TRACK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_TRACK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_TRACK" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (TRACK *)BOARD_ITEM_Cast_to_TRACK((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_SEGZONE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_SEGZONE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_SEGZONE" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGZONE *)BOARD_ITEM_Cast_to_SEGZONE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Cast_to_SEGVIA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGVIA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Cast_to_SEGVIA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Cast_to_SEGVIA" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    try{
      result = (SEGVIA *)BOARD_ITEM_Cast_to_SEGVIA((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGVIA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  KICAD_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_Type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Type" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (KICAD_T)(*arg1)->Type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetTimeStamp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetTimeStamp" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_time_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'");
    } else {
      time_t * temp = reinterpret_cast< time_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (*arg1)->SetTimeStamp(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  time_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetTimeStamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetTimeStamp" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (*arg1)->GetTimeStamp();
  resultobj = SWIG_NewPointerObj((new time_t(static_cast< const time_t& >(result))), SWIGTYPE_p_time_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetSon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetSon" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (EDA_ITEM *)(*arg1)->GetSon();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DHEAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetList" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (DHEAD *)(*arg1)->GetList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DHEAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetParent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetParent" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_SetParent" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetParent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetSon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetSon" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_SetSon" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetSon(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  DHEAD *arg2 = (DHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetList" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DHEAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_SetList" "', argument " "2"" of type '" "DHEAD *""'"); 
  }
  arg2 = reinterpret_cast< DHEAD * >(argp2);
  (*arg1)->SetList(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsNew(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsNew" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (bool)(*arg1)->IsNew();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsModified" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (bool)(*arg1)->IsModified();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsMoving(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsMoving",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsMoving" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (bool)(*arg1)->IsMoving();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsDragging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsDragging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsDragging" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (bool)(*arg1)->IsDragging();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsSelected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsSelected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsSelected" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (bool)(*arg1)->IsSelected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsResized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsResized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsResized" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (bool)(*arg1)->IsResized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_SetModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetModified" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  (*arg1)->SetModified();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_GetState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetState" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_GetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(*arg1)->GetState(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGZONE_List_SetState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetState" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SEGZONE_List_SetState" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (*arg1)->SetState(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetStatus" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (int)(*arg1)->GetStatus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetStatus" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetStatus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetStatus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetFlags" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_ClearFlags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_ClearFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_ClearFlags" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_ClearFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->ClearFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_ClearFlags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_ClearFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_ClearFlags" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  (*arg1)->ClearFlags();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_ClearFlags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SEGZONE_List_ClearFlags__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SEGZONE_List_ClearFlags__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_ClearFlags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::ClearFlags(int)\n"
    "    EDA_ITEM::ClearFlags()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_GetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_GetFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_GetFlags" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (int)(*arg1)->GetFlags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetImage" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_SetImage" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_SetForceVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_SetForceVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_SetForceVisible" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SEGZONE_List_SetForceVisible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->SetForceVisible(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IterateForward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  INSPECTOR *arg3 = (INSPECTOR *) 0 ;
  void *arg4 = (void *) 0 ;
  KICAD_T *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SEGZONE_List_IterateForward",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IterateForward" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_IterateForward" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_IterateForward" "', argument " "3"" of type '" "INSPECTOR *""'"); 
  }
  arg3 = reinterpret_cast< INSPECTOR * >(argp3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SEGZONE_List_IterateForward" "', argument " "4"" of type '" "void const *""'"); 
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SEGZONE_List_IterateForward" "', argument " "5"" of type '" "KICAD_T const []""'"); 
  } 
  arg5 = reinterpret_cast< KICAD_T * >(argp5);
  result = (SEARCH_RESULT)(*arg1)->IterateForward(arg2,arg3,(void const *)arg4,(KICAD_T const (*))arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Matches__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  wxPoint *arg4 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SEGZONE_List_Matches",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Matches" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_Matches" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SEGZONE_List_Matches" "', argument " "4"" of type '" "wxPoint *""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  result = (bool)(*arg1)->Matches(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Matches__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxString *arg2 = 0 ;
  wxFindReplaceData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGZONE_List_Matches",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Matches" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  arg3 = reinterpret_cast< wxFindReplaceData * >(argp3);
  result = (bool)(*arg1)->Matches((wxString const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Matches(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SEGZONE_List_Matches__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SEGZONE_List_Matches__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_Matches'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Matches(wxFindReplaceData &,void *,wxPoint *)\n"
    "    EDA_ITEM::Matches(wxString const &,wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  wxString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGZONE_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Replace" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  result = (bool)(*arg1)->Replace(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGZONE_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Replace" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_Replace" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (bool)(*arg1)->Replace(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Replace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List_Replace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Replace" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  result = (bool)(*arg1)->Replace(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Replace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SEGZONE_List_Replace__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          return _wrap_SEGZONE_List_Replace__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_SEGZONE_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SEGZONE_List_Replace__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SEGZONE_List_Replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,wxString &)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,void *)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_IsReplaceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEGZONE_List_IsReplaceable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_IsReplaceable" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  result = (bool)(*arg1)->IsReplaceable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_ITEM *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEGZONE_List___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List___lt__" "', argument " "1"" of type '" "DLIST< SEGZONE > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_ITEM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEGZONE_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  result = (bool)(*arg1)->operator <((EDA_ITEM const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEGZONE_List_Sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< SEGZONE > *arg1 = (DLIST< SEGZONE > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg3 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SEGZONE_List_Sort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_SEGZONE_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEGZONE_List_Sort" "', argument " "1"" of type '" "DLIST< SEGZONE > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< SEGZONE > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEGZONE_List_Sort" "', argument " "2"" of type '" "EDA_ITEM const *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SEGZONE_List_Sort" "', argument " "3"" of type '" "EDA_ITEM const *""'"); 
  }
  arg3 = reinterpret_cast< EDA_ITEM * >(argp3);
  result = (bool)(*arg1)->Sort((EDA_ITEM const *)arg2,(EDA_ITEM const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SEGZONE_List_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DLISTT_SEGZONE_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TRACK_List_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Get" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)((DLIST< TRACK > const *)arg1)->operator TRACK*();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List___deref__" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)((DLIST< TRACK > const *)arg1)->operator ->();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetFirst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetFirst" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)((DLIST< TRACK > const *)arg1)->GetFirst();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetLast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetLast" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)((DLIST< TRACK > const *)arg1)->GetLast();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Append__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Append" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Append" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  {
    try{
      (arg1)->Append(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Append__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  DLIST< TRACK > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Append" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DLISTT_TRACK_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Append" "', argument " "2"" of type '" "DLIST< TRACK > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Append" "', argument " "2"" of type '" "DLIST< TRACK > &""'"); 
  }
  arg2 = reinterpret_cast< DLIST< TRACK > * >(argp2);
  {
    try{
      (arg1)->Append(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Append(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TRACK, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_Append__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_Append__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_Append'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DLIST< TRACK >::Append(TRACK *)\n"
    "    DLIST< TRACK >::Append(DLIST< TRACK > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  TRACK *arg3 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_List_Insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Insert" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Insert" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_Insert" "', argument " "3"" of type '" "TRACK *""'"); 
  }
  arg3 = reinterpret_cast< TRACK * >(argp3);
  {
    try{
      (arg1)->Insert(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Remove" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Remove" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  {
    try{
      result = (TRACK *)(arg1)->Remove(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_begin" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)((DLIST< TRACK > const *)arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_end" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)((DLIST< TRACK > const *)arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_PopFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_PopFront",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_PopFront" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)(arg1)->PopFront();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_PopBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_PopBack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_PopBack" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)(arg1)->PopBack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_PushFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_PushFront",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_PushFront" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_PushFront" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  {
    try{
      (arg1)->PushFront(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_PushBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_PushBack",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_PushBack" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_PushBack" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  {
    try{
      (arg1)->PushBack(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TRACK_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TRACK_List")) SWIG_fail;
  {
    try{
      result = (DLIST< TRACK > *)new DLIST< TRACK >();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_TRACK_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TRACK_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TRACK_List",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TRACK_List" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_Width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_m_Width_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_Width_set" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_m_Width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_Width = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_Width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_m_Width_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_Width_get" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (int) ((*arg1)->m_Width);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_Start_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_m_Start_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_Start_set" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_m_Start_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (*arg1)->m_Start = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_Start_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_m_Start_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_Start_get" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (wxPoint *)& ((*arg1)->m_Start);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_End_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_m_End_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_End_set" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_m_End_set" "', argument " "2"" of type '" "wxPoint *""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  if (arg1) (*arg1)->m_End = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_End_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_m_End_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_End_get" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (wxPoint *)& ((*arg1)->m_End);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_Shape_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_m_Shape_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_Shape_set" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_m_Shape_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->m_Shape = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_Shape_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_m_Shape_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_Shape_get" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (int) ((*arg1)->m_Shape);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_start_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_start_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_start_set" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_start_set" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  if (arg1) (*arg1)->start = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_start_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_CONNECTED_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_start_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_start_get" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (BOARD_CONNECTED_ITEM *) ((*arg1)->start);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_end_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_end_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_end_set" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_end_set" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  if (arg1) (*arg1)->end = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_end_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_CONNECTED_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_end_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_end_get" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (BOARD_CONNECTED_ITEM *) ((*arg1)->end);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_Param_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_m_Param_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_Param_set" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_m_Param_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (*arg1)->m_Param = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_Param_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_m_Param_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_Param_get" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (double) ((*arg1)->m_Param);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Next" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)(*arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Back" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)(*arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Move" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_List_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Rotate" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRACK_List_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (*arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Flip" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Flip" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->Flip((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetPosition" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetPosition" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetWidth" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetWidth" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetEnd" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_SetEnd" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetEnd((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetEnd" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetEnd();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetStart",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetStart" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_SetStart" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_SetStart" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetStart((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetStart" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetStart();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetBoundingBox" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (*arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetBestInsertPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  BOARD *arg2 = (BOARD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_GetBestInsertPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetBestInsertPoint" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_GetBestInsertPoint" "', argument " "2"" of type '" "BOARD *""'"); 
  }
  arg2 = reinterpret_cast< BOARD * >(argp2);
  {
    try{
      result = (TRACK *)(*arg1)->GetBestInsertPoint(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetStartNetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_GetStartNetCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetStartNetCode" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_GetStartNetCode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (TRACK *)(*arg1)->GetStartNetCode(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetEndNetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_GetEndNetCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetEndNetCode" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_GetEndNetCode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (TRACK *)(*arg1)->GetEndNetCode(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetLength" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (double)(*arg1)->GetLength();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TRACK_List_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Draw" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TRACK_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_List_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Draw" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TRACK_List_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TRACK_List_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    TRACK::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetShape" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetShape" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetShape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_TransformShapeWithClearanceToPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  std::vector< CPolyPt,std::allocator< CPolyPt > > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TRACK_List_TransformShapeWithClearanceToPolygon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_TransformShapeWithClearanceToPolygon" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< CPolyPt,std::allocator< CPolyPt > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRACK_List_TransformShapeWithClearanceToPolygon" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_List_TransformShapeWithClearanceToPolygon" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TRACK_List_TransformShapeWithClearanceToPolygon" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try{
      (*arg1)->TransformShapeWithClearanceToPolygon(*arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetDrill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetDrill" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetDrill" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetDrill(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetDrill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetDrill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetDrill" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetDrill();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetDrillValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetDrillValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetDrillValue" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetDrillValue();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetDrillDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_SetDrillDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetDrillDefault" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      (*arg1)->SetDrillDefault();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsDrillDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsDrillDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsDrillDefault" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsDrillDefault();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_ReturnMaskLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_ReturnMaskLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_ReturnMaskLayer" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->ReturnMaskLayer();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsPointOnEnds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_List_IsPointOnEnds",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsPointOnEnds" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRACK_List_IsPointOnEnds" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (int)(*arg1)->IsPointOnEnds((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsPointOnEnds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_IsPointOnEnds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsPointOnEnds" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_IsPointOnEnds" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (int)(*arg1)->IsPointOnEnds((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsPointOnEnds(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_IsPointOnEnds__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TRACK_List_IsPointOnEnds__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_IsPointOnEnds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::IsPointOnEnds(wxPoint const &,int)\n"
    "    TRACK::IsPointOnEnds(wxPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsNull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsNull" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsNull();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_DisplayInfo" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (*arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_DisplayInfoBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_DisplayInfoBase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_DisplayInfoBase" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_DisplayInfoBase" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (*arg1)->DisplayInfoBase(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_ShowWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_ShowWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_ShowWidth" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (*arg1)->ShowWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Visit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_List_Visit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Visit" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Visit" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_Visit" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TRACK_List_Visit" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  {
    try{
      result = (SEARCH_RESULT)(*arg1)->Visit(arg2,(void const *)arg3,(KICAD_T const (*))arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_HitTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_HitTest" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(*arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_HitTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_RECT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_HitTest" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_RECT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_HitTest" "', argument " "2"" of type '" "EDA_RECT const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  {
    try{
      result = (bool)(*arg1)->HitTest((EDA_RECT const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_HitTest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_HitTest__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EDA_RECT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_HitTest__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_HitTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::HitTest(wxPoint const &)\n"
    "    TRACK::HitTest(EDA_RECT const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetVia__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_List_GetVia",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetVia" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRACK_List_GetVia" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try{
      result = (TRACK *)(*arg1)->GetVia((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetVia__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_GetVia",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetVia" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_GetVia" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (TRACK *)(*arg1)->GetVia((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetVia__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  wxPoint *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_List_GetVia",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetVia" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_GetVia" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_GetVia" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_GetVia" "', argument " "3"" of type '" "wxPoint const &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_List_GetVia" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (TRACK *)(*arg1)->GetVia(arg2,(wxPoint const &)*arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetVia(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_GetVia__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TRACK_List_GetVia__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TRACK, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wxPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TRACK_List_GetVia__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_GetVia'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::GetVia(wxPoint const &,int)\n"
    "    TRACK::GetVia(wxPoint const &)\n"
    "    TRACK::GetVia(TRACK *,wxPoint const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  TRACK *arg2 = (TRACK *) 0 ;
  TRACK *arg3 = (TRACK *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_List_GetTrace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetTrace" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_GetTrace" "', argument " "2"" of type '" "TRACK *""'"); 
  }
  arg2 = reinterpret_cast< TRACK * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_GetTrace" "', argument " "3"" of type '" "TRACK *""'"); 
  }
  arg3 = reinterpret_cast< TRACK * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TRACK_List_GetTrace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (TRACK *)(*arg1)->GetTrace(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetEndSegments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  TRACK **arg3 = (TRACK **) 0 ;
  TRACK **arg4 = (TRACK **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_List_GetEndSegments",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetEndSegments" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_GetEndSegments" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_GetEndSegments" "', argument " "3"" of type '" "TRACK **""'"); 
  }
  arg3 = reinterpret_cast< TRACK ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_TRACK, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TRACK_List_GetEndSegments" "', argument " "4"" of type '" "TRACK **""'"); 
  }
  arg4 = reinterpret_cast< TRACK ** >(argp4);
  {
    try{
      result = (int)(*arg1)->GetEndSegments(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetClass" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (*arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetClearance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_GetClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetClearance" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_GetClearance" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  {
    try{
      result = (int)(*arg1)->GetClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetClearance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetClearance" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetClearance(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TRACK_List_GetClearance__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_GetClearance__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_GetClearance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TRACK::GetClearance(BOARD_CONNECTED_ITEM *) const\n"
    "    TRACK::GetClearance() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetSelectMenuText" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (*arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetMenuImage" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (*arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Clone" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (EDA_ITEM *)(*arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_TracksConnected_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  std::vector< TRACK *,std::allocator< TRACK * > > *arg2 = (std::vector< TRACK *,std::allocator< TRACK * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_m_TracksConnected_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_TracksConnected_set" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_m_TracksConnected_set" "', argument " "2"" of type '" "std::vector< TRACK *,std::allocator< TRACK * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< TRACK *,std::allocator< TRACK * > > * >(argp2);
  if (arg1) (*arg1)->m_TracksConnected = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_TracksConnected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< TRACK *,std::allocator< TRACK * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_m_TracksConnected_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_TracksConnected_get" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (std::vector< TRACK *,std::allocator< TRACK * > > *)& ((*arg1)->m_TracksConnected);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_PadsConnected_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *arg2 = (std::vector< D_PAD *,std::allocator< D_PAD * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_m_PadsConnected_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_PadsConnected_set" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_m_PadsConnected_set" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< D_PAD *,std::allocator< D_PAD * > > * >(argp2);
  if (arg1) (*arg1)->m_PadsConnected = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_m_PadsConnected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_m_PadsConnected_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_m_PadsConnected_get" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (std::vector< D_PAD *,std::allocator< D_PAD * > > *)& ((*arg1)->m_PadsConnected);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetNet" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetNet" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetSubNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetSubNet" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetSubNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetSubNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetSubNet" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetSubNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetSubNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetZoneSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetZoneSubNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetZoneSubNet" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetZoneSubNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetZoneSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetZoneSubNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetZoneSubNet" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetZoneSubNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetZoneSubNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetNetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetNetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetNetClass" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (NETCLASS *)(*arg1)->GetNetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetNetClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetNetClassName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetNetClassName" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (*arg1)->GetNetClassName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetParent" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)(*arg1)->GetParent();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetLayer" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLayer();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetLayer" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsOnLayer" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)(*arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsTrack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsTrack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsTrack" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsTrack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsLocked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsLocked" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsLocked();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_UnLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_UnLink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_UnLink" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      (*arg1)->UnLink();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_DeleteStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_DeleteStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_DeleteStructure" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      (*arg1)->DeleteStructure();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_ShowShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  STROKE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_ShowShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_ShowShape" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_ShowShape" "', argument " "2"" of type '" "STROKE_T""'");
  } 
  arg2 = static_cast< STROKE_T >(val2);
  {
    try{
      result = (*arg1)->ShowShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetBoard",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetBoard" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (BOARD *)(*arg1)->GetBoard();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetLayerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetLayerName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetLayerName" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (*arg1)->GetLayerName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_FormatInternalUnits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_FormatInternalUnits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (*arg1)->FormatInternalUnits(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_FormatInternalUnits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_FormatInternalUnits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_FormatInternalUnits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_FormatInternalUnits__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_FormatInternalUnits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TRACK_List_FormatInternalUnits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_FormatInternalUnits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD_ITEM::FormatInternalUnits(int)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxPoint const &)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxSize const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_FormatAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_FormatAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_FormatAngle" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_FormatAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      result = (*arg1)->FormatAngle(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_TEXTE_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_TEXTE_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_TEXTE_PCB" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TEXTE_PCB *)BOARD_ITEM_Cast_to_TEXTE_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_DIMENSION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DIMENSION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_DIMENSION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_DIMENSION" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (DIMENSION *)BOARD_ITEM_Cast_to_DIMENSION((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DIMENSION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_MODULE" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (MODULE *)BOARD_ITEM_Cast_to_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_TEXTE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_TEXTE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_TEXTE_MODULE" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *)BOARD_ITEM_Cast_to_TEXTE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_DRAWSEGMENT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_DRAWSEGMENT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_DRAWSEGMENT" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (DRAWSEGMENT *)BOARD_ITEM_Cast_to_DRAWSEGMENT((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_MARKER_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_MARKER_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_MARKER_PCB" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (MARKER_PCB *)BOARD_ITEM_Cast_to_MARKER_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_BOARD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_BOARD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_BOARD" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (BOARD *)BOARD_ITEM_Cast_to_BOARD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_EDGE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_EDGE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_EDGE_MODULE" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (EDGE_MODULE *)BOARD_ITEM_Cast_to_EDGE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_D_PAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_D_PAD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_D_PAD" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (D_PAD *)BOARD_ITEM_Cast_to_D_PAD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_TRACK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_TRACK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_TRACK" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (TRACK *)BOARD_ITEM_Cast_to_TRACK((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_SEGZONE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_SEGZONE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_SEGZONE" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (SEGZONE *)BOARD_ITEM_Cast_to_SEGZONE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Cast_to_SEGVIA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGVIA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Cast_to_SEGVIA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Cast_to_SEGVIA" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    try{
      result = (SEGVIA *)BOARD_ITEM_Cast_to_SEGVIA((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGVIA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  KICAD_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_Type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Type" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (KICAD_T)(*arg1)->Type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetTimeStamp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetTimeStamp" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_time_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'");
    } else {
      time_t * temp = reinterpret_cast< time_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (*arg1)->SetTimeStamp(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  time_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetTimeStamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetTimeStamp" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (*arg1)->GetTimeStamp();
  resultobj = SWIG_NewPointerObj((new time_t(static_cast< const time_t& >(result))), SWIGTYPE_p_time_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetSon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetSon" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (EDA_ITEM *)(*arg1)->GetSon();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DHEAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetList" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (DHEAD *)(*arg1)->GetList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DHEAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetParent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetParent" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_SetParent" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetParent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetSon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetSon" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_SetSon" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetSon(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  DHEAD *arg2 = (DHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetList" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DHEAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_SetList" "', argument " "2"" of type '" "DHEAD *""'"); 
  }
  arg2 = reinterpret_cast< DHEAD * >(argp2);
  (*arg1)->SetList(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsNew(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsNew" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (bool)(*arg1)->IsNew();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsModified" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (bool)(*arg1)->IsModified();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsMoving(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsMoving",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsMoving" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (bool)(*arg1)->IsMoving();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsDragging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsDragging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsDragging" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (bool)(*arg1)->IsDragging();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsSelected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsSelected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsSelected" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (bool)(*arg1)->IsSelected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsResized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsResized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsResized" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (bool)(*arg1)->IsResized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_SetModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetModified" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  (*arg1)->SetModified();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_GetState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetState" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_GetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(*arg1)->GetState(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_List_SetState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetState" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRACK_List_SetState" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (*arg1)->SetState(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetStatus" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (int)(*arg1)->GetStatus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetStatus" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetStatus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetStatus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetFlags" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_ClearFlags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_ClearFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_ClearFlags" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_ClearFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->ClearFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_ClearFlags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_ClearFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_ClearFlags" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  (*arg1)->ClearFlags();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_ClearFlags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TRACK_List_ClearFlags__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TRACK_List_ClearFlags__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_ClearFlags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::ClearFlags(int)\n"
    "    EDA_ITEM::ClearFlags()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_GetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_GetFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_GetFlags" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (int)(*arg1)->GetFlags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetImage" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_SetImage" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_SetForceVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_SetForceVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_SetForceVisible" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRACK_List_SetForceVisible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->SetForceVisible(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IterateForward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  INSPECTOR *arg3 = (INSPECTOR *) 0 ;
  void *arg4 = (void *) 0 ;
  KICAD_T *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TRACK_List_IterateForward",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IterateForward" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_IterateForward" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_IterateForward" "', argument " "3"" of type '" "INSPECTOR *""'"); 
  }
  arg3 = reinterpret_cast< INSPECTOR * >(argp3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TRACK_List_IterateForward" "', argument " "4"" of type '" "void const *""'"); 
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TRACK_List_IterateForward" "', argument " "5"" of type '" "KICAD_T const []""'"); 
  } 
  arg5 = reinterpret_cast< KICAD_T * >(argp5);
  result = (SEARCH_RESULT)(*arg1)->IterateForward(arg2,arg3,(void const *)arg4,(KICAD_T const (*))arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Matches__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  wxPoint *arg4 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TRACK_List_Matches",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Matches" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_Matches" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TRACK_List_Matches" "', argument " "4"" of type '" "wxPoint *""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  result = (bool)(*arg1)->Matches(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Matches__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxString *arg2 = 0 ;
  wxFindReplaceData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_List_Matches",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Matches" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  arg3 = reinterpret_cast< wxFindReplaceData * >(argp3);
  result = (bool)(*arg1)->Matches((wxString const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Matches(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TRACK_List_Matches__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TRACK_List_Matches__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_Matches'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Matches(wxFindReplaceData &,void *,wxPoint *)\n"
    "    EDA_ITEM::Matches(wxString const &,wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  wxString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Replace" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  result = (bool)(*arg1)->Replace(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Replace" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_Replace" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (bool)(*arg1)->Replace(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Replace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List_Replace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Replace" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  result = (bool)(*arg1)->Replace(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Replace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TRACK_List_Replace__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          return _wrap_TRACK_List_Replace__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_TRACK_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TRACK_List_Replace__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TRACK_List_Replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,wxString &)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,void *)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TRACK_List_IsReplaceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TRACK_List_IsReplaceable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_IsReplaceable" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  result = (bool)(*arg1)->IsReplaceable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_ITEM *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TRACK_List___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List___lt__" "', argument " "1"" of type '" "DLIST< TRACK > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_ITEM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRACK_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  result = (bool)(*arg1)->operator <((EDA_ITEM const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TRACK_List_Sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< TRACK > *arg1 = (DLIST< TRACK > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg3 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TRACK_List_Sort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_TRACK_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRACK_List_Sort" "', argument " "1"" of type '" "DLIST< TRACK > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< TRACK > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRACK_List_Sort" "', argument " "2"" of type '" "EDA_ITEM const *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRACK_List_Sort" "', argument " "3"" of type '" "EDA_ITEM const *""'"); 
  }
  arg3 = reinterpret_cast< EDA_ITEM * >(argp3);
  result = (bool)(*arg1)->Sort((EDA_ITEM const *)arg2,(EDA_ITEM const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TRACK_List_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DLISTT_TRACK_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PAD_List_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Get" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)((DLIST< D_PAD > const *)arg1)->operator D_PAD*();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List___deref__" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)((DLIST< D_PAD > const *)arg1)->operator ->();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetFirst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetFirst" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)((DLIST< D_PAD > const *)arg1)->GetFirst();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetLast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetLast" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)((DLIST< D_PAD > const *)arg1)->GetLast();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Append__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Append" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Append" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      (arg1)->Append(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Append__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  DLIST< D_PAD > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Append" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DLISTT_D_PAD_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Append" "', argument " "2"" of type '" "DLIST< D_PAD > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_Append" "', argument " "2"" of type '" "DLIST< D_PAD > &""'"); 
  }
  arg2 = reinterpret_cast< DLIST< D_PAD > * >(argp2);
  {
    try{
      (arg1)->Append(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Append(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_D_PAD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PAD_List_Append__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PAD_List_Append__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PAD_List_Append'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DLIST< D_PAD >::Append(D_PAD *)\n"
    "    DLIST< D_PAD >::Append(DLIST< D_PAD > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PAD_List_Insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  D_PAD *arg3 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PAD_List_Insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Insert" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Insert" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_Insert" "', argument " "3"" of type '" "D_PAD *""'"); 
  }
  arg3 = reinterpret_cast< D_PAD * >(argp3);
  {
    try{
      (arg1)->Insert(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Remove" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Remove" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      result = (D_PAD *)(arg1)->Remove(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_begin" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)((DLIST< D_PAD > const *)arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_end" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)((DLIST< D_PAD > const *)arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_PopFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_PopFront",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_PopFront" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)(arg1)->PopFront();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_PopBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_PopBack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_PopBack" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)(arg1)->PopBack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_PushFront(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_PushFront",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_PushFront" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_PushFront" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      (arg1)->PushFront(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_PushBack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_PushBack",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_PushBack" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_PushBack" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      (arg1)->PushBack(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PAD_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PAD_List")) SWIG_fail;
  {
    try{
      result = (DLIST< D_PAD > *)new DLIST< D_PAD >();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DLISTT_D_PAD_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PAD_List(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PAD_List",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PAD_List" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_Copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Copy" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Copy" "', argument " "2"" of type '" "D_PAD *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      (*arg1)->Copy(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Next" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)(*arg1)->Next();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetParent" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (MODULE *)(*arg1)->GetParent();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetPadName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetPadName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetPadName" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (*arg1)->SetPadName((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetPadName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetPadName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetPadName" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->GetPadName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_PadNameEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_PadNameEqual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_PadNameEqual" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_PadNameEqual" "', argument " "2"" of type '" "D_PAD const *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  {
    try{
      result = (bool)(*arg1)->PadNameEqual((D_PAD const *)arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetNetname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetNetname",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetNetname" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (*arg1)->SetNetname((wxString const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetNetname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetNetname",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetNetname" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (wxString *) &(*arg1)->GetNetname();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetShortNetname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetShortNetname",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetShortNetname" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (wxString *) &(*arg1)->GetShortNetname();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar(result->c_str(), result->Len());
#else
    resultobj = PyString_FromStringAndSize(result->c_str(), result->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PAD_SHAPE_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetShape" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (PAD_SHAPE_T)(*arg1)->GetShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  PAD_SHAPE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetShape" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetShape" "', argument " "2"" of type '" "PAD_SHAPE_T""'");
  } 
  arg2 = static_cast< PAD_SHAPE_T >(val2);
  {
    try{
      (*arg1)->SetShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetPosition" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_SetPosition" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetPosition((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetPosition" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetPosition();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetY" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetY(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetX" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetX(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetPos0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetPos0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetPos0" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetPos0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_SetPos0" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetPos0((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetPos0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetPos0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetPos0" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetPos0();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetY0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetY0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetY0" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetY0" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetY0(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetX0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetX0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetX0" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetX0" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetX0(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetSize" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_SetSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      (*arg1)->SetSize((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetSize" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (wxSize *) &(*arg1)->GetSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetDelta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetDelta" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetDelta" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_SetDelta" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      (*arg1)->SetDelta((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetDelta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetDelta" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (wxSize *) &(*arg1)->GetDelta();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetDrillSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetDrillSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetDrillSize" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetDrillSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_SetDrillSize" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      (*arg1)->SetDrillSize((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetDrillSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetDrillSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetDrillSize" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (wxSize *) &(*arg1)->GetDrillSize();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxSize, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetOffset" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetOffset" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_SetOffset" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->SetOffset((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetOffset" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (wxPoint *) &(*arg1)->GetOffset();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wxPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_Flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Flip" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_Flip" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->Flip(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetOrientation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetOrientation" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetOrientation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      (*arg1)->SetOrientation(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetOrientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetOrientation" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (double)(*arg1)->GetOrientation();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetDrillShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  PAD_SHAPE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetDrillShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetDrillShape" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetDrillShape" "', argument " "2"" of type '" "PAD_SHAPE_T""'");
  } 
  arg2 = static_cast< PAD_SHAPE_T >(val2);
  {
    try{
      (*arg1)->SetDrillShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetDrillShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PAD_SHAPE_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetDrillShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetDrillShape" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (PAD_SHAPE_T)(*arg1)->GetDrillShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetLayerMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetLayerMask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetLayerMask" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetLayerMask" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLayerMask(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetLayerMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetLayerMask",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetLayerMask" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLayerMask();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  PAD_ATTR_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetAttribute" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetAttribute" "', argument " "2"" of type '" "PAD_ATTR_T""'");
  } 
  arg2 = static_cast< PAD_ATTR_T >(val2);
  {
    try{
      (*arg1)->SetAttribute(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PAD_ATTR_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetAttribute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetAttribute" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (PAD_ATTR_T)(*arg1)->GetAttribute();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetDieLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetDieLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetDieLength" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetDieLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetDieLength(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetDieLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetDieLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetDieLength" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetDieLength();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetLocalSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetLocalSolderMaskMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetLocalSolderMaskMargin" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLocalSolderMaskMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetLocalSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetLocalSolderMaskMargin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetLocalSolderMaskMargin" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetLocalSolderMaskMargin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLocalSolderMaskMargin(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetLocalClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetLocalClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetLocalClearance" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLocalClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetLocalClearance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetLocalClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetLocalClearance" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetLocalClearance" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLocalClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetLocalSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetLocalSolderPasteMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetLocalSolderPasteMargin" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLocalSolderPasteMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetLocalSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetLocalSolderPasteMargin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetLocalSolderPasteMargin" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetLocalSolderPasteMargin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLocalSolderPasteMargin(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetLocalSolderPasteMarginRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetLocalSolderPasteMarginRatio",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetLocalSolderPasteMarginRatio" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (double)(*arg1)->GetLocalSolderPasteMarginRatio();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetLocalSolderPasteMarginRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetLocalSolderPasteMarginRatio",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetLocalSolderPasteMarginRatio" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetLocalSolderPasteMarginRatio" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      (*arg1)->SetLocalSolderPasteMarginRatio(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_TransformShapeWithClearanceToPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  std::vector< CPolyPt,std::allocator< CPolyPt > > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PAD_List_TransformShapeWithClearanceToPolygon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_TransformShapeWithClearanceToPolygon" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_TransformShapeWithClearanceToPolygon" "', argument " "2"" of type '" "std::vector< CPolyPt,std::allocator< CPolyPt > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< CPolyPt,std::allocator< CPolyPt > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PAD_List_TransformShapeWithClearanceToPolygon" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PAD_List_TransformShapeWithClearanceToPolygon" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PAD_List_TransformShapeWithClearanceToPolygon" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try{
      (*arg1)->TransformShapeWithClearanceToPolygon(*arg2,arg3,arg4,arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetClearance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  BOARD_CONNECTED_ITEM *arg2 = (BOARD_CONNECTED_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_GetClearance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetClearance" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_GetClearance" "', argument " "2"" of type '" "BOARD_CONNECTED_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< BOARD_CONNECTED_ITEM * >(argp2);
  {
    try{
      result = (int)(*arg1)->GetClearance(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetClearance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetClearance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetClearance" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetClearance();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetClearance(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PAD_List_GetClearance__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BOARD_CONNECTED_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PAD_List_GetClearance__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PAD_List_GetClearance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    D_PAD::GetClearance(BOARD_CONNECTED_ITEM *) const\n"
    "    D_PAD::GetClearance() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetSolderMaskMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetSolderMaskMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetSolderMaskMargin" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetSolderMaskMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetSolderPasteMargin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxSize > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetSolderPasteMargin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetSolderPasteMargin" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->GetSolderPasteMargin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new wxSize(static_cast< const wxSize& >(result))), SWIGTYPE_p_wxSize, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetZoneConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  ZoneConnection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetZoneConnection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetZoneConnection" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ZoneConnection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetZoneConnection" "', argument " "2"" of type '" "ZoneConnection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_SetZoneConnection" "', argument " "2"" of type '" "ZoneConnection""'");
    } else {
      ZoneConnection * temp = reinterpret_cast< ZoneConnection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (*arg1)->SetZoneConnection(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetZoneConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZoneConnection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetZoneConnection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetZoneConnection" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->GetZoneConnection();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new ZoneConnection(static_cast< const ZoneConnection& >(result))), SWIGTYPE_p_ZoneConnection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetThermalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetThermalWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetThermalWidth" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetThermalWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetThermalWidth(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetThermalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetThermalWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetThermalWidth" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetThermalWidth();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetThermalGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetThermalGap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetThermalGap" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetThermalGap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetThermalGap(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetThermalGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetThermalGap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetThermalGap" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetThermalGap();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Draw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  wxPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PAD_List_Draw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Draw" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PAD_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PAD_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_Draw" "', argument " "5"" of type '" "wxPoint const &""'"); 
  }
  arg5 = reinterpret_cast< wxPoint * >(argp5);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4,(wxPoint const &)*arg5);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Draw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_DRAW_PANEL *arg2 = (EDA_DRAW_PANEL *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PAD_List_Draw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Draw" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_PANEL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Draw" "', argument " "2"" of type '" "EDA_DRAW_PANEL *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_PANEL * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_Draw" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PAD_List_Draw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (*arg1)->Draw(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Draw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PAD_List_Draw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EDA_DRAW_PANEL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxDC, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wxPoint, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_PAD_List_Draw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PAD_List_Draw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    D_PAD::Draw(EDA_DRAW_PANEL *,wxDC *,int,wxPoint const &)\n"
    "    D_PAD::Draw(EDA_DRAW_PANEL *,wxDC *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PAD_List_Draw3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_3D_CANVAS *arg2 = (EDA_3D_CANVAS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_Draw3D",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Draw3D" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_3D_CANVAS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Draw3D" "', argument " "2"" of type '" "EDA_3D_CANVAS *""'"); 
  }
  arg2 = reinterpret_cast< EDA_3D_CANVAS * >(argp2);
  {
    try{
      (*arg1)->Draw3D(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_DrawShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_RECT *arg2 = (EDA_RECT *) 0 ;
  wxDC *arg3 = (wxDC *) 0 ;
  PAD_DRAWINFO *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PAD_List_DrawShape",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_DrawShape" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_RECT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_DrawShape" "', argument " "2"" of type '" "EDA_RECT *""'"); 
  }
  arg2 = reinterpret_cast< EDA_RECT * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wxDC, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_DrawShape" "', argument " "3"" of type '" "wxDC *""'"); 
  }
  arg3 = reinterpret_cast< wxDC * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_PAD_DRAWINFO,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PAD_List_DrawShape" "', argument " "4"" of type '" "PAD_DRAWINFO &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_DrawShape" "', argument " "4"" of type '" "PAD_DRAWINFO &""'"); 
  }
  arg4 = reinterpret_cast< PAD_DRAWINFO * >(argp4);
  {
    try{
      (*arg1)->DrawShape(arg2,arg3,*arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_BuildPadPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxPoint *arg2 ;
  SwigValueWrapper< wxSize > arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PAD_List_BuildPadPolygon",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_BuildPadPolygon" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_BuildPadPolygon" "', argument " "2"" of type '" "wxPoint [4]""'"); 
  } 
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxSize,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_BuildPadPolygon" "', argument " "3"" of type '" "wxSize""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_BuildPadPolygon" "', argument " "3"" of type '" "wxSize""'");
    } else {
      wxSize * temp = reinterpret_cast< wxSize * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PAD_List_BuildPadPolygon" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      (*arg1)->BuildPadPolygon(arg2,arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_BuildSegmentFromOvalShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxPoint *arg2 = 0 ;
  wxPoint *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PAD_List_BuildSegmentFromOvalShape",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_BuildSegmentFromOvalShape" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_BuildSegmentFromOvalShape" "', argument " "2"" of type '" "wxPoint &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_BuildSegmentFromOvalShape" "', argument " "2"" of type '" "wxPoint &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxPoint,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_BuildSegmentFromOvalShape" "', argument " "3"" of type '" "wxPoint &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_BuildSegmentFromOvalShape" "', argument " "3"" of type '" "wxPoint &""'"); 
  }
  arg3 = reinterpret_cast< wxPoint * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PAD_List_BuildSegmentFromOvalShape" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try{
      result = (int)(*arg1)->BuildSegmentFromOvalShape(*arg2,*arg3,arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_ReturnStringPadName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_ReturnStringPadName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_ReturnStringPadName" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  {
    try{
      (*arg1)->ReturnStringPadName(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetBoundingRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetBoundingRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetBoundingRadius" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetBoundingRadius();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_ReturnShapePos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wxPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_ReturnShapePos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_ReturnShapePos" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->ReturnShapePos();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new wxPoint(static_cast< const wxPoint& >(result))), SWIGTYPE_p_wxPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetSubRatsnest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetSubRatsnest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetSubRatsnest" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetSubRatsnest();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetSubRatsnest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetSubRatsnest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetSubRatsnest" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetSubRatsnest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetSubRatsnest(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_DisplayInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_DRAW_FRAME *arg2 = (EDA_DRAW_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_DisplayInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_DisplayInfo" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_DRAW_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_DisplayInfo" "', argument " "2"" of type '" "EDA_DRAW_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< EDA_DRAW_FRAME * >(argp2);
  {
    try{
      (*arg1)->DisplayInfo(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsOnLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_IsOnLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsOnLayer" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_IsOnLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (bool)(*arg1)->IsOnLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_HitTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_HitTest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_HitTest" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_HitTest" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (bool)(*arg1)->HitTest((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetClass" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->GetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetBoundingBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_RECT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetBoundingBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetBoundingBox" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->GetBoundingBox();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new EDA_RECT(static_cast< const EDA_RECT& >(result))), SWIGTYPE_p_EDA_RECT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  D_PAD *arg2 = (D_PAD *) 0 ;
  D_PAD *arg3 = (D_PAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PAD_List_Compare",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Compare" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Compare" "', argument " "2"" of type '" "D_PAD const *""'"); 
  }
  arg2 = reinterpret_cast< D_PAD * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_D_PAD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_Compare" "', argument " "3"" of type '" "D_PAD const *""'"); 
  }
  arg3 = reinterpret_cast< D_PAD * >(argp3);
  {
    try{
      result = (int)(*arg1)->Compare((D_PAD const *)arg2,(D_PAD const *)arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_Move",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Move" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_Move" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      (*arg1)->Move((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetSelectMenuText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetSelectMenuText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetSelectMenuText" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->GetSelectMenuText();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetMenuImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BITMAP_DEF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetMenuImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetMenuImage" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->GetMenuImage();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new BITMAP_DEF(static_cast< const BITMAP_DEF& >(result))), SWIGTYPE_p_BITMAP_DEF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_ShowPadShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_ShowPadShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_ShowPadShape" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->ShowPadShape();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_ShowPadAttr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_ShowPadAttr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_ShowPadAttr" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->ShowPadAttr();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_AppendConfigs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  PARAM_CFG_ARRAY *arg2 = (PARAM_CFG_ARRAY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_AppendConfigs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_AppendConfigs" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PARAM_CFG_ARRAY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_AppendConfigs" "', argument " "2"" of type '" "PARAM_CFG_ARRAY *""'"); 
  }
  arg2 = reinterpret_cast< PARAM_CFG_ARRAY * >(argp2);
  {
    try{
      (*arg1)->AppendConfigs(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Clone" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (EDA_ITEM *)(*arg1)->Clone();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_m_TracksConnected_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  std::vector< TRACK *,std::allocator< TRACK * > > *arg2 = (std::vector< TRACK *,std::allocator< TRACK * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_m_TracksConnected_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_m_TracksConnected_set" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_m_TracksConnected_set" "', argument " "2"" of type '" "std::vector< TRACK *,std::allocator< TRACK * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< TRACK *,std::allocator< TRACK * > > * >(argp2);
  if (arg1) (*arg1)->m_TracksConnected = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_m_TracksConnected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< TRACK *,std::allocator< TRACK * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_m_TracksConnected_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_m_TracksConnected_get" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (std::vector< TRACK *,std::allocator< TRACK * > > *)& ((*arg1)->m_TracksConnected);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_m_PadsConnected_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *arg2 = (std::vector< D_PAD *,std::allocator< D_PAD * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_m_PadsConnected_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_m_PadsConnected_set" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_m_PadsConnected_set" "', argument " "2"" of type '" "std::vector< D_PAD *,std::allocator< D_PAD * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< D_PAD *,std::allocator< D_PAD * > > * >(argp2);
  if (arg1) (*arg1)->m_PadsConnected = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_m_PadsConnected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< D_PAD *,std::allocator< D_PAD * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_m_PadsConnected_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_m_PadsConnected_get" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (std::vector< D_PAD *,std::allocator< D_PAD * > > *)& ((*arg1)->m_PadsConnected);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetNet" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetNet" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetSubNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetSubNet" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetSubNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetSubNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetSubNet" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetSubNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetSubNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetZoneSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetZoneSubNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetZoneSubNet" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetZoneSubNet();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetZoneSubNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetZoneSubNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetZoneSubNet" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetZoneSubNet" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetZoneSubNet(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetNetClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NETCLASS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetNetClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetNetClass" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (NETCLASS *)(*arg1)->GetNetClass();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NETCLASS, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetNetClassName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetNetClassName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetNetClassName" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->GetNetClassName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Back" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (BOARD_ITEM *)(*arg1)->Back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetLayer" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (int)(*arg1)->GetLayer();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetLayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetLayer" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetLayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (*arg1)->SetLayer(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsTrack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_IsTrack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsTrack" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsTrack();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_IsLocked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsLocked" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (bool)(*arg1)->IsLocked();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_UnLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_UnLink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_UnLink" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      (*arg1)->UnLink();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_DeleteStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_DeleteStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_DeleteStructure" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      (*arg1)->DeleteStructure();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_ShowShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  STROKE_T arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_ShowShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_ShowShape" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_ShowShape" "', argument " "2"" of type '" "STROKE_T""'");
  } 
  arg2 = static_cast< STROKE_T >(val2);
  {
    try{
      result = (*arg1)->ShowShape(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxPoint *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PAD_List_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Rotate" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_Rotate" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PAD_List_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try{
      (*arg1)->Rotate((wxPoint const &)*arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetBoard",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetBoard" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (BOARD *)(*arg1)->GetBoard();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetLayerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wxString result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetLayerName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetLayerName" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (*arg1)->GetLayerName();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  {
#if wxUSE_UNICODE
    resultobj = PyUnicode_FromWideChar((&result)->c_str(), (&result)->Len());
#else
    resultobj = PyString_FromStringAndSize((&result)->c_str(), (&result)->Len());
#endif
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_FormatInternalUnits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_FormatInternalUnits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      result = (*arg1)->FormatInternalUnits(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_FormatInternalUnits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_FormatInternalUnits" "', argument " "2"" of type '" "wxPoint const &""'"); 
  }
  arg2 = reinterpret_cast< wxPoint * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxPoint const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_FormatInternalUnits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_FormatInternalUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_FormatInternalUnits" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxSize,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_FormatInternalUnits" "', argument " "2"" of type '" "wxSize const &""'"); 
  }
  arg2 = reinterpret_cast< wxSize * >(argp2);
  {
    try{
      result = (*arg1)->FormatInternalUnits((wxSize const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_FormatInternalUnits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PAD_List_FormatInternalUnits__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wxSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PAD_List_FormatInternalUnits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PAD_List_FormatInternalUnits__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PAD_List_FormatInternalUnits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BOARD_ITEM::FormatInternalUnits(int)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxPoint const &)\n"
    "    BOARD_ITEM::FormatInternalUnits(wxSize const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PAD_List_FormatAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_FormatAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_FormatAngle" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_FormatAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      result = (*arg1)->FormatAngle(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_TEXTE_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_TEXTE_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_TEXTE_PCB" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (TEXTE_PCB *)BOARD_ITEM_Cast_to_TEXTE_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_DIMENSION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DIMENSION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_DIMENSION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_DIMENSION" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (DIMENSION *)BOARD_ITEM_Cast_to_DIMENSION((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DIMENSION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_MODULE" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (MODULE *)BOARD_ITEM_Cast_to_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_TEXTE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TEXTE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_TEXTE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_TEXTE_MODULE" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (TEXTE_MODULE *)BOARD_ITEM_Cast_to_TEXTE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TEXTE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_DRAWSEGMENT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DRAWSEGMENT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_DRAWSEGMENT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_DRAWSEGMENT" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (DRAWSEGMENT *)BOARD_ITEM_Cast_to_DRAWSEGMENT((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DRAWSEGMENT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_MARKER_PCB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MARKER_PCB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_MARKER_PCB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_MARKER_PCB" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (MARKER_PCB *)BOARD_ITEM_Cast_to_MARKER_PCB((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MARKER_PCB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_BOARD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BOARD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_BOARD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_BOARD" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (BOARD *)BOARD_ITEM_Cast_to_BOARD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOARD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_EDGE_MODULE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDGE_MODULE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_EDGE_MODULE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_EDGE_MODULE" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (EDGE_MODULE *)BOARD_ITEM_Cast_to_EDGE_MODULE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDGE_MODULE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_D_PAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  D_PAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_D_PAD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_D_PAD" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (D_PAD *)BOARD_ITEM_Cast_to_D_PAD((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_D_PAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_TRACK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TRACK *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_TRACK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_TRACK" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (TRACK *)BOARD_ITEM_Cast_to_TRACK((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TRACK, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_SEGZONE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGZONE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_SEGZONE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_SEGZONE" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (SEGZONE *)BOARD_ITEM_Cast_to_SEGZONE((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGZONE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Cast_to_SEGVIA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEGVIA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Cast_to_SEGVIA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Cast_to_SEGVIA" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    try{
      result = (SEGVIA *)BOARD_ITEM_Cast_to_SEGVIA((BOARD_ITEM*)(arg1)->operator ->());
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEGVIA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  KICAD_T result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_Type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Type" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (KICAD_T)(*arg1)->Type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetTimeStamp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetTimeStamp" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_time_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_SetTimeStamp" "', argument " "2"" of type '" "time_t""'");
    } else {
      time_t * temp = reinterpret_cast< time_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (*arg1)->SetTimeStamp(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  time_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetTimeStamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetTimeStamp" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (*arg1)->GetTimeStamp();
  resultobj = SWIG_NewPointerObj((new time_t(static_cast< const time_t& >(result))), SWIGTYPE_p_time_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EDA_ITEM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetSon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetSon" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (EDA_ITEM *)(*arg1)->GetSon();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DHEAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetList" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (DHEAD *)(*arg1)->GetList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DHEAD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetParent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetParent" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetParent" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetParent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetSon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetSon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetSon" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetSon" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetSon(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  DHEAD *arg2 = (DHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetList" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DHEAD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetList" "', argument " "2"" of type '" "DHEAD *""'"); 
  }
  arg2 = reinterpret_cast< DHEAD * >(argp2);
  (*arg1)->SetList(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsNew(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_IsNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsNew" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (bool)(*arg1)->IsNew();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_IsModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsModified" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (bool)(*arg1)->IsModified();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsMoving(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_IsMoving",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsMoving" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (bool)(*arg1)->IsMoving();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsDragging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_IsDragging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsDragging" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (bool)(*arg1)->IsDragging();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsSelected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_IsSelected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsSelected" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (bool)(*arg1)->IsSelected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsResized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_IsResized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsResized" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (bool)(*arg1)->IsResized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_SetModified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetModified" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  (*arg1)->SetModified();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_GetState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetState" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_GetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(*arg1)->GetState(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PAD_List_SetState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetState" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PAD_List_SetState" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (*arg1)->SetState(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetStatus" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (int)(*arg1)->GetStatus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetStatus" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetStatus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetStatus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetFlags" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->SetFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_ClearFlags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_ClearFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_ClearFlags" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_ClearFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->ClearFlags(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_ClearFlags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_ClearFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_ClearFlags" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  (*arg1)->ClearFlags();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_ClearFlags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PAD_List_ClearFlags__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PAD_List_ClearFlags__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PAD_List_ClearFlags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::ClearFlags(int)\n"
    "    EDA_ITEM::ClearFlags()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PAD_List_GetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_GetFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_GetFlags" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (int)(*arg1)->GetFlags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetImage" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_SetImage" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  (*arg1)->SetImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_SetForceVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_SetForceVisible",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_SetForceVisible" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PAD_List_SetForceVisible" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->SetForceVisible(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_IterateForward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  INSPECTOR *arg3 = (INSPECTOR *) 0 ;
  void *arg4 = (void *) 0 ;
  KICAD_T *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PAD_List_IterateForward",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IterateForward" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_IterateForward" "', argument " "2"" of type '" "EDA_ITEM *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_IterateForward" "', argument " "3"" of type '" "INSPECTOR *""'"); 
  }
  arg3 = reinterpret_cast< INSPECTOR * >(argp3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PAD_List_IterateForward" "', argument " "4"" of type '" "void const *""'"); 
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PAD_List_IterateForward" "', argument " "5"" of type '" "KICAD_T const []""'"); 
  } 
  arg5 = reinterpret_cast< KICAD_T * >(argp5);
  result = (SEARCH_RESULT)(*arg1)->IterateForward(arg2,arg3,(void const *)arg4,(KICAD_T const (*))arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Visit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  INSPECTOR *arg2 = (INSPECTOR *) 0 ;
  void *arg3 = (void *) 0 ;
  KICAD_T *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SEARCH_RESULT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PAD_List_Visit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Visit" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_INSPECTOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Visit" "', argument " "2"" of type '" "INSPECTOR *""'"); 
  }
  arg2 = reinterpret_cast< INSPECTOR * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_Visit" "', argument " "3"" of type '" "void const *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_KICAD_T, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PAD_List_Visit" "', argument " "4"" of type '" "KICAD_T const []""'"); 
  } 
  arg4 = reinterpret_cast< KICAD_T * >(argp4);
  result = (SEARCH_RESULT)(*arg1)->Visit(arg2,(void const *)arg3,(KICAD_T const (*))arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Matches__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  wxPoint *arg4 = (wxPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PAD_List_Matches",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Matches" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_Matches" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_Matches" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_wxPoint, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PAD_List_Matches" "', argument " "4"" of type '" "wxPoint *""'"); 
  }
  arg4 = reinterpret_cast< wxPoint * >(argp4);
  result = (bool)(*arg1)->Matches(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Matches__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxString *arg2 = 0 ;
  wxFindReplaceData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 = false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PAD_List_Matches",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Matches" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  {
    arg2 = newWxStringFromPy(obj1);
    if (arg2 == NULL) SWIG_fail;
    temp2 = true;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_Matches" "', argument " "3"" of type '" "wxFindReplaceData &""'"); 
  }
  arg3 = reinterpret_cast< wxFindReplaceData * >(argp3);
  result = (bool)(*arg1)->Matches((wxString const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp2)
    delete arg2;
  }
  return resultobj;
fail:
  {
    if (temp2)
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Matches(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyString_Check(argv[1]) || PyUnicode_Check(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PAD_List_Matches__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wxPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PAD_List_Matches__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PAD_List_Matches'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Matches(wxFindReplaceData &,void *,wxPoint *)\n"
    "    EDA_ITEM::Matches(wxString const &,wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PAD_List_Replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  wxString *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PAD_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Replace" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  {
    arg3 = newWxStringFromPy(obj2);
    if (arg3 == NULL) SWIG_fail;
    temp3 = true;
  }
  result = (bool)(*arg1)->Replace(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (temp3)
    delete arg3;
  }
  return resultobj;
fail:
  {
    if (temp3)
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PAD_List_Replace",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Replace" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_Replace" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (bool)(*arg1)->Replace(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Replace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  wxFindReplaceData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List_Replace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Replace" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wxFindReplaceData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List_Replace" "', argument " "2"" of type '" "wxFindReplaceData &""'"); 
  }
  arg2 = reinterpret_cast< wxFindReplaceData * >(argp2);
  result = (bool)(*arg1)->Replace(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Replace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PAD_List_Replace__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyString_Check(argv[2]) || PyUnicode_Check(argv[2]);
        }
        if (_v) {
          return _wrap_PAD_List_Replace__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DLISTT_D_PAD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wxFindReplaceData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PAD_List_Replace__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PAD_List_Replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,wxString &)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &,void *)\n"
    "    EDA_ITEM::Replace(wxFindReplaceData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PAD_List_IsReplaceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PAD_List_IsReplaceable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_IsReplaceable" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  result = (bool)(*arg1)->IsReplaceable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_ITEM *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PAD_List___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List___lt__" "', argument " "1"" of type '" "DLIST< D_PAD > const *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EDA_ITEM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PAD_List___lt__" "', argument " "2"" of type '" "EDA_ITEM const &""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  result = (bool)(*arg1)->operator <((EDA_ITEM const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PAD_List_Sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DLIST< D_PAD > *arg1 = (DLIST< D_PAD > *) 0 ;
  EDA_ITEM *arg2 = (EDA_ITEM *) 0 ;
  EDA_ITEM *arg3 = (EDA_ITEM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PAD_List_Sort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DLISTT_D_PAD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PAD_List_Sort" "', argument " "1"" of type '" "DLIST< D_PAD > *""'"); 
  }
  arg1 = reinterpret_cast< DLIST< D_PAD > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PAD_List_Sort" "', argument " "2"" of type '" "EDA_ITEM const *""'"); 
  }
  arg2 = reinterpret_cast< EDA_ITEM * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EDA_ITEM, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PAD_List_Sort" "', argument " "3"" of type '" "EDA_ITEM const *""'"); 
  }
  arg3 = reinterpret_cast< EDA_ITEM * >(argp3);
  result = (bool)(*arg1)->Sort((EDA_ITEM const *)arg2,(EDA_ITEM const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PAD_List_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DLISTT_D_PAD_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_iterator" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_VIA_DIMENSION_Sg__iterator(arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___nonzero__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_VIA_DIMENSION_Sg____nonzero__((std::vector< VIA_DIMENSION > const *)arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___bool__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_VIA_DIMENSION_Sg____bool__((std::vector< VIA_DIMENSION > const *)arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___len__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = std_vector_Sl_VIA_DIMENSION_Sg____len__((std::vector< VIA_DIMENSION > const *)arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_pop" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_VIA_DIMENSION_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< VIA_DIMENSION >::value_type(static_cast< const std::vector< VIA_DIMENSION >::value_type& >(result))), SWIGTYPE_p_VIA_DIMENSION, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::difference_type arg2 ;
  std::vector< VIA_DIMENSION >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VIA_DIMENSION_Vector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___getslice__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector___getslice__" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIA_DIMENSION_Vector___getslice__" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *)std_vector_Sl_VIA_DIMENSION_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::difference_type arg2 ;
  std::vector< VIA_DIMENSION >::difference_type arg3 ;
  std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VIA_DIMENSION_Vector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___setslice__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector___setslice__" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIA_DIMENSION_Vector___setslice__" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val3);
  {
    std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *ptr = (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VIA_DIMENSION_Vector___setslice__" "', argument " "4"" of type '" "std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector___setslice__" "', argument " "4"" of type '" "std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_VIA_DIMENSION_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::difference_type arg2 ;
  std::vector< VIA_DIMENSION >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VIA_DIMENSION_Vector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___setslice__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector___setslice__" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIA_DIMENSION_Vector___setslice__" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_VIA_DIMENSION_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VIA_DIMENSION_Vector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VIA_DIMENSION_Vector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIA_DIMENSION_Vector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< VIA_DIMENSION >::__setslice__(std::vector< VIA_DIMENSION >::difference_type,std::vector< VIA_DIMENSION >::difference_type,std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &)\n"
    "    std::vector< VIA_DIMENSION >::__setslice__(std::vector< VIA_DIMENSION >::difference_type,std::vector< VIA_DIMENSION >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::difference_type arg2 ;
  std::vector< VIA_DIMENSION >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VIA_DIMENSION_Vector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___delslice__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector___delslice__" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIA_DIMENSION_Vector___delslice__" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_VIA_DIMENSION_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___delitem__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector___delitem__" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_VIA_DIMENSION_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___getitem__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *)std_vector_Sl_VIA_DIMENSION_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VIA_DIMENSION_Vector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *ptr = (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_VIA_DIMENSION_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_VIA_DIMENSION_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___delitem__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_VIA_DIMENSION_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VIA_DIMENSION_Vector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIA_DIMENSION_Vector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIA_DIMENSION_Vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< VIA_DIMENSION >::__delitem__(std::vector< VIA_DIMENSION >::difference_type)\n"
    "    std::vector< VIA_DIMENSION >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< VIA_DIMENSION >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___getitem__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector___getitem__" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< VIA_DIMENSION >::value_type *) &std_vector_Sl_VIA_DIMENSION_Sg____getitem____SWIG_1((std::vector< VIA_DIMENSION > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIA_DIMENSION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VIA_DIMENSION_Vector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIA_DIMENSION_Vector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIA_DIMENSION_Vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< VIA_DIMENSION >::__getitem__(PySliceObject *)\n"
    "    std::vector< VIA_DIMENSION >::__getitem__(std::vector< VIA_DIMENSION >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::difference_type arg2 ;
  std::vector< VIA_DIMENSION >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VIA_DIMENSION_Vector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector___setitem__" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< VIA_DIMENSION >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_VIA_DIMENSION_Sg____setitem____SWIG_2(arg1,arg2,(VIA_DIMENSION const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VIA_DIMENSION_Vector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIA_DIMENSION_Vector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_VIA_DIMENSION, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIA_DIMENSION_Vector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIA_DIMENSION_Vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< VIA_DIMENSION >::__setitem__(PySliceObject *,std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > const &)\n"
    "    std::vector< VIA_DIMENSION >::__setitem__(PySliceObject *)\n"
    "    std::vector< VIA_DIMENSION >::__setitem__(std::vector< VIA_DIMENSION >::difference_type,std::vector< VIA_DIMENSION >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_append" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIA_DIMENSION_Vector_append" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector_append" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< VIA_DIMENSION >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_VIA_DIMENSION_Sg__append(arg1,(VIA_DIMENSION const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIA_DIMENSION_Vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VIA_DIMENSION_Vector")) SWIG_fail;
  {
    try{
      result = (std::vector< VIA_DIMENSION > *)new std::vector< VIA_DIMENSION >();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIA_DIMENSION_Vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VIA_DIMENSION_Vector",&obj0)) SWIG_fail;
  {
    std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *ptr = (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VIA_DIMENSION_Vector" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VIA_DIMENSION_Vector" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< VIA_DIMENSION > *)new std::vector< VIA_DIMENSION >((std::vector< VIA_DIMENSION > const &)*arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_empty" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (bool)((std::vector< VIA_DIMENSION > const *)arg1)->empty();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_size" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = ((std::vector< VIA_DIMENSION > const *)arg1)->size();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_clear" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_swap" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIA_DIMENSION_Vector_swap" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector_swap" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< VIA_DIMENSION > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_get_allocator" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = ((std::vector< VIA_DIMENSION > const *)arg1)->get_allocator();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< VIA_DIMENSION >::allocator_type(static_cast< const std::vector< VIA_DIMENSION >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_VIA_DIMENSION_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_begin" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< VIA_DIMENSION >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_end" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< VIA_DIMENSION >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_rbegin" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< VIA_DIMENSION >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_rend" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< VIA_DIMENSION >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIA_DIMENSION_Vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VIA_DIMENSION_Vector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VIA_DIMENSION_Vector" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION >::size_type""'");
  } 
  arg1 = static_cast< std::vector< VIA_DIMENSION >::size_type >(val1);
  {
    try{
      result = (std::vector< VIA_DIMENSION > *)new std::vector< VIA_DIMENSION >(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_pop_back" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_resize" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector_resize" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::size_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< VIA_DIMENSION >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_erase" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_erase" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_erase" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< VIA_DIMENSION >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::iterator arg2 ;
  std::vector< VIA_DIMENSION >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< VIA_DIMENSION >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VIA_DIMENSION_Vector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_erase" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_erase" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_erase" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_erase" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_erase" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< VIA_DIMENSION >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VIA_DIMENSION_Vector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VIA_DIMENSION_Vector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIA_DIMENSION_Vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< VIA_DIMENSION >::erase(std::vector< VIA_DIMENSION >::iterator)\n"
    "    std::vector< VIA_DIMENSION >::erase(std::vector< VIA_DIMENSION >::iterator,std::vector< VIA_DIMENSION >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VIA_DIMENSION_Vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION >::size_type arg1 ;
  std::vector< VIA_DIMENSION >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< VIA_DIMENSION > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VIA_DIMENSION_Vector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VIA_DIMENSION_Vector" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION >::size_type""'");
  } 
  arg1 = static_cast< std::vector< VIA_DIMENSION >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VIA_DIMENSION_Vector" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VIA_DIMENSION_Vector" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< VIA_DIMENSION >::value_type * >(argp2);
  {
    try{
      result = (std::vector< VIA_DIMENSION > *)new std::vector< VIA_DIMENSION >(arg1,(std::vector< VIA_DIMENSION >::value_type const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIA_DIMENSION_Vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VIA_DIMENSION_Vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VIA_DIMENSION_Vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VIA_DIMENSION_Vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_VIA_DIMENSION, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VIA_DIMENSION_Vector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VIA_DIMENSION_Vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< VIA_DIMENSION >::vector()\n"
    "    std::vector< VIA_DIMENSION >::vector(std::vector< VIA_DIMENSION > const &)\n"
    "    std::vector< VIA_DIMENSION >::vector(std::vector< VIA_DIMENSION >::size_type)\n"
    "    std::vector< VIA_DIMENSION >::vector(std::vector< VIA_DIMENSION >::size_type,std::vector< VIA_DIMENSION >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_push_back" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIA_DIMENSION_Vector_push_back" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector_push_back" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< VIA_DIMENSION >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< VIA_DIMENSION >::value_type const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_front" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (std::vector< VIA_DIMENSION >::value_type *) &((std::vector< VIA_DIMENSION > const *)arg1)->front();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIA_DIMENSION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_back" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = (std::vector< VIA_DIMENSION >::value_type *) &((std::vector< VIA_DIMENSION > const *)arg1)->back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIA_DIMENSION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::size_type arg2 ;
  std::vector< VIA_DIMENSION >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VIA_DIMENSION_Vector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_assign" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector_assign" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::size_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIA_DIMENSION_Vector_assign" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector_assign" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< VIA_DIMENSION >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< VIA_DIMENSION >::value_type const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::size_type arg2 ;
  std::vector< VIA_DIMENSION >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VIA_DIMENSION_Vector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_resize" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector_resize" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::size_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIA_DIMENSION_Vector_resize" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector_resize" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< VIA_DIMENSION >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< VIA_DIMENSION >::value_type const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIA_DIMENSION_Vector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_VIA_DIMENSION, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIA_DIMENSION_Vector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIA_DIMENSION_Vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< VIA_DIMENSION >::resize(std::vector< VIA_DIMENSION >::size_type)\n"
    "    std::vector< VIA_DIMENSION >::resize(std::vector< VIA_DIMENSION >::size_type,std::vector< VIA_DIMENSION >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::iterator arg2 ;
  std::vector< VIA_DIMENSION >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< VIA_DIMENSION >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VIA_DIMENSION_Vector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< VIA_DIMENSION >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< VIA_DIMENSION >::value_type const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< VIA_DIMENSION >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::iterator arg2 ;
  std::vector< VIA_DIMENSION >::size_type arg3 ;
  std::vector< VIA_DIMENSION >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VIA_DIMENSION_Vector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "3"" of type '" "std::vector< VIA_DIMENSION >::size_type""'");
  } 
  arg3 = static_cast< std::vector< VIA_DIMENSION >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_VIA_DIMENSION,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "4"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIA_DIMENSION_Vector_insert" "', argument " "4"" of type '" "std::vector< VIA_DIMENSION >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< VIA_DIMENSION >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< VIA_DIMENSION >::value_type const &)*arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_VIA_DIMENSION, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIA_DIMENSION_Vector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VIA_DIMENSION,std::allocator< VIA_DIMENSION > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< VIA_DIMENSION >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_VIA_DIMENSION, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VIA_DIMENSION_Vector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIA_DIMENSION_Vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< VIA_DIMENSION >::insert(std::vector< VIA_DIMENSION >::iterator,std::vector< VIA_DIMENSION >::value_type const &)\n"
    "    std::vector< VIA_DIMENSION >::insert(std::vector< VIA_DIMENSION >::iterator,std::vector< VIA_DIMENSION >::size_type,std::vector< VIA_DIMENSION >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  std::vector< VIA_DIMENSION >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VIA_DIMENSION_Vector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_reserve" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIA_DIMENSION_Vector_reserve" "', argument " "2"" of type '" "std::vector< VIA_DIMENSION >::size_type""'");
  } 
  arg2 = static_cast< std::vector< VIA_DIMENSION >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIA_DIMENSION_Vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< VIA_DIMENSION >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VIA_DIMENSION_Vector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIA_DIMENSION_Vector_capacity" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      result = ((std::vector< VIA_DIMENSION > const *)arg1)->capacity();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VIA_DIMENSION_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< VIA_DIMENSION > *arg1 = (std::vector< VIA_DIMENSION > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VIA_DIMENSION_Vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VIA_DIMENSION_Vector" "', argument " "1"" of type '" "std::vector< VIA_DIMENSION > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VIA_DIMENSION > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VIA_DIMENSION_Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_RASTNET_Vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_iterator" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_RATSNEST_ITEM_Sg__iterator(arg1,arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___nonzero__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_RATSNEST_ITEM_Sg____nonzero__((std::vector< RATSNEST_ITEM > const *)arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___bool__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_RATSNEST_ITEM_Sg____bool__((std::vector< RATSNEST_ITEM > const *)arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___len__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = std_vector_Sl_RATSNEST_ITEM_Sg____len__((std::vector< RATSNEST_ITEM > const *)arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_pop" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_RATSNEST_ITEM_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< RATSNEST_ITEM >::value_type(static_cast< const std::vector< RATSNEST_ITEM >::value_type& >(result))), SWIGTYPE_p_RATSNEST_ITEM, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::difference_type arg2 ;
  std::vector< RATSNEST_ITEM >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RASTNET_Vector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___getslice__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector___getslice__" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RASTNET_Vector___getslice__" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *)std_vector_Sl_RATSNEST_ITEM_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::difference_type arg2 ;
  std::vector< RATSNEST_ITEM >::difference_type arg3 ;
  std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RASTNET_Vector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___setslice__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector___setslice__" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RASTNET_Vector___setslice__" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val3);
  {
    std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *ptr = (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RASTNET_Vector___setslice__" "', argument " "4"" of type '" "std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector___setslice__" "', argument " "4"" of type '" "std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_RATSNEST_ITEM_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::difference_type arg2 ;
  std::vector< RATSNEST_ITEM >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RASTNET_Vector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___setslice__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector___setslice__" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RASTNET_Vector___setslice__" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_RATSNEST_ITEM_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RASTNET_Vector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RASTNET_Vector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RASTNET_Vector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< RATSNEST_ITEM >::__setslice__(std::vector< RATSNEST_ITEM >::difference_type,std::vector< RATSNEST_ITEM >::difference_type,std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &)\n"
    "    std::vector< RATSNEST_ITEM >::__setslice__(std::vector< RATSNEST_ITEM >::difference_type,std::vector< RATSNEST_ITEM >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::difference_type arg2 ;
  std::vector< RATSNEST_ITEM >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RASTNET_Vector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___delslice__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector___delslice__" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RASTNET_Vector___delslice__" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_RATSNEST_ITEM_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___delitem__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector___delitem__" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_RATSNEST_ITEM_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___getitem__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *)std_vector_Sl_RATSNEST_ITEM_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RASTNET_Vector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___setitem__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *ptr = (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RASTNET_Vector___setitem__" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector___setitem__" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_RATSNEST_ITEM_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___setitem__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_RATSNEST_ITEM_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___delitem__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_RATSNEST_ITEM_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RASTNET_Vector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RASTNET_Vector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RASTNET_Vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< RATSNEST_ITEM >::__delitem__(std::vector< RATSNEST_ITEM >::difference_type)\n"
    "    std::vector< RATSNEST_ITEM >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< RATSNEST_ITEM >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___getitem__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector___getitem__" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< RATSNEST_ITEM >::value_type *) &std_vector_Sl_RATSNEST_ITEM_Sg____getitem____SWIG_1((std::vector< RATSNEST_ITEM > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RASTNET_Vector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RASTNET_Vector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RASTNET_Vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< RATSNEST_ITEM >::__getitem__(PySliceObject *)\n"
    "    std::vector< RATSNEST_ITEM >::__getitem__(std::vector< RATSNEST_ITEM >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::difference_type arg2 ;
  std::vector< RATSNEST_ITEM >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RASTNET_Vector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector___setitem__" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector___setitem__" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RATSNEST_ITEM,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RASTNET_Vector___setitem__" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector___setitem__" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< RATSNEST_ITEM >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_RATSNEST_ITEM_Sg____setitem____SWIG_2(arg1,arg2,(RATSNEST_ITEM const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RASTNET_Vector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RASTNET_Vector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_RATSNEST_ITEM, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RASTNET_Vector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RASTNET_Vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< RATSNEST_ITEM >::__setitem__(PySliceObject *,std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > const &)\n"
    "    std::vector< RATSNEST_ITEM >::__setitem__(PySliceObject *)\n"
    "    std::vector< RATSNEST_ITEM >::__setitem__(std::vector< RATSNEST_ITEM >::difference_type,std::vector< RATSNEST_ITEM >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_append" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RATSNEST_ITEM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RASTNET_Vector_append" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector_append" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< RATSNEST_ITEM >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_RATSNEST_ITEM_Sg__append(arg1,(RATSNEST_ITEM const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RASTNET_Vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RASTNET_Vector")) SWIG_fail;
  {
    try{
      result = (std::vector< RATSNEST_ITEM > *)new std::vector< RATSNEST_ITEM >();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RASTNET_Vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RASTNET_Vector",&obj0)) SWIG_fail;
  {
    std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *ptr = (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RASTNET_Vector" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RASTNET_Vector" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< RATSNEST_ITEM > *)new std::vector< RATSNEST_ITEM >((std::vector< RATSNEST_ITEM > const &)*arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_empty" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (bool)((std::vector< RATSNEST_ITEM > const *)arg1)->empty();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_size" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = ((std::vector< RATSNEST_ITEM > const *)arg1)->size();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_clear" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_swap" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RASTNET_Vector_swap" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector_swap" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< RATSNEST_ITEM > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_get_allocator" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = ((std::vector< RATSNEST_ITEM > const *)arg1)->get_allocator();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< RATSNEST_ITEM >::allocator_type(static_cast< const std::vector< RATSNEST_ITEM >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_RATSNEST_ITEM_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_begin" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< RATSNEST_ITEM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_end" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< RATSNEST_ITEM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_rbegin" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< RATSNEST_ITEM >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_rend" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< RATSNEST_ITEM >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RASTNET_Vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RASTNET_Vector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RASTNET_Vector" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM >::size_type""'");
  } 
  arg1 = static_cast< std::vector< RATSNEST_ITEM >::size_type >(val1);
  {
    try{
      result = (std::vector< RATSNEST_ITEM > *)new std::vector< RATSNEST_ITEM >(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_pop_back" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_resize" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector_resize" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::size_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< RATSNEST_ITEM >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_erase" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_erase" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_erase" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< RATSNEST_ITEM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::iterator arg2 ;
  std::vector< RATSNEST_ITEM >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< RATSNEST_ITEM >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RASTNET_Vector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_erase" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_erase" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_erase" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_erase" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_erase" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< RATSNEST_ITEM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_RASTNET_Vector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_RASTNET_Vector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RASTNET_Vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< RATSNEST_ITEM >::erase(std::vector< RATSNEST_ITEM >::iterator)\n"
    "    std::vector< RATSNEST_ITEM >::erase(std::vector< RATSNEST_ITEM >::iterator,std::vector< RATSNEST_ITEM >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_RASTNET_Vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM >::size_type arg1 ;
  std::vector< RATSNEST_ITEM >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< RATSNEST_ITEM > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RASTNET_Vector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RASTNET_Vector" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM >::size_type""'");
  } 
  arg1 = static_cast< std::vector< RATSNEST_ITEM >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RATSNEST_ITEM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RASTNET_Vector" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RASTNET_Vector" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< RATSNEST_ITEM >::value_type * >(argp2);
  {
    try{
      result = (std::vector< RATSNEST_ITEM > *)new std::vector< RATSNEST_ITEM >(arg1,(std::vector< RATSNEST_ITEM >::value_type const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RASTNET_Vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RASTNET_Vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RASTNET_Vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RASTNET_Vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RATSNEST_ITEM, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RASTNET_Vector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RASTNET_Vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< RATSNEST_ITEM >::vector()\n"
    "    std::vector< RATSNEST_ITEM >::vector(std::vector< RATSNEST_ITEM > const &)\n"
    "    std::vector< RATSNEST_ITEM >::vector(std::vector< RATSNEST_ITEM >::size_type)\n"
    "    std::vector< RATSNEST_ITEM >::vector(std::vector< RATSNEST_ITEM >::size_type,std::vector< RATSNEST_ITEM >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_push_back" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RATSNEST_ITEM,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RASTNET_Vector_push_back" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector_push_back" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< RATSNEST_ITEM >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< RATSNEST_ITEM >::value_type const &)*arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_front" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (std::vector< RATSNEST_ITEM >::value_type *) &((std::vector< RATSNEST_ITEM > const *)arg1)->front();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_back" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = (std::vector< RATSNEST_ITEM >::value_type *) &((std::vector< RATSNEST_ITEM > const *)arg1)->back();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RATSNEST_ITEM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::size_type arg2 ;
  std::vector< RATSNEST_ITEM >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RASTNET_Vector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_assign" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector_assign" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::size_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RATSNEST_ITEM,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RASTNET_Vector_assign" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector_assign" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< RATSNEST_ITEM >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< RATSNEST_ITEM >::value_type const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::size_type arg2 ;
  std::vector< RATSNEST_ITEM >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RASTNET_Vector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_resize" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector_resize" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::size_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RATSNEST_ITEM,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RASTNET_Vector_resize" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector_resize" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< RATSNEST_ITEM >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< RATSNEST_ITEM >::value_type const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RASTNET_Vector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_RATSNEST_ITEM, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RASTNET_Vector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RASTNET_Vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< RATSNEST_ITEM >::resize(std::vector< RATSNEST_ITEM >::size_type)\n"
    "    std::vector< RATSNEST_ITEM >::resize(std::vector< RATSNEST_ITEM >::size_type,std::vector< RATSNEST_ITEM >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::iterator arg2 ;
  std::vector< RATSNEST_ITEM >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< RATSNEST_ITEM >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RASTNET_Vector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_insert" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_insert" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_insert" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RATSNEST_ITEM,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RASTNET_Vector_insert" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector_insert" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< RATSNEST_ITEM >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< RATSNEST_ITEM >::value_type const &)*arg3);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< RATSNEST_ITEM >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::iterator arg2 ;
  std::vector< RATSNEST_ITEM >::size_type arg3 ;
  std::vector< RATSNEST_ITEM >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RASTNET_Vector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_insert" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_insert" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RASTNET_Vector_insert" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RASTNET_Vector_insert" "', argument " "3"" of type '" "std::vector< RATSNEST_ITEM >::size_type""'");
  } 
  arg3 = static_cast< std::vector< RATSNEST_ITEM >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_RATSNEST_ITEM,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RASTNET_Vector_insert" "', argument " "4"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RASTNET_Vector_insert" "', argument " "4"" of type '" "std::vector< RATSNEST_ITEM >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< RATSNEST_ITEM >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< RATSNEST_ITEM >::value_type const &)*arg4);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_RATSNEST_ITEM, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RASTNET_Vector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< RATSNEST_ITEM >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_RATSNEST_ITEM, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RASTNET_Vector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RASTNET_Vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< RATSNEST_ITEM >::insert(std::vector< RATSNEST_ITEM >::iterator,std::vector< RATSNEST_ITEM >::value_type const &)\n"
    "    std::vector< RATSNEST_ITEM >::insert(std::vector< RATSNEST_ITEM >::iterator,std::vector< RATSNEST_ITEM >::size_type,std::vector< RATSNEST_ITEM >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  std::vector< RATSNEST_ITEM >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RASTNET_Vector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_reserve" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RASTNET_Vector_reserve" "', argument " "2"" of type '" "std::vector< RATSNEST_ITEM >::size_type""'");
  } 
  arg2 = static_cast< std::vector< RATSNEST_ITEM >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RASTNET_Vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< RATSNEST_ITEM >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RASTNET_Vector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RASTNET_Vector_capacity" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      result = ((std::vector< RATSNEST_ITEM > const *)arg1)->capacity();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RASTNET_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< RATSNEST_ITEM > *arg1 = (std::vector< RATSNEST_ITEM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RASTNET_Vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RASTNET_Vector" "', argument " "1"" of type '" "std::vector< RATSNEST_ITEM > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< RATSNEST_ITEM > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RASTNET_Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PYTHON_FOOTPRINT_WIZARDS_register_wizard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PYTHON_FOOTPRINT_WIZARDS_register_wizard",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try{
      PYTHON_FOOTPRINT_WIZARDS::register_wizard(arg1);
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PYTHON_FOOTPRINT_WIZARDS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PYTHON_FOOTPRINT_WIZARDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PYTHON_FOOTPRINT_WIZARDS")) SWIG_fail;
  {
    try{
      result = (PYTHON_FOOTPRINT_WIZARDS *)new PYTHON_FOOTPRINT_WIZARDS();
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PYTHON_FOOTPRINT_WIZARDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PYTHON_FOOTPRINT_WIZARDS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PYTHON_FOOTPRINT_WIZARDS *arg1 = (PYTHON_FOOTPRINT_WIZARDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PYTHON_FOOTPRINT_WIZARDS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PYTHON_FOOTPRINT_WIZARDS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PYTHON_FOOTPRINT_WIZARDS" "', argument " "1"" of type '" "PYTHON_FOOTPRINT_WIZARDS *""'"); 
  }
  arg1 = reinterpret_cast< PYTHON_FOOTPRINT_WIZARDS * >(argp1);
  {
    try{
      delete arg1;
    }
    catch( IO_ERROR e )
    {
      char ExceptionError[256];
      sprintf(ExceptionError, "%s\n", TO_UTF8(e.errorText) );
      PyErr_SetString(PyExc_IOError,ExceptionError);
      return NULL;
    }
    catch( ... )
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PYTHON_FOOTPRINT_WIZARDS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PYTHON_FOOTPRINT_WIZARDS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_incr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_decr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"wxSetDefaultPyEncoding", _wrap_wxSetDefaultPyEncoding, METH_VARARGS, (char *)"wxSetDefaultPyEncoding(char const * encoding)"},
	 { (char *)"wxGetDefaultPyEncoding", _wrap_wxGetDefaultPyEncoding, METH_VARARGS, (char *)"wxGetDefaultPyEncoding() -> char const *"},
	 { (char *)"new_wxRect", _wrap_new_wxRect, METH_VARARGS, (char *)"\n"
		"wxRect()\n"
		"wxRect(int xx, int yy, int ww, int hh)\n"
		"wxRect(wxPoint topLeft, wxPoint bottomRight)\n"
		"wxRect(wxPoint pt, wxSize size)\n"
		"new_wxRect(wxSize size) -> wxRect\n"
		""},
	 { (char *)"wxRect_GetX", _wrap_wxRect_GetX, METH_VARARGS, (char *)"wxRect_GetX(wxRect self) -> int"},
	 { (char *)"wxRect_SetX", _wrap_wxRect_SetX, METH_VARARGS, (char *)"wxRect_SetX(wxRect self, int xx)"},
	 { (char *)"wxRect_GetY", _wrap_wxRect_GetY, METH_VARARGS, (char *)"wxRect_GetY(wxRect self) -> int"},
	 { (char *)"wxRect_SetY", _wrap_wxRect_SetY, METH_VARARGS, (char *)"wxRect_SetY(wxRect self, int yy)"},
	 { (char *)"wxRect_GetWidth", _wrap_wxRect_GetWidth, METH_VARARGS, (char *)"wxRect_GetWidth(wxRect self) -> int"},
	 { (char *)"wxRect_SetWidth", _wrap_wxRect_SetWidth, METH_VARARGS, (char *)"wxRect_SetWidth(wxRect self, int w)"},
	 { (char *)"wxRect_GetHeight", _wrap_wxRect_GetHeight, METH_VARARGS, (char *)"wxRect_GetHeight(wxRect self) -> int"},
	 { (char *)"wxRect_SetHeight", _wrap_wxRect_SetHeight, METH_VARARGS, (char *)"wxRect_SetHeight(wxRect self, int h)"},
	 { (char *)"wxRect_GetPosition", _wrap_wxRect_GetPosition, METH_VARARGS, (char *)"wxRect_GetPosition(wxRect self) -> wxPoint"},
	 { (char *)"wxRect_SetPosition", _wrap_wxRect_SetPosition, METH_VARARGS, (char *)"wxRect_SetPosition(wxRect self, wxPoint p)"},
	 { (char *)"wxRect_x_set", _wrap_wxRect_x_set, METH_VARARGS, (char *)"wxRect_x_set(wxRect self, int x)"},
	 { (char *)"wxRect_x_get", _wrap_wxRect_x_get, METH_VARARGS, (char *)"wxRect_x_get(wxRect self) -> int"},
	 { (char *)"wxRect_y_set", _wrap_wxRect_y_set, METH_VARARGS, (char *)"wxRect_y_set(wxRect self, int y)"},
	 { (char *)"wxRect_y_get", _wrap_wxRect_y_get, METH_VARARGS, (char *)"wxRect_y_get(wxRect self) -> int"},
	 { (char *)"wxRect_width_set", _wrap_wxRect_width_set, METH_VARARGS, (char *)"wxRect_width_set(wxRect self, int width)"},
	 { (char *)"wxRect_width_get", _wrap_wxRect_width_get, METH_VARARGS, (char *)"wxRect_width_get(wxRect self) -> int"},
	 { (char *)"wxRect_height_set", _wrap_wxRect_height_set, METH_VARARGS, (char *)"wxRect_height_set(wxRect self, int height)"},
	 { (char *)"wxRect_height_get", _wrap_wxRect_height_get, METH_VARARGS, (char *)"wxRect_height_get(wxRect self) -> int"},
	 { (char *)"wxRect_Get", _wrap_wxRect_Get, METH_VARARGS, (char *)"wxRect_Get(wxRect self) -> PyObject *"},
	 { (char *)"delete_wxRect", _wrap_delete_wxRect, METH_VARARGS, (char *)"delete_wxRect(wxRect self)"},
	 { (char *)"wxRect_swigregister", wxRect_swigregister, METH_VARARGS, NULL},
	 { (char *)"wxSize_x_set", _wrap_wxSize_x_set, METH_VARARGS, (char *)"wxSize_x_set(wxSize self, int x)"},
	 { (char *)"wxSize_x_get", _wrap_wxSize_x_get, METH_VARARGS, (char *)"wxSize_x_get(wxSize self) -> int"},
	 { (char *)"wxSize_y_set", _wrap_wxSize_y_set, METH_VARARGS, (char *)"wxSize_y_set(wxSize self, int y)"},
	 { (char *)"wxSize_y_get", _wrap_wxSize_y_get, METH_VARARGS, (char *)"wxSize_y_get(wxSize self) -> int"},
	 { (char *)"new_wxSize", _wrap_new_wxSize, METH_VARARGS, (char *)"\n"
		"wxSize(int xx, int yy)\n"
		"new_wxSize(double xx, double yy) -> wxSize\n"
		""},
	 { (char *)"wxSize_Get", _wrap_wxSize_Get, METH_VARARGS, (char *)"wxSize_Get(wxSize self) -> PyObject *"},
	 { (char *)"delete_wxSize", _wrap_delete_wxSize, METH_VARARGS, (char *)"delete_wxSize(wxSize self)"},
	 { (char *)"wxSize_SetWidth", _wrap_wxSize_SetWidth, METH_VARARGS, (char *)"wxSize_SetWidth(wxSize self, int w)"},
	 { (char *)"wxSize_SetHeight", _wrap_wxSize_SetHeight, METH_VARARGS, (char *)"wxSize_SetHeight(wxSize self, int h)"},
	 { (char *)"wxSize_GetWidth", _wrap_wxSize_GetWidth, METH_VARARGS, (char *)"wxSize_GetWidth(wxSize self) -> int"},
	 { (char *)"wxSize_GetHeight", _wrap_wxSize_GetHeight, METH_VARARGS, (char *)"wxSize_GetHeight(wxSize self) -> int"},
	 { (char *)"wxSize_swigregister", wxSize_swigregister, METH_VARARGS, NULL},
	 { (char *)"wxPoint_x_set", _wrap_wxPoint_x_set, METH_VARARGS, (char *)"wxPoint_x_set(wxPoint self, int x)"},
	 { (char *)"wxPoint_x_get", _wrap_wxPoint_x_get, METH_VARARGS, (char *)"wxPoint_x_get(wxPoint self) -> int"},
	 { (char *)"wxPoint_y_set", _wrap_wxPoint_y_set, METH_VARARGS, (char *)"wxPoint_y_set(wxPoint self, int y)"},
	 { (char *)"wxPoint_y_get", _wrap_wxPoint_y_get, METH_VARARGS, (char *)"wxPoint_y_get(wxPoint self) -> int"},
	 { (char *)"new_wxPoint", _wrap_new_wxPoint, METH_VARARGS, (char *)"\n"
		"wxPoint(int xx, int yy)\n"
		"new_wxPoint(double xx, double yy) -> wxPoint\n"
		""},
	 { (char *)"delete_wxPoint", _wrap_delete_wxPoint, METH_VARARGS, (char *)"delete_wxPoint(wxPoint self)"},
	 { (char *)"wxPoint___add__", _wrap_wxPoint___add__, METH_VARARGS, (char *)"wxPoint___add__(wxPoint self, wxPoint pt) -> wxPoint"},
	 { (char *)"wxPoint___sub__", _wrap_wxPoint___sub__, METH_VARARGS, (char *)"wxPoint___sub__(wxPoint self, wxPoint pt) -> wxPoint"},
	 { (char *)"wxPoint_Set", _wrap_wxPoint_Set, METH_VARARGS, (char *)"wxPoint_Set(wxPoint self, long x, long y)"},
	 { (char *)"wxPoint_Get", _wrap_wxPoint_Get, METH_VARARGS, (char *)"wxPoint_Get(wxPoint self) -> PyObject *"},
	 { (char *)"wxPoint_swigregister", wxPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"DHEAD_DeleteAll", _wrap_DHEAD_DeleteAll, METH_VARARGS, (char *)"DHEAD_DeleteAll(DHEAD self)"},
	 { (char *)"DHEAD_SetOwnership", _wrap_DHEAD_SetOwnership, METH_VARARGS, (char *)"DHEAD_SetOwnership(DHEAD self, bool Iown)"},
	 { (char *)"DHEAD_GetCount", _wrap_DHEAD_GetCount, METH_VARARGS, (char *)"DHEAD_GetCount(DHEAD self) -> unsigned int"},
	 { (char *)"DHEAD_swigregister", DHEAD_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_INSPECTOR", _wrap_delete_INSPECTOR, METH_VARARGS, (char *)"delete_INSPECTOR(INSPECTOR self)"},
	 { (char *)"INSPECTOR_Inspect", _wrap_INSPECTOR_Inspect, METH_VARARGS, (char *)"INSPECTOR_Inspect(INSPECTOR self, EDA_ITEM aItem, void const * aTestData) -> SEARCH_RESULT"},
	 { (char *)"INSPECTOR_swigregister", INSPECTOR_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EDA_RECT", _wrap_new_EDA_RECT, METH_VARARGS, (char *)"\n"
		"EDA_RECT()\n"
		"new_EDA_RECT(wxPoint aPos, wxSize aSize) -> EDA_RECT\n"
		""},
	 { (char *)"EDA_RECT_Centre", _wrap_EDA_RECT_Centre, METH_VARARGS, (char *)"EDA_RECT_Centre(EDA_RECT self) -> wxPoint"},
	 { (char *)"EDA_RECT_Move", _wrap_EDA_RECT_Move, METH_VARARGS, (char *)"EDA_RECT_Move(EDA_RECT self, wxPoint aMoveVector)"},
	 { (char *)"EDA_RECT_Normalize", _wrap_EDA_RECT_Normalize, METH_VARARGS, (char *)"EDA_RECT_Normalize(EDA_RECT self)"},
	 { (char *)"EDA_RECT_Contains", _wrap_EDA_RECT_Contains, METH_VARARGS, (char *)"\n"
		"Contains(wxPoint aPoint) -> bool\n"
		"Contains(int x, int y) -> bool\n"
		"EDA_RECT_Contains(EDA_RECT self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"EDA_RECT_GetSize", _wrap_EDA_RECT_GetSize, METH_VARARGS, (char *)"EDA_RECT_GetSize(EDA_RECT self) -> wxSize"},
	 { (char *)"EDA_RECT_GetX", _wrap_EDA_RECT_GetX, METH_VARARGS, (char *)"EDA_RECT_GetX(EDA_RECT self) -> int"},
	 { (char *)"EDA_RECT_GetY", _wrap_EDA_RECT_GetY, METH_VARARGS, (char *)"EDA_RECT_GetY(EDA_RECT self) -> int"},
	 { (char *)"EDA_RECT_GetOrigin", _wrap_EDA_RECT_GetOrigin, METH_VARARGS, (char *)"EDA_RECT_GetOrigin(EDA_RECT self) -> wxPoint"},
	 { (char *)"EDA_RECT_GetPosition", _wrap_EDA_RECT_GetPosition, METH_VARARGS, (char *)"EDA_RECT_GetPosition(EDA_RECT self) -> wxPoint"},
	 { (char *)"EDA_RECT_GetEnd", _wrap_EDA_RECT_GetEnd, METH_VARARGS, (char *)"EDA_RECT_GetEnd(EDA_RECT self) -> wxPoint"},
	 { (char *)"EDA_RECT_GetWidth", _wrap_EDA_RECT_GetWidth, METH_VARARGS, (char *)"EDA_RECT_GetWidth(EDA_RECT self) -> int"},
	 { (char *)"EDA_RECT_GetHeight", _wrap_EDA_RECT_GetHeight, METH_VARARGS, (char *)"EDA_RECT_GetHeight(EDA_RECT self) -> int"},
	 { (char *)"EDA_RECT_GetRight", _wrap_EDA_RECT_GetRight, METH_VARARGS, (char *)"EDA_RECT_GetRight(EDA_RECT self) -> int"},
	 { (char *)"EDA_RECT_GetBottom", _wrap_EDA_RECT_GetBottom, METH_VARARGS, (char *)"EDA_RECT_GetBottom(EDA_RECT self) -> int"},
	 { (char *)"EDA_RECT_SetOrigin", _wrap_EDA_RECT_SetOrigin, METH_VARARGS, (char *)"\n"
		"SetOrigin(wxPoint pos)\n"
		"EDA_RECT_SetOrigin(EDA_RECT self, int x, int y)\n"
		""},
	 { (char *)"EDA_RECT_SetSize", _wrap_EDA_RECT_SetSize, METH_VARARGS, (char *)"\n"
		"SetSize(wxSize size)\n"
		"EDA_RECT_SetSize(EDA_RECT self, int w, int h)\n"
		""},
	 { (char *)"EDA_RECT_Offset", _wrap_EDA_RECT_Offset, METH_VARARGS, (char *)"\n"
		"Offset(int dx, int dy)\n"
		"EDA_RECT_Offset(EDA_RECT self, wxPoint offset)\n"
		""},
	 { (char *)"EDA_RECT_SetX", _wrap_EDA_RECT_SetX, METH_VARARGS, (char *)"EDA_RECT_SetX(EDA_RECT self, int val)"},
	 { (char *)"EDA_RECT_SetY", _wrap_EDA_RECT_SetY, METH_VARARGS, (char *)"EDA_RECT_SetY(EDA_RECT self, int val)"},
	 { (char *)"EDA_RECT_SetWidth", _wrap_EDA_RECT_SetWidth, METH_VARARGS, (char *)"EDA_RECT_SetWidth(EDA_RECT self, int val)"},
	 { (char *)"EDA_RECT_SetHeight", _wrap_EDA_RECT_SetHeight, METH_VARARGS, (char *)"EDA_RECT_SetHeight(EDA_RECT self, int val)"},
	 { (char *)"EDA_RECT_SetEnd", _wrap_EDA_RECT_SetEnd, METH_VARARGS, (char *)"\n"
		"SetEnd(int x, int y)\n"
		"EDA_RECT_SetEnd(EDA_RECT self, wxPoint pos)\n"
		""},
	 { (char *)"EDA_RECT_Intersects", _wrap_EDA_RECT_Intersects, METH_VARARGS, (char *)"EDA_RECT_Intersects(EDA_RECT self, EDA_RECT aRect) -> bool"},
	 { (char *)"EDA_RECT_getWxRect", _wrap_EDA_RECT_getWxRect, METH_VARARGS, (char *)"EDA_RECT_getWxRect(EDA_RECT self) -> wxRect"},
	 { (char *)"EDA_RECT_Inflate", _wrap_EDA_RECT_Inflate, METH_VARARGS, (char *)"\n"
		"Inflate(wxCoord dx, wxCoord dy) -> EDA_RECT\n"
		"EDA_RECT_Inflate(EDA_RECT self, int aDelta) -> EDA_RECT\n"
		""},
	 { (char *)"EDA_RECT_Merge", _wrap_EDA_RECT_Merge, METH_VARARGS, (char *)"\n"
		"Merge(EDA_RECT aRect)\n"
		"EDA_RECT_Merge(EDA_RECT self, wxPoint aPoint)\n"
		""},
	 { (char *)"EDA_RECT_GetArea", _wrap_EDA_RECT_GetArea, METH_VARARGS, (char *)"EDA_RECT_GetArea(EDA_RECT self) -> double"},
	 { (char *)"delete_EDA_RECT", _wrap_delete_EDA_RECT, METH_VARARGS, (char *)"delete_EDA_RECT(EDA_RECT self)"},
	 { (char *)"EDA_RECT_swigregister", EDA_RECT_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_EDA_ITEM", _wrap_delete_EDA_ITEM, METH_VARARGS, (char *)"delete_EDA_ITEM(EDA_ITEM self)"},
	 { (char *)"EDA_ITEM_Type", _wrap_EDA_ITEM_Type, METH_VARARGS, (char *)"EDA_ITEM_Type(EDA_ITEM self) -> KICAD_T"},
	 { (char *)"EDA_ITEM_SetTimeStamp", _wrap_EDA_ITEM_SetTimeStamp, METH_VARARGS, (char *)"EDA_ITEM_SetTimeStamp(EDA_ITEM self, time_t aNewTimeStamp)"},
	 { (char *)"EDA_ITEM_GetTimeStamp", _wrap_EDA_ITEM_GetTimeStamp, METH_VARARGS, (char *)"EDA_ITEM_GetTimeStamp(EDA_ITEM self) -> time_t"},
	 { (char *)"EDA_ITEM_Next", _wrap_EDA_ITEM_Next, METH_VARARGS, (char *)"EDA_ITEM_Next(EDA_ITEM self) -> EDA_ITEM"},
	 { (char *)"EDA_ITEM_Back", _wrap_EDA_ITEM_Back, METH_VARARGS, (char *)"EDA_ITEM_Back(EDA_ITEM self) -> EDA_ITEM"},
	 { (char *)"EDA_ITEM_GetParent", _wrap_EDA_ITEM_GetParent, METH_VARARGS, (char *)"EDA_ITEM_GetParent(EDA_ITEM self) -> EDA_ITEM"},
	 { (char *)"EDA_ITEM_GetSon", _wrap_EDA_ITEM_GetSon, METH_VARARGS, (char *)"EDA_ITEM_GetSon(EDA_ITEM self) -> EDA_ITEM"},
	 { (char *)"EDA_ITEM_GetList", _wrap_EDA_ITEM_GetList, METH_VARARGS, (char *)"EDA_ITEM_GetList(EDA_ITEM self) -> DHEAD"},
	 { (char *)"EDA_ITEM_SetParent", _wrap_EDA_ITEM_SetParent, METH_VARARGS, (char *)"EDA_ITEM_SetParent(EDA_ITEM self, EDA_ITEM aParent)"},
	 { (char *)"EDA_ITEM_SetSon", _wrap_EDA_ITEM_SetSon, METH_VARARGS, (char *)"EDA_ITEM_SetSon(EDA_ITEM self, EDA_ITEM aSon)"},
	 { (char *)"EDA_ITEM_SetList", _wrap_EDA_ITEM_SetList, METH_VARARGS, (char *)"EDA_ITEM_SetList(EDA_ITEM self, DHEAD aList)"},
	 { (char *)"EDA_ITEM_IsNew", _wrap_EDA_ITEM_IsNew, METH_VARARGS, (char *)"EDA_ITEM_IsNew(EDA_ITEM self) -> bool"},
	 { (char *)"EDA_ITEM_IsModified", _wrap_EDA_ITEM_IsModified, METH_VARARGS, (char *)"EDA_ITEM_IsModified(EDA_ITEM self) -> bool"},
	 { (char *)"EDA_ITEM_IsMoving", _wrap_EDA_ITEM_IsMoving, METH_VARARGS, (char *)"EDA_ITEM_IsMoving(EDA_ITEM self) -> bool"},
	 { (char *)"EDA_ITEM_IsDragging", _wrap_EDA_ITEM_IsDragging, METH_VARARGS, (char *)"EDA_ITEM_IsDragging(EDA_ITEM self) -> bool"},
	 { (char *)"EDA_ITEM_IsSelected", _wrap_EDA_ITEM_IsSelected, METH_VARARGS, (char *)"EDA_ITEM_IsSelected(EDA_ITEM self) -> bool"},
	 { (char *)"EDA_ITEM_IsResized", _wrap_EDA_ITEM_IsResized, METH_VARARGS, (char *)"EDA_ITEM_IsResized(EDA_ITEM self) -> bool"},
	 { (char *)"EDA_ITEM_SetModified", _wrap_EDA_ITEM_SetModified, METH_VARARGS, (char *)"EDA_ITEM_SetModified(EDA_ITEM self)"},
	 { (char *)"EDA_ITEM_GetState", _wrap_EDA_ITEM_GetState, METH_VARARGS, (char *)"EDA_ITEM_GetState(EDA_ITEM self, int type) -> int"},
	 { (char *)"EDA_ITEM_SetState", _wrap_EDA_ITEM_SetState, METH_VARARGS, (char *)"EDA_ITEM_SetState(EDA_ITEM self, int type, int state)"},
	 { (char *)"EDA_ITEM_GetStatus", _wrap_EDA_ITEM_GetStatus, METH_VARARGS, (char *)"EDA_ITEM_GetStatus(EDA_ITEM self) -> int"},
	 { (char *)"EDA_ITEM_SetStatus", _wrap_EDA_ITEM_SetStatus, METH_VARARGS, (char *)"EDA_ITEM_SetStatus(EDA_ITEM self, int aStatus)"},
	 { (char *)"EDA_ITEM_SetFlags", _wrap_EDA_ITEM_SetFlags, METH_VARARGS, (char *)"EDA_ITEM_SetFlags(EDA_ITEM self, int aMask)"},
	 { (char *)"EDA_ITEM_ClearFlags", _wrap_EDA_ITEM_ClearFlags, METH_VARARGS, (char *)"\n"
		"ClearFlags(int aMask=-1)\n"
		"EDA_ITEM_ClearFlags(EDA_ITEM self)\n"
		""},
	 { (char *)"EDA_ITEM_GetFlags", _wrap_EDA_ITEM_GetFlags, METH_VARARGS, (char *)"EDA_ITEM_GetFlags(EDA_ITEM self) -> int"},
	 { (char *)"EDA_ITEM_SetImage", _wrap_EDA_ITEM_SetImage, METH_VARARGS, (char *)"EDA_ITEM_SetImage(EDA_ITEM self, EDA_ITEM aItem)"},
	 { (char *)"EDA_ITEM_SetForceVisible", _wrap_EDA_ITEM_SetForceVisible, METH_VARARGS, (char *)"EDA_ITEM_SetForceVisible(EDA_ITEM self, bool aEnable)"},
	 { (char *)"EDA_ITEM_DisplayInfo", _wrap_EDA_ITEM_DisplayInfo, METH_VARARGS, (char *)"EDA_ITEM_DisplayInfo(EDA_ITEM self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"EDA_ITEM_HitTest", _wrap_EDA_ITEM_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"EDA_ITEM_HitTest(EDA_ITEM self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"EDA_ITEM_GetBoundingBox", _wrap_EDA_ITEM_GetBoundingBox, METH_VARARGS, (char *)"EDA_ITEM_GetBoundingBox(EDA_ITEM self) -> EDA_RECT"},
	 { (char *)"EDA_ITEM_Clone", _wrap_EDA_ITEM_Clone, METH_VARARGS, (char *)"EDA_ITEM_Clone(EDA_ITEM self) -> EDA_ITEM"},
	 { (char *)"EDA_ITEM_IterateForward", _wrap_EDA_ITEM_IterateForward, METH_VARARGS, (char *)"EDA_ITEM_IterateForward(EDA_ITEM listStart, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"EDA_ITEM_Visit", _wrap_EDA_ITEM_Visit, METH_VARARGS, (char *)"EDA_ITEM_Visit(EDA_ITEM self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"EDA_ITEM_GetClass", _wrap_EDA_ITEM_GetClass, METH_VARARGS, (char *)"EDA_ITEM_GetClass(EDA_ITEM self) -> wxString"},
	 { (char *)"EDA_ITEM_GetSelectMenuText", _wrap_EDA_ITEM_GetSelectMenuText, METH_VARARGS, (char *)"EDA_ITEM_GetSelectMenuText(EDA_ITEM self) -> wxString"},
	 { (char *)"EDA_ITEM_GetMenuImage", _wrap_EDA_ITEM_GetMenuImage, METH_VARARGS, (char *)"EDA_ITEM_GetMenuImage(EDA_ITEM self) -> BITMAP_DEF"},
	 { (char *)"EDA_ITEM_Matches", _wrap_EDA_ITEM_Matches, METH_VARARGS, (char *)"\n"
		"Matches(wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool\n"
		"EDA_ITEM_Matches(EDA_ITEM self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"EDA_ITEM_Replace", _wrap_EDA_ITEM_Replace, METH_VARARGS, (char *)"\n"
		"Replace(wxFindReplaceData & aSearchData, wxString & aText) -> bool\n"
		"Replace(wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool\n"
		"EDA_ITEM_Replace(EDA_ITEM self, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"EDA_ITEM_IsReplaceable", _wrap_EDA_ITEM_IsReplaceable, METH_VARARGS, (char *)"EDA_ITEM_IsReplaceable(EDA_ITEM self) -> bool"},
	 { (char *)"EDA_ITEM___lt__", _wrap_EDA_ITEM___lt__, METH_VARARGS, (char *)"EDA_ITEM___lt__(EDA_ITEM self, EDA_ITEM aItem) -> bool"},
	 { (char *)"EDA_ITEM_Sort", _wrap_EDA_ITEM_Sort, METH_VARARGS, (char *)"EDA_ITEM_Sort(EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"},
	 { (char *)"EDA_ITEM_swigregister", EDA_ITEM_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_clone", _wrap_new_clone, METH_VARARGS, (char *)"new_clone(EDA_ITEM aItem) -> EDA_ITEM"},
	 { (char *)"KiROUND", _wrap_KiROUND, METH_VARARGS, (char *)"KiROUND(double v) -> int"},
	 { (char *)"Mm2mils", _wrap_Mm2mils, METH_VARARGS, (char *)"Mm2mils(double x) -> int"},
	 { (char *)"Mils2mm", _wrap_Mils2mm, METH_VARARGS, (char *)"Mils2mm(double x) -> int"},
	 { (char *)"IsGOST", _wrap_IsGOST, METH_VARARGS, (char *)"IsGOST() -> bool"},
	 { (char *)"new_PAGE_INFO", _wrap_new_PAGE_INFO, METH_VARARGS, (char *)"\n"
		"PAGE_INFO(wxString const & aType=A3, bool IsPortrait=False)\n"
		"PAGE_INFO(wxString const & aType=A3)\n"
		"new_PAGE_INFO() -> PAGE_INFO\n"
		""},
	 { (char *)"PAGE_INFO_SetType", _wrap_PAGE_INFO_SetType, METH_VARARGS, (char *)"\n"
		"SetType(wxString const & aStandardPageDescriptionName, bool IsPortrait=False) -> bool\n"
		"PAGE_INFO_SetType(PAGE_INFO self, wxString const & aStandardPageDescriptionName) -> bool\n"
		""},
	 { (char *)"PAGE_INFO_GetType", _wrap_PAGE_INFO_GetType, METH_VARARGS, (char *)"PAGE_INFO_GetType(PAGE_INFO self) -> wxString const &"},
	 { (char *)"PAGE_INFO_IsDefault", _wrap_PAGE_INFO_IsDefault, METH_VARARGS, (char *)"PAGE_INFO_IsDefault(PAGE_INFO self) -> bool"},
	 { (char *)"PAGE_INFO_IsCustom", _wrap_PAGE_INFO_IsCustom, METH_VARARGS, (char *)"PAGE_INFO_IsCustom(PAGE_INFO self) -> bool"},
	 { (char *)"PAGE_INFO_SetPortrait", _wrap_PAGE_INFO_SetPortrait, METH_VARARGS, (char *)"PAGE_INFO_SetPortrait(PAGE_INFO self, bool isPortrait)"},
	 { (char *)"PAGE_INFO_IsPortrait", _wrap_PAGE_INFO_IsPortrait, METH_VARARGS, (char *)"PAGE_INFO_IsPortrait(PAGE_INFO self) -> bool"},
	 { (char *)"PAGE_INFO_GetWxOrientation", _wrap_PAGE_INFO_GetWxOrientation, METH_VARARGS, (char *)"PAGE_INFO_GetWxOrientation(PAGE_INFO self) -> int"},
	 { (char *)"PAGE_INFO_GetPaperId", _wrap_PAGE_INFO_GetPaperId, METH_VARARGS, (char *)"PAGE_INFO_GetPaperId(PAGE_INFO self) -> wxPaperSize"},
	 { (char *)"PAGE_INFO_SetWidthMils", _wrap_PAGE_INFO_SetWidthMils, METH_VARARGS, (char *)"PAGE_INFO_SetWidthMils(PAGE_INFO self, int aWidthInMils)"},
	 { (char *)"PAGE_INFO_GetWidthMils", _wrap_PAGE_INFO_GetWidthMils, METH_VARARGS, (char *)"PAGE_INFO_GetWidthMils(PAGE_INFO self) -> int"},
	 { (char *)"PAGE_INFO_SetHeightMils", _wrap_PAGE_INFO_SetHeightMils, METH_VARARGS, (char *)"PAGE_INFO_SetHeightMils(PAGE_INFO self, int aHeightInMils)"},
	 { (char *)"PAGE_INFO_GetHeightMils", _wrap_PAGE_INFO_GetHeightMils, METH_VARARGS, (char *)"PAGE_INFO_GetHeightMils(PAGE_INFO self) -> int"},
	 { (char *)"PAGE_INFO_GetSizeMils", _wrap_PAGE_INFO_GetSizeMils, METH_VARARGS, (char *)"PAGE_INFO_GetSizeMils(PAGE_INFO self) -> wxSize"},
	 { (char *)"PAGE_INFO_GetWidthIU", _wrap_PAGE_INFO_GetWidthIU, METH_VARARGS, (char *)"PAGE_INFO_GetWidthIU(PAGE_INFO self) -> int"},
	 { (char *)"PAGE_INFO_GetHeightIU", _wrap_PAGE_INFO_GetHeightIU, METH_VARARGS, (char *)"PAGE_INFO_GetHeightIU(PAGE_INFO self) -> int"},
	 { (char *)"PAGE_INFO_GetSizeIU", _wrap_PAGE_INFO_GetSizeIU, METH_VARARGS, (char *)"PAGE_INFO_GetSizeIU(PAGE_INFO self) -> wxSize"},
	 { (char *)"PAGE_INFO_GetLeftMarginMils", _wrap_PAGE_INFO_GetLeftMarginMils, METH_VARARGS, (char *)"PAGE_INFO_GetLeftMarginMils(PAGE_INFO self) -> int"},
	 { (char *)"PAGE_INFO_GetRightMarginMils", _wrap_PAGE_INFO_GetRightMarginMils, METH_VARARGS, (char *)"PAGE_INFO_GetRightMarginMils(PAGE_INFO self) -> int"},
	 { (char *)"PAGE_INFO_GetTopMarginMils", _wrap_PAGE_INFO_GetTopMarginMils, METH_VARARGS, (char *)"PAGE_INFO_GetTopMarginMils(PAGE_INFO self) -> int"},
	 { (char *)"PAGE_INFO_GetBottomMarginMils", _wrap_PAGE_INFO_GetBottomMarginMils, METH_VARARGS, (char *)"PAGE_INFO_GetBottomMarginMils(PAGE_INFO self) -> int"},
	 { (char *)"PAGE_INFO_SetLeftMarginMils", _wrap_PAGE_INFO_SetLeftMarginMils, METH_VARARGS, (char *)"PAGE_INFO_SetLeftMarginMils(PAGE_INFO self, int aMargin)"},
	 { (char *)"PAGE_INFO_SetRightMarginMils", _wrap_PAGE_INFO_SetRightMarginMils, METH_VARARGS, (char *)"PAGE_INFO_SetRightMarginMils(PAGE_INFO self, int aMargin)"},
	 { (char *)"PAGE_INFO_SetTopMarginMils", _wrap_PAGE_INFO_SetTopMarginMils, METH_VARARGS, (char *)"PAGE_INFO_SetTopMarginMils(PAGE_INFO self, int aMargin)"},
	 { (char *)"PAGE_INFO_SetBottomMarginMils", _wrap_PAGE_INFO_SetBottomMarginMils, METH_VARARGS, (char *)"PAGE_INFO_SetBottomMarginMils(PAGE_INFO self, int aMargin)"},
	 { (char *)"PAGE_INFO_SetCustomWidthMils", _wrap_PAGE_INFO_SetCustomWidthMils, METH_VARARGS, (char *)"PAGE_INFO_SetCustomWidthMils(int aWidthInMils)"},
	 { (char *)"PAGE_INFO_SetCustomHeightMils", _wrap_PAGE_INFO_SetCustomHeightMils, METH_VARARGS, (char *)"PAGE_INFO_SetCustomHeightMils(int aHeightInMils)"},
	 { (char *)"PAGE_INFO_GetCustomWidthMils", _wrap_PAGE_INFO_GetCustomWidthMils, METH_VARARGS, (char *)"PAGE_INFO_GetCustomWidthMils() -> int"},
	 { (char *)"PAGE_INFO_GetCustomHeightMils", _wrap_PAGE_INFO_GetCustomHeightMils, METH_VARARGS, (char *)"PAGE_INFO_GetCustomHeightMils() -> int"},
	 { (char *)"PAGE_INFO_Format", _wrap_PAGE_INFO_Format, METH_VARARGS, (char *)"PAGE_INFO_Format(PAGE_INFO self, OUTPUTFORMATTER * aFormatter, int aNestLevel, int aControlBits)"},
	 { (char *)"delete_PAGE_INFO", _wrap_delete_PAGE_INFO, METH_VARARGS, (char *)"delete_PAGE_INFO(PAGE_INFO self)"},
	 { (char *)"PAGE_INFO_swigregister", PAGE_INFO_swigregister, METH_VARARGS, NULL},
	 { (char *)"SetLocaleTo_C_standard", _wrap_SetLocaleTo_C_standard, METH_VARARGS, (char *)"SetLocaleTo_C_standard()"},
	 { (char *)"SetLocaleTo_Default", _wrap_SetLocaleTo_Default, METH_VARARGS, (char *)"SetLocaleTo_Default()"},
	 { (char *)"new_LOCALE_IO", _wrap_new_LOCALE_IO, METH_VARARGS, (char *)"new_LOCALE_IO() -> LOCALE_IO"},
	 { (char *)"delete_LOCALE_IO", _wrap_delete_LOCALE_IO, METH_VARARGS, (char *)"delete_LOCALE_IO(LOCALE_IO self)"},
	 { (char *)"LOCALE_IO_swigregister", LOCALE_IO_swigregister, METH_VARARGS, NULL},
	 { (char *)"GetTextSize", _wrap_GetTextSize, METH_VARARGS, (char *)"GetTextSize(wxString const & aSingleLine, wxWindow * aWindow) -> wxSize"},
	 { (char *)"EnsureTextCtrlWidth", _wrap_EnsureTextCtrlWidth, METH_VARARGS, (char *)"\n"
		"EnsureTextCtrlWidth(wxTextCtrl * aCtrl, wxString const * aString=None) -> bool\n"
		"EnsureTextCtrlWidth(wxTextCtrl * aCtrl) -> bool\n"
		""},
	 { (char *)"ProcessExecute", _wrap_ProcessExecute, METH_VARARGS, (char *)"\n"
		"ProcessExecute(wxString const & aCommandLine, int aFlags=wxEXEC_ASYNC) -> bool\n"
		"ProcessExecute(wxString const & aCommandLine) -> bool\n"
		""},
	 { (char *)"GetNewTimeStamp", _wrap_GetNewTimeStamp, METH_VARARGS, (char *)"GetNewTimeStamp() -> time_t"},
	 { (char *)"DisplayColorFrame", _wrap_DisplayColorFrame, METH_VARARGS, (char *)"DisplayColorFrame(wxWindow * parent, int OldColor) -> int"},
	 { (char *)"ReturnUnitSymbol", _wrap_ReturnUnitSymbol, METH_VARARGS, (char *)"\n"
		"ReturnUnitSymbol(EDA_UNITS_T aUnits=g_UserUnit, wxString const & aFormatString=_( \" (%s):\" )) -> wxString\n"
		"ReturnUnitSymbol(EDA_UNITS_T aUnits=g_UserUnit) -> wxString\n"
		"ReturnUnitSymbol() -> wxString\n"
		""},
	 { (char *)"GetUnitsLabel", _wrap_GetUnitsLabel, METH_VARARGS, (char *)"GetUnitsLabel(EDA_UNITS_T aUnits) -> wxString"},
	 { (char *)"GetAbbreviatedUnitsLabel", _wrap_GetAbbreviatedUnitsLabel, METH_VARARGS, (char *)"\n"
		"GetAbbreviatedUnitsLabel(EDA_UNITS_T aUnit=g_UserUnit) -> wxString\n"
		"GetAbbreviatedUnitsLabel() -> wxString\n"
		""},
	 { (char *)"AddUnitSymbol", _wrap_AddUnitSymbol, METH_VARARGS, (char *)"\n"
		"AddUnitSymbol(wxStaticText & Stext, EDA_UNITS_T aUnit=g_UserUnit)\n"
		"AddUnitSymbol(wxStaticText & Stext)\n"
		""},
	 { (char *)"RoundTo0", _wrap_RoundTo0, METH_VARARGS, (char *)"RoundTo0(double x, double precision) -> double"},
	 { (char *)"wxStringSplit", _wrap_wxStringSplit, METH_VARARGS, (char *)"wxStringSplit(wxString aString, wxChar aSplitter) -> wxArrayString *"},
	 { (char *)"GenDate", _wrap_GenDate, METH_VARARGS, (char *)"GenDate() -> wxString"},
	 { (char *)"GetRunningMicroSecs", _wrap_GetRunningMicroSecs, METH_VARARGS, (char *)"GetRunningMicroSecs() -> unsigned int"},
	 { (char *)"TITLE_BLOCK_SetTitle", _wrap_TITLE_BLOCK_SetTitle, METH_VARARGS, (char *)"TITLE_BLOCK_SetTitle(TITLE_BLOCK self, wxString const & aTitle)"},
	 { (char *)"TITLE_BLOCK_GetTitle", _wrap_TITLE_BLOCK_GetTitle, METH_VARARGS, (char *)"TITLE_BLOCK_GetTitle(TITLE_BLOCK self) -> wxString const &"},
	 { (char *)"TITLE_BLOCK_SetDate", _wrap_TITLE_BLOCK_SetDate, METH_VARARGS, (char *)"\n"
		"SetDate(wxString const & aDate=GenDate())\n"
		"TITLE_BLOCK_SetDate(TITLE_BLOCK self)\n"
		""},
	 { (char *)"TITLE_BLOCK_GetDate", _wrap_TITLE_BLOCK_GetDate, METH_VARARGS, (char *)"TITLE_BLOCK_GetDate(TITLE_BLOCK self) -> wxString const &"},
	 { (char *)"TITLE_BLOCK_SetRevision", _wrap_TITLE_BLOCK_SetRevision, METH_VARARGS, (char *)"TITLE_BLOCK_SetRevision(TITLE_BLOCK self, wxString const & aRevision)"},
	 { (char *)"TITLE_BLOCK_GetRevision", _wrap_TITLE_BLOCK_GetRevision, METH_VARARGS, (char *)"TITLE_BLOCK_GetRevision(TITLE_BLOCK self) -> wxString const &"},
	 { (char *)"TITLE_BLOCK_SetCompany", _wrap_TITLE_BLOCK_SetCompany, METH_VARARGS, (char *)"TITLE_BLOCK_SetCompany(TITLE_BLOCK self, wxString const & aCompany)"},
	 { (char *)"TITLE_BLOCK_GetCompany", _wrap_TITLE_BLOCK_GetCompany, METH_VARARGS, (char *)"TITLE_BLOCK_GetCompany(TITLE_BLOCK self) -> wxString const &"},
	 { (char *)"TITLE_BLOCK_SetComment1", _wrap_TITLE_BLOCK_SetComment1, METH_VARARGS, (char *)"TITLE_BLOCK_SetComment1(TITLE_BLOCK self, wxString const & aComment)"},
	 { (char *)"TITLE_BLOCK_GetComment1", _wrap_TITLE_BLOCK_GetComment1, METH_VARARGS, (char *)"TITLE_BLOCK_GetComment1(TITLE_BLOCK self) -> wxString const &"},
	 { (char *)"TITLE_BLOCK_SetComment2", _wrap_TITLE_BLOCK_SetComment2, METH_VARARGS, (char *)"TITLE_BLOCK_SetComment2(TITLE_BLOCK self, wxString const & aComment)"},
	 { (char *)"TITLE_BLOCK_GetComment2", _wrap_TITLE_BLOCK_GetComment2, METH_VARARGS, (char *)"TITLE_BLOCK_GetComment2(TITLE_BLOCK self) -> wxString const &"},
	 { (char *)"TITLE_BLOCK_SetComment3", _wrap_TITLE_BLOCK_SetComment3, METH_VARARGS, (char *)"TITLE_BLOCK_SetComment3(TITLE_BLOCK self, wxString const & aComment)"},
	 { (char *)"TITLE_BLOCK_GetComment3", _wrap_TITLE_BLOCK_GetComment3, METH_VARARGS, (char *)"TITLE_BLOCK_GetComment3(TITLE_BLOCK self) -> wxString const &"},
	 { (char *)"TITLE_BLOCK_SetComment4", _wrap_TITLE_BLOCK_SetComment4, METH_VARARGS, (char *)"TITLE_BLOCK_SetComment4(TITLE_BLOCK self, wxString const & aComment)"},
	 { (char *)"TITLE_BLOCK_GetComment4", _wrap_TITLE_BLOCK_GetComment4, METH_VARARGS, (char *)"TITLE_BLOCK_GetComment4(TITLE_BLOCK self) -> wxString const &"},
	 { (char *)"TITLE_BLOCK_Clear", _wrap_TITLE_BLOCK_Clear, METH_VARARGS, (char *)"TITLE_BLOCK_Clear(TITLE_BLOCK self)"},
	 { (char *)"TITLE_BLOCK_Format", _wrap_TITLE_BLOCK_Format, METH_VARARGS, (char *)"TITLE_BLOCK_Format(TITLE_BLOCK self, OUTPUTFORMATTER * aFormatter, int aNestLevel, int aControlBits)"},
	 { (char *)"new_TITLE_BLOCK", _wrap_new_TITLE_BLOCK, METH_VARARGS, (char *)"new_TITLE_BLOCK() -> TITLE_BLOCK"},
	 { (char *)"delete_TITLE_BLOCK", _wrap_delete_TITLE_BLOCK, METH_VARARGS, (char *)"delete_TITLE_BLOCK(TITLE_BLOCK self)"},
	 { (char *)"TITLE_BLOCK_swigregister", TITLE_BLOCK_swigregister, METH_VARARGS, NULL},
	 { (char *)"COLORS_DESIGN_SETTINGS_m_LayersColors_set", _wrap_COLORS_DESIGN_SETTINGS_m_LayersColors_set, METH_VARARGS, (char *)"COLORS_DESIGN_SETTINGS_m_LayersColors_set(COLORS_DESIGN_SETTINGS self, int [32] m_LayersColors)"},
	 { (char *)"COLORS_DESIGN_SETTINGS_m_LayersColors_get", _wrap_COLORS_DESIGN_SETTINGS_m_LayersColors_get, METH_VARARGS, (char *)"COLORS_DESIGN_SETTINGS_m_LayersColors_get(COLORS_DESIGN_SETTINGS self) -> int [32]"},
	 { (char *)"COLORS_DESIGN_SETTINGS_m_ItemsColors_set", _wrap_COLORS_DESIGN_SETTINGS_m_ItemsColors_set, METH_VARARGS, (char *)"COLORS_DESIGN_SETTINGS_m_ItemsColors_set(COLORS_DESIGN_SETTINGS self, int [32] m_ItemsColors)"},
	 { (char *)"COLORS_DESIGN_SETTINGS_m_ItemsColors_get", _wrap_COLORS_DESIGN_SETTINGS_m_ItemsColors_get, METH_VARARGS, (char *)"COLORS_DESIGN_SETTINGS_m_ItemsColors_get(COLORS_DESIGN_SETTINGS self) -> int [32]"},
	 { (char *)"new_COLORS_DESIGN_SETTINGS", _wrap_new_COLORS_DESIGN_SETTINGS, METH_VARARGS, (char *)"new_COLORS_DESIGN_SETTINGS() -> COLORS_DESIGN_SETTINGS"},
	 { (char *)"COLORS_DESIGN_SETTINGS_GetLayerColor", _wrap_COLORS_DESIGN_SETTINGS_GetLayerColor, METH_VARARGS, (char *)"COLORS_DESIGN_SETTINGS_GetLayerColor(COLORS_DESIGN_SETTINGS self, int aLayer) -> int"},
	 { (char *)"COLORS_DESIGN_SETTINGS_SetLayerColor", _wrap_COLORS_DESIGN_SETTINGS_SetLayerColor, METH_VARARGS, (char *)"COLORS_DESIGN_SETTINGS_SetLayerColor(COLORS_DESIGN_SETTINGS self, int aLayer, int aColor)"},
	 { (char *)"COLORS_DESIGN_SETTINGS_GetItemColor", _wrap_COLORS_DESIGN_SETTINGS_GetItemColor, METH_VARARGS, (char *)"COLORS_DESIGN_SETTINGS_GetItemColor(COLORS_DESIGN_SETTINGS self, int aItemIdx) -> int"},
	 { (char *)"COLORS_DESIGN_SETTINGS_SetItemColor", _wrap_COLORS_DESIGN_SETTINGS_SetItemColor, METH_VARARGS, (char *)"COLORS_DESIGN_SETTINGS_SetItemColor(COLORS_DESIGN_SETTINGS self, int aItemIdx, int aColor)"},
	 { (char *)"COLORS_DESIGN_SETTINGS_SetAllColorsAs", _wrap_COLORS_DESIGN_SETTINGS_SetAllColorsAs, METH_VARARGS, (char *)"COLORS_DESIGN_SETTINGS_SetAllColorsAs(COLORS_DESIGN_SETTINGS self, int aColor)"},
	 { (char *)"delete_COLORS_DESIGN_SETTINGS", _wrap_delete_COLORS_DESIGN_SETTINGS, METH_VARARGS, (char *)"delete_COLORS_DESIGN_SETTINGS(COLORS_DESIGN_SETTINGS self)"},
	 { (char *)"COLORS_DESIGN_SETTINGS_swigregister", COLORS_DESIGN_SETTINGS_swigregister, METH_VARARGS, NULL},
	 { (char *)"MARKER_BASE_m_Pos_set", _wrap_MARKER_BASE_m_Pos_set, METH_VARARGS, (char *)"MARKER_BASE_m_Pos_set(MARKER_BASE self, wxPoint m_Pos)"},
	 { (char *)"MARKER_BASE_m_Pos_get", _wrap_MARKER_BASE_m_Pos_get, METH_VARARGS, (char *)"MARKER_BASE_m_Pos_get(MARKER_BASE self) -> wxPoint"},
	 { (char *)"new_MARKER_BASE", _wrap_new_MARKER_BASE, METH_VARARGS, (char *)"\n"
		"MARKER_BASE()\n"
		"MARKER_BASE(int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos, wxString const & bText, \n"
		"    wxPoint bPos)\n"
		"MARKER_BASE(int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos)\n"
		"new_MARKER_BASE(MARKER_BASE aMarker) -> MARKER_BASE\n"
		""},
	 { (char *)"delete_MARKER_BASE", _wrap_delete_MARKER_BASE, METH_VARARGS, (char *)"delete_MARKER_BASE(MARKER_BASE self)"},
	 { (char *)"MARKER_BASE_DrawMarker", _wrap_MARKER_BASE_DrawMarker, METH_VARARGS, (char *)"MARKER_BASE_DrawMarker(MARKER_BASE self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset)"},
	 { (char *)"MARKER_BASE_GetPos", _wrap_MARKER_BASE_GetPos, METH_VARARGS, (char *)"MARKER_BASE_GetPos(MARKER_BASE self) -> wxPoint"},
	 { (char *)"MARKER_BASE_SetColor", _wrap_MARKER_BASE_SetColor, METH_VARARGS, (char *)"MARKER_BASE_SetColor(MARKER_BASE self, EDA_COLOR_T aColor)"},
	 { (char *)"MARKER_BASE_SetErrorLevel", _wrap_MARKER_BASE_SetErrorLevel, METH_VARARGS, (char *)"MARKER_BASE_SetErrorLevel(MARKER_BASE self, int aErrorLevel)"},
	 { (char *)"MARKER_BASE_GetErrorLevel", _wrap_MARKER_BASE_GetErrorLevel, METH_VARARGS, (char *)"MARKER_BASE_GetErrorLevel(MARKER_BASE self) -> int"},
	 { (char *)"MARKER_BASE_SetMarkerType", _wrap_MARKER_BASE_SetMarkerType, METH_VARARGS, (char *)"MARKER_BASE_SetMarkerType(MARKER_BASE self, int aMarkerType)"},
	 { (char *)"MARKER_BASE_GetMarkerType", _wrap_MARKER_BASE_GetMarkerType, METH_VARARGS, (char *)"MARKER_BASE_GetMarkerType(MARKER_BASE self) -> int"},
	 { (char *)"MARKER_BASE_SetData", _wrap_MARKER_BASE_SetData, METH_VARARGS, (char *)"\n"
		"SetData(int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos, wxString const & bText, \n"
		"    wxPoint bPos)\n"
		"MARKER_BASE_SetData(MARKER_BASE self, int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos)\n"
		""},
	 { (char *)"MARKER_BASE_SetAuxiliaryData", _wrap_MARKER_BASE_SetAuxiliaryData, METH_VARARGS, (char *)"MARKER_BASE_SetAuxiliaryData(MARKER_BASE self, wxString const & aAuxiliaryText, wxPoint aAuxiliaryPos)"},
	 { (char *)"MARKER_BASE_SetShowNoCoordinate", _wrap_MARKER_BASE_SetShowNoCoordinate, METH_VARARGS, (char *)"MARKER_BASE_SetShowNoCoordinate(MARKER_BASE self)"},
	 { (char *)"MARKER_BASE_GetReporter", _wrap_MARKER_BASE_GetReporter, METH_VARARGS, (char *)"MARKER_BASE_GetReporter(MARKER_BASE self) -> DRC_ITEM const &"},
	 { (char *)"MARKER_BASE_DisplayMarkerInfo", _wrap_MARKER_BASE_DisplayMarkerInfo, METH_VARARGS, (char *)"MARKER_BASE_DisplayMarkerInfo(MARKER_BASE self, EDA_DRAW_FRAME * aFrame)"},
	 { (char *)"MARKER_BASE_HitTestMarker", _wrap_MARKER_BASE_HitTestMarker, METH_VARARGS, (char *)"MARKER_BASE_HitTestMarker(MARKER_BASE self, wxPoint ref_pos) -> bool"},
	 { (char *)"MARKER_BASE_GetBoundingBoxMarker", _wrap_MARKER_BASE_GetBoundingBoxMarker, METH_VARARGS, (char *)"MARKER_BASE_GetBoundingBoxMarker(MARKER_BASE self) -> EDA_RECT"},
	 { (char *)"MARKER_BASE_swigregister", MARKER_BASE_swigregister, METH_VARARGS, NULL},
	 { (char *)"EDA_TEXT_m_Text_set", _wrap_EDA_TEXT_m_Text_set, METH_VARARGS, (char *)"EDA_TEXT_m_Text_set(EDA_TEXT self, wxString m_Text)"},
	 { (char *)"EDA_TEXT_m_Text_get", _wrap_EDA_TEXT_m_Text_get, METH_VARARGS, (char *)"EDA_TEXT_m_Text_get(EDA_TEXT self) -> wxString"},
	 { (char *)"EDA_TEXT_m_Thickness_set", _wrap_EDA_TEXT_m_Thickness_set, METH_VARARGS, (char *)"EDA_TEXT_m_Thickness_set(EDA_TEXT self, int m_Thickness)"},
	 { (char *)"EDA_TEXT_m_Thickness_get", _wrap_EDA_TEXT_m_Thickness_get, METH_VARARGS, (char *)"EDA_TEXT_m_Thickness_get(EDA_TEXT self) -> int"},
	 { (char *)"EDA_TEXT_m_Orient_set", _wrap_EDA_TEXT_m_Orient_set, METH_VARARGS, (char *)"EDA_TEXT_m_Orient_set(EDA_TEXT self, double m_Orient)"},
	 { (char *)"EDA_TEXT_m_Orient_get", _wrap_EDA_TEXT_m_Orient_get, METH_VARARGS, (char *)"EDA_TEXT_m_Orient_get(EDA_TEXT self) -> double"},
	 { (char *)"EDA_TEXT_m_Pos_set", _wrap_EDA_TEXT_m_Pos_set, METH_VARARGS, (char *)"EDA_TEXT_m_Pos_set(EDA_TEXT self, wxPoint m_Pos)"},
	 { (char *)"EDA_TEXT_m_Pos_get", _wrap_EDA_TEXT_m_Pos_get, METH_VARARGS, (char *)"EDA_TEXT_m_Pos_get(EDA_TEXT self) -> wxPoint"},
	 { (char *)"EDA_TEXT_m_Size_set", _wrap_EDA_TEXT_m_Size_set, METH_VARARGS, (char *)"EDA_TEXT_m_Size_set(EDA_TEXT self, wxSize m_Size)"},
	 { (char *)"EDA_TEXT_m_Size_get", _wrap_EDA_TEXT_m_Size_get, METH_VARARGS, (char *)"EDA_TEXT_m_Size_get(EDA_TEXT self) -> wxSize"},
	 { (char *)"EDA_TEXT_m_Mirror_set", _wrap_EDA_TEXT_m_Mirror_set, METH_VARARGS, (char *)"EDA_TEXT_m_Mirror_set(EDA_TEXT self, bool m_Mirror)"},
	 { (char *)"EDA_TEXT_m_Mirror_get", _wrap_EDA_TEXT_m_Mirror_get, METH_VARARGS, (char *)"EDA_TEXT_m_Mirror_get(EDA_TEXT self) -> bool"},
	 { (char *)"EDA_TEXT_m_Attributs_set", _wrap_EDA_TEXT_m_Attributs_set, METH_VARARGS, (char *)"EDA_TEXT_m_Attributs_set(EDA_TEXT self, int m_Attributs)"},
	 { (char *)"EDA_TEXT_m_Attributs_get", _wrap_EDA_TEXT_m_Attributs_get, METH_VARARGS, (char *)"EDA_TEXT_m_Attributs_get(EDA_TEXT self) -> int"},
	 { (char *)"EDA_TEXT_m_Italic_set", _wrap_EDA_TEXT_m_Italic_set, METH_VARARGS, (char *)"EDA_TEXT_m_Italic_set(EDA_TEXT self, bool m_Italic)"},
	 { (char *)"EDA_TEXT_m_Italic_get", _wrap_EDA_TEXT_m_Italic_get, METH_VARARGS, (char *)"EDA_TEXT_m_Italic_get(EDA_TEXT self) -> bool"},
	 { (char *)"EDA_TEXT_m_Bold_set", _wrap_EDA_TEXT_m_Bold_set, METH_VARARGS, (char *)"EDA_TEXT_m_Bold_set(EDA_TEXT self, bool m_Bold)"},
	 { (char *)"EDA_TEXT_m_Bold_get", _wrap_EDA_TEXT_m_Bold_get, METH_VARARGS, (char *)"EDA_TEXT_m_Bold_get(EDA_TEXT self) -> bool"},
	 { (char *)"EDA_TEXT_m_HJustify_set", _wrap_EDA_TEXT_m_HJustify_set, METH_VARARGS, (char *)"EDA_TEXT_m_HJustify_set(EDA_TEXT self, EDA_TEXT_HJUSTIFY_T m_HJustify)"},
	 { (char *)"EDA_TEXT_m_HJustify_get", _wrap_EDA_TEXT_m_HJustify_get, METH_VARARGS, (char *)"EDA_TEXT_m_HJustify_get(EDA_TEXT self) -> EDA_TEXT_HJUSTIFY_T"},
	 { (char *)"EDA_TEXT_m_VJustify_set", _wrap_EDA_TEXT_m_VJustify_set, METH_VARARGS, (char *)"EDA_TEXT_m_VJustify_set(EDA_TEXT self, EDA_TEXT_VJUSTIFY_T m_VJustify)"},
	 { (char *)"EDA_TEXT_m_VJustify_get", _wrap_EDA_TEXT_m_VJustify_get, METH_VARARGS, (char *)"EDA_TEXT_m_VJustify_get(EDA_TEXT self) -> EDA_TEXT_VJUSTIFY_T"},
	 { (char *)"EDA_TEXT_m_MultilineAllowed_set", _wrap_EDA_TEXT_m_MultilineAllowed_set, METH_VARARGS, (char *)"EDA_TEXT_m_MultilineAllowed_set(EDA_TEXT self, bool m_MultilineAllowed)"},
	 { (char *)"EDA_TEXT_m_MultilineAllowed_get", _wrap_EDA_TEXT_m_MultilineAllowed_get, METH_VARARGS, (char *)"EDA_TEXT_m_MultilineAllowed_get(EDA_TEXT self) -> bool"},
	 { (char *)"new_EDA_TEXT", _wrap_new_EDA_TEXT, METH_VARARGS, (char *)"\n"
		"EDA_TEXT(wxString const & text=wxEmptyString)\n"
		"EDA_TEXT()\n"
		"new_EDA_TEXT(EDA_TEXT aText) -> EDA_TEXT\n"
		""},
	 { (char *)"delete_EDA_TEXT", _wrap_delete_EDA_TEXT, METH_VARARGS, (char *)"delete_EDA_TEXT(EDA_TEXT self)"},
	 { (char *)"EDA_TEXT_SetThickness", _wrap_EDA_TEXT_SetThickness, METH_VARARGS, (char *)"EDA_TEXT_SetThickness(EDA_TEXT self, int aNewThickness)"},
	 { (char *)"EDA_TEXT_GetThickness", _wrap_EDA_TEXT_GetThickness, METH_VARARGS, (char *)"EDA_TEXT_GetThickness(EDA_TEXT self) -> int"},
	 { (char *)"EDA_TEXT_SetOrientation", _wrap_EDA_TEXT_SetOrientation, METH_VARARGS, (char *)"EDA_TEXT_SetOrientation(EDA_TEXT self, double aOrientation)"},
	 { (char *)"EDA_TEXT_GetOrientation", _wrap_EDA_TEXT_GetOrientation, METH_VARARGS, (char *)"EDA_TEXT_GetOrientation(EDA_TEXT self) -> double"},
	 { (char *)"EDA_TEXT_SetItalic", _wrap_EDA_TEXT_SetItalic, METH_VARARGS, (char *)"EDA_TEXT_SetItalic(EDA_TEXT self, bool isItalic)"},
	 { (char *)"EDA_TEXT_IsItalic", _wrap_EDA_TEXT_IsItalic, METH_VARARGS, (char *)"EDA_TEXT_IsItalic(EDA_TEXT self) -> bool"},
	 { (char *)"EDA_TEXT_SetBold", _wrap_EDA_TEXT_SetBold, METH_VARARGS, (char *)"EDA_TEXT_SetBold(EDA_TEXT self, bool aBold)"},
	 { (char *)"EDA_TEXT_IsBold", _wrap_EDA_TEXT_IsBold, METH_VARARGS, (char *)"EDA_TEXT_IsBold(EDA_TEXT self) -> bool"},
	 { (char *)"EDA_TEXT_SetVisible", _wrap_EDA_TEXT_SetVisible, METH_VARARGS, (char *)"EDA_TEXT_SetVisible(EDA_TEXT self, bool aVisible)"},
	 { (char *)"EDA_TEXT_IsVisible", _wrap_EDA_TEXT_IsVisible, METH_VARARGS, (char *)"EDA_TEXT_IsVisible(EDA_TEXT self) -> bool"},
	 { (char *)"EDA_TEXT_SetMirrored", _wrap_EDA_TEXT_SetMirrored, METH_VARARGS, (char *)"EDA_TEXT_SetMirrored(EDA_TEXT self, bool isMirrored)"},
	 { (char *)"EDA_TEXT_IsMirrored", _wrap_EDA_TEXT_IsMirrored, METH_VARARGS, (char *)"EDA_TEXT_IsMirrored(EDA_TEXT self) -> bool"},
	 { (char *)"EDA_TEXT_IsDefaultFormatting", _wrap_EDA_TEXT_IsDefaultFormatting, METH_VARARGS, (char *)"EDA_TEXT_IsDefaultFormatting(EDA_TEXT self) -> bool"},
	 { (char *)"EDA_TEXT_SetSize", _wrap_EDA_TEXT_SetSize, METH_VARARGS, (char *)"EDA_TEXT_SetSize(EDA_TEXT self, wxSize aNewSize)"},
	 { (char *)"EDA_TEXT_GetSize", _wrap_EDA_TEXT_GetSize, METH_VARARGS, (char *)"EDA_TEXT_GetSize(EDA_TEXT self) -> wxSize"},
	 { (char *)"EDA_TEXT_SetPos", _wrap_EDA_TEXT_SetPos, METH_VARARGS, (char *)"EDA_TEXT_SetPos(EDA_TEXT self, wxPoint aPoint)"},
	 { (char *)"EDA_TEXT_GetPos", _wrap_EDA_TEXT_GetPos, METH_VARARGS, (char *)"EDA_TEXT_GetPos(EDA_TEXT self) -> wxPoint"},
	 { (char *)"EDA_TEXT_GetLength", _wrap_EDA_TEXT_GetLength, METH_VARARGS, (char *)"EDA_TEXT_GetLength(EDA_TEXT self) -> int"},
	 { (char *)"EDA_TEXT_Draw", _wrap_EDA_TEXT_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * aPanel, wxDC * aDC, wxPoint aOffset, EDA_COLOR_T aColor, int aDrawMode, \n"
		"    EDA_DRAW_MODE_T aDisplay_mode=LINE, EDA_COLOR_T aAnchor_color=UNSPECIFIED)\n"
		"Draw(EDA_DRAW_PANEL * aPanel, wxDC * aDC, wxPoint aOffset, EDA_COLOR_T aColor, int aDrawMode, \n"
		"    EDA_DRAW_MODE_T aDisplay_mode=LINE)\n"
		"EDA_TEXT_Draw(EDA_TEXT self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, wxPoint aOffset, EDA_COLOR_T aColor, \n"
		"    int aDrawMode)\n"
		""},
	 { (char *)"EDA_TEXT_TextHitTest", _wrap_EDA_TEXT_TextHitTest, METH_VARARGS, (char *)"\n"
		"TextHitTest(wxPoint aPoint, int aAccuracy=0) -> bool\n"
		"TextHitTest(wxPoint aPoint) -> bool\n"
		"TextHitTest(EDA_RECT aRect, bool aContains=False, int aAccuracy=0) -> bool\n"
		"TextHitTest(EDA_RECT aRect, bool aContains=False) -> bool\n"
		"EDA_TEXT_TextHitTest(EDA_TEXT self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"EDA_TEXT_LenSize", _wrap_EDA_TEXT_LenSize, METH_VARARGS, (char *)"EDA_TEXT_LenSize(EDA_TEXT self, wxString const & aLine) -> int"},
	 { (char *)"EDA_TEXT_GetTextBox", _wrap_EDA_TEXT_GetTextBox, METH_VARARGS, (char *)"\n"
		"GetTextBox(int aLine=-1, int aThickness=-1, bool aInvertY=False) -> EDA_RECT\n"
		"GetTextBox(int aLine=-1, int aThickness=-1) -> EDA_RECT\n"
		"GetTextBox(int aLine=-1) -> EDA_RECT\n"
		"EDA_TEXT_GetTextBox(EDA_TEXT self) -> EDA_RECT\n"
		""},
	 { (char *)"EDA_TEXT_GetInterline", _wrap_EDA_TEXT_GetInterline, METH_VARARGS, (char *)"EDA_TEXT_GetInterline(EDA_TEXT self) -> int"},
	 { (char *)"EDA_TEXT_GetTextStyleName", _wrap_EDA_TEXT_GetTextStyleName, METH_VARARGS, (char *)"EDA_TEXT_GetTextStyleName(EDA_TEXT self) -> wxString"},
	 { (char *)"EDA_TEXT_SetText", _wrap_EDA_TEXT_SetText, METH_VARARGS, (char *)"EDA_TEXT_SetText(EDA_TEXT self, wxString const & aText)"},
	 { (char *)"EDA_TEXT_GetText", _wrap_EDA_TEXT_GetText, METH_VARARGS, (char *)"EDA_TEXT_GetText(EDA_TEXT self) -> wxString const"},
	 { (char *)"EDA_TEXT_GetHorizJustify", _wrap_EDA_TEXT_GetHorizJustify, METH_VARARGS, (char *)"EDA_TEXT_GetHorizJustify(EDA_TEXT self) -> EDA_TEXT_HJUSTIFY_T"},
	 { (char *)"EDA_TEXT_GetVertJustify", _wrap_EDA_TEXT_GetVertJustify, METH_VARARGS, (char *)"EDA_TEXT_GetVertJustify(EDA_TEXT self) -> EDA_TEXT_VJUSTIFY_T"},
	 { (char *)"EDA_TEXT_SetHorizJustify", _wrap_EDA_TEXT_SetHorizJustify, METH_VARARGS, (char *)"EDA_TEXT_SetHorizJustify(EDA_TEXT self, EDA_TEXT_HJUSTIFY_T aType)"},
	 { (char *)"EDA_TEXT_SetVertJustify", _wrap_EDA_TEXT_SetVertJustify, METH_VARARGS, (char *)"EDA_TEXT_SetVertJustify(EDA_TEXT self, EDA_TEXT_VJUSTIFY_T aType)"},
	 { (char *)"EDA_TEXT_Format", _wrap_EDA_TEXT_Format, METH_VARARGS, (char *)"EDA_TEXT_Format(EDA_TEXT self, OUTPUTFORMATTER * aFormatter, int aNestLevel, int aControlBits)"},
	 { (char *)"EDA_TEXT_swigregister", EDA_TEXT_swigregister, METH_VARARGS, NULL},
	 { (char *)"Iu2Mils", _wrap_Iu2Mils, METH_VARARGS, (char *)"Iu2Mils(int iu) -> int"},
	 { (char *)"Iu2DMils", _wrap_Iu2DMils, METH_VARARGS, (char *)"Iu2DMils(int iu) -> int"},
	 { (char *)"Mils2iu", _wrap_Mils2iu, METH_VARARGS, (char *)"Mils2iu(int mils) -> int"},
	 { (char *)"DMils2iu", _wrap_DMils2iu, METH_VARARGS, (char *)"DMils2iu(int dmils) -> int"},
	 { (char *)"intVector_iterator", _wrap_intVector_iterator, METH_VARARGS, (char *)"intVector_iterator(intVector self) -> SwigPyIterator"},
	 { (char *)"intVector___nonzero__", _wrap_intVector___nonzero__, METH_VARARGS, (char *)"intVector___nonzero__(intVector self) -> bool"},
	 { (char *)"intVector___bool__", _wrap_intVector___bool__, METH_VARARGS, (char *)"intVector___bool__(intVector self) -> bool"},
	 { (char *)"intVector___len__", _wrap_intVector___len__, METH_VARARGS, (char *)"intVector___len__(intVector self) -> std::vector< int >::size_type"},
	 { (char *)"intVector_pop", _wrap_intVector_pop, METH_VARARGS, (char *)"intVector_pop(intVector self) -> std::vector< int >::value_type"},
	 { (char *)"intVector___getslice__", _wrap_intVector___getslice__, METH_VARARGS, (char *)"intVector___getslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> intVector"},
	 { (char *)"intVector___setslice__", _wrap_intVector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< int >::difference_type i, std::vector< int >::difference_type j, intVector v=std::vector< int,std::allocator< int > >())\n"
		"intVector___setslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)\n"
		""},
	 { (char *)"intVector___delslice__", _wrap_intVector___delslice__, METH_VARARGS, (char *)"intVector___delslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"},
	 { (char *)"intVector___delitem__", _wrap_intVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< int >::difference_type i)\n"
		"intVector___delitem__(intVector self, PySliceObject * slice)\n"
		""},
	 { (char *)"intVector___getitem__", _wrap_intVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> intVector\n"
		"intVector___getitem__(intVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &\n"
		""},
	 { (char *)"intVector___setitem__", _wrap_intVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, intVector v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"intVector___setitem__(intVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)\n"
		""},
	 { (char *)"intVector_append", _wrap_intVector_append, METH_VARARGS, (char *)"intVector_append(intVector self, std::vector< int >::value_type const & x)"},
	 { (char *)"intVector_empty", _wrap_intVector_empty, METH_VARARGS, (char *)"intVector_empty(intVector self) -> bool"},
	 { (char *)"intVector_size", _wrap_intVector_size, METH_VARARGS, (char *)"intVector_size(intVector self) -> std::vector< int >::size_type"},
	 { (char *)"intVector_clear", _wrap_intVector_clear, METH_VARARGS, (char *)"intVector_clear(intVector self)"},
	 { (char *)"intVector_swap", _wrap_intVector_swap, METH_VARARGS, (char *)"intVector_swap(intVector self, intVector v)"},
	 { (char *)"intVector_get_allocator", _wrap_intVector_get_allocator, METH_VARARGS, (char *)"intVector_get_allocator(intVector self) -> std::vector< int >::allocator_type"},
	 { (char *)"intVector_begin", _wrap_intVector_begin, METH_VARARGS, (char *)"intVector_begin(intVector self) -> std::vector< int >::iterator"},
	 { (char *)"intVector_end", _wrap_intVector_end, METH_VARARGS, (char *)"intVector_end(intVector self) -> std::vector< int >::iterator"},
	 { (char *)"intVector_rbegin", _wrap_intVector_rbegin, METH_VARARGS, (char *)"intVector_rbegin(intVector self) -> std::vector< int >::reverse_iterator"},
	 { (char *)"intVector_rend", _wrap_intVector_rend, METH_VARARGS, (char *)"intVector_rend(intVector self) -> std::vector< int >::reverse_iterator"},
	 { (char *)"intVector_pop_back", _wrap_intVector_pop_back, METH_VARARGS, (char *)"intVector_pop_back(intVector self)"},
	 { (char *)"intVector_erase", _wrap_intVector_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< int >::iterator pos) -> std::vector< int >::iterator\n"
		"intVector_erase(intVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator\n"
		""},
	 { (char *)"new_intVector", _wrap_new_intVector, METH_VARARGS, (char *)"\n"
		"intVector()\n"
		"intVector(intVector arg2)\n"
		"intVector(std::vector< int >::size_type size)\n"
		"new_intVector(std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> intVector\n"
		""},
	 { (char *)"intVector_push_back", _wrap_intVector_push_back, METH_VARARGS, (char *)"intVector_push_back(intVector self, std::vector< int >::value_type const & x)"},
	 { (char *)"intVector_front", _wrap_intVector_front, METH_VARARGS, (char *)"intVector_front(intVector self) -> std::vector< int >::value_type const &"},
	 { (char *)"intVector_back", _wrap_intVector_back, METH_VARARGS, (char *)"intVector_back(intVector self) -> std::vector< int >::value_type const &"},
	 { (char *)"intVector_assign", _wrap_intVector_assign, METH_VARARGS, (char *)"intVector_assign(intVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"},
	 { (char *)"intVector_resize", _wrap_intVector_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< int >::size_type new_size)\n"
		"intVector_resize(intVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)\n"
		""},
	 { (char *)"intVector_insert", _wrap_intVector_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator\n"
		"intVector_insert(intVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, \n"
		"    std::vector< int >::value_type const & x)\n"
		""},
	 { (char *)"intVector_reserve", _wrap_intVector_reserve, METH_VARARGS, (char *)"intVector_reserve(intVector self, std::vector< int >::size_type n)"},
	 { (char *)"intVector_capacity", _wrap_intVector_capacity, METH_VARARGS, (char *)"intVector_capacity(intVector self) -> std::vector< int >::size_type"},
	 { (char *)"delete_intVector", _wrap_delete_intVector, METH_VARARGS, (char *)"delete_intVector(intVector self)"},
	 { (char *)"intVector_swigregister", intVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"BOARD_ITEM_Next", _wrap_BOARD_ITEM_Next, METH_VARARGS, (char *)"BOARD_ITEM_Next(BOARD_ITEM self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_Back", _wrap_BOARD_ITEM_Back, METH_VARARGS, (char *)"BOARD_ITEM_Back(BOARD_ITEM self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_GetParent", _wrap_BOARD_ITEM_GetParent, METH_VARARGS, (char *)"BOARD_ITEM_GetParent(BOARD_ITEM self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_GetLayer", _wrap_BOARD_ITEM_GetLayer, METH_VARARGS, (char *)"BOARD_ITEM_GetLayer(BOARD_ITEM self) -> int"},
	 { (char *)"BOARD_ITEM_SetLayer", _wrap_BOARD_ITEM_SetLayer, METH_VARARGS, (char *)"BOARD_ITEM_SetLayer(BOARD_ITEM self, int aLayer)"},
	 { (char *)"BOARD_ITEM_Draw", _wrap_BOARD_ITEM_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)\n"
		"BOARD_ITEM_Draw(BOARD_ITEM self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"BOARD_ITEM_IsOnLayer", _wrap_BOARD_ITEM_IsOnLayer, METH_VARARGS, (char *)"BOARD_ITEM_IsOnLayer(BOARD_ITEM self, int aLayer) -> bool"},
	 { (char *)"BOARD_ITEM_IsTrack", _wrap_BOARD_ITEM_IsTrack, METH_VARARGS, (char *)"BOARD_ITEM_IsTrack(BOARD_ITEM self) -> bool"},
	 { (char *)"BOARD_ITEM_IsLocked", _wrap_BOARD_ITEM_IsLocked, METH_VARARGS, (char *)"BOARD_ITEM_IsLocked(BOARD_ITEM self) -> bool"},
	 { (char *)"BOARD_ITEM_UnLink", _wrap_BOARD_ITEM_UnLink, METH_VARARGS, (char *)"BOARD_ITEM_UnLink(BOARD_ITEM self)"},
	 { (char *)"BOARD_ITEM_DeleteStructure", _wrap_BOARD_ITEM_DeleteStructure, METH_VARARGS, (char *)"BOARD_ITEM_DeleteStructure(BOARD_ITEM self)"},
	 { (char *)"BOARD_ITEM_ShowShape", _wrap_BOARD_ITEM_ShowShape, METH_VARARGS, (char *)"BOARD_ITEM_ShowShape(STROKE_T aShape) -> wxString"},
	 { (char *)"BOARD_ITEM_Move", _wrap_BOARD_ITEM_Move, METH_VARARGS, (char *)"BOARD_ITEM_Move(BOARD_ITEM self, wxPoint aMoveVector)"},
	 { (char *)"BOARD_ITEM_Rotate", _wrap_BOARD_ITEM_Rotate, METH_VARARGS, (char *)"BOARD_ITEM_Rotate(BOARD_ITEM self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"BOARD_ITEM_Flip", _wrap_BOARD_ITEM_Flip, METH_VARARGS, (char *)"BOARD_ITEM_Flip(BOARD_ITEM self, wxPoint aCentre)"},
	 { (char *)"BOARD_ITEM_GetBoard", _wrap_BOARD_ITEM_GetBoard, METH_VARARGS, (char *)"BOARD_ITEM_GetBoard(BOARD_ITEM self) -> BOARD"},
	 { (char *)"BOARD_ITEM_GetLayerName", _wrap_BOARD_ITEM_GetLayerName, METH_VARARGS, (char *)"BOARD_ITEM_GetLayerName(BOARD_ITEM self) -> wxString"},
	 { (char *)"BOARD_ITEM_FormatAngle", _wrap_BOARD_ITEM_FormatAngle, METH_VARARGS, (char *)"BOARD_ITEM_FormatAngle(double aAngle) -> std::string"},
	 { (char *)"BOARD_ITEM_FormatInternalUnits", _wrap_BOARD_ITEM_FormatInternalUnits, METH_VARARGS, (char *)"\n"
		"FormatInternalUnits(int aValue) -> std::string\n"
		"FormatInternalUnits(wxPoint aPoint) -> std::string\n"
		"BOARD_ITEM_FormatInternalUnits(wxSize aSize) -> std::string\n"
		""},
	 { (char *)"BOARD_ITEM_Cast_to_TEXTE_PCB", _wrap_BOARD_ITEM_Cast_to_TEXTE_PCB, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_TEXTE_PCB(BOARD_ITEM self) -> TEXTE_PCB"},
	 { (char *)"BOARD_ITEM_Cast_to_DIMENSION", _wrap_BOARD_ITEM_Cast_to_DIMENSION, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_DIMENSION(BOARD_ITEM self) -> DIMENSION"},
	 { (char *)"BOARD_ITEM_Cast_to_MODULE", _wrap_BOARD_ITEM_Cast_to_MODULE, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_MODULE(BOARD_ITEM self) -> MODULE"},
	 { (char *)"BOARD_ITEM_Cast_to_TEXTE_MODULE", _wrap_BOARD_ITEM_Cast_to_TEXTE_MODULE, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_TEXTE_MODULE(BOARD_ITEM self) -> TEXTE_MODULE"},
	 { (char *)"BOARD_ITEM_Cast_to_DRAWSEGMENT", _wrap_BOARD_ITEM_Cast_to_DRAWSEGMENT, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_DRAWSEGMENT(BOARD_ITEM self) -> DRAWSEGMENT"},
	 { (char *)"BOARD_ITEM_Cast_to_MARKER_PCB", _wrap_BOARD_ITEM_Cast_to_MARKER_PCB, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_MARKER_PCB(BOARD_ITEM self) -> MARKER_PCB"},
	 { (char *)"BOARD_ITEM_Cast_to_BOARD", _wrap_BOARD_ITEM_Cast_to_BOARD, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_BOARD(BOARD_ITEM self) -> BOARD"},
	 { (char *)"BOARD_ITEM_Cast_to_EDGE_MODULE", _wrap_BOARD_ITEM_Cast_to_EDGE_MODULE, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_EDGE_MODULE(BOARD_ITEM self) -> EDGE_MODULE"},
	 { (char *)"BOARD_ITEM_Cast_to_D_PAD", _wrap_BOARD_ITEM_Cast_to_D_PAD, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_D_PAD(BOARD_ITEM self) -> D_PAD"},
	 { (char *)"BOARD_ITEM_Cast_to_TRACK", _wrap_BOARD_ITEM_Cast_to_TRACK, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_TRACK(BOARD_ITEM self) -> TRACK"},
	 { (char *)"BOARD_ITEM_Cast_to_SEGZONE", _wrap_BOARD_ITEM_Cast_to_SEGZONE, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_SEGZONE(BOARD_ITEM self) -> SEGZONE"},
	 { (char *)"BOARD_ITEM_Cast_to_SEGVIA", _wrap_BOARD_ITEM_Cast_to_SEGVIA, METH_VARARGS, (char *)"BOARD_ITEM_Cast_to_SEGVIA(BOARD_ITEM self) -> SEGVIA"},
	 { (char *)"delete_BOARD_ITEM", _wrap_delete_BOARD_ITEM, METH_VARARGS, (char *)"delete_BOARD_ITEM(BOARD_ITEM self)"},
	 { (char *)"BOARD_ITEM_swigregister", BOARD_ITEM_swigregister, METH_VARARGS, NULL},
	 { (char *)"BOARD_CONNECTED_ITEM_m_TracksConnected_set", _wrap_BOARD_CONNECTED_ITEM_m_TracksConnected_set, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_m_TracksConnected_set(BOARD_CONNECTED_ITEM self, std::vector< TRACK *,std::allocator< TRACK * > > * m_TracksConnected)"},
	 { (char *)"BOARD_CONNECTED_ITEM_m_TracksConnected_get", _wrap_BOARD_CONNECTED_ITEM_m_TracksConnected_get, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_m_TracksConnected_get(BOARD_CONNECTED_ITEM self) -> std::vector< TRACK *,std::allocator< TRACK * > > *"},
	 { (char *)"BOARD_CONNECTED_ITEM_m_PadsConnected_set", _wrap_BOARD_CONNECTED_ITEM_m_PadsConnected_set, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_m_PadsConnected_set(BOARD_CONNECTED_ITEM self, std::vector< D_PAD *,std::allocator< D_PAD * > > * m_PadsConnected)"},
	 { (char *)"BOARD_CONNECTED_ITEM_m_PadsConnected_get", _wrap_BOARD_CONNECTED_ITEM_m_PadsConnected_get, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_m_PadsConnected_get(BOARD_CONNECTED_ITEM self) -> std::vector< D_PAD *,std::allocator< D_PAD * > > *"},
	 { (char *)"BOARD_CONNECTED_ITEM_GetNet", _wrap_BOARD_CONNECTED_ITEM_GetNet, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_GetNet(BOARD_CONNECTED_ITEM self) -> int"},
	 { (char *)"BOARD_CONNECTED_ITEM_SetNet", _wrap_BOARD_CONNECTED_ITEM_SetNet, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_SetNet(BOARD_CONNECTED_ITEM self, int aNetCode)"},
	 { (char *)"BOARD_CONNECTED_ITEM_GetSubNet", _wrap_BOARD_CONNECTED_ITEM_GetSubNet, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_GetSubNet(BOARD_CONNECTED_ITEM self) -> int"},
	 { (char *)"BOARD_CONNECTED_ITEM_SetSubNet", _wrap_BOARD_CONNECTED_ITEM_SetSubNet, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_SetSubNet(BOARD_CONNECTED_ITEM self, int aSubNetCode)"},
	 { (char *)"BOARD_CONNECTED_ITEM_GetZoneSubNet", _wrap_BOARD_CONNECTED_ITEM_GetZoneSubNet, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_GetZoneSubNet(BOARD_CONNECTED_ITEM self) -> int"},
	 { (char *)"BOARD_CONNECTED_ITEM_SetZoneSubNet", _wrap_BOARD_CONNECTED_ITEM_SetZoneSubNet, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_SetZoneSubNet(BOARD_CONNECTED_ITEM self, int aSubNetCode)"},
	 { (char *)"BOARD_CONNECTED_ITEM_GetClearance", _wrap_BOARD_CONNECTED_ITEM_GetClearance, METH_VARARGS, (char *)"\n"
		"GetClearance(BOARD_CONNECTED_ITEM aItem=None) -> int\n"
		"BOARD_CONNECTED_ITEM_GetClearance(BOARD_CONNECTED_ITEM self) -> int\n"
		""},
	 { (char *)"BOARD_CONNECTED_ITEM_GetNetClass", _wrap_BOARD_CONNECTED_ITEM_GetNetClass, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_GetNetClass(BOARD_CONNECTED_ITEM self) -> NETCLASS"},
	 { (char *)"BOARD_CONNECTED_ITEM_GetNetClassName", _wrap_BOARD_CONNECTED_ITEM_GetNetClassName, METH_VARARGS, (char *)"BOARD_CONNECTED_ITEM_GetNetClassName(BOARD_CONNECTED_ITEM self) -> wxString"},
	 { (char *)"delete_BOARD_CONNECTED_ITEM", _wrap_delete_BOARD_CONNECTED_ITEM, METH_VARARGS, (char *)"delete_BOARD_CONNECTED_ITEM(BOARD_CONNECTED_ITEM self)"},
	 { (char *)"BOARD_CONNECTED_ITEM_swigregister", BOARD_CONNECTED_ITEM_swigregister, METH_VARARGS, NULL},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_set", _wrap_BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_set(BOARD_DESIGN_SETTINGS self, bool m_MicroViasAllowed)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_get", _wrap_BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasAllowed_get(BOARD_DESIGN_SETTINGS self) -> bool"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_CurrentViaType_set", _wrap_BOARD_DESIGN_SETTINGS_m_CurrentViaType_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_CurrentViaType_set(BOARD_DESIGN_SETTINGS self, int m_CurrentViaType)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_CurrentViaType_get", _wrap_BOARD_DESIGN_SETTINGS_m_CurrentViaType_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_CurrentViaType_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_set", _wrap_BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_set(BOARD_DESIGN_SETTINGS self, bool m_UseConnectedTrackWidth)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_get", _wrap_BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_UseConnectedTrackWidth_get(BOARD_DESIGN_SETTINGS self) -> bool"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_set", _wrap_BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_set(BOARD_DESIGN_SETTINGS self, int m_DrawSegmentWidth)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_get", _wrap_BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_DrawSegmentWidth_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_set", _wrap_BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_set(BOARD_DESIGN_SETTINGS self, int m_EdgeSegmentWidth)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_get", _wrap_BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_EdgeSegmentWidth_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_PcbTextWidth_set", _wrap_BOARD_DESIGN_SETTINGS_m_PcbTextWidth_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_PcbTextWidth_set(BOARD_DESIGN_SETTINGS self, int m_PcbTextWidth)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_PcbTextWidth_get", _wrap_BOARD_DESIGN_SETTINGS_m_PcbTextWidth_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_PcbTextWidth_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_PcbTextSize_set", _wrap_BOARD_DESIGN_SETTINGS_m_PcbTextSize_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_PcbTextSize_set(BOARD_DESIGN_SETTINGS self, wxSize m_PcbTextSize)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_PcbTextSize_get", _wrap_BOARD_DESIGN_SETTINGS_m_PcbTextSize_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_PcbTextSize_get(BOARD_DESIGN_SETTINGS self) -> wxSize"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_TrackMinWidth_set", _wrap_BOARD_DESIGN_SETTINGS_m_TrackMinWidth_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_TrackMinWidth_set(BOARD_DESIGN_SETTINGS self, int m_TrackMinWidth)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_TrackMinWidth_get", _wrap_BOARD_DESIGN_SETTINGS_m_TrackMinWidth_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_TrackMinWidth_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ViasMinSize_set", _wrap_BOARD_DESIGN_SETTINGS_m_ViasMinSize_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ViasMinSize_set(BOARD_DESIGN_SETTINGS self, int m_ViasMinSize)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ViasMinSize_get", _wrap_BOARD_DESIGN_SETTINGS_m_ViasMinSize_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ViasMinSize_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ViasMinDrill_set", _wrap_BOARD_DESIGN_SETTINGS_m_ViasMinDrill_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ViasMinDrill_set(BOARD_DESIGN_SETTINGS self, int m_ViasMinDrill)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ViasMinDrill_get", _wrap_BOARD_DESIGN_SETTINGS_m_ViasMinDrill_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ViasMinDrill_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_set", _wrap_BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_set(BOARD_DESIGN_SETTINGS self, int m_MicroViasMinSize)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_get", _wrap_BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasMinSize_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_set", _wrap_BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_set(BOARD_DESIGN_SETTINGS self, int m_MicroViasMinDrill)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_get", _wrap_BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_MicroViasMinDrill_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_set", _wrap_BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_set(BOARD_DESIGN_SETTINGS self, int m_SolderMaskMargin)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_get", _wrap_BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_SolderMaskMargin_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_set", _wrap_BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_set(BOARD_DESIGN_SETTINGS self, int m_SolderPasteMargin)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_get", _wrap_BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_SolderPasteMargin_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_set", _wrap_BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_set(BOARD_DESIGN_SETTINGS self, double m_SolderPasteMarginRatio)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_get", _wrap_BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_SolderPasteMarginRatio_get(BOARD_DESIGN_SETTINGS self) -> double"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ModuleTextSize_set", _wrap_BOARD_DESIGN_SETTINGS_m_ModuleTextSize_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ModuleTextSize_set(BOARD_DESIGN_SETTINGS self, wxSize m_ModuleTextSize)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ModuleTextSize_get", _wrap_BOARD_DESIGN_SETTINGS_m_ModuleTextSize_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ModuleTextSize_get(BOARD_DESIGN_SETTINGS self) -> wxSize"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_set", _wrap_BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_set(BOARD_DESIGN_SETTINGS self, int m_ModuleTextWidth)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_get", _wrap_BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ModuleTextWidth_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_set", _wrap_BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_set(BOARD_DESIGN_SETTINGS self, int m_ModuleSegmentWidth)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_get", _wrap_BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_ModuleSegmentWidth_get(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_Pad_Master_set", _wrap_BOARD_DESIGN_SETTINGS_m_Pad_Master_set, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_Pad_Master_set(BOARD_DESIGN_SETTINGS self, D_PAD m_Pad_Master)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_m_Pad_Master_get", _wrap_BOARD_DESIGN_SETTINGS_m_Pad_Master_get, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_m_Pad_Master_get(BOARD_DESIGN_SETTINGS self) -> D_PAD"},
	 { (char *)"new_BOARD_DESIGN_SETTINGS", _wrap_new_BOARD_DESIGN_SETTINGS, METH_VARARGS, (char *)"new_BOARD_DESIGN_SETTINGS() -> BOARD_DESIGN_SETTINGS"},
	 { (char *)"BOARD_DESIGN_SETTINGS_GetVisibleLayers", _wrap_BOARD_DESIGN_SETTINGS_GetVisibleLayers, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_GetVisibleLayers(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_SetVisibleAlls", _wrap_BOARD_DESIGN_SETTINGS_SetVisibleAlls, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_SetVisibleAlls(BOARD_DESIGN_SETTINGS self)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_SetVisibleLayers", _wrap_BOARD_DESIGN_SETTINGS_SetVisibleLayers, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_SetVisibleLayers(BOARD_DESIGN_SETTINGS self, int aMask)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_IsLayerVisible", _wrap_BOARD_DESIGN_SETTINGS_IsLayerVisible, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_IsLayerVisible(BOARD_DESIGN_SETTINGS self, int aLayerIndex) -> bool"},
	 { (char *)"BOARD_DESIGN_SETTINGS_SetLayerVisibility", _wrap_BOARD_DESIGN_SETTINGS_SetLayerVisibility, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_SetLayerVisibility(BOARD_DESIGN_SETTINGS self, int aLayerIndex, bool aNewState)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_GetVisibleElements", _wrap_BOARD_DESIGN_SETTINGS_GetVisibleElements, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_GetVisibleElements(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_SetVisibleElements", _wrap_BOARD_DESIGN_SETTINGS_SetVisibleElements, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_SetVisibleElements(BOARD_DESIGN_SETTINGS self, int aMask)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_IsElementVisible", _wrap_BOARD_DESIGN_SETTINGS_IsElementVisible, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_IsElementVisible(BOARD_DESIGN_SETTINGS self, int aPCB_VISIBLE) -> bool"},
	 { (char *)"BOARD_DESIGN_SETTINGS_SetElementVisibility", _wrap_BOARD_DESIGN_SETTINGS_SetElementVisibility, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_SetElementVisibility(BOARD_DESIGN_SETTINGS self, int aPCB_VISIBLE, bool aNewState)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_GetEnabledLayers", _wrap_BOARD_DESIGN_SETTINGS_GetEnabledLayers, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_GetEnabledLayers(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_SetEnabledLayers", _wrap_BOARD_DESIGN_SETTINGS_SetEnabledLayers, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_SetEnabledLayers(BOARD_DESIGN_SETTINGS self, int aMask)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_IsLayerEnabled", _wrap_BOARD_DESIGN_SETTINGS_IsLayerEnabled, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_IsLayerEnabled(BOARD_DESIGN_SETTINGS self, int aLayerIndex) -> bool"},
	 { (char *)"BOARD_DESIGN_SETTINGS_GetCopperLayerCount", _wrap_BOARD_DESIGN_SETTINGS_GetCopperLayerCount, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_GetCopperLayerCount(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_SetCopperLayerCount", _wrap_BOARD_DESIGN_SETTINGS_SetCopperLayerCount, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_SetCopperLayerCount(BOARD_DESIGN_SETTINGS self, int aNewLayerCount)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_AppendConfigs", _wrap_BOARD_DESIGN_SETTINGS_AppendConfigs, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_AppendConfigs(BOARD_DESIGN_SETTINGS self, PARAM_CFG_ARRAY * aResult)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_GetBoardThickness", _wrap_BOARD_DESIGN_SETTINGS_GetBoardThickness, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_GetBoardThickness(BOARD_DESIGN_SETTINGS self) -> int"},
	 { (char *)"BOARD_DESIGN_SETTINGS_SetBoardThickness", _wrap_BOARD_DESIGN_SETTINGS_SetBoardThickness, METH_VARARGS, (char *)"BOARD_DESIGN_SETTINGS_SetBoardThickness(BOARD_DESIGN_SETTINGS self, int aThickness)"},
	 { (char *)"delete_BOARD_DESIGN_SETTINGS", _wrap_delete_BOARD_DESIGN_SETTINGS, METH_VARARGS, (char *)"delete_BOARD_DESIGN_SETTINGS(BOARD_DESIGN_SETTINGS self)"},
	 { (char *)"BOARD_DESIGN_SETTINGS_swigregister", BOARD_DESIGN_SETTINGS_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LAYER", _wrap_new_LAYER, METH_VARARGS, (char *)"\n"
		"LAYER(wxString const & aName=wxEmptyString, LAYER_T aType=LT_SIGNAL, bool aVisible=True)\n"
		"LAYER(wxString const & aName=wxEmptyString, LAYER_T aType=LT_SIGNAL)\n"
		"LAYER(wxString const & aName=wxEmptyString)\n"
		"new_LAYER() -> LAYER\n"
		""},
	 { (char *)"LAYER_SetVisible", _wrap_LAYER_SetVisible, METH_VARARGS, (char *)"LAYER_SetVisible(LAYER self, bool aEnable)"},
	 { (char *)"LAYER_IsVisible", _wrap_LAYER_IsVisible, METH_VARARGS, (char *)"LAYER_IsVisible(LAYER self) -> bool"},
	 { (char *)"LAYER_SetFixedListIndex", _wrap_LAYER_SetFixedListIndex, METH_VARARGS, (char *)"LAYER_SetFixedListIndex(LAYER self, int aIndex)"},
	 { (char *)"LAYER_GetFixedListIndex", _wrap_LAYER_GetFixedListIndex, METH_VARARGS, (char *)"LAYER_GetFixedListIndex(LAYER self) -> int"},
	 { (char *)"LAYER_m_Name_set", _wrap_LAYER_m_Name_set, METH_VARARGS, (char *)"LAYER_m_Name_set(LAYER self, wxString m_Name)"},
	 { (char *)"LAYER_m_Name_get", _wrap_LAYER_m_Name_get, METH_VARARGS, (char *)"LAYER_m_Name_get(LAYER self) -> wxString"},
	 { (char *)"LAYER_m_Type_set", _wrap_LAYER_m_Type_set, METH_VARARGS, (char *)"LAYER_m_Type_set(LAYER self, LAYER_T m_Type)"},
	 { (char *)"LAYER_m_Type_get", _wrap_LAYER_m_Type_get, METH_VARARGS, (char *)"LAYER_m_Type_get(LAYER self) -> LAYER_T"},
	 { (char *)"LAYER_ShowType", _wrap_LAYER_ShowType, METH_VARARGS, (char *)"LAYER_ShowType(LAYER_T aType) -> char const *"},
	 { (char *)"LAYER_ParseType", _wrap_LAYER_ParseType, METH_VARARGS, (char *)"LAYER_ParseType(char const * aType) -> LAYER_T"},
	 { (char *)"LAYER_GetDefaultIndex", _wrap_LAYER_GetDefaultIndex, METH_VARARGS, (char *)"LAYER_GetDefaultIndex(wxString const & aName) -> int"},
	 { (char *)"delete_LAYER", _wrap_delete_LAYER, METH_VARARGS, (char *)"delete_LAYER(LAYER self)"},
	 { (char *)"LAYER_swigregister", LAYER_swigregister, METH_VARARGS, NULL},
	 { (char *)"VIA_DIMENSION_m_Diameter_set", _wrap_VIA_DIMENSION_m_Diameter_set, METH_VARARGS, (char *)"VIA_DIMENSION_m_Diameter_set(VIA_DIMENSION self, int m_Diameter)"},
	 { (char *)"VIA_DIMENSION_m_Diameter_get", _wrap_VIA_DIMENSION_m_Diameter_get, METH_VARARGS, (char *)"VIA_DIMENSION_m_Diameter_get(VIA_DIMENSION self) -> int"},
	 { (char *)"VIA_DIMENSION_m_Drill_set", _wrap_VIA_DIMENSION_m_Drill_set, METH_VARARGS, (char *)"VIA_DIMENSION_m_Drill_set(VIA_DIMENSION self, int m_Drill)"},
	 { (char *)"VIA_DIMENSION_m_Drill_get", _wrap_VIA_DIMENSION_m_Drill_get, METH_VARARGS, (char *)"VIA_DIMENSION_m_Drill_get(VIA_DIMENSION self) -> int"},
	 { (char *)"new_VIA_DIMENSION", _wrap_new_VIA_DIMENSION, METH_VARARGS, (char *)"\n"
		"VIA_DIMENSION()\n"
		"new_VIA_DIMENSION(int aDiameter, int aDrill) -> VIA_DIMENSION\n"
		""},
	 { (char *)"VIA_DIMENSION___eq__", _wrap_VIA_DIMENSION___eq__, METH_VARARGS, (char *)"VIA_DIMENSION___eq__(VIA_DIMENSION self, VIA_DIMENSION other) -> bool"},
	 { (char *)"VIA_DIMENSION___lt__", _wrap_VIA_DIMENSION___lt__, METH_VARARGS, (char *)"VIA_DIMENSION___lt__(VIA_DIMENSION self, VIA_DIMENSION other) -> bool"},
	 { (char *)"delete_VIA_DIMENSION", _wrap_delete_VIA_DIMENSION, METH_VARARGS, (char *)"delete_VIA_DIMENSION(VIA_DIMENSION self)"},
	 { (char *)"VIA_DIMENSION_swigregister", VIA_DIMENSION_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_HIGH_LIGHT_INFO", _wrap_delete_HIGH_LIGHT_INFO, METH_VARARGS, (char *)"delete_HIGH_LIGHT_INFO(HIGH_LIGHT_INFO self)"},
	 { (char *)"HIGH_LIGHT_INFO_swigregister", HIGH_LIGHT_INFO_swigregister, METH_VARARGS, NULL},
	 { (char *)"BOARD_m_Status_Pcb_set", _wrap_BOARD_m_Status_Pcb_set, METH_VARARGS, (char *)"BOARD_m_Status_Pcb_set(BOARD self, int m_Status_Pcb)"},
	 { (char *)"BOARD_m_Status_Pcb_get", _wrap_BOARD_m_Status_Pcb_get, METH_VARARGS, (char *)"BOARD_m_Status_Pcb_get(BOARD self) -> int"},
	 { (char *)"BOARD_m_NbNodes_set", _wrap_BOARD_m_NbNodes_set, METH_VARARGS, (char *)"BOARD_m_NbNodes_set(BOARD self, int m_NbNodes)"},
	 { (char *)"BOARD_m_NbNodes_get", _wrap_BOARD_m_NbNodes_get, METH_VARARGS, (char *)"BOARD_m_NbNodes_get(BOARD self) -> int"},
	 { (char *)"BOARD_m_NbNoconnect_set", _wrap_BOARD_m_NbNoconnect_set, METH_VARARGS, (char *)"BOARD_m_NbNoconnect_set(BOARD self, int m_NbNoconnect)"},
	 { (char *)"BOARD_m_NbNoconnect_get", _wrap_BOARD_m_NbNoconnect_get, METH_VARARGS, (char *)"BOARD_m_NbNoconnect_get(BOARD self) -> int"},
	 { (char *)"BOARD_m_Drawings_set", _wrap_BOARD_m_Drawings_set, METH_VARARGS, (char *)"BOARD_m_Drawings_set(BOARD self, BOARD_ITEM_List m_Drawings)"},
	 { (char *)"BOARD_m_Drawings_get", _wrap_BOARD_m_Drawings_get, METH_VARARGS, (char *)"BOARD_m_Drawings_get(BOARD self) -> BOARD_ITEM_List"},
	 { (char *)"BOARD_m_Modules_set", _wrap_BOARD_m_Modules_set, METH_VARARGS, (char *)"BOARD_m_Modules_set(BOARD self, MODULE_List m_Modules)"},
	 { (char *)"BOARD_m_Modules_get", _wrap_BOARD_m_Modules_get, METH_VARARGS, (char *)"BOARD_m_Modules_get(BOARD self) -> MODULE_List"},
	 { (char *)"BOARD_m_Track_set", _wrap_BOARD_m_Track_set, METH_VARARGS, (char *)"BOARD_m_Track_set(BOARD self, TRACK_List m_Track)"},
	 { (char *)"BOARD_m_Track_get", _wrap_BOARD_m_Track_get, METH_VARARGS, (char *)"BOARD_m_Track_get(BOARD self) -> TRACK_List"},
	 { (char *)"BOARD_m_Zone_set", _wrap_BOARD_m_Zone_set, METH_VARARGS, (char *)"BOARD_m_Zone_set(BOARD self, SEGZONE_List m_Zone)"},
	 { (char *)"BOARD_m_Zone_get", _wrap_BOARD_m_Zone_get, METH_VARARGS, (char *)"BOARD_m_Zone_get(BOARD self) -> SEGZONE_List"},
	 { (char *)"BOARD_m_FullRatsnest_set", _wrap_BOARD_m_FullRatsnest_set, METH_VARARGS, (char *)"BOARD_m_FullRatsnest_set(BOARD self, RASTNET_Vector m_FullRatsnest)"},
	 { (char *)"BOARD_m_FullRatsnest_get", _wrap_BOARD_m_FullRatsnest_get, METH_VARARGS, (char *)"BOARD_m_FullRatsnest_get(BOARD self) -> RASTNET_Vector"},
	 { (char *)"BOARD_m_LocalRatsnest_set", _wrap_BOARD_m_LocalRatsnest_set, METH_VARARGS, (char *)"BOARD_m_LocalRatsnest_set(BOARD self, RASTNET_Vector m_LocalRatsnest)"},
	 { (char *)"BOARD_m_LocalRatsnest_get", _wrap_BOARD_m_LocalRatsnest_get, METH_VARARGS, (char *)"BOARD_m_LocalRatsnest_get(BOARD self) -> RASTNET_Vector"},
	 { (char *)"BOARD_m_CurrentZoneContour_set", _wrap_BOARD_m_CurrentZoneContour_set, METH_VARARGS, (char *)"BOARD_m_CurrentZoneContour_set(BOARD self, ZONE_CONTAINER * m_CurrentZoneContour)"},
	 { (char *)"BOARD_m_CurrentZoneContour_get", _wrap_BOARD_m_CurrentZoneContour_get, METH_VARARGS, (char *)"BOARD_m_CurrentZoneContour_get(BOARD self) -> ZONE_CONTAINER *"},
	 { (char *)"BOARD_m_NetClasses_set", _wrap_BOARD_m_NetClasses_set, METH_VARARGS, (char *)"BOARD_m_NetClasses_set(BOARD self, NETCLASSES m_NetClasses)"},
	 { (char *)"BOARD_m_NetClasses_get", _wrap_BOARD_m_NetClasses_get, METH_VARARGS, (char *)"BOARD_m_NetClasses_get(BOARD self) -> NETCLASSES"},
	 { (char *)"BOARD_m_CurrentNetClassName_set", _wrap_BOARD_m_CurrentNetClassName_set, METH_VARARGS, (char *)"BOARD_m_CurrentNetClassName_set(BOARD self, wxString m_CurrentNetClassName)"},
	 { (char *)"BOARD_m_CurrentNetClassName_get", _wrap_BOARD_m_CurrentNetClassName_get, METH_VARARGS, (char *)"BOARD_m_CurrentNetClassName_get(BOARD self) -> wxString"},
	 { (char *)"BOARD_m_ViasDimensionsList_set", _wrap_BOARD_m_ViasDimensionsList_set, METH_VARARGS, (char *)"BOARD_m_ViasDimensionsList_set(BOARD self, VIA_DIMENSION_Vector m_ViasDimensionsList)"},
	 { (char *)"BOARD_m_ViasDimensionsList_get", _wrap_BOARD_m_ViasDimensionsList_get, METH_VARARGS, (char *)"BOARD_m_ViasDimensionsList_get(BOARD self) -> VIA_DIMENSION_Vector"},
	 { (char *)"BOARD_m_TrackWidthList_set", _wrap_BOARD_m_TrackWidthList_set, METH_VARARGS, (char *)"BOARD_m_TrackWidthList_set(BOARD self, intVector m_TrackWidthList)"},
	 { (char *)"BOARD_m_TrackWidthList_get", _wrap_BOARD_m_TrackWidthList_get, METH_VARARGS, (char *)"BOARD_m_TrackWidthList_get(BOARD self) -> intVector"},
	 { (char *)"BOARD_m_ViaSizeSelector_set", _wrap_BOARD_m_ViaSizeSelector_set, METH_VARARGS, (char *)"BOARD_m_ViaSizeSelector_set(BOARD self, unsigned int m_ViaSizeSelector)"},
	 { (char *)"BOARD_m_ViaSizeSelector_get", _wrap_BOARD_m_ViaSizeSelector_get, METH_VARARGS, (char *)"BOARD_m_ViaSizeSelector_get(BOARD self) -> unsigned int"},
	 { (char *)"BOARD_m_TrackWidthSelector_set", _wrap_BOARD_m_TrackWidthSelector_set, METH_VARARGS, (char *)"BOARD_m_TrackWidthSelector_set(BOARD self, unsigned int m_TrackWidthSelector)"},
	 { (char *)"BOARD_m_TrackWidthSelector_get", _wrap_BOARD_m_TrackWidthSelector_get, METH_VARARGS, (char *)"BOARD_m_TrackWidthSelector_get(BOARD self) -> unsigned int"},
	 { (char *)"new_BOARD", _wrap_new_BOARD, METH_VARARGS, (char *)"new_BOARD() -> BOARD"},
	 { (char *)"delete_BOARD", _wrap_delete_BOARD, METH_VARARGS, (char *)"delete_BOARD(BOARD self)"},
	 { (char *)"BOARD_Move", _wrap_BOARD_Move, METH_VARARGS, (char *)"BOARD_Move(BOARD self, wxPoint aMoveVector)"},
	 { (char *)"BOARD_SetFileFormatVersionAtLoad", _wrap_BOARD_SetFileFormatVersionAtLoad, METH_VARARGS, (char *)"BOARD_SetFileFormatVersionAtLoad(BOARD self, int aVersion)"},
	 { (char *)"BOARD_GetFileFormatVersionAtLoad", _wrap_BOARD_GetFileFormatVersionAtLoad, METH_VARARGS, (char *)"BOARD_GetFileFormatVersionAtLoad(BOARD self) -> int"},
	 { (char *)"BOARD_GetDefaultLayerName", _wrap_BOARD_GetDefaultLayerName, METH_VARARGS, (char *)"BOARD_GetDefaultLayerName(int aLayerNumber, bool aTranslate) -> wxString"},
	 { (char *)"BOARD_ReturnFlippedLayerNumber", _wrap_BOARD_ReturnFlippedLayerNumber, METH_VARARGS, (char *)"BOARD_ReturnFlippedLayerNumber(int oldlayer) -> int"},
	 { (char *)"BOARD_AddNative", _wrap_BOARD_AddNative, METH_VARARGS, (char *)"\n"
		"AddNative(BOARD_ITEM aBoardItem, int aControl=0)\n"
		"BOARD_AddNative(BOARD self, BOARD_ITEM aBoardItem)\n"
		""},
	 { (char *)"BOARD_Delete", _wrap_BOARD_Delete, METH_VARARGS, (char *)"BOARD_Delete(BOARD self, BOARD_ITEM aBoardItem)"},
	 { (char *)"BOARD_Remove", _wrap_BOARD_Remove, METH_VARARGS, (char *)"BOARD_Remove(BOARD self, BOARD_ITEM aBoardItem) -> BOARD_ITEM"},
	 { (char *)"BOARD_DeleteMARKERs", _wrap_BOARD_DeleteMARKERs, METH_VARARGS, (char *)"BOARD_DeleteMARKERs(BOARD self)"},
	 { (char *)"BOARD_DeleteZONEOutlines", _wrap_BOARD_DeleteZONEOutlines, METH_VARARGS, (char *)"BOARD_DeleteZONEOutlines(BOARD self)"},
	 { (char *)"BOARD_GetMARKER", _wrap_BOARD_GetMARKER, METH_VARARGS, (char *)"BOARD_GetMARKER(BOARD self, int index) -> MARKER_PCB"},
	 { (char *)"BOARD_GetMARKERCount", _wrap_BOARD_GetMARKERCount, METH_VARARGS, (char *)"BOARD_GetMARKERCount(BOARD self) -> int"},
	 { (char *)"BOARD_ResetHighLight", _wrap_BOARD_ResetHighLight, METH_VARARGS, (char *)"BOARD_ResetHighLight(BOARD self)"},
	 { (char *)"BOARD_GetHighLightNetCode", _wrap_BOARD_GetHighLightNetCode, METH_VARARGS, (char *)"BOARD_GetHighLightNetCode(BOARD self) -> int"},
	 { (char *)"BOARD_SetHighLightNet", _wrap_BOARD_SetHighLightNet, METH_VARARGS, (char *)"BOARD_SetHighLightNet(BOARD self, int aNetCode)"},
	 { (char *)"BOARD_IsHighLightNetON", _wrap_BOARD_IsHighLightNetON, METH_VARARGS, (char *)"BOARD_IsHighLightNetON(BOARD self) -> bool"},
	 { (char *)"BOARD_HighLightOFF", _wrap_BOARD_HighLightOFF, METH_VARARGS, (char *)"BOARD_HighLightOFF(BOARD self)"},
	 { (char *)"BOARD_HighLightON", _wrap_BOARD_HighLightON, METH_VARARGS, (char *)"BOARD_HighLightON(BOARD self)"},
	 { (char *)"BOARD_PushHighLight", _wrap_BOARD_PushHighLight, METH_VARARGS, (char *)"BOARD_PushHighLight(BOARD self)"},
	 { (char *)"BOARD_PopHighLight", _wrap_BOARD_PopHighLight, METH_VARARGS, (char *)"BOARD_PopHighLight(BOARD self)"},
	 { (char *)"BOARD_GetCopperLayerCount", _wrap_BOARD_GetCopperLayerCount, METH_VARARGS, (char *)"BOARD_GetCopperLayerCount(BOARD self) -> int"},
	 { (char *)"BOARD_SetCopperLayerCount", _wrap_BOARD_SetCopperLayerCount, METH_VARARGS, (char *)"BOARD_SetCopperLayerCount(BOARD self, int aCount)"},
	 { (char *)"BOARD_GetEnabledLayers", _wrap_BOARD_GetEnabledLayers, METH_VARARGS, (char *)"BOARD_GetEnabledLayers(BOARD self) -> int"},
	 { (char *)"BOARD_SetEnabledLayers", _wrap_BOARD_SetEnabledLayers, METH_VARARGS, (char *)"BOARD_SetEnabledLayers(BOARD self, int aLayerMask)"},
	 { (char *)"BOARD_IsLayerEnabled", _wrap_BOARD_IsLayerEnabled, METH_VARARGS, (char *)"BOARD_IsLayerEnabled(BOARD self, int aLayer) -> bool"},
	 { (char *)"BOARD_IsLayerVisible", _wrap_BOARD_IsLayerVisible, METH_VARARGS, (char *)"BOARD_IsLayerVisible(BOARD self, int aLayerIndex) -> bool"},
	 { (char *)"BOARD_GetVisibleLayers", _wrap_BOARD_GetVisibleLayers, METH_VARARGS, (char *)"BOARD_GetVisibleLayers(BOARD self) -> int"},
	 { (char *)"BOARD_SetVisibleLayers", _wrap_BOARD_SetVisibleLayers, METH_VARARGS, (char *)"BOARD_SetVisibleLayers(BOARD self, int aLayerMask)"},
	 { (char *)"BOARD_GetVisibleElements", _wrap_BOARD_GetVisibleElements, METH_VARARGS, (char *)"BOARD_GetVisibleElements(BOARD self) -> int"},
	 { (char *)"BOARD_SetVisibleElements", _wrap_BOARD_SetVisibleElements, METH_VARARGS, (char *)"BOARD_SetVisibleElements(BOARD self, int aMask)"},
	 { (char *)"BOARD_SetVisibleAlls", _wrap_BOARD_SetVisibleAlls, METH_VARARGS, (char *)"BOARD_SetVisibleAlls(BOARD self)"},
	 { (char *)"BOARD_IsElementVisible", _wrap_BOARD_IsElementVisible, METH_VARARGS, (char *)"BOARD_IsElementVisible(BOARD self, int aPCB_VISIBLE) -> bool"},
	 { (char *)"BOARD_SetElementVisibility", _wrap_BOARD_SetElementVisibility, METH_VARARGS, (char *)"BOARD_SetElementVisibility(BOARD self, int aPCB_VISIBLE, bool aNewState)"},
	 { (char *)"BOARD_IsModuleLayerVisible", _wrap_BOARD_IsModuleLayerVisible, METH_VARARGS, (char *)"BOARD_IsModuleLayerVisible(BOARD self, int layer) -> bool"},
	 { (char *)"BOARD_GetVisibleElementColor", _wrap_BOARD_GetVisibleElementColor, METH_VARARGS, (char *)"BOARD_GetVisibleElementColor(BOARD self, int aPCB_VISIBLE) -> int"},
	 { (char *)"BOARD_SetVisibleElementColor", _wrap_BOARD_SetVisibleElementColor, METH_VARARGS, (char *)"BOARD_SetVisibleElementColor(BOARD self, int aPCB_VISIBLE, int aColor)"},
	 { (char *)"BOARD_GetDesignSettings", _wrap_BOARD_GetDesignSettings, METH_VARARGS, (char *)"BOARD_GetDesignSettings(BOARD self) -> BOARD_DESIGN_SETTINGS"},
	 { (char *)"BOARD_SetDesignSettings", _wrap_BOARD_SetDesignSettings, METH_VARARGS, (char *)"BOARD_SetDesignSettings(BOARD self, BOARD_DESIGN_SETTINGS aDesignSettings)"},
	 { (char *)"BOARD_GetPageSettings", _wrap_BOARD_GetPageSettings, METH_VARARGS, (char *)"BOARD_GetPageSettings(BOARD self) -> PAGE_INFO"},
	 { (char *)"BOARD_SetPageSettings", _wrap_BOARD_SetPageSettings, METH_VARARGS, (char *)"BOARD_SetPageSettings(BOARD self, PAGE_INFO aPageSettings)"},
	 { (char *)"BOARD_GetPlotOptions", _wrap_BOARD_GetPlotOptions, METH_VARARGS, (char *)"BOARD_GetPlotOptions(BOARD self) -> PCB_PLOT_PARAMS const &"},
	 { (char *)"BOARD_SetPlotOptions", _wrap_BOARD_SetPlotOptions, METH_VARARGS, (char *)"BOARD_SetPlotOptions(BOARD self, PCB_PLOT_PARAMS const & aOptions)"},
	 { (char *)"BOARD_GetOriginAxisPosition", _wrap_BOARD_GetOriginAxisPosition, METH_VARARGS, (char *)"BOARD_GetOriginAxisPosition(BOARD self) -> wxPoint"},
	 { (char *)"BOARD_SetOriginAxisPosition", _wrap_BOARD_SetOriginAxisPosition, METH_VARARGS, (char *)"BOARD_SetOriginAxisPosition(BOARD self, wxPoint aPosition)"},
	 { (char *)"BOARD_GetTitleBlock", _wrap_BOARD_GetTitleBlock, METH_VARARGS, (char *)"BOARD_GetTitleBlock(BOARD self) -> TITLE_BLOCK"},
	 { (char *)"BOARD_SetTitleBlock", _wrap_BOARD_SetTitleBlock, METH_VARARGS, (char *)"BOARD_SetTitleBlock(BOARD self, TITLE_BLOCK aTitleBlock)"},
	 { (char *)"BOARD_GetZoneSettings", _wrap_BOARD_GetZoneSettings, METH_VARARGS, (char *)"BOARD_GetZoneSettings(BOARD self) -> ZONE_SETTINGS"},
	 { (char *)"BOARD_SetZoneSettings", _wrap_BOARD_SetZoneSettings, METH_VARARGS, (char *)"BOARD_SetZoneSettings(BOARD self, ZONE_SETTINGS aSettings)"},
	 { (char *)"BOARD_GetColorsSettings", _wrap_BOARD_GetColorsSettings, METH_VARARGS, (char *)"BOARD_GetColorsSettings(BOARD self) -> COLORS_DESIGN_SETTINGS"},
	 { (char *)"BOARD_SetColorsSettings", _wrap_BOARD_SetColorsSettings, METH_VARARGS, (char *)"BOARD_SetColorsSettings(BOARD self, COLORS_DESIGN_SETTINGS aColorsSettings)"},
	 { (char *)"BOARD_GetLayerName", _wrap_BOARD_GetLayerName, METH_VARARGS, (char *)"\n"
		"GetLayerName(int aLayerIndex, bool aTranslate=True) -> wxString\n"
		"BOARD_GetLayerName(BOARD self, int aLayerIndex) -> wxString\n"
		""},
	 { (char *)"BOARD_SetLayerName", _wrap_BOARD_SetLayerName, METH_VARARGS, (char *)"BOARD_SetLayerName(BOARD self, int aLayerIndex, wxString const & aLayerName) -> bool"},
	 { (char *)"BOARD_SetLayer", _wrap_BOARD_SetLayer, METH_VARARGS, (char *)"BOARD_SetLayer(BOARD self, int aIndex, LAYER aLayer) -> bool"},
	 { (char *)"BOARD_GetLayerType", _wrap_BOARD_GetLayerType, METH_VARARGS, (char *)"BOARD_GetLayerType(BOARD self, int aLayerIndex) -> LAYER_T"},
	 { (char *)"BOARD_SetLayerType", _wrap_BOARD_SetLayerType, METH_VARARGS, (char *)"BOARD_SetLayerType(BOARD self, int aLayerIndex, LAYER_T aLayerType) -> bool"},
	 { (char *)"BOARD_SetLayerColor", _wrap_BOARD_SetLayerColor, METH_VARARGS, (char *)"BOARD_SetLayerColor(BOARD self, int aLayer, int aColor)"},
	 { (char *)"BOARD_GetLayerColor", _wrap_BOARD_GetLayerColor, METH_VARARGS, (char *)"BOARD_GetLayerColor(BOARD self, int aLayer) -> int"},
	 { (char *)"BOARD_GetNumSegmTrack", _wrap_BOARD_GetNumSegmTrack, METH_VARARGS, (char *)"BOARD_GetNumSegmTrack(BOARD self) -> int"},
	 { (char *)"BOARD_GetNumSegmZone", _wrap_BOARD_GetNumSegmZone, METH_VARARGS, (char *)"BOARD_GetNumSegmZone(BOARD self) -> int"},
	 { (char *)"BOARD_GetNoconnectCount", _wrap_BOARD_GetNoconnectCount, METH_VARARGS, (char *)"BOARD_GetNoconnectCount(BOARD self) -> unsigned int"},
	 { (char *)"BOARD_GetRatsnestsCount", _wrap_BOARD_GetRatsnestsCount, METH_VARARGS, (char *)"BOARD_GetRatsnestsCount(BOARD self) -> unsigned int"},
	 { (char *)"BOARD_GetNodesCount", _wrap_BOARD_GetNodesCount, METH_VARARGS, (char *)"BOARD_GetNodesCount(BOARD self) -> unsigned int"},
	 { (char *)"BOARD_GetPadCount", _wrap_BOARD_GetPadCount, METH_VARARGS, (char *)"BOARD_GetPadCount(BOARD self) -> unsigned int"},
	 { (char *)"BOARD_GetPads", _wrap_BOARD_GetPads, METH_VARARGS, (char *)"BOARD_GetPads(BOARD self) -> std::vector< D_PAD *,std::allocator< D_PAD * > >"},
	 { (char *)"BOARD_BuildListOfNets", _wrap_BOARD_BuildListOfNets, METH_VARARGS, (char *)"BOARD_BuildListOfNets(BOARD self)"},
	 { (char *)"BOARD_FindNet", _wrap_BOARD_FindNet, METH_VARARGS, (char *)"\n"
		"FindNet(int aNetcode) -> NETINFO_ITEM\n"
		"BOARD_FindNet(BOARD self, wxString const & aNetname) -> NETINFO_ITEM\n"
		""},
	 { (char *)"BOARD_AppendNet", _wrap_BOARD_AppendNet, METH_VARARGS, (char *)"BOARD_AppendNet(BOARD self, NETINFO_ITEM aNewNet)"},
	 { (char *)"BOARD_GetNetCount", _wrap_BOARD_GetNetCount, METH_VARARGS, (char *)"BOARD_GetNetCount(BOARD self) -> unsigned int"},
	 { (char *)"BOARD_ComputeBoundingBox", _wrap_BOARD_ComputeBoundingBox, METH_VARARGS, (char *)"\n"
		"ComputeBoundingBox(bool aBoardEdgesOnly=False) -> EDA_RECT\n"
		"BOARD_ComputeBoundingBox(BOARD self) -> EDA_RECT\n"
		""},
	 { (char *)"BOARD_GetBoundingBox", _wrap_BOARD_GetBoundingBox, METH_VARARGS, (char *)"BOARD_GetBoundingBox(BOARD self) -> EDA_RECT"},
	 { (char *)"BOARD_SetBoundingBox", _wrap_BOARD_SetBoundingBox, METH_VARARGS, (char *)"BOARD_SetBoundingBox(BOARD self, EDA_RECT aBox)"},
	 { (char *)"BOARD_DisplayInfo", _wrap_BOARD_DisplayInfo, METH_VARARGS, (char *)"BOARD_DisplayInfo(BOARD self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"BOARD_Draw", _wrap_BOARD_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)\n"
		"BOARD_Draw(BOARD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)\n"
		""},
	 { (char *)"BOARD_DrawHighLight", _wrap_BOARD_DrawHighLight, METH_VARARGS, (char *)"BOARD_DrawHighLight(BOARD self, EDA_DRAW_PANEL * aDrawPanel, wxDC * aDC, int aNetCode)"},
	 { (char *)"BOARD_Visit", _wrap_BOARD_Visit, METH_VARARGS, (char *)"BOARD_Visit(BOARD self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"BOARD_FindModuleByReference", _wrap_BOARD_FindModuleByReference, METH_VARARGS, (char *)"BOARD_FindModuleByReference(BOARD self, wxString const & aReference) -> MODULE"},
	 { (char *)"BOARD_ReturnSortedNetnamesList", _wrap_BOARD_ReturnSortedNetnamesList, METH_VARARGS, (char *)"BOARD_ReturnSortedNetnamesList(BOARD self, wxArrayString & aNames, bool aSortbyPadsCount) -> int"},
	 { (char *)"BOARD_SynchronizeNetsAndNetClasses", _wrap_BOARD_SynchronizeNetsAndNetClasses, METH_VARARGS, (char *)"BOARD_SynchronizeNetsAndNetClasses(BOARD self)"},
	 { (char *)"BOARD_SetCurrentNetClass", _wrap_BOARD_SetCurrentNetClass, METH_VARARGS, (char *)"BOARD_SetCurrentNetClass(BOARD self, wxString const & aNetClassName) -> bool"},
	 { (char *)"BOARD_GetBiggestClearanceValue", _wrap_BOARD_GetBiggestClearanceValue, METH_VARARGS, (char *)"BOARD_GetBiggestClearanceValue(BOARD self) -> int"},
	 { (char *)"BOARD_GetSmallestClearanceValue", _wrap_BOARD_GetSmallestClearanceValue, METH_VARARGS, (char *)"BOARD_GetSmallestClearanceValue(BOARD self) -> int"},
	 { (char *)"BOARD_GetCurrentTrackWidth", _wrap_BOARD_GetCurrentTrackWidth, METH_VARARGS, (char *)"BOARD_GetCurrentTrackWidth(BOARD self) -> int"},
	 { (char *)"BOARD_GetCurrentViaSize", _wrap_BOARD_GetCurrentViaSize, METH_VARARGS, (char *)"BOARD_GetCurrentViaSize(BOARD self) -> int"},
	 { (char *)"BOARD_GetCurrentViaDrill", _wrap_BOARD_GetCurrentViaDrill, METH_VARARGS, (char *)"BOARD_GetCurrentViaDrill(BOARD self) -> int"},
	 { (char *)"BOARD_GetCurrentMicroViaSize", _wrap_BOARD_GetCurrentMicroViaSize, METH_VARARGS, (char *)"BOARD_GetCurrentMicroViaSize(BOARD self) -> int"},
	 { (char *)"BOARD_GetCurrentMicroViaDrill", _wrap_BOARD_GetCurrentMicroViaDrill, METH_VARARGS, (char *)"BOARD_GetCurrentMicroViaDrill(BOARD self) -> int"},
	 { (char *)"BOARD_GetClass", _wrap_BOARD_GetClass, METH_VARARGS, (char *)"BOARD_GetClass(BOARD self) -> wxString"},
	 { (char *)"BOARD_HitTestForAnyFilledArea", _wrap_BOARD_HitTestForAnyFilledArea, METH_VARARGS, (char *)"\n"
		"HitTestForAnyFilledArea(wxPoint aRefPos, int aStartLayer, int aEndLayer=-1) -> ZONE_CONTAINER\n"
		"BOARD_HitTestForAnyFilledArea(BOARD self, wxPoint aRefPos, int aStartLayer) -> ZONE_CONTAINER *\n"
		""},
	 { (char *)"BOARD_RedrawAreasOutlines", _wrap_BOARD_RedrawAreasOutlines, METH_VARARGS, (char *)"BOARD_RedrawAreasOutlines(BOARD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, int aLayer)"},
	 { (char *)"BOARD_RedrawFilledAreas", _wrap_BOARD_RedrawFilledAreas, METH_VARARGS, (char *)"BOARD_RedrawFilledAreas(BOARD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, int aLayer)"},
	 { (char *)"BOARD_SetAreasNetCodesFromNetNames", _wrap_BOARD_SetAreasNetCodesFromNetNames, METH_VARARGS, (char *)"BOARD_SetAreasNetCodesFromNetNames(BOARD self) -> int"},
	 { (char *)"BOARD_GetArea", _wrap_BOARD_GetArea, METH_VARARGS, (char *)"BOARD_GetArea(BOARD self, int index) -> ZONE_CONTAINER *"},
	 { (char *)"BOARD_GetAreaIndex", _wrap_BOARD_GetAreaIndex, METH_VARARGS, (char *)"BOARD_GetAreaIndex(BOARD self, ZONE_CONTAINER const * aArea) -> int"},
	 { (char *)"BOARD_GetAreaCount", _wrap_BOARD_GetAreaCount, METH_VARARGS, (char *)"BOARD_GetAreaCount(BOARD self) -> int"},
	 { (char *)"BOARD_AddArea", _wrap_BOARD_AddArea, METH_VARARGS, (char *)"\n"
		"BOARD_AddArea(BOARD self, PICKED_ITEMS_LIST * aNewZonesList, int aNetcode, int aLayer, wxPoint aStartPointPosition, \n"
		"    int aHatch) -> ZONE_CONTAINER *\n"
		""},
	 { (char *)"BOARD_InsertArea", _wrap_BOARD_InsertArea, METH_VARARGS, (char *)"BOARD_InsertArea(BOARD self, int netcode, int iarea, int layer, int x, int y, int hatch) -> ZONE_CONTAINER *"},
	 { (char *)"BOARD_TestAreaPolygon", _wrap_BOARD_TestAreaPolygon, METH_VARARGS, (char *)"BOARD_TestAreaPolygon(BOARD self, ZONE_CONTAINER * CurrArea) -> int"},
	 { (char *)"BOARD_ClipAreaPolygon", _wrap_BOARD_ClipAreaPolygon, METH_VARARGS, (char *)"\n"
		"ClipAreaPolygon(PICKED_ITEMS_LIST * aNewZonesList, ZONE_CONTAINER * aCurrArea, bool bMessageBoxArc, \n"
		"    bool bMessageBoxInt, bool bRetainArcs=True) -> int\n"
		"BOARD_ClipAreaPolygon(BOARD self, PICKED_ITEMS_LIST * aNewZonesList, ZONE_CONTAINER * aCurrArea, bool bMessageBoxArc, \n"
		"    bool bMessageBoxInt) -> int\n"
		""},
	 { (char *)"BOARD_AreaPolygonModified", _wrap_BOARD_AreaPolygonModified, METH_VARARGS, (char *)"\n"
		"BOARD_AreaPolygonModified(BOARD self, PICKED_ITEMS_LIST * aModifiedZonesList, ZONE_CONTAINER * modified_area, \n"
		"    bool bMessageBoxArc, bool bMessageBoxInt) -> int\n"
		""},
	 { (char *)"BOARD_CombineAllAreasInNet", _wrap_BOARD_CombineAllAreasInNet, METH_VARARGS, (char *)"BOARD_CombineAllAreasInNet(BOARD self, PICKED_ITEMS_LIST * aDeletedList, int aNetCode, bool bMessageBox, bool bUseUtility) -> int"},
	 { (char *)"BOARD_RemoveArea", _wrap_BOARD_RemoveArea, METH_VARARGS, (char *)"BOARD_RemoveArea(BOARD self, PICKED_ITEMS_LIST * aDeletedList, ZONE_CONTAINER * area_to_remove)"},
	 { (char *)"BOARD_TestAreaIntersections", _wrap_BOARD_TestAreaIntersections, METH_VARARGS, (char *)"BOARD_TestAreaIntersections(BOARD self, ZONE_CONTAINER * area_to_test) -> bool"},
	 { (char *)"BOARD_TestAreaIntersection", _wrap_BOARD_TestAreaIntersection, METH_VARARGS, (char *)"BOARD_TestAreaIntersection(BOARD self, ZONE_CONTAINER * area_ref, ZONE_CONTAINER * area_to_test) -> int"},
	 { (char *)"BOARD_CombineAreas", _wrap_BOARD_CombineAreas, METH_VARARGS, (char *)"BOARD_CombineAreas(BOARD self, PICKED_ITEMS_LIST * aDeletedList, ZONE_CONTAINER * area_ref, ZONE_CONTAINER * area_to_combine) -> int"},
	 { (char *)"BOARD_Test_Drc_Areas_Outlines_To_Areas_Outlines", _wrap_BOARD_Test_Drc_Areas_Outlines_To_Areas_Outlines, METH_VARARGS, (char *)"BOARD_Test_Drc_Areas_Outlines_To_Areas_Outlines(BOARD self, ZONE_CONTAINER * aArea_To_Examine, bool aCreate_Markers) -> int"},
	 { (char *)"BOARD_Test_Connections_To_Copper_Areas", _wrap_BOARD_Test_Connections_To_Copper_Areas, METH_VARARGS, (char *)"\n"
		"Test_Connections_To_Copper_Areas(int aNetcode=-1)\n"
		"BOARD_Test_Connections_To_Copper_Areas(BOARD self)\n"
		""},
	 { (char *)"BOARD_GetViaByPosition", _wrap_BOARD_GetViaByPosition, METH_VARARGS, (char *)"\n"
		"GetViaByPosition(wxPoint aPosition, int aLayerMask=-1) -> TRACK\n"
		"BOARD_GetViaByPosition(BOARD self, wxPoint aPosition) -> TRACK\n"
		""},
	 { (char *)"BOARD_GetPadFast", _wrap_BOARD_GetPadFast, METH_VARARGS, (char *)"BOARD_GetPadFast(BOARD self, wxPoint aPosition, int aLayer) -> D_PAD"},
	 { (char *)"BOARD_GetPad", _wrap_BOARD_GetPad, METH_VARARGS, (char *)"\n"
		"GetPad(unsigned int aIndex) -> D_PAD\n"
		"GetPad(wxPoint aPosition, int aLayerMask=ALL_LAYERS) -> D_PAD\n"
		"GetPad(wxPoint aPosition) -> D_PAD\n"
		"GetPad(TRACK aTrace, int aEndPoint) -> D_PAD\n"
		"BOARD_GetPad(BOARD self, std::vector< D_PAD *,std::allocator< D_PAD * > > & aPadList, wxPoint aPosition, \n"
		"    int aLayerMask) -> D_PAD\n"
		""},
	 { (char *)"BOARD_GetSortedPadListByXthenYCoord", _wrap_BOARD_GetSortedPadListByXthenYCoord, METH_VARARGS, (char *)"\n"
		"GetSortedPadListByXthenYCoord(std::vector< D_PAD *,std::allocator< D_PAD * > > & aVector, int aNetCode=-1)\n"
		"BOARD_GetSortedPadListByXthenYCoord(BOARD self, std::vector< D_PAD *,std::allocator< D_PAD * > > & aVector)\n"
		""},
	 { (char *)"BOARD_GetTrace", _wrap_BOARD_GetTrace, METH_VARARGS, (char *)"BOARD_GetTrace(BOARD self, TRACK aTrace, wxPoint aPosition, int aLayerMask) -> TRACK"},
	 { (char *)"BOARD_MarkTrace", _wrap_BOARD_MarkTrace, METH_VARARGS, (char *)"BOARD_MarkTrace(BOARD self, TRACK aTrace, int * aCount, int * aTraceLength, int * aDieLength, bool aReorder) -> TRACK"},
	 { (char *)"BOARD_GetFootprint", _wrap_BOARD_GetFootprint, METH_VARARGS, (char *)"\n"
		"GetFootprint(wxPoint aPosition, int aActiveLayer, bool aVisibleOnly, bool aIgnoreLocked=False) -> MODULE\n"
		"BOARD_GetFootprint(BOARD self, wxPoint aPosition, int aActiveLayer, bool aVisibleOnly) -> MODULE\n"
		""},
	 { (char *)"BOARD_GetLockPoint", _wrap_BOARD_GetLockPoint, METH_VARARGS, (char *)"BOARD_GetLockPoint(BOARD self, wxPoint aPosition, int aLayerMask) -> BOARD_CONNECTED_ITEM"},
	 { (char *)"BOARD_CreateLockPoint", _wrap_BOARD_CreateLockPoint, METH_VARARGS, (char *)"BOARD_CreateLockPoint(BOARD self, wxPoint aPosition, TRACK aSegment, PICKED_ITEMS_LIST * aList) -> TRACK"},
	 { (char *)"BOARD_swigregister", BOARD_swigregister, METH_VARARGS, NULL},
	 { (char *)"MODULE_m_Orient_set", _wrap_MODULE_m_Orient_set, METH_VARARGS, (char *)"MODULE_m_Orient_set(MODULE self, double m_Orient)"},
	 { (char *)"MODULE_m_Orient_get", _wrap_MODULE_m_Orient_get, METH_VARARGS, (char *)"MODULE_m_Orient_get(MODULE self) -> double"},
	 { (char *)"MODULE_m_Pos_set", _wrap_MODULE_m_Pos_set, METH_VARARGS, (char *)"MODULE_m_Pos_set(MODULE self, wxPoint m_Pos)"},
	 { (char *)"MODULE_m_Pos_get", _wrap_MODULE_m_Pos_get, METH_VARARGS, (char *)"MODULE_m_Pos_get(MODULE self) -> wxPoint"},
	 { (char *)"MODULE_m_Pads_set", _wrap_MODULE_m_Pads_set, METH_VARARGS, (char *)"MODULE_m_Pads_set(MODULE self, PAD_List m_Pads)"},
	 { (char *)"MODULE_m_Pads_get", _wrap_MODULE_m_Pads_get, METH_VARARGS, (char *)"MODULE_m_Pads_get(MODULE self) -> PAD_List"},
	 { (char *)"MODULE_m_Drawings_set", _wrap_MODULE_m_Drawings_set, METH_VARARGS, (char *)"MODULE_m_Drawings_set(MODULE self, BOARD_ITEM_List m_Drawings)"},
	 { (char *)"MODULE_m_Drawings_get", _wrap_MODULE_m_Drawings_get, METH_VARARGS, (char *)"MODULE_m_Drawings_get(MODULE self) -> BOARD_ITEM_List"},
	 { (char *)"MODULE_m_3D_Drawings_set", _wrap_MODULE_m_3D_Drawings_set, METH_VARARGS, (char *)"MODULE_m_3D_Drawings_set(MODULE self, DLIST< S3D_MASTER > * m_3D_Drawings)"},
	 { (char *)"MODULE_m_3D_Drawings_get", _wrap_MODULE_m_3D_Drawings_get, METH_VARARGS, (char *)"MODULE_m_3D_Drawings_get(MODULE self) -> DLIST< S3D_MASTER > *"},
	 { (char *)"MODULE_m_Reference_set", _wrap_MODULE_m_Reference_set, METH_VARARGS, (char *)"MODULE_m_Reference_set(MODULE self, TEXTE_MODULE m_Reference)"},
	 { (char *)"MODULE_m_Reference_get", _wrap_MODULE_m_Reference_get, METH_VARARGS, (char *)"MODULE_m_Reference_get(MODULE self) -> TEXTE_MODULE"},
	 { (char *)"MODULE_m_Value_set", _wrap_MODULE_m_Value_set, METH_VARARGS, (char *)"MODULE_m_Value_set(MODULE self, TEXTE_MODULE m_Value)"},
	 { (char *)"MODULE_m_Value_get", _wrap_MODULE_m_Value_get, METH_VARARGS, (char *)"MODULE_m_Value_get(MODULE self) -> TEXTE_MODULE"},
	 { (char *)"MODULE_m_LibRef_set", _wrap_MODULE_m_LibRef_set, METH_VARARGS, (char *)"MODULE_m_LibRef_set(MODULE self, wxString m_LibRef)"},
	 { (char *)"MODULE_m_LibRef_get", _wrap_MODULE_m_LibRef_get, METH_VARARGS, (char *)"MODULE_m_LibRef_get(MODULE self) -> wxString"},
	 { (char *)"MODULE_m_Attributs_set", _wrap_MODULE_m_Attributs_set, METH_VARARGS, (char *)"MODULE_m_Attributs_set(MODULE self, int m_Attributs)"},
	 { (char *)"MODULE_m_Attributs_get", _wrap_MODULE_m_Attributs_get, METH_VARARGS, (char *)"MODULE_m_Attributs_get(MODULE self) -> int"},
	 { (char *)"MODULE_flag_set", _wrap_MODULE_flag_set, METH_VARARGS, (char *)"MODULE_flag_set(MODULE self, int flag)"},
	 { (char *)"MODULE_flag_get", _wrap_MODULE_flag_get, METH_VARARGS, (char *)"MODULE_flag_get(MODULE self) -> int"},
	 { (char *)"MODULE_m_ModuleStatus_set", _wrap_MODULE_m_ModuleStatus_set, METH_VARARGS, (char *)"MODULE_m_ModuleStatus_set(MODULE self, int m_ModuleStatus)"},
	 { (char *)"MODULE_m_ModuleStatus_get", _wrap_MODULE_m_ModuleStatus_get, METH_VARARGS, (char *)"MODULE_m_ModuleStatus_get(MODULE self) -> int"},
	 { (char *)"MODULE_m_BoundaryBox_set", _wrap_MODULE_m_BoundaryBox_set, METH_VARARGS, (char *)"MODULE_m_BoundaryBox_set(MODULE self, EDA_RECT m_BoundaryBox)"},
	 { (char *)"MODULE_m_BoundaryBox_get", _wrap_MODULE_m_BoundaryBox_get, METH_VARARGS, (char *)"MODULE_m_BoundaryBox_get(MODULE self) -> EDA_RECT"},
	 { (char *)"MODULE_m_PadNum_set", _wrap_MODULE_m_PadNum_set, METH_VARARGS, (char *)"MODULE_m_PadNum_set(MODULE self, int m_PadNum)"},
	 { (char *)"MODULE_m_PadNum_get", _wrap_MODULE_m_PadNum_get, METH_VARARGS, (char *)"MODULE_m_PadNum_get(MODULE self) -> int"},
	 { (char *)"MODULE_m_AltPadNum_set", _wrap_MODULE_m_AltPadNum_set, METH_VARARGS, (char *)"MODULE_m_AltPadNum_set(MODULE self, int m_AltPadNum)"},
	 { (char *)"MODULE_m_AltPadNum_get", _wrap_MODULE_m_AltPadNum_get, METH_VARARGS, (char *)"MODULE_m_AltPadNum_get(MODULE self) -> int"},
	 { (char *)"MODULE_m_CntRot90_set", _wrap_MODULE_m_CntRot90_set, METH_VARARGS, (char *)"MODULE_m_CntRot90_set(MODULE self, int m_CntRot90)"},
	 { (char *)"MODULE_m_CntRot90_get", _wrap_MODULE_m_CntRot90_get, METH_VARARGS, (char *)"MODULE_m_CntRot90_get(MODULE self) -> int"},
	 { (char *)"MODULE_m_CntRot180_set", _wrap_MODULE_m_CntRot180_set, METH_VARARGS, (char *)"MODULE_m_CntRot180_set(MODULE self, int m_CntRot180)"},
	 { (char *)"MODULE_m_CntRot180_get", _wrap_MODULE_m_CntRot180_get, METH_VARARGS, (char *)"MODULE_m_CntRot180_get(MODULE self) -> int"},
	 { (char *)"MODULE_m_Ext_set", _wrap_MODULE_m_Ext_set, METH_VARARGS, (char *)"MODULE_m_Ext_set(MODULE self, wxSize m_Ext)"},
	 { (char *)"MODULE_m_Ext_get", _wrap_MODULE_m_Ext_get, METH_VARARGS, (char *)"MODULE_m_Ext_get(MODULE self) -> wxSize"},
	 { (char *)"MODULE_m_Surface_set", _wrap_MODULE_m_Surface_set, METH_VARARGS, (char *)"MODULE_m_Surface_set(MODULE self, double m_Surface)"},
	 { (char *)"MODULE_m_Surface_get", _wrap_MODULE_m_Surface_get, METH_VARARGS, (char *)"MODULE_m_Surface_get(MODULE self) -> double"},
	 { (char *)"MODULE_m_Link_set", _wrap_MODULE_m_Link_set, METH_VARARGS, (char *)"MODULE_m_Link_set(MODULE self, time_t m_Link)"},
	 { (char *)"MODULE_m_Link_get", _wrap_MODULE_m_Link_get, METH_VARARGS, (char *)"MODULE_m_Link_get(MODULE self) -> time_t"},
	 { (char *)"MODULE_m_LastEdit_Time_set", _wrap_MODULE_m_LastEdit_Time_set, METH_VARARGS, (char *)"MODULE_m_LastEdit_Time_set(MODULE self, long m_LastEdit_Time)"},
	 { (char *)"MODULE_m_LastEdit_Time_get", _wrap_MODULE_m_LastEdit_Time_get, METH_VARARGS, (char *)"MODULE_m_LastEdit_Time_get(MODULE self) -> long"},
	 { (char *)"MODULE_m_Path_set", _wrap_MODULE_m_Path_set, METH_VARARGS, (char *)"MODULE_m_Path_set(MODULE self, wxString m_Path)"},
	 { (char *)"MODULE_m_Path_get", _wrap_MODULE_m_Path_get, METH_VARARGS, (char *)"MODULE_m_Path_get(MODULE self) -> wxString"},
	 { (char *)"MODULE_m_Doc_set", _wrap_MODULE_m_Doc_set, METH_VARARGS, (char *)"MODULE_m_Doc_set(MODULE self, wxString m_Doc)"},
	 { (char *)"MODULE_m_Doc_get", _wrap_MODULE_m_Doc_get, METH_VARARGS, (char *)"MODULE_m_Doc_get(MODULE self) -> wxString"},
	 { (char *)"MODULE_m_KeyWord_set", _wrap_MODULE_m_KeyWord_set, METH_VARARGS, (char *)"MODULE_m_KeyWord_set(MODULE self, wxString m_KeyWord)"},
	 { (char *)"MODULE_m_KeyWord_get", _wrap_MODULE_m_KeyWord_get, METH_VARARGS, (char *)"MODULE_m_KeyWord_get(MODULE self) -> wxString"},
	 { (char *)"MODULE_m_ZoneConnection_set", _wrap_MODULE_m_ZoneConnection_set, METH_VARARGS, (char *)"MODULE_m_ZoneConnection_set(MODULE self, ZoneConnection m_ZoneConnection)"},
	 { (char *)"MODULE_m_ZoneConnection_get", _wrap_MODULE_m_ZoneConnection_get, METH_VARARGS, (char *)"MODULE_m_ZoneConnection_get(MODULE self) -> ZoneConnection"},
	 { (char *)"MODULE_m_ThermalWidth_set", _wrap_MODULE_m_ThermalWidth_set, METH_VARARGS, (char *)"MODULE_m_ThermalWidth_set(MODULE self, int m_ThermalWidth)"},
	 { (char *)"MODULE_m_ThermalWidth_get", _wrap_MODULE_m_ThermalWidth_get, METH_VARARGS, (char *)"MODULE_m_ThermalWidth_get(MODULE self) -> int"},
	 { (char *)"MODULE_m_ThermalGap_set", _wrap_MODULE_m_ThermalGap_set, METH_VARARGS, (char *)"MODULE_m_ThermalGap_set(MODULE self, int m_ThermalGap)"},
	 { (char *)"MODULE_m_ThermalGap_get", _wrap_MODULE_m_ThermalGap_get, METH_VARARGS, (char *)"MODULE_m_ThermalGap_get(MODULE self) -> int"},
	 { (char *)"new_MODULE", _wrap_new_MODULE, METH_VARARGS, (char *)"\n"
		"MODULE(BOARD parent)\n"
		"new_MODULE(MODULE aModule) -> MODULE\n"
		""},
	 { (char *)"delete_MODULE", _wrap_delete_MODULE, METH_VARARGS, (char *)"delete_MODULE(MODULE self)"},
	 { (char *)"MODULE_Next", _wrap_MODULE_Next, METH_VARARGS, (char *)"MODULE_Next(MODULE self) -> MODULE"},
	 { (char *)"MODULE_Back", _wrap_MODULE_Back, METH_VARARGS, (char *)"MODULE_Back(MODULE self) -> MODULE"},
	 { (char *)"MODULE_Copy", _wrap_MODULE_Copy, METH_VARARGS, (char *)"MODULE_Copy(MODULE self, MODULE Module)"},
	 { (char *)"MODULE_CalculateBoundingBox", _wrap_MODULE_CalculateBoundingBox, METH_VARARGS, (char *)"MODULE_CalculateBoundingBox(MODULE self)"},
	 { (char *)"MODULE_GetFootPrintRect", _wrap_MODULE_GetFootPrintRect, METH_VARARGS, (char *)"MODULE_GetFootPrintRect(MODULE self) -> EDA_RECT"},
	 { (char *)"MODULE_GetBoundingBox", _wrap_MODULE_GetBoundingBox, METH_VARARGS, (char *)"MODULE_GetBoundingBox(MODULE self) -> EDA_RECT"},
	 { (char *)"MODULE_SetPosition", _wrap_MODULE_SetPosition, METH_VARARGS, (char *)"MODULE_SetPosition(MODULE self, wxPoint aPos)"},
	 { (char *)"MODULE_GetPosition", _wrap_MODULE_GetPosition, METH_VARARGS, (char *)"MODULE_GetPosition(MODULE self) -> wxPoint"},
	 { (char *)"MODULE_SetOrientation", _wrap_MODULE_SetOrientation, METH_VARARGS, (char *)"MODULE_SetOrientation(MODULE self, double newangle)"},
	 { (char *)"MODULE_GetOrientation", _wrap_MODULE_GetOrientation, METH_VARARGS, (char *)"MODULE_GetOrientation(MODULE self) -> double"},
	 { (char *)"MODULE_GetLibRef", _wrap_MODULE_GetLibRef, METH_VARARGS, (char *)"MODULE_GetLibRef(MODULE self) -> wxString const &"},
	 { (char *)"MODULE_SetLibRef", _wrap_MODULE_SetLibRef, METH_VARARGS, (char *)"MODULE_SetLibRef(MODULE self, wxString const & aLibRef)"},
	 { (char *)"MODULE_GetDescription", _wrap_MODULE_GetDescription, METH_VARARGS, (char *)"MODULE_GetDescription(MODULE self) -> wxString const &"},
	 { (char *)"MODULE_SetDescription", _wrap_MODULE_SetDescription, METH_VARARGS, (char *)"MODULE_SetDescription(MODULE self, wxString const & aDoc)"},
	 { (char *)"MODULE_GetKeywords", _wrap_MODULE_GetKeywords, METH_VARARGS, (char *)"MODULE_GetKeywords(MODULE self) -> wxString const &"},
	 { (char *)"MODULE_SetKeywords", _wrap_MODULE_SetKeywords, METH_VARARGS, (char *)"MODULE_SetKeywords(MODULE self, wxString const & aKeywords)"},
	 { (char *)"MODULE_GetPath", _wrap_MODULE_GetPath, METH_VARARGS, (char *)"MODULE_GetPath(MODULE self) -> wxString const &"},
	 { (char *)"MODULE_SetPath", _wrap_MODULE_SetPath, METH_VARARGS, (char *)"MODULE_SetPath(MODULE self, wxString const & aPath)"},
	 { (char *)"MODULE_GetLocalSolderMaskMargin", _wrap_MODULE_GetLocalSolderMaskMargin, METH_VARARGS, (char *)"MODULE_GetLocalSolderMaskMargin(MODULE self) -> int"},
	 { (char *)"MODULE_SetLocalSolderMaskMargin", _wrap_MODULE_SetLocalSolderMaskMargin, METH_VARARGS, (char *)"MODULE_SetLocalSolderMaskMargin(MODULE self, int aMargin)"},
	 { (char *)"MODULE_GetLocalClearance", _wrap_MODULE_GetLocalClearance, METH_VARARGS, (char *)"MODULE_GetLocalClearance(MODULE self) -> int"},
	 { (char *)"MODULE_SetLocalClearance", _wrap_MODULE_SetLocalClearance, METH_VARARGS, (char *)"MODULE_SetLocalClearance(MODULE self, int aClearance)"},
	 { (char *)"MODULE_GetLocalSolderPasteMargin", _wrap_MODULE_GetLocalSolderPasteMargin, METH_VARARGS, (char *)"MODULE_GetLocalSolderPasteMargin(MODULE self) -> int"},
	 { (char *)"MODULE_SetLocalSolderPasteMargin", _wrap_MODULE_SetLocalSolderPasteMargin, METH_VARARGS, (char *)"MODULE_SetLocalSolderPasteMargin(MODULE self, int aMargin)"},
	 { (char *)"MODULE_GetLocalSolderPasteMarginRatio", _wrap_MODULE_GetLocalSolderPasteMarginRatio, METH_VARARGS, (char *)"MODULE_GetLocalSolderPasteMarginRatio(MODULE self) -> double"},
	 { (char *)"MODULE_SetLocalSolderPasteMarginRatio", _wrap_MODULE_SetLocalSolderPasteMarginRatio, METH_VARARGS, (char *)"MODULE_SetLocalSolderPasteMarginRatio(MODULE self, double aRatio)"},
	 { (char *)"MODULE_SetZoneConnection", _wrap_MODULE_SetZoneConnection, METH_VARARGS, (char *)"MODULE_SetZoneConnection(MODULE self, ZoneConnection aType)"},
	 { (char *)"MODULE_GetZoneConnection", _wrap_MODULE_GetZoneConnection, METH_VARARGS, (char *)"MODULE_GetZoneConnection(MODULE self) -> ZoneConnection"},
	 { (char *)"MODULE_SetThermalWidth", _wrap_MODULE_SetThermalWidth, METH_VARARGS, (char *)"MODULE_SetThermalWidth(MODULE self, int aWidth)"},
	 { (char *)"MODULE_GetThermalWidth", _wrap_MODULE_GetThermalWidth, METH_VARARGS, (char *)"MODULE_GetThermalWidth(MODULE self) -> int"},
	 { (char *)"MODULE_SetThermalGap", _wrap_MODULE_SetThermalGap, METH_VARARGS, (char *)"MODULE_SetThermalGap(MODULE self, int aGap)"},
	 { (char *)"MODULE_GetThermalGap", _wrap_MODULE_GetThermalGap, METH_VARARGS, (char *)"MODULE_GetThermalGap(MODULE self) -> int"},
	 { (char *)"MODULE_GetAttributes", _wrap_MODULE_GetAttributes, METH_VARARGS, (char *)"MODULE_GetAttributes(MODULE self) -> int"},
	 { (char *)"MODULE_SetAttributes", _wrap_MODULE_SetAttributes, METH_VARARGS, (char *)"MODULE_SetAttributes(MODULE self, int aAttributes)"},
	 { (char *)"MODULE_Move", _wrap_MODULE_Move, METH_VARARGS, (char *)"MODULE_Move(MODULE self, wxPoint aMoveVector)"},
	 { (char *)"MODULE_Rotate", _wrap_MODULE_Rotate, METH_VARARGS, (char *)"MODULE_Rotate(MODULE self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"MODULE_Flip", _wrap_MODULE_Flip, METH_VARARGS, (char *)"MODULE_Flip(MODULE self, wxPoint aCentre)"},
	 { (char *)"MODULE_IsLocked", _wrap_MODULE_IsLocked, METH_VARARGS, (char *)"MODULE_IsLocked(MODULE self) -> bool"},
	 { (char *)"MODULE_SetLocked", _wrap_MODULE_SetLocked, METH_VARARGS, (char *)"MODULE_SetLocked(MODULE self, bool isLocked)"},
	 { (char *)"MODULE_IsPlaced", _wrap_MODULE_IsPlaced, METH_VARARGS, (char *)"MODULE_IsPlaced(MODULE self) -> bool"},
	 { (char *)"MODULE_SetIsPlaced", _wrap_MODULE_SetIsPlaced, METH_VARARGS, (char *)"MODULE_SetIsPlaced(MODULE self, bool isPlaced)"},
	 { (char *)"MODULE_SetLastEditTime", _wrap_MODULE_SetLastEditTime, METH_VARARGS, (char *)"MODULE_SetLastEditTime(MODULE self, long aTime)"},
	 { (char *)"MODULE_GetLastEditTime", _wrap_MODULE_GetLastEditTime, METH_VARARGS, (char *)"MODULE_GetLastEditTime(MODULE self) -> long"},
	 { (char *)"MODULE_Read_GPCB_Descr", _wrap_MODULE_Read_GPCB_Descr, METH_VARARGS, (char *)"MODULE_Read_GPCB_Descr(MODULE self, wxString const & CmpFullFileName) -> bool"},
	 { (char *)"MODULE_Draw", _wrap_MODULE_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)\n"
		"MODULE_Draw(MODULE self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)\n"
		""},
	 { (char *)"MODULE_Draw3D", _wrap_MODULE_Draw3D, METH_VARARGS, (char *)"MODULE_Draw3D(MODULE self, EDA_3D_CANVAS * glcanvas)"},
	 { (char *)"MODULE_DrawEdgesOnly", _wrap_MODULE_DrawEdgesOnly, METH_VARARGS, (char *)"MODULE_DrawEdgesOnly(MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, wxPoint offset, int draw_mode)"},
	 { (char *)"MODULE_DrawAncre", _wrap_MODULE_DrawAncre, METH_VARARGS, (char *)"MODULE_DrawAncre(MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, wxPoint offset, int dim_ancre, int draw_mode)"},
	 { (char *)"MODULE_DisplayInfo", _wrap_MODULE_DisplayInfo, METH_VARARGS, (char *)"MODULE_DisplayInfo(MODULE self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"MODULE_HitTest", _wrap_MODULE_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"MODULE_HitTest(MODULE self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"MODULE_GetReference", _wrap_MODULE_GetReference, METH_VARARGS, (char *)"MODULE_GetReference(MODULE self) -> wxString const &"},
	 { (char *)"MODULE_SetReference", _wrap_MODULE_SetReference, METH_VARARGS, (char *)"MODULE_SetReference(MODULE self, wxString const & aReference)"},
	 { (char *)"MODULE_GetValue", _wrap_MODULE_GetValue, METH_VARARGS, (char *)"MODULE_GetValue(MODULE self) -> wxString const &"},
	 { (char *)"MODULE_SetValue", _wrap_MODULE_SetValue, METH_VARARGS, (char *)"MODULE_SetValue(MODULE self, wxString const & aValue)"},
	 { (char *)"MODULE_Value", _wrap_MODULE_Value, METH_VARARGS, (char *)"MODULE_Value(MODULE self) -> TEXTE_MODULE"},
	 { (char *)"MODULE_Reference", _wrap_MODULE_Reference, METH_VARARGS, (char *)"MODULE_Reference(MODULE self) -> TEXTE_MODULE"},
	 { (char *)"MODULE_FindPadByName", _wrap_MODULE_FindPadByName, METH_VARARGS, (char *)"MODULE_FindPadByName(MODULE self, wxString const & aPadName) -> D_PAD"},
	 { (char *)"MODULE_GetPad", _wrap_MODULE_GetPad, METH_VARARGS, (char *)"\n"
		"GetPad(wxPoint aPosition, int aLayerMask=ALL_LAYERS) -> D_PAD\n"
		"MODULE_GetPad(MODULE self, wxPoint aPosition) -> D_PAD\n"
		""},
	 { (char *)"MODULE_GetPadCount", _wrap_MODULE_GetPadCount, METH_VARARGS, (char *)"MODULE_GetPadCount(MODULE self) -> unsigned int"},
	 { (char *)"MODULE_Add3DModel", _wrap_MODULE_Add3DModel, METH_VARARGS, (char *)"MODULE_Add3DModel(MODULE self, S3D_MASTER * a3DModel)"},
	 { (char *)"MODULE_AddPad", _wrap_MODULE_AddPad, METH_VARARGS, (char *)"MODULE_AddPad(MODULE self, D_PAD aPad)"},
	 { (char *)"MODULE_Visit", _wrap_MODULE_Visit, METH_VARARGS, (char *)"MODULE_Visit(MODULE self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"MODULE_GetClass", _wrap_MODULE_GetClass, METH_VARARGS, (char *)"MODULE_GetClass(MODULE self) -> wxString"},
	 { (char *)"MODULE_GetSelectMenuText", _wrap_MODULE_GetSelectMenuText, METH_VARARGS, (char *)"MODULE_GetSelectMenuText(MODULE self) -> wxString"},
	 { (char *)"MODULE_GetMenuImage", _wrap_MODULE_GetMenuImage, METH_VARARGS, (char *)"MODULE_GetMenuImage(MODULE self) -> BITMAP_DEF"},
	 { (char *)"MODULE_Clone", _wrap_MODULE_Clone, METH_VARARGS, (char *)"MODULE_Clone(MODULE self) -> EDA_ITEM"},
	 { (char *)"MODULE_swigregister", MODULE_swigregister, METH_VARARGS, NULL},
	 { (char *)"GetTrace", _wrap_GetTrace, METH_VARARGS, (char *)"GetTrace(TRACK aStartTrace, TRACK aEndTrace, wxPoint aPosition, int aLayerMask) -> TRACK"},
	 { (char *)"TRACK_m_Width_set", _wrap_TRACK_m_Width_set, METH_VARARGS, (char *)"TRACK_m_Width_set(TRACK self, int m_Width)"},
	 { (char *)"TRACK_m_Width_get", _wrap_TRACK_m_Width_get, METH_VARARGS, (char *)"TRACK_m_Width_get(TRACK self) -> int"},
	 { (char *)"TRACK_m_Start_set", _wrap_TRACK_m_Start_set, METH_VARARGS, (char *)"TRACK_m_Start_set(TRACK self, wxPoint m_Start)"},
	 { (char *)"TRACK_m_Start_get", _wrap_TRACK_m_Start_get, METH_VARARGS, (char *)"TRACK_m_Start_get(TRACK self) -> wxPoint"},
	 { (char *)"TRACK_m_End_set", _wrap_TRACK_m_End_set, METH_VARARGS, (char *)"TRACK_m_End_set(TRACK self, wxPoint m_End)"},
	 { (char *)"TRACK_m_End_get", _wrap_TRACK_m_End_get, METH_VARARGS, (char *)"TRACK_m_End_get(TRACK self) -> wxPoint"},
	 { (char *)"TRACK_m_Shape_set", _wrap_TRACK_m_Shape_set, METH_VARARGS, (char *)"TRACK_m_Shape_set(TRACK self, int m_Shape)"},
	 { (char *)"TRACK_m_Shape_get", _wrap_TRACK_m_Shape_get, METH_VARARGS, (char *)"TRACK_m_Shape_get(TRACK self) -> int"},
	 { (char *)"TRACK_start_set", _wrap_TRACK_start_set, METH_VARARGS, (char *)"TRACK_start_set(TRACK self, BOARD_CONNECTED_ITEM start)"},
	 { (char *)"TRACK_start_get", _wrap_TRACK_start_get, METH_VARARGS, (char *)"TRACK_start_get(TRACK self) -> BOARD_CONNECTED_ITEM"},
	 { (char *)"TRACK_end_set", _wrap_TRACK_end_set, METH_VARARGS, (char *)"TRACK_end_set(TRACK self, BOARD_CONNECTED_ITEM end)"},
	 { (char *)"TRACK_end_get", _wrap_TRACK_end_get, METH_VARARGS, (char *)"TRACK_end_get(TRACK self) -> BOARD_CONNECTED_ITEM"},
	 { (char *)"TRACK_m_Param_set", _wrap_TRACK_m_Param_set, METH_VARARGS, (char *)"TRACK_m_Param_set(TRACK self, double m_Param)"},
	 { (char *)"TRACK_m_Param_get", _wrap_TRACK_m_Param_get, METH_VARARGS, (char *)"TRACK_m_Param_get(TRACK self) -> double"},
	 { (char *)"new_TRACK", _wrap_new_TRACK, METH_VARARGS, (char *)"\n"
		"TRACK(BOARD_ITEM aParent, KICAD_T idtype=PCB_TRACE_T)\n"
		"new_TRACK(BOARD_ITEM aParent) -> TRACK\n"
		""},
	 { (char *)"TRACK_Next", _wrap_TRACK_Next, METH_VARARGS, (char *)"TRACK_Next(TRACK self) -> TRACK"},
	 { (char *)"TRACK_Back", _wrap_TRACK_Back, METH_VARARGS, (char *)"TRACK_Back(TRACK self) -> TRACK"},
	 { (char *)"TRACK_Move", _wrap_TRACK_Move, METH_VARARGS, (char *)"TRACK_Move(TRACK self, wxPoint aMoveVector)"},
	 { (char *)"TRACK_Rotate", _wrap_TRACK_Rotate, METH_VARARGS, (char *)"TRACK_Rotate(TRACK self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"TRACK_Flip", _wrap_TRACK_Flip, METH_VARARGS, (char *)"TRACK_Flip(TRACK self, wxPoint aCentre)"},
	 { (char *)"TRACK_SetPosition", _wrap_TRACK_SetPosition, METH_VARARGS, (char *)"TRACK_SetPosition(TRACK self, wxPoint aPos)"},
	 { (char *)"TRACK_GetPosition", _wrap_TRACK_GetPosition, METH_VARARGS, (char *)"TRACK_GetPosition(TRACK self) -> wxPoint"},
	 { (char *)"TRACK_SetWidth", _wrap_TRACK_SetWidth, METH_VARARGS, (char *)"TRACK_SetWidth(TRACK self, int aWidth)"},
	 { (char *)"TRACK_GetWidth", _wrap_TRACK_GetWidth, METH_VARARGS, (char *)"TRACK_GetWidth(TRACK self) -> int"},
	 { (char *)"TRACK_SetEnd", _wrap_TRACK_SetEnd, METH_VARARGS, (char *)"TRACK_SetEnd(TRACK self, wxPoint aEnd)"},
	 { (char *)"TRACK_GetEnd", _wrap_TRACK_GetEnd, METH_VARARGS, (char *)"TRACK_GetEnd(TRACK self) -> wxPoint"},
	 { (char *)"TRACK_SetStart", _wrap_TRACK_SetStart, METH_VARARGS, (char *)"TRACK_SetStart(TRACK self, wxPoint aStart)"},
	 { (char *)"TRACK_GetStart", _wrap_TRACK_GetStart, METH_VARARGS, (char *)"TRACK_GetStart(TRACK self) -> wxPoint"},
	 { (char *)"TRACK_GetBoundingBox", _wrap_TRACK_GetBoundingBox, METH_VARARGS, (char *)"TRACK_GetBoundingBox(TRACK self) -> EDA_RECT"},
	 { (char *)"TRACK_GetBestInsertPoint", _wrap_TRACK_GetBestInsertPoint, METH_VARARGS, (char *)"TRACK_GetBestInsertPoint(TRACK self, BOARD aPcb) -> TRACK"},
	 { (char *)"TRACK_GetStartNetCode", _wrap_TRACK_GetStartNetCode, METH_VARARGS, (char *)"TRACK_GetStartNetCode(TRACK self, int NetCode) -> TRACK"},
	 { (char *)"TRACK_GetEndNetCode", _wrap_TRACK_GetEndNetCode, METH_VARARGS, (char *)"TRACK_GetEndNetCode(TRACK self, int NetCode) -> TRACK"},
	 { (char *)"TRACK_GetLength", _wrap_TRACK_GetLength, METH_VARARGS, (char *)"TRACK_GetLength(TRACK self) -> double"},
	 { (char *)"TRACK_Draw", _wrap_TRACK_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)\n"
		"TRACK_Draw(TRACK self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"TRACK_GetShape", _wrap_TRACK_GetShape, METH_VARARGS, (char *)"TRACK_GetShape(TRACK self) -> int"},
	 { (char *)"TRACK_SetShape", _wrap_TRACK_SetShape, METH_VARARGS, (char *)"TRACK_SetShape(TRACK self, int aShape)"},
	 { (char *)"TRACK_TransformShapeWithClearanceToPolygon", _wrap_TRACK_TransformShapeWithClearanceToPolygon, METH_VARARGS, (char *)"\n"
		"TRACK_TransformShapeWithClearanceToPolygon(TRACK self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, int aClearanceValue, \n"
		"    int aCircleToSegmentsCount, double aCorrectionFactor)\n"
		""},
	 { (char *)"TRACK_SetDrill", _wrap_TRACK_SetDrill, METH_VARARGS, (char *)"TRACK_SetDrill(TRACK self, int aDrill)"},
	 { (char *)"TRACK_GetDrill", _wrap_TRACK_GetDrill, METH_VARARGS, (char *)"TRACK_GetDrill(TRACK self) -> int"},
	 { (char *)"TRACK_GetDrillValue", _wrap_TRACK_GetDrillValue, METH_VARARGS, (char *)"TRACK_GetDrillValue(TRACK self) -> int"},
	 { (char *)"TRACK_SetDrillDefault", _wrap_TRACK_SetDrillDefault, METH_VARARGS, (char *)"TRACK_SetDrillDefault(TRACK self)"},
	 { (char *)"TRACK_IsDrillDefault", _wrap_TRACK_IsDrillDefault, METH_VARARGS, (char *)"TRACK_IsDrillDefault(TRACK self) -> bool"},
	 { (char *)"TRACK_ReturnMaskLayer", _wrap_TRACK_ReturnMaskLayer, METH_VARARGS, (char *)"TRACK_ReturnMaskLayer(TRACK self) -> int"},
	 { (char *)"TRACK_IsPointOnEnds", _wrap_TRACK_IsPointOnEnds, METH_VARARGS, (char *)"\n"
		"IsPointOnEnds(wxPoint point, int min_dist=0) -> int\n"
		"TRACK_IsPointOnEnds(TRACK self, wxPoint point) -> int\n"
		""},
	 { (char *)"TRACK_IsNull", _wrap_TRACK_IsNull, METH_VARARGS, (char *)"TRACK_IsNull(TRACK self) -> bool"},
	 { (char *)"TRACK_DisplayInfo", _wrap_TRACK_DisplayInfo, METH_VARARGS, (char *)"TRACK_DisplayInfo(TRACK self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"TRACK_DisplayInfoBase", _wrap_TRACK_DisplayInfoBase, METH_VARARGS, (char *)"TRACK_DisplayInfoBase(TRACK self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"TRACK_ShowWidth", _wrap_TRACK_ShowWidth, METH_VARARGS, (char *)"TRACK_ShowWidth(TRACK self) -> wxString"},
	 { (char *)"TRACK_Visit", _wrap_TRACK_Visit, METH_VARARGS, (char *)"TRACK_Visit(TRACK self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"TRACK_HitTest", _wrap_TRACK_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"TRACK_HitTest(TRACK self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"TRACK_GetVia", _wrap_TRACK_GetVia, METH_VARARGS, (char *)"\n"
		"GetVia(wxPoint aPosition, int aLayerMask=-1) -> TRACK\n"
		"GetVia(wxPoint aPosition) -> TRACK\n"
		"TRACK_GetVia(TRACK self, TRACK aEndTrace, wxPoint aPosition, int aLayerMask) -> TRACK\n"
		""},
	 { (char *)"TRACK_GetTrace", _wrap_TRACK_GetTrace, METH_VARARGS, (char *)"TRACK_GetTrace(TRACK self, TRACK aStartTrace, TRACK aEndTrace, int aEndPoint) -> TRACK"},
	 { (char *)"TRACK_GetEndSegments", _wrap_TRACK_GetEndSegments, METH_VARARGS, (char *)"TRACK_GetEndSegments(TRACK self, int NbSegm, TRACK ** StartTrack, TRACK ** EndTrack) -> int"},
	 { (char *)"TRACK_GetClass", _wrap_TRACK_GetClass, METH_VARARGS, (char *)"TRACK_GetClass(TRACK self) -> wxString"},
	 { (char *)"TRACK_GetClearance", _wrap_TRACK_GetClearance, METH_VARARGS, (char *)"\n"
		"GetClearance(BOARD_CONNECTED_ITEM aItem=None) -> int\n"
		"TRACK_GetClearance(TRACK self) -> int\n"
		""},
	 { (char *)"TRACK_GetSelectMenuText", _wrap_TRACK_GetSelectMenuText, METH_VARARGS, (char *)"TRACK_GetSelectMenuText(TRACK self) -> wxString"},
	 { (char *)"TRACK_GetMenuImage", _wrap_TRACK_GetMenuImage, METH_VARARGS, (char *)"TRACK_GetMenuImage(TRACK self) -> BITMAP_DEF"},
	 { (char *)"TRACK_Clone", _wrap_TRACK_Clone, METH_VARARGS, (char *)"TRACK_Clone(TRACK self) -> EDA_ITEM"},
	 { (char *)"delete_TRACK", _wrap_delete_TRACK, METH_VARARGS, (char *)"delete_TRACK(TRACK self)"},
	 { (char *)"TRACK_swigregister", TRACK_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SEGZONE", _wrap_new_SEGZONE, METH_VARARGS, (char *)"new_SEGZONE(BOARD_ITEM aParent) -> SEGZONE"},
	 { (char *)"SEGZONE_GetClass", _wrap_SEGZONE_GetClass, METH_VARARGS, (char *)"SEGZONE_GetClass(SEGZONE self) -> wxString"},
	 { (char *)"SEGZONE_Next", _wrap_SEGZONE_Next, METH_VARARGS, (char *)"SEGZONE_Next(SEGZONE self) -> SEGZONE"},
	 { (char *)"SEGZONE_GetSelectMenuText", _wrap_SEGZONE_GetSelectMenuText, METH_VARARGS, (char *)"SEGZONE_GetSelectMenuText(SEGZONE self) -> wxString"},
	 { (char *)"SEGZONE_GetMenuImage", _wrap_SEGZONE_GetMenuImage, METH_VARARGS, (char *)"SEGZONE_GetMenuImage(SEGZONE self) -> BITMAP_DEF"},
	 { (char *)"SEGZONE_Clone", _wrap_SEGZONE_Clone, METH_VARARGS, (char *)"SEGZONE_Clone(SEGZONE self) -> EDA_ITEM"},
	 { (char *)"delete_SEGZONE", _wrap_delete_SEGZONE, METH_VARARGS, (char *)"delete_SEGZONE(SEGZONE self)"},
	 { (char *)"SEGZONE_swigregister", SEGZONE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SEGVIA", _wrap_new_SEGVIA, METH_VARARGS, (char *)"new_SEGVIA(BOARD_ITEM aParent) -> SEGVIA"},
	 { (char *)"SEGVIA_Draw", _wrap_SEGVIA_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)\n"
		"SEGVIA_Draw(SEGVIA self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"SEGVIA_IsOnLayer", _wrap_SEGVIA_IsOnLayer, METH_VARARGS, (char *)"SEGVIA_IsOnLayer(SEGVIA self, int aLayer) -> bool"},
	 { (char *)"SEGVIA_SetLayerPair", _wrap_SEGVIA_SetLayerPair, METH_VARARGS, (char *)"SEGVIA_SetLayerPair(SEGVIA self, int top_layer, int bottom_layer)"},
	 { (char *)"SEGVIA_ReturnLayerPair", _wrap_SEGVIA_ReturnLayerPair, METH_VARARGS, (char *)"SEGVIA_ReturnLayerPair(SEGVIA self, int * top_layer, int * bottom_layer)"},
	 { (char *)"SEGVIA_GetPosition", _wrap_SEGVIA_GetPosition, METH_VARARGS, (char *)"SEGVIA_GetPosition(SEGVIA self) -> wxPoint"},
	 { (char *)"SEGVIA_SetPosition", _wrap_SEGVIA_SetPosition, METH_VARARGS, (char *)"SEGVIA_SetPosition(SEGVIA self, wxPoint aPoint)"},
	 { (char *)"SEGVIA_GetClass", _wrap_SEGVIA_GetClass, METH_VARARGS, (char *)"SEGVIA_GetClass(SEGVIA self) -> wxString"},
	 { (char *)"SEGVIA_GetSelectMenuText", _wrap_SEGVIA_GetSelectMenuText, METH_VARARGS, (char *)"SEGVIA_GetSelectMenuText(SEGVIA self) -> wxString"},
	 { (char *)"SEGVIA_GetMenuImage", _wrap_SEGVIA_GetMenuImage, METH_VARARGS, (char *)"SEGVIA_GetMenuImage(SEGVIA self) -> BITMAP_DEF"},
	 { (char *)"SEGVIA_Clone", _wrap_SEGVIA_Clone, METH_VARARGS, (char *)"SEGVIA_Clone(SEGVIA self) -> EDA_ITEM"},
	 { (char *)"delete_SEGVIA", _wrap_delete_SEGVIA, METH_VARARGS, (char *)"delete_SEGVIA(SEGVIA self)"},
	 { (char *)"SEGVIA_swigregister", SEGVIA_swigregister, METH_VARARGS, NULL},
	 { (char *)"IsValidLayerIndex", _wrap_IsValidLayerIndex, METH_VARARGS, (char *)"IsValidLayerIndex(int aLayerIndex) -> bool"},
	 { (char *)"IsValidCopperLayerIndex", _wrap_IsValidCopperLayerIndex, METH_VARARGS, (char *)"IsValidCopperLayerIndex(int aLayerIndex) -> bool"},
	 { (char *)"IsValidNonCopperLayerIndex", _wrap_IsValidNonCopperLayerIndex, METH_VARARGS, (char *)"IsValidNonCopperLayerIndex(int aLayerIndex) -> bool"},
	 { (char *)"PAD_DRAWINFO_m_DrawPanel_set", _wrap_PAD_DRAWINFO_m_DrawPanel_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_DrawPanel_set(PAD_DRAWINFO self, EDA_DRAW_PANEL * m_DrawPanel)"},
	 { (char *)"PAD_DRAWINFO_m_DrawPanel_get", _wrap_PAD_DRAWINFO_m_DrawPanel_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_DrawPanel_get(PAD_DRAWINFO self) -> EDA_DRAW_PANEL *"},
	 { (char *)"PAD_DRAWINFO_m_DrawMode_set", _wrap_PAD_DRAWINFO_m_DrawMode_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_DrawMode_set(PAD_DRAWINFO self, int m_DrawMode)"},
	 { (char *)"PAD_DRAWINFO_m_DrawMode_get", _wrap_PAD_DRAWINFO_m_DrawMode_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_DrawMode_get(PAD_DRAWINFO self) -> int"},
	 { (char *)"PAD_DRAWINFO_m_Color_set", _wrap_PAD_DRAWINFO_m_Color_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Color_set(PAD_DRAWINFO self, int m_Color)"},
	 { (char *)"PAD_DRAWINFO_m_Color_get", _wrap_PAD_DRAWINFO_m_Color_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Color_get(PAD_DRAWINFO self) -> int"},
	 { (char *)"PAD_DRAWINFO_m_HoleColor_set", _wrap_PAD_DRAWINFO_m_HoleColor_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_HoleColor_set(PAD_DRAWINFO self, int m_HoleColor)"},
	 { (char *)"PAD_DRAWINFO_m_HoleColor_get", _wrap_PAD_DRAWINFO_m_HoleColor_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_HoleColor_get(PAD_DRAWINFO self) -> int"},
	 { (char *)"PAD_DRAWINFO_m_NPHoleColor_set", _wrap_PAD_DRAWINFO_m_NPHoleColor_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_NPHoleColor_set(PAD_DRAWINFO self, int m_NPHoleColor)"},
	 { (char *)"PAD_DRAWINFO_m_NPHoleColor_get", _wrap_PAD_DRAWINFO_m_NPHoleColor_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_NPHoleColor_get(PAD_DRAWINFO self) -> int"},
	 { (char *)"PAD_DRAWINFO_m_PadClearance_set", _wrap_PAD_DRAWINFO_m_PadClearance_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_PadClearance_set(PAD_DRAWINFO self, int m_PadClearance)"},
	 { (char *)"PAD_DRAWINFO_m_PadClearance_get", _wrap_PAD_DRAWINFO_m_PadClearance_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_PadClearance_get(PAD_DRAWINFO self) -> int"},
	 { (char *)"PAD_DRAWINFO_m_Mask_margin_set", _wrap_PAD_DRAWINFO_m_Mask_margin_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Mask_margin_set(PAD_DRAWINFO self, wxSize m_Mask_margin)"},
	 { (char *)"PAD_DRAWINFO_m_Mask_margin_get", _wrap_PAD_DRAWINFO_m_Mask_margin_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Mask_margin_get(PAD_DRAWINFO self) -> wxSize"},
	 { (char *)"PAD_DRAWINFO_m_Display_padnum_set", _wrap_PAD_DRAWINFO_m_Display_padnum_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Display_padnum_set(PAD_DRAWINFO self, bool m_Display_padnum)"},
	 { (char *)"PAD_DRAWINFO_m_Display_padnum_get", _wrap_PAD_DRAWINFO_m_Display_padnum_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Display_padnum_get(PAD_DRAWINFO self) -> bool"},
	 { (char *)"PAD_DRAWINFO_m_Display_netname_set", _wrap_PAD_DRAWINFO_m_Display_netname_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Display_netname_set(PAD_DRAWINFO self, bool m_Display_netname)"},
	 { (char *)"PAD_DRAWINFO_m_Display_netname_get", _wrap_PAD_DRAWINFO_m_Display_netname_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Display_netname_get(PAD_DRAWINFO self) -> bool"},
	 { (char *)"PAD_DRAWINFO_m_ShowPadFilled_set", _wrap_PAD_DRAWINFO_m_ShowPadFilled_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_ShowPadFilled_set(PAD_DRAWINFO self, bool m_ShowPadFilled)"},
	 { (char *)"PAD_DRAWINFO_m_ShowPadFilled_get", _wrap_PAD_DRAWINFO_m_ShowPadFilled_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_ShowPadFilled_get(PAD_DRAWINFO self) -> bool"},
	 { (char *)"PAD_DRAWINFO_m_ShowNCMark_set", _wrap_PAD_DRAWINFO_m_ShowNCMark_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_ShowNCMark_set(PAD_DRAWINFO self, bool m_ShowNCMark)"},
	 { (char *)"PAD_DRAWINFO_m_ShowNCMark_get", _wrap_PAD_DRAWINFO_m_ShowNCMark_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_ShowNCMark_get(PAD_DRAWINFO self) -> bool"},
	 { (char *)"PAD_DRAWINFO_m_ShowNotPlatedHole_set", _wrap_PAD_DRAWINFO_m_ShowNotPlatedHole_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_ShowNotPlatedHole_set(PAD_DRAWINFO self, bool m_ShowNotPlatedHole)"},
	 { (char *)"PAD_DRAWINFO_m_ShowNotPlatedHole_get", _wrap_PAD_DRAWINFO_m_ShowNotPlatedHole_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_ShowNotPlatedHole_get(PAD_DRAWINFO self) -> bool"},
	 { (char *)"PAD_DRAWINFO_m_IsPrinting_set", _wrap_PAD_DRAWINFO_m_IsPrinting_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_IsPrinting_set(PAD_DRAWINFO self, bool m_IsPrinting)"},
	 { (char *)"PAD_DRAWINFO_m_IsPrinting_get", _wrap_PAD_DRAWINFO_m_IsPrinting_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_IsPrinting_get(PAD_DRAWINFO self) -> bool"},
	 { (char *)"PAD_DRAWINFO_m_Offset_set", _wrap_PAD_DRAWINFO_m_Offset_set, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Offset_set(PAD_DRAWINFO self, wxPoint m_Offset)"},
	 { (char *)"PAD_DRAWINFO_m_Offset_get", _wrap_PAD_DRAWINFO_m_Offset_get, METH_VARARGS, (char *)"PAD_DRAWINFO_m_Offset_get(PAD_DRAWINFO self) -> wxPoint"},
	 { (char *)"new_PAD_DRAWINFO", _wrap_new_PAD_DRAWINFO, METH_VARARGS, (char *)"new_PAD_DRAWINFO() -> PAD_DRAWINFO"},
	 { (char *)"delete_PAD_DRAWINFO", _wrap_delete_PAD_DRAWINFO, METH_VARARGS, (char *)"delete_PAD_DRAWINFO(PAD_DRAWINFO self)"},
	 { (char *)"PAD_DRAWINFO_swigregister", PAD_DRAWINFO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_D_PAD", _wrap_new_D_PAD, METH_VARARGS, (char *)"new_D_PAD(MODULE parent) -> D_PAD"},
	 { (char *)"D_PAD_Copy", _wrap_D_PAD_Copy, METH_VARARGS, (char *)"D_PAD_Copy(D_PAD self, D_PAD source)"},
	 { (char *)"D_PAD_Next", _wrap_D_PAD_Next, METH_VARARGS, (char *)"D_PAD_Next(D_PAD self) -> D_PAD"},
	 { (char *)"D_PAD_GetParent", _wrap_D_PAD_GetParent, METH_VARARGS, (char *)"D_PAD_GetParent(D_PAD self) -> MODULE"},
	 { (char *)"D_PAD_SetPadName", _wrap_D_PAD_SetPadName, METH_VARARGS, (char *)"D_PAD_SetPadName(D_PAD self, wxString const & name)"},
	 { (char *)"D_PAD_GetPadName", _wrap_D_PAD_GetPadName, METH_VARARGS, (char *)"D_PAD_GetPadName(D_PAD self) -> wxString const"},
	 { (char *)"D_PAD_PadNameEqual", _wrap_D_PAD_PadNameEqual, METH_VARARGS, (char *)"D_PAD_PadNameEqual(D_PAD self, D_PAD other) -> bool"},
	 { (char *)"D_PAD_SetNetname", _wrap_D_PAD_SetNetname, METH_VARARGS, (char *)"D_PAD_SetNetname(D_PAD self, wxString const & aNetname)"},
	 { (char *)"D_PAD_GetNetname", _wrap_D_PAD_GetNetname, METH_VARARGS, (char *)"D_PAD_GetNetname(D_PAD self) -> wxString const &"},
	 { (char *)"D_PAD_GetShortNetname", _wrap_D_PAD_GetShortNetname, METH_VARARGS, (char *)"D_PAD_GetShortNetname(D_PAD self) -> wxString const &"},
	 { (char *)"D_PAD_GetShape", _wrap_D_PAD_GetShape, METH_VARARGS, (char *)"D_PAD_GetShape(D_PAD self) -> PAD_SHAPE_T"},
	 { (char *)"D_PAD_SetShape", _wrap_D_PAD_SetShape, METH_VARARGS, (char *)"D_PAD_SetShape(D_PAD self, PAD_SHAPE_T aShape)"},
	 { (char *)"D_PAD_SetPosition", _wrap_D_PAD_SetPosition, METH_VARARGS, (char *)"D_PAD_SetPosition(D_PAD self, wxPoint aPos)"},
	 { (char *)"D_PAD_GetPosition", _wrap_D_PAD_GetPosition, METH_VARARGS, (char *)"D_PAD_GetPosition(D_PAD self) -> wxPoint"},
	 { (char *)"D_PAD_SetY", _wrap_D_PAD_SetY, METH_VARARGS, (char *)"D_PAD_SetY(D_PAD self, int y)"},
	 { (char *)"D_PAD_SetX", _wrap_D_PAD_SetX, METH_VARARGS, (char *)"D_PAD_SetX(D_PAD self, int x)"},
	 { (char *)"D_PAD_SetPos0", _wrap_D_PAD_SetPos0, METH_VARARGS, (char *)"D_PAD_SetPos0(D_PAD self, wxPoint aPos)"},
	 { (char *)"D_PAD_GetPos0", _wrap_D_PAD_GetPos0, METH_VARARGS, (char *)"D_PAD_GetPos0(D_PAD self) -> wxPoint"},
	 { (char *)"D_PAD_SetY0", _wrap_D_PAD_SetY0, METH_VARARGS, (char *)"D_PAD_SetY0(D_PAD self, int y)"},
	 { (char *)"D_PAD_SetX0", _wrap_D_PAD_SetX0, METH_VARARGS, (char *)"D_PAD_SetX0(D_PAD self, int x)"},
	 { (char *)"D_PAD_SetSize", _wrap_D_PAD_SetSize, METH_VARARGS, (char *)"D_PAD_SetSize(D_PAD self, wxSize aSize)"},
	 { (char *)"D_PAD_GetSize", _wrap_D_PAD_GetSize, METH_VARARGS, (char *)"D_PAD_GetSize(D_PAD self) -> wxSize"},
	 { (char *)"D_PAD_SetDelta", _wrap_D_PAD_SetDelta, METH_VARARGS, (char *)"D_PAD_SetDelta(D_PAD self, wxSize aSize)"},
	 { (char *)"D_PAD_GetDelta", _wrap_D_PAD_GetDelta, METH_VARARGS, (char *)"D_PAD_GetDelta(D_PAD self) -> wxSize"},
	 { (char *)"D_PAD_SetDrillSize", _wrap_D_PAD_SetDrillSize, METH_VARARGS, (char *)"D_PAD_SetDrillSize(D_PAD self, wxSize aSize)"},
	 { (char *)"D_PAD_GetDrillSize", _wrap_D_PAD_GetDrillSize, METH_VARARGS, (char *)"D_PAD_GetDrillSize(D_PAD self) -> wxSize"},
	 { (char *)"D_PAD_SetOffset", _wrap_D_PAD_SetOffset, METH_VARARGS, (char *)"D_PAD_SetOffset(D_PAD self, wxPoint aOffset)"},
	 { (char *)"D_PAD_GetOffset", _wrap_D_PAD_GetOffset, METH_VARARGS, (char *)"D_PAD_GetOffset(D_PAD self) -> wxPoint"},
	 { (char *)"D_PAD_Flip", _wrap_D_PAD_Flip, METH_VARARGS, (char *)"D_PAD_Flip(D_PAD self, int aTranslationY)"},
	 { (char *)"D_PAD_SetOrientation", _wrap_D_PAD_SetOrientation, METH_VARARGS, (char *)"D_PAD_SetOrientation(D_PAD self, double aAngle)"},
	 { (char *)"D_PAD_GetOrientation", _wrap_D_PAD_GetOrientation, METH_VARARGS, (char *)"D_PAD_GetOrientation(D_PAD self) -> double"},
	 { (char *)"D_PAD_SetDrillShape", _wrap_D_PAD_SetDrillShape, METH_VARARGS, (char *)"D_PAD_SetDrillShape(D_PAD self, PAD_SHAPE_T aDrillShape)"},
	 { (char *)"D_PAD_GetDrillShape", _wrap_D_PAD_GetDrillShape, METH_VARARGS, (char *)"D_PAD_GetDrillShape(D_PAD self) -> PAD_SHAPE_T"},
	 { (char *)"D_PAD_SetLayerMask", _wrap_D_PAD_SetLayerMask, METH_VARARGS, (char *)"D_PAD_SetLayerMask(D_PAD self, int aLayerMask)"},
	 { (char *)"D_PAD_GetLayerMask", _wrap_D_PAD_GetLayerMask, METH_VARARGS, (char *)"D_PAD_GetLayerMask(D_PAD self) -> int"},
	 { (char *)"D_PAD_SetAttribute", _wrap_D_PAD_SetAttribute, METH_VARARGS, (char *)"D_PAD_SetAttribute(D_PAD self, PAD_ATTR_T aAttribute)"},
	 { (char *)"D_PAD_GetAttribute", _wrap_D_PAD_GetAttribute, METH_VARARGS, (char *)"D_PAD_GetAttribute(D_PAD self) -> PAD_ATTR_T"},
	 { (char *)"D_PAD_SetDieLength", _wrap_D_PAD_SetDieLength, METH_VARARGS, (char *)"D_PAD_SetDieLength(D_PAD self, int aLength)"},
	 { (char *)"D_PAD_GetDieLength", _wrap_D_PAD_GetDieLength, METH_VARARGS, (char *)"D_PAD_GetDieLength(D_PAD self) -> int"},
	 { (char *)"D_PAD_GetLocalSolderMaskMargin", _wrap_D_PAD_GetLocalSolderMaskMargin, METH_VARARGS, (char *)"D_PAD_GetLocalSolderMaskMargin(D_PAD self) -> int"},
	 { (char *)"D_PAD_SetLocalSolderMaskMargin", _wrap_D_PAD_SetLocalSolderMaskMargin, METH_VARARGS, (char *)"D_PAD_SetLocalSolderMaskMargin(D_PAD self, int aMargin)"},
	 { (char *)"D_PAD_GetLocalClearance", _wrap_D_PAD_GetLocalClearance, METH_VARARGS, (char *)"D_PAD_GetLocalClearance(D_PAD self) -> int"},
	 { (char *)"D_PAD_SetLocalClearance", _wrap_D_PAD_SetLocalClearance, METH_VARARGS, (char *)"D_PAD_SetLocalClearance(D_PAD self, int aClearance)"},
	 { (char *)"D_PAD_GetLocalSolderPasteMargin", _wrap_D_PAD_GetLocalSolderPasteMargin, METH_VARARGS, (char *)"D_PAD_GetLocalSolderPasteMargin(D_PAD self) -> int"},
	 { (char *)"D_PAD_SetLocalSolderPasteMargin", _wrap_D_PAD_SetLocalSolderPasteMargin, METH_VARARGS, (char *)"D_PAD_SetLocalSolderPasteMargin(D_PAD self, int aMargin)"},
	 { (char *)"D_PAD_GetLocalSolderPasteMarginRatio", _wrap_D_PAD_GetLocalSolderPasteMarginRatio, METH_VARARGS, (char *)"D_PAD_GetLocalSolderPasteMarginRatio(D_PAD self) -> double"},
	 { (char *)"D_PAD_SetLocalSolderPasteMarginRatio", _wrap_D_PAD_SetLocalSolderPasteMarginRatio, METH_VARARGS, (char *)"D_PAD_SetLocalSolderPasteMarginRatio(D_PAD self, double aRatio)"},
	 { (char *)"D_PAD_TransformShapeWithClearanceToPolygon", _wrap_D_PAD_TransformShapeWithClearanceToPolygon, METH_VARARGS, (char *)"\n"
		"D_PAD_TransformShapeWithClearanceToPolygon(D_PAD self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, int aClearanceValue, \n"
		"    int aCircleToSegmentsCount, double aCorrectionFactor)\n"
		""},
	 { (char *)"D_PAD_GetClearance", _wrap_D_PAD_GetClearance, METH_VARARGS, (char *)"\n"
		"GetClearance(BOARD_CONNECTED_ITEM aItem=None) -> int\n"
		"D_PAD_GetClearance(D_PAD self) -> int\n"
		""},
	 { (char *)"D_PAD_GetSolderMaskMargin", _wrap_D_PAD_GetSolderMaskMargin, METH_VARARGS, (char *)"D_PAD_GetSolderMaskMargin(D_PAD self) -> int"},
	 { (char *)"D_PAD_GetSolderPasteMargin", _wrap_D_PAD_GetSolderPasteMargin, METH_VARARGS, (char *)"D_PAD_GetSolderPasteMargin(D_PAD self) -> wxSize"},
	 { (char *)"D_PAD_SetZoneConnection", _wrap_D_PAD_SetZoneConnection, METH_VARARGS, (char *)"D_PAD_SetZoneConnection(D_PAD self, ZoneConnection aType)"},
	 { (char *)"D_PAD_GetZoneConnection", _wrap_D_PAD_GetZoneConnection, METH_VARARGS, (char *)"D_PAD_GetZoneConnection(D_PAD self) -> ZoneConnection"},
	 { (char *)"D_PAD_SetThermalWidth", _wrap_D_PAD_SetThermalWidth, METH_VARARGS, (char *)"D_PAD_SetThermalWidth(D_PAD self, int aWidth)"},
	 { (char *)"D_PAD_GetThermalWidth", _wrap_D_PAD_GetThermalWidth, METH_VARARGS, (char *)"D_PAD_GetThermalWidth(D_PAD self) -> int"},
	 { (char *)"D_PAD_SetThermalGap", _wrap_D_PAD_SetThermalGap, METH_VARARGS, (char *)"D_PAD_SetThermalGap(D_PAD self, int aGap)"},
	 { (char *)"D_PAD_GetThermalGap", _wrap_D_PAD_GetThermalGap, METH_VARARGS, (char *)"D_PAD_GetThermalGap(D_PAD self) -> int"},
	 { (char *)"D_PAD_Draw", _wrap_D_PAD_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)\n"
		"D_PAD_Draw(D_PAD self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)\n"
		""},
	 { (char *)"D_PAD_Draw3D", _wrap_D_PAD_Draw3D, METH_VARARGS, (char *)"D_PAD_Draw3D(D_PAD self, EDA_3D_CANVAS * glcanvas)"},
	 { (char *)"D_PAD_DrawShape", _wrap_D_PAD_DrawShape, METH_VARARGS, (char *)"D_PAD_DrawShape(D_PAD self, EDA_RECT aClipBox, wxDC * aDC, PAD_DRAWINFO aDrawInfo)"},
	 { (char *)"D_PAD_BuildPadPolygon", _wrap_D_PAD_BuildPadPolygon, METH_VARARGS, (char *)"D_PAD_BuildPadPolygon(D_PAD self, wxPoint aCoord, wxSize aInflateValue, int aRotation)"},
	 { (char *)"D_PAD_BuildSegmentFromOvalShape", _wrap_D_PAD_BuildSegmentFromOvalShape, METH_VARARGS, (char *)"D_PAD_BuildSegmentFromOvalShape(D_PAD self, wxPoint aSegStart, wxPoint aSegEnd, int aRotation) -> int"},
	 { (char *)"D_PAD_ReturnStringPadName", _wrap_D_PAD_ReturnStringPadName, METH_VARARGS, (char *)"D_PAD_ReturnStringPadName(D_PAD self, wxString & text)"},
	 { (char *)"D_PAD_GetBoundingRadius", _wrap_D_PAD_GetBoundingRadius, METH_VARARGS, (char *)"D_PAD_GetBoundingRadius(D_PAD self) -> int"},
	 { (char *)"D_PAD_ReturnShapePos", _wrap_D_PAD_ReturnShapePos, METH_VARARGS, (char *)"D_PAD_ReturnShapePos(D_PAD self) -> wxPoint"},
	 { (char *)"D_PAD_GetSubRatsnest", _wrap_D_PAD_GetSubRatsnest, METH_VARARGS, (char *)"D_PAD_GetSubRatsnest(D_PAD self) -> int"},
	 { (char *)"D_PAD_SetSubRatsnest", _wrap_D_PAD_SetSubRatsnest, METH_VARARGS, (char *)"D_PAD_SetSubRatsnest(D_PAD self, int aSubRatsnest)"},
	 { (char *)"D_PAD_DisplayInfo", _wrap_D_PAD_DisplayInfo, METH_VARARGS, (char *)"D_PAD_DisplayInfo(D_PAD self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"D_PAD_IsOnLayer", _wrap_D_PAD_IsOnLayer, METH_VARARGS, (char *)"D_PAD_IsOnLayer(D_PAD self, int aLayer) -> bool"},
	 { (char *)"D_PAD_HitTest", _wrap_D_PAD_HitTest, METH_VARARGS, (char *)"D_PAD_HitTest(D_PAD self, wxPoint aPosition) -> bool"},
	 { (char *)"D_PAD_GetClass", _wrap_D_PAD_GetClass, METH_VARARGS, (char *)"D_PAD_GetClass(D_PAD self) -> wxString"},
	 { (char *)"D_PAD_GetBoundingBox", _wrap_D_PAD_GetBoundingBox, METH_VARARGS, (char *)"D_PAD_GetBoundingBox(D_PAD self) -> EDA_RECT"},
	 { (char *)"D_PAD_Compare", _wrap_D_PAD_Compare, METH_VARARGS, (char *)"D_PAD_Compare(D_PAD padref, D_PAD padcmp) -> int"},
	 { (char *)"D_PAD_Move", _wrap_D_PAD_Move, METH_VARARGS, (char *)"D_PAD_Move(D_PAD self, wxPoint aMoveVector)"},
	 { (char *)"D_PAD_GetSelectMenuText", _wrap_D_PAD_GetSelectMenuText, METH_VARARGS, (char *)"D_PAD_GetSelectMenuText(D_PAD self) -> wxString"},
	 { (char *)"D_PAD_GetMenuImage", _wrap_D_PAD_GetMenuImage, METH_VARARGS, (char *)"D_PAD_GetMenuImage(D_PAD self) -> BITMAP_DEF"},
	 { (char *)"D_PAD_ShowPadShape", _wrap_D_PAD_ShowPadShape, METH_VARARGS, (char *)"D_PAD_ShowPadShape(D_PAD self) -> wxString"},
	 { (char *)"D_PAD_ShowPadAttr", _wrap_D_PAD_ShowPadAttr, METH_VARARGS, (char *)"D_PAD_ShowPadAttr(D_PAD self) -> wxString"},
	 { (char *)"D_PAD_AppendConfigs", _wrap_D_PAD_AppendConfigs, METH_VARARGS, (char *)"D_PAD_AppendConfigs(D_PAD self, PARAM_CFG_ARRAY * aResult)"},
	 { (char *)"D_PAD_Clone", _wrap_D_PAD_Clone, METH_VARARGS, (char *)"D_PAD_Clone(D_PAD self) -> EDA_ITEM"},
	 { (char *)"delete_D_PAD", _wrap_delete_D_PAD, METH_VARARGS, (char *)"delete_D_PAD(D_PAD self)"},
	 { (char *)"D_PAD_swigregister", D_PAD_swigregister, METH_VARARGS, NULL},
	 { (char *)"RATSNEST_ITEM_m_Status_set", _wrap_RATSNEST_ITEM_m_Status_set, METH_VARARGS, (char *)"RATSNEST_ITEM_m_Status_set(RATSNEST_ITEM self, int m_Status)"},
	 { (char *)"RATSNEST_ITEM_m_Status_get", _wrap_RATSNEST_ITEM_m_Status_get, METH_VARARGS, (char *)"RATSNEST_ITEM_m_Status_get(RATSNEST_ITEM self) -> int"},
	 { (char *)"RATSNEST_ITEM_m_PadStart_set", _wrap_RATSNEST_ITEM_m_PadStart_set, METH_VARARGS, (char *)"RATSNEST_ITEM_m_PadStart_set(RATSNEST_ITEM self, D_PAD m_PadStart)"},
	 { (char *)"RATSNEST_ITEM_m_PadStart_get", _wrap_RATSNEST_ITEM_m_PadStart_get, METH_VARARGS, (char *)"RATSNEST_ITEM_m_PadStart_get(RATSNEST_ITEM self) -> D_PAD"},
	 { (char *)"RATSNEST_ITEM_m_PadEnd_set", _wrap_RATSNEST_ITEM_m_PadEnd_set, METH_VARARGS, (char *)"RATSNEST_ITEM_m_PadEnd_set(RATSNEST_ITEM self, D_PAD m_PadEnd)"},
	 { (char *)"RATSNEST_ITEM_m_PadEnd_get", _wrap_RATSNEST_ITEM_m_PadEnd_get, METH_VARARGS, (char *)"RATSNEST_ITEM_m_PadEnd_get(RATSNEST_ITEM self) -> D_PAD"},
	 { (char *)"RATSNEST_ITEM_m_Lenght_set", _wrap_RATSNEST_ITEM_m_Lenght_set, METH_VARARGS, (char *)"RATSNEST_ITEM_m_Lenght_set(RATSNEST_ITEM self, int m_Lenght)"},
	 { (char *)"RATSNEST_ITEM_m_Lenght_get", _wrap_RATSNEST_ITEM_m_Lenght_get, METH_VARARGS, (char *)"RATSNEST_ITEM_m_Lenght_get(RATSNEST_ITEM self) -> int"},
	 { (char *)"new_RATSNEST_ITEM", _wrap_new_RATSNEST_ITEM, METH_VARARGS, (char *)"new_RATSNEST_ITEM() -> RATSNEST_ITEM"},
	 { (char *)"RATSNEST_ITEM_GetNet", _wrap_RATSNEST_ITEM_GetNet, METH_VARARGS, (char *)"RATSNEST_ITEM_GetNet(RATSNEST_ITEM self) -> int"},
	 { (char *)"RATSNEST_ITEM_SetNet", _wrap_RATSNEST_ITEM_SetNet, METH_VARARGS, (char *)"RATSNEST_ITEM_SetNet(RATSNEST_ITEM self, int aNetCode)"},
	 { (char *)"RATSNEST_ITEM_IsVisible", _wrap_RATSNEST_ITEM_IsVisible, METH_VARARGS, (char *)"RATSNEST_ITEM_IsVisible(RATSNEST_ITEM self) -> bool"},
	 { (char *)"RATSNEST_ITEM_IsActive", _wrap_RATSNEST_ITEM_IsActive, METH_VARARGS, (char *)"RATSNEST_ITEM_IsActive(RATSNEST_ITEM self) -> bool"},
	 { (char *)"RATSNEST_ITEM_IsLocal", _wrap_RATSNEST_ITEM_IsLocal, METH_VARARGS, (char *)"RATSNEST_ITEM_IsLocal(RATSNEST_ITEM self) -> bool"},
	 { (char *)"RATSNEST_ITEM_Draw", _wrap_RATSNEST_ITEM_Draw, METH_VARARGS, (char *)"RATSNEST_ITEM_Draw(RATSNEST_ITEM self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset)"},
	 { (char *)"delete_RATSNEST_ITEM", _wrap_delete_RATSNEST_ITEM, METH_VARARGS, (char *)"delete_RATSNEST_ITEM(RATSNEST_ITEM self)"},
	 { (char *)"RATSNEST_ITEM_swigregister", RATSNEST_ITEM_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NETINFO_LIST", _wrap_new_NETINFO_LIST, METH_VARARGS, (char *)"new_NETINFO_LIST(BOARD aParent) -> NETINFO_LIST"},
	 { (char *)"delete_NETINFO_LIST", _wrap_delete_NETINFO_LIST, METH_VARARGS, (char *)"delete_NETINFO_LIST(NETINFO_LIST self)"},
	 { (char *)"NETINFO_LIST_GetNetItem", _wrap_NETINFO_LIST_GetNetItem, METH_VARARGS, (char *)"NETINFO_LIST_GetNetItem(NETINFO_LIST self, int aNetcode) -> NETINFO_ITEM"},
	 { (char *)"NETINFO_LIST_GetNetCount", _wrap_NETINFO_LIST_GetNetCount, METH_VARARGS, (char *)"NETINFO_LIST_GetNetCount(NETINFO_LIST self) -> unsigned int"},
	 { (char *)"NETINFO_LIST_AppendNet", _wrap_NETINFO_LIST_AppendNet, METH_VARARGS, (char *)"NETINFO_LIST_AppendNet(NETINFO_LIST self, NETINFO_ITEM aNewElement)"},
	 { (char *)"NETINFO_LIST_GetPadCount", _wrap_NETINFO_LIST_GetPadCount, METH_VARARGS, (char *)"NETINFO_LIST_GetPadCount(NETINFO_LIST self) -> unsigned int"},
	 { (char *)"NETINFO_LIST_GetPad", _wrap_NETINFO_LIST_GetPad, METH_VARARGS, (char *)"NETINFO_LIST_GetPad(NETINFO_LIST self, unsigned int aIdx) -> D_PAD"},
	 { (char *)"NETINFO_LIST_swigregister", NETINFO_LIST_swigregister, METH_VARARGS, NULL},
	 { (char *)"NETINFO_ITEM_m_NbNodes_set", _wrap_NETINFO_ITEM_m_NbNodes_set, METH_VARARGS, (char *)"NETINFO_ITEM_m_NbNodes_set(NETINFO_ITEM self, int m_NbNodes)"},
	 { (char *)"NETINFO_ITEM_m_NbNodes_get", _wrap_NETINFO_ITEM_m_NbNodes_get, METH_VARARGS, (char *)"NETINFO_ITEM_m_NbNodes_get(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_m_NbLink_set", _wrap_NETINFO_ITEM_m_NbLink_set, METH_VARARGS, (char *)"NETINFO_ITEM_m_NbLink_set(NETINFO_ITEM self, int m_NbLink)"},
	 { (char *)"NETINFO_ITEM_m_NbLink_get", _wrap_NETINFO_ITEM_m_NbLink_get, METH_VARARGS, (char *)"NETINFO_ITEM_m_NbLink_get(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_m_NbNoconn_set", _wrap_NETINFO_ITEM_m_NbNoconn_set, METH_VARARGS, (char *)"NETINFO_ITEM_m_NbNoconn_set(NETINFO_ITEM self, int m_NbNoconn)"},
	 { (char *)"NETINFO_ITEM_m_NbNoconn_get", _wrap_NETINFO_ITEM_m_NbNoconn_get, METH_VARARGS, (char *)"NETINFO_ITEM_m_NbNoconn_get(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_m_Flag_set", _wrap_NETINFO_ITEM_m_Flag_set, METH_VARARGS, (char *)"NETINFO_ITEM_m_Flag_set(NETINFO_ITEM self, int m_Flag)"},
	 { (char *)"NETINFO_ITEM_m_Flag_get", _wrap_NETINFO_ITEM_m_Flag_get, METH_VARARGS, (char *)"NETINFO_ITEM_m_Flag_get(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_m_PadInNetList_set", _wrap_NETINFO_ITEM_m_PadInNetList_set, METH_VARARGS, (char *)"NETINFO_ITEM_m_PadInNetList_set(NETINFO_ITEM self, std::vector< D_PAD *,std::allocator< D_PAD * > > * m_PadInNetList)"},
	 { (char *)"NETINFO_ITEM_m_PadInNetList_get", _wrap_NETINFO_ITEM_m_PadInNetList_get, METH_VARARGS, (char *)"NETINFO_ITEM_m_PadInNetList_get(NETINFO_ITEM self) -> std::vector< D_PAD *,std::allocator< D_PAD * > > *"},
	 { (char *)"NETINFO_ITEM_m_RatsnestStartIdx_set", _wrap_NETINFO_ITEM_m_RatsnestStartIdx_set, METH_VARARGS, (char *)"NETINFO_ITEM_m_RatsnestStartIdx_set(NETINFO_ITEM self, unsigned int m_RatsnestStartIdx)"},
	 { (char *)"NETINFO_ITEM_m_RatsnestStartIdx_get", _wrap_NETINFO_ITEM_m_RatsnestStartIdx_get, METH_VARARGS, (char *)"NETINFO_ITEM_m_RatsnestStartIdx_get(NETINFO_ITEM self) -> unsigned int"},
	 { (char *)"NETINFO_ITEM_m_RatsnestEndIdx_set", _wrap_NETINFO_ITEM_m_RatsnestEndIdx_set, METH_VARARGS, (char *)"NETINFO_ITEM_m_RatsnestEndIdx_set(NETINFO_ITEM self, unsigned int m_RatsnestEndIdx)"},
	 { (char *)"NETINFO_ITEM_m_RatsnestEndIdx_get", _wrap_NETINFO_ITEM_m_RatsnestEndIdx_get, METH_VARARGS, (char *)"NETINFO_ITEM_m_RatsnestEndIdx_get(NETINFO_ITEM self) -> unsigned int"},
	 { (char *)"new_NETINFO_ITEM", _wrap_new_NETINFO_ITEM, METH_VARARGS, (char *)"\n"
		"NETINFO_ITEM(BOARD_ITEM aParent, wxString const & aNetName=wxEmptyString, int aNetCode=0)\n"
		"NETINFO_ITEM(BOARD_ITEM aParent, wxString const & aNetName=wxEmptyString)\n"
		"new_NETINFO_ITEM(BOARD_ITEM aParent) -> NETINFO_ITEM\n"
		""},
	 { (char *)"delete_NETINFO_ITEM", _wrap_delete_NETINFO_ITEM, METH_VARARGS, (char *)"delete_NETINFO_ITEM(NETINFO_ITEM self)"},
	 { (char *)"NETINFO_ITEM_SetClass", _wrap_NETINFO_ITEM_SetClass, METH_VARARGS, (char *)"NETINFO_ITEM_SetClass(NETINFO_ITEM self, NETCLASS aNetClass)"},
	 { (char *)"NETINFO_ITEM_GetNetClass", _wrap_NETINFO_ITEM_GetNetClass, METH_VARARGS, (char *)"NETINFO_ITEM_GetNetClass(NETINFO_ITEM self) -> NETCLASS"},
	 { (char *)"NETINFO_ITEM_GetClassName", _wrap_NETINFO_ITEM_GetClassName, METH_VARARGS, (char *)"NETINFO_ITEM_GetClassName(NETINFO_ITEM self) -> wxString const &"},
	 { (char *)"NETINFO_ITEM_GetTrackWidth", _wrap_NETINFO_ITEM_GetTrackWidth, METH_VARARGS, (char *)"NETINFO_ITEM_GetTrackWidth(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_GetViaSize", _wrap_NETINFO_ITEM_GetViaSize, METH_VARARGS, (char *)"NETINFO_ITEM_GetViaSize(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_GetMicroViaSize", _wrap_NETINFO_ITEM_GetMicroViaSize, METH_VARARGS, (char *)"NETINFO_ITEM_GetMicroViaSize(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_GetViaDrillSize", _wrap_NETINFO_ITEM_GetViaDrillSize, METH_VARARGS, (char *)"NETINFO_ITEM_GetViaDrillSize(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_GetMicroViaDrillSize", _wrap_NETINFO_ITEM_GetMicroViaDrillSize, METH_VARARGS, (char *)"NETINFO_ITEM_GetMicroViaDrillSize(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_GetClearance", _wrap_NETINFO_ITEM_GetClearance, METH_VARARGS, (char *)"NETINFO_ITEM_GetClearance(NETINFO_ITEM self, BOARD_ITEM aBoardItem) -> int"},
	 { (char *)"NETINFO_ITEM_Draw", _wrap_NETINFO_ITEM_Draw, METH_VARARGS, (char *)"NETINFO_ITEM_Draw(NETINFO_ITEM self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset)"},
	 { (char *)"NETINFO_ITEM_GetNet", _wrap_NETINFO_ITEM_GetNet, METH_VARARGS, (char *)"NETINFO_ITEM_GetNet(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_SetNet", _wrap_NETINFO_ITEM_SetNet, METH_VARARGS, (char *)"NETINFO_ITEM_SetNet(NETINFO_ITEM self, int aNetCode)"},
	 { (char *)"NETINFO_ITEM_GetNodesCount", _wrap_NETINFO_ITEM_GetNodesCount, METH_VARARGS, (char *)"NETINFO_ITEM_GetNodesCount(NETINFO_ITEM self) -> int"},
	 { (char *)"NETINFO_ITEM_GetNetname", _wrap_NETINFO_ITEM_GetNetname, METH_VARARGS, (char *)"NETINFO_ITEM_GetNetname(NETINFO_ITEM self) -> wxString"},
	 { (char *)"NETINFO_ITEM_GetShortNetname", _wrap_NETINFO_ITEM_GetShortNetname, METH_VARARGS, (char *)"NETINFO_ITEM_GetShortNetname(NETINFO_ITEM self) -> wxString"},
	 { (char *)"NETINFO_ITEM_SetNetname", _wrap_NETINFO_ITEM_SetNetname, METH_VARARGS, (char *)"NETINFO_ITEM_SetNetname(NETINFO_ITEM self, wxString const & aNetname)"},
	 { (char *)"NETINFO_ITEM_DisplayInfo", _wrap_NETINFO_ITEM_DisplayInfo, METH_VARARGS, (char *)"NETINFO_ITEM_DisplayInfo(NETINFO_ITEM self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"NETINFO_ITEM_swigregister", NETINFO_ITEM_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TEXTE_PCB", _wrap_new_TEXTE_PCB, METH_VARARGS, (char *)"new_TEXTE_PCB(BOARD_ITEM parent) -> TEXTE_PCB"},
	 { (char *)"delete_TEXTE_PCB", _wrap_delete_TEXTE_PCB, METH_VARARGS, (char *)"delete_TEXTE_PCB(TEXTE_PCB self)"},
	 { (char *)"TEXTE_PCB_GetPosition", _wrap_TEXTE_PCB_GetPosition, METH_VARARGS, (char *)"TEXTE_PCB_GetPosition(TEXTE_PCB self) -> wxPoint"},
	 { (char *)"TEXTE_PCB_SetPosition", _wrap_TEXTE_PCB_SetPosition, METH_VARARGS, (char *)"TEXTE_PCB_SetPosition(TEXTE_PCB self, wxPoint aPos)"},
	 { (char *)"TEXTE_PCB_Move", _wrap_TEXTE_PCB_Move, METH_VARARGS, (char *)"TEXTE_PCB_Move(TEXTE_PCB self, wxPoint aMoveVector)"},
	 { (char *)"TEXTE_PCB_Rotate", _wrap_TEXTE_PCB_Rotate, METH_VARARGS, (char *)"TEXTE_PCB_Rotate(TEXTE_PCB self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"TEXTE_PCB_Flip", _wrap_TEXTE_PCB_Flip, METH_VARARGS, (char *)"TEXTE_PCB_Flip(TEXTE_PCB self, wxPoint aCentre)"},
	 { (char *)"TEXTE_PCB_Copy", _wrap_TEXTE_PCB_Copy, METH_VARARGS, (char *)"TEXTE_PCB_Copy(TEXTE_PCB self, TEXTE_PCB source)"},
	 { (char *)"TEXTE_PCB_Draw", _wrap_TEXTE_PCB_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)\n"
		"TEXTE_PCB_Draw(TEXTE_PCB self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"TEXTE_PCB_DisplayInfo", _wrap_TEXTE_PCB_DisplayInfo, METH_VARARGS, (char *)"TEXTE_PCB_DisplayInfo(TEXTE_PCB self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"TEXTE_PCB_HitTest", _wrap_TEXTE_PCB_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"TEXTE_PCB_HitTest(TEXTE_PCB self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"TEXTE_PCB_GetClass", _wrap_TEXTE_PCB_GetClass, METH_VARARGS, (char *)"TEXTE_PCB_GetClass(TEXTE_PCB self) -> wxString"},
	 { (char *)"TEXTE_PCB_TransformShapeWithClearanceToPolygon", _wrap_TEXTE_PCB_TransformShapeWithClearanceToPolygon, METH_VARARGS, (char *)"\n"
		"TEXTE_PCB_TransformShapeWithClearanceToPolygon(TEXTE_PCB self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, \n"
		"    int aClearanceValue, int aCircleToSegmentsCount, double aCorrectionFactor)\n"
		""},
	 { (char *)"TEXTE_PCB_GetSelectMenuText", _wrap_TEXTE_PCB_GetSelectMenuText, METH_VARARGS, (char *)"TEXTE_PCB_GetSelectMenuText(TEXTE_PCB self) -> wxString"},
	 { (char *)"TEXTE_PCB_GetMenuImage", _wrap_TEXTE_PCB_GetMenuImage, METH_VARARGS, (char *)"TEXTE_PCB_GetMenuImage(TEXTE_PCB self) -> BITMAP_DEF"},
	 { (char *)"TEXTE_PCB_GetBoundingBox", _wrap_TEXTE_PCB_GetBoundingBox, METH_VARARGS, (char *)"TEXTE_PCB_GetBoundingBox(TEXTE_PCB self) -> EDA_RECT"},
	 { (char *)"TEXTE_PCB_Clone", _wrap_TEXTE_PCB_Clone, METH_VARARGS, (char *)"TEXTE_PCB_Clone(TEXTE_PCB self) -> EDA_ITEM"},
	 { (char *)"TEXTE_PCB_swigregister", TEXTE_PCB_swigregister, METH_VARARGS, NULL},
	 { (char *)"DIMENSION_m_Width_set", _wrap_DIMENSION_m_Width_set, METH_VARARGS, (char *)"DIMENSION_m_Width_set(DIMENSION self, int m_Width)"},
	 { (char *)"DIMENSION_m_Width_get", _wrap_DIMENSION_m_Width_get, METH_VARARGS, (char *)"DIMENSION_m_Width_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_Pos_set", _wrap_DIMENSION_m_Pos_set, METH_VARARGS, (char *)"DIMENSION_m_Pos_set(DIMENSION self, wxPoint m_Pos)"},
	 { (char *)"DIMENSION_m_Pos_get", _wrap_DIMENSION_m_Pos_get, METH_VARARGS, (char *)"DIMENSION_m_Pos_get(DIMENSION self) -> wxPoint"},
	 { (char *)"DIMENSION_m_Shape_set", _wrap_DIMENSION_m_Shape_set, METH_VARARGS, (char *)"DIMENSION_m_Shape_set(DIMENSION self, int m_Shape)"},
	 { (char *)"DIMENSION_m_Shape_get", _wrap_DIMENSION_m_Shape_get, METH_VARARGS, (char *)"DIMENSION_m_Shape_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_Unit_set", _wrap_DIMENSION_m_Unit_set, METH_VARARGS, (char *)"DIMENSION_m_Unit_set(DIMENSION self, int m_Unit)"},
	 { (char *)"DIMENSION_m_Unit_get", _wrap_DIMENSION_m_Unit_get, METH_VARARGS, (char *)"DIMENSION_m_Unit_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_Value_set", _wrap_DIMENSION_m_Value_set, METH_VARARGS, (char *)"DIMENSION_m_Value_set(DIMENSION self, int m_Value)"},
	 { (char *)"DIMENSION_m_Value_get", _wrap_DIMENSION_m_Value_get, METH_VARARGS, (char *)"DIMENSION_m_Value_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_Text_set", _wrap_DIMENSION_m_Text_set, METH_VARARGS, (char *)"DIMENSION_m_Text_set(DIMENSION self, TEXTE_PCB m_Text)"},
	 { (char *)"DIMENSION_m_Text_get", _wrap_DIMENSION_m_Text_get, METH_VARARGS, (char *)"DIMENSION_m_Text_get(DIMENSION self) -> TEXTE_PCB"},
	 { (char *)"DIMENSION_m_crossBarOx_set", _wrap_DIMENSION_m_crossBarOx_set, METH_VARARGS, (char *)"DIMENSION_m_crossBarOx_set(DIMENSION self, int m_crossBarOx)"},
	 { (char *)"DIMENSION_m_crossBarOx_get", _wrap_DIMENSION_m_crossBarOx_get, METH_VARARGS, (char *)"DIMENSION_m_crossBarOx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_crossBarOy_set", _wrap_DIMENSION_m_crossBarOy_set, METH_VARARGS, (char *)"DIMENSION_m_crossBarOy_set(DIMENSION self, int m_crossBarOy)"},
	 { (char *)"DIMENSION_m_crossBarOy_get", _wrap_DIMENSION_m_crossBarOy_get, METH_VARARGS, (char *)"DIMENSION_m_crossBarOy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_crossBarFx_set", _wrap_DIMENSION_m_crossBarFx_set, METH_VARARGS, (char *)"DIMENSION_m_crossBarFx_set(DIMENSION self, int m_crossBarFx)"},
	 { (char *)"DIMENSION_m_crossBarFx_get", _wrap_DIMENSION_m_crossBarFx_get, METH_VARARGS, (char *)"DIMENSION_m_crossBarFx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_crossBarFy_set", _wrap_DIMENSION_m_crossBarFy_set, METH_VARARGS, (char *)"DIMENSION_m_crossBarFy_set(DIMENSION self, int m_crossBarFy)"},
	 { (char *)"DIMENSION_m_crossBarFy_get", _wrap_DIMENSION_m_crossBarFy_get, METH_VARARGS, (char *)"DIMENSION_m_crossBarFy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_featureLineGOx_set", _wrap_DIMENSION_m_featureLineGOx_set, METH_VARARGS, (char *)"DIMENSION_m_featureLineGOx_set(DIMENSION self, int m_featureLineGOx)"},
	 { (char *)"DIMENSION_m_featureLineGOx_get", _wrap_DIMENSION_m_featureLineGOx_get, METH_VARARGS, (char *)"DIMENSION_m_featureLineGOx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_featureLineGOy_set", _wrap_DIMENSION_m_featureLineGOy_set, METH_VARARGS, (char *)"DIMENSION_m_featureLineGOy_set(DIMENSION self, int m_featureLineGOy)"},
	 { (char *)"DIMENSION_m_featureLineGOy_get", _wrap_DIMENSION_m_featureLineGOy_get, METH_VARARGS, (char *)"DIMENSION_m_featureLineGOy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_featureLineGFx_set", _wrap_DIMENSION_m_featureLineGFx_set, METH_VARARGS, (char *)"DIMENSION_m_featureLineGFx_set(DIMENSION self, int m_featureLineGFx)"},
	 { (char *)"DIMENSION_m_featureLineGFx_get", _wrap_DIMENSION_m_featureLineGFx_get, METH_VARARGS, (char *)"DIMENSION_m_featureLineGFx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_featureLineGFy_set", _wrap_DIMENSION_m_featureLineGFy_set, METH_VARARGS, (char *)"DIMENSION_m_featureLineGFy_set(DIMENSION self, int m_featureLineGFy)"},
	 { (char *)"DIMENSION_m_featureLineGFy_get", _wrap_DIMENSION_m_featureLineGFy_get, METH_VARARGS, (char *)"DIMENSION_m_featureLineGFy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_featureLineDOx_set", _wrap_DIMENSION_m_featureLineDOx_set, METH_VARARGS, (char *)"DIMENSION_m_featureLineDOx_set(DIMENSION self, int m_featureLineDOx)"},
	 { (char *)"DIMENSION_m_featureLineDOx_get", _wrap_DIMENSION_m_featureLineDOx_get, METH_VARARGS, (char *)"DIMENSION_m_featureLineDOx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_featureLineDOy_set", _wrap_DIMENSION_m_featureLineDOy_set, METH_VARARGS, (char *)"DIMENSION_m_featureLineDOy_set(DIMENSION self, int m_featureLineDOy)"},
	 { (char *)"DIMENSION_m_featureLineDOy_get", _wrap_DIMENSION_m_featureLineDOy_get, METH_VARARGS, (char *)"DIMENSION_m_featureLineDOy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_featureLineDFx_set", _wrap_DIMENSION_m_featureLineDFx_set, METH_VARARGS, (char *)"DIMENSION_m_featureLineDFx_set(DIMENSION self, int m_featureLineDFx)"},
	 { (char *)"DIMENSION_m_featureLineDFx_get", _wrap_DIMENSION_m_featureLineDFx_get, METH_VARARGS, (char *)"DIMENSION_m_featureLineDFx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_featureLineDFy_set", _wrap_DIMENSION_m_featureLineDFy_set, METH_VARARGS, (char *)"DIMENSION_m_featureLineDFy_set(DIMENSION self, int m_featureLineDFy)"},
	 { (char *)"DIMENSION_m_featureLineDFy_get", _wrap_DIMENSION_m_featureLineDFy_get, METH_VARARGS, (char *)"DIMENSION_m_featureLineDFy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowD1Ox_set", _wrap_DIMENSION_m_arrowD1Ox_set, METH_VARARGS, (char *)"DIMENSION_m_arrowD1Ox_set(DIMENSION self, int m_arrowD1Ox)"},
	 { (char *)"DIMENSION_m_arrowD1Ox_get", _wrap_DIMENSION_m_arrowD1Ox_get, METH_VARARGS, (char *)"DIMENSION_m_arrowD1Ox_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowD1Oy_set", _wrap_DIMENSION_m_arrowD1Oy_set, METH_VARARGS, (char *)"DIMENSION_m_arrowD1Oy_set(DIMENSION self, int m_arrowD1Oy)"},
	 { (char *)"DIMENSION_m_arrowD1Oy_get", _wrap_DIMENSION_m_arrowD1Oy_get, METH_VARARGS, (char *)"DIMENSION_m_arrowD1Oy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowD1Fx_set", _wrap_DIMENSION_m_arrowD1Fx_set, METH_VARARGS, (char *)"DIMENSION_m_arrowD1Fx_set(DIMENSION self, int m_arrowD1Fx)"},
	 { (char *)"DIMENSION_m_arrowD1Fx_get", _wrap_DIMENSION_m_arrowD1Fx_get, METH_VARARGS, (char *)"DIMENSION_m_arrowD1Fx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowD1Fy_set", _wrap_DIMENSION_m_arrowD1Fy_set, METH_VARARGS, (char *)"DIMENSION_m_arrowD1Fy_set(DIMENSION self, int m_arrowD1Fy)"},
	 { (char *)"DIMENSION_m_arrowD1Fy_get", _wrap_DIMENSION_m_arrowD1Fy_get, METH_VARARGS, (char *)"DIMENSION_m_arrowD1Fy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowD2Ox_set", _wrap_DIMENSION_m_arrowD2Ox_set, METH_VARARGS, (char *)"DIMENSION_m_arrowD2Ox_set(DIMENSION self, int m_arrowD2Ox)"},
	 { (char *)"DIMENSION_m_arrowD2Ox_get", _wrap_DIMENSION_m_arrowD2Ox_get, METH_VARARGS, (char *)"DIMENSION_m_arrowD2Ox_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowD2Oy_set", _wrap_DIMENSION_m_arrowD2Oy_set, METH_VARARGS, (char *)"DIMENSION_m_arrowD2Oy_set(DIMENSION self, int m_arrowD2Oy)"},
	 { (char *)"DIMENSION_m_arrowD2Oy_get", _wrap_DIMENSION_m_arrowD2Oy_get, METH_VARARGS, (char *)"DIMENSION_m_arrowD2Oy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowD2Fx_set", _wrap_DIMENSION_m_arrowD2Fx_set, METH_VARARGS, (char *)"DIMENSION_m_arrowD2Fx_set(DIMENSION self, int m_arrowD2Fx)"},
	 { (char *)"DIMENSION_m_arrowD2Fx_get", _wrap_DIMENSION_m_arrowD2Fx_get, METH_VARARGS, (char *)"DIMENSION_m_arrowD2Fx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowD2Fy_set", _wrap_DIMENSION_m_arrowD2Fy_set, METH_VARARGS, (char *)"DIMENSION_m_arrowD2Fy_set(DIMENSION self, int m_arrowD2Fy)"},
	 { (char *)"DIMENSION_m_arrowD2Fy_get", _wrap_DIMENSION_m_arrowD2Fy_get, METH_VARARGS, (char *)"DIMENSION_m_arrowD2Fy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowG1Ox_set", _wrap_DIMENSION_m_arrowG1Ox_set, METH_VARARGS, (char *)"DIMENSION_m_arrowG1Ox_set(DIMENSION self, int m_arrowG1Ox)"},
	 { (char *)"DIMENSION_m_arrowG1Ox_get", _wrap_DIMENSION_m_arrowG1Ox_get, METH_VARARGS, (char *)"DIMENSION_m_arrowG1Ox_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowG1Oy_set", _wrap_DIMENSION_m_arrowG1Oy_set, METH_VARARGS, (char *)"DIMENSION_m_arrowG1Oy_set(DIMENSION self, int m_arrowG1Oy)"},
	 { (char *)"DIMENSION_m_arrowG1Oy_get", _wrap_DIMENSION_m_arrowG1Oy_get, METH_VARARGS, (char *)"DIMENSION_m_arrowG1Oy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowG1Fx_set", _wrap_DIMENSION_m_arrowG1Fx_set, METH_VARARGS, (char *)"DIMENSION_m_arrowG1Fx_set(DIMENSION self, int m_arrowG1Fx)"},
	 { (char *)"DIMENSION_m_arrowG1Fx_get", _wrap_DIMENSION_m_arrowG1Fx_get, METH_VARARGS, (char *)"DIMENSION_m_arrowG1Fx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowG1Fy_set", _wrap_DIMENSION_m_arrowG1Fy_set, METH_VARARGS, (char *)"DIMENSION_m_arrowG1Fy_set(DIMENSION self, int m_arrowG1Fy)"},
	 { (char *)"DIMENSION_m_arrowG1Fy_get", _wrap_DIMENSION_m_arrowG1Fy_get, METH_VARARGS, (char *)"DIMENSION_m_arrowG1Fy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowG2Ox_set", _wrap_DIMENSION_m_arrowG2Ox_set, METH_VARARGS, (char *)"DIMENSION_m_arrowG2Ox_set(DIMENSION self, int m_arrowG2Ox)"},
	 { (char *)"DIMENSION_m_arrowG2Ox_get", _wrap_DIMENSION_m_arrowG2Ox_get, METH_VARARGS, (char *)"DIMENSION_m_arrowG2Ox_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowG2Oy_set", _wrap_DIMENSION_m_arrowG2Oy_set, METH_VARARGS, (char *)"DIMENSION_m_arrowG2Oy_set(DIMENSION self, int m_arrowG2Oy)"},
	 { (char *)"DIMENSION_m_arrowG2Oy_get", _wrap_DIMENSION_m_arrowG2Oy_get, METH_VARARGS, (char *)"DIMENSION_m_arrowG2Oy_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowG2Fx_set", _wrap_DIMENSION_m_arrowG2Fx_set, METH_VARARGS, (char *)"DIMENSION_m_arrowG2Fx_set(DIMENSION self, int m_arrowG2Fx)"},
	 { (char *)"DIMENSION_m_arrowG2Fx_get", _wrap_DIMENSION_m_arrowG2Fx_get, METH_VARARGS, (char *)"DIMENSION_m_arrowG2Fx_get(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_m_arrowG2Fy_set", _wrap_DIMENSION_m_arrowG2Fy_set, METH_VARARGS, (char *)"DIMENSION_m_arrowG2Fy_set(DIMENSION self, int m_arrowG2Fy)"},
	 { (char *)"DIMENSION_m_arrowG2Fy_get", _wrap_DIMENSION_m_arrowG2Fy_get, METH_VARARGS, (char *)"DIMENSION_m_arrowG2Fy_get(DIMENSION self) -> int"},
	 { (char *)"new_DIMENSION", _wrap_new_DIMENSION, METH_VARARGS, (char *)"new_DIMENSION(BOARD_ITEM aParent) -> DIMENSION"},
	 { (char *)"delete_DIMENSION", _wrap_delete_DIMENSION, METH_VARARGS, (char *)"delete_DIMENSION(DIMENSION self)"},
	 { (char *)"DIMENSION_GetPosition", _wrap_DIMENSION_GetPosition, METH_VARARGS, (char *)"DIMENSION_GetPosition(DIMENSION self) -> wxPoint"},
	 { (char *)"DIMENSION_SetPosition", _wrap_DIMENSION_SetPosition, METH_VARARGS, (char *)"DIMENSION_SetPosition(DIMENSION self, wxPoint aPos)"},
	 { (char *)"DIMENSION_SetTextSize", _wrap_DIMENSION_SetTextSize, METH_VARARGS, (char *)"DIMENSION_SetTextSize(DIMENSION self, wxSize aTextSize)"},
	 { (char *)"DIMENSION_SetLayer", _wrap_DIMENSION_SetLayer, METH_VARARGS, (char *)"DIMENSION_SetLayer(DIMENSION self, int aLayer)"},
	 { (char *)"DIMENSION_SetShape", _wrap_DIMENSION_SetShape, METH_VARARGS, (char *)"DIMENSION_SetShape(DIMENSION self, int aShape)"},
	 { (char *)"DIMENSION_GetShape", _wrap_DIMENSION_GetShape, METH_VARARGS, (char *)"DIMENSION_GetShape(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_GetWidth", _wrap_DIMENSION_GetWidth, METH_VARARGS, (char *)"DIMENSION_GetWidth(DIMENSION self) -> int"},
	 { (char *)"DIMENSION_SetWidth", _wrap_DIMENSION_SetWidth, METH_VARARGS, (char *)"DIMENSION_SetWidth(DIMENSION self, int aWidth)"},
	 { (char *)"DIMENSION_AdjustDimensionDetails", _wrap_DIMENSION_AdjustDimensionDetails, METH_VARARGS, (char *)"\n"
		"AdjustDimensionDetails(bool aDoNotChangeText=False)\n"
		"DIMENSION_AdjustDimensionDetails(DIMENSION self)\n"
		""},
	 { (char *)"DIMENSION_SetText", _wrap_DIMENSION_SetText, METH_VARARGS, (char *)"DIMENSION_SetText(DIMENSION self, wxString const & NewText)"},
	 { (char *)"DIMENSION_GetText", _wrap_DIMENSION_GetText, METH_VARARGS, (char *)"DIMENSION_GetText(DIMENSION self) -> wxString const"},
	 { (char *)"DIMENSION_Copy", _wrap_DIMENSION_Copy, METH_VARARGS, (char *)"DIMENSION_Copy(DIMENSION self, DIMENSION source)"},
	 { (char *)"DIMENSION_Draw", _wrap_DIMENSION_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aColorMode, wxPoint offset=)\n"
		"DIMENSION_Draw(DIMENSION self, EDA_DRAW_PANEL * panel, wxDC * DC, int aColorMode)\n"
		""},
	 { (char *)"DIMENSION_Move", _wrap_DIMENSION_Move, METH_VARARGS, (char *)"DIMENSION_Move(DIMENSION self, wxPoint offset)"},
	 { (char *)"DIMENSION_Rotate", _wrap_DIMENSION_Rotate, METH_VARARGS, (char *)"DIMENSION_Rotate(DIMENSION self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"DIMENSION_Flip", _wrap_DIMENSION_Flip, METH_VARARGS, (char *)"DIMENSION_Flip(DIMENSION self, wxPoint aCentre)"},
	 { (char *)"DIMENSION_Mirror", _wrap_DIMENSION_Mirror, METH_VARARGS, (char *)"DIMENSION_Mirror(DIMENSION self, wxPoint axis_pos)"},
	 { (char *)"DIMENSION_DisplayInfo", _wrap_DIMENSION_DisplayInfo, METH_VARARGS, (char *)"DIMENSION_DisplayInfo(DIMENSION self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"DIMENSION_HitTest", _wrap_DIMENSION_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"DIMENSION_HitTest(DIMENSION self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"DIMENSION_GetClass", _wrap_DIMENSION_GetClass, METH_VARARGS, (char *)"DIMENSION_GetClass(DIMENSION self) -> wxString"},
	 { (char *)"DIMENSION_GetBoundingBox", _wrap_DIMENSION_GetBoundingBox, METH_VARARGS, (char *)"DIMENSION_GetBoundingBox(DIMENSION self) -> EDA_RECT"},
	 { (char *)"DIMENSION_GetSelectMenuText", _wrap_DIMENSION_GetSelectMenuText, METH_VARARGS, (char *)"DIMENSION_GetSelectMenuText(DIMENSION self) -> wxString"},
	 { (char *)"DIMENSION_GetMenuImage", _wrap_DIMENSION_GetMenuImage, METH_VARARGS, (char *)"DIMENSION_GetMenuImage(DIMENSION self) -> BITMAP_DEF"},
	 { (char *)"DIMENSION_Clone", _wrap_DIMENSION_Clone, METH_VARARGS, (char *)"DIMENSION_Clone(DIMENSION self) -> EDA_ITEM"},
	 { (char *)"DIMENSION_swigregister", DIMENSION_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DRAWSEGMENT", _wrap_new_DRAWSEGMENT, METH_VARARGS, (char *)"\n"
		"DRAWSEGMENT(BOARD_ITEM aParent=None, KICAD_T idtype=PCB_LINE_T)\n"
		"DRAWSEGMENT(BOARD_ITEM aParent=None)\n"
		"new_DRAWSEGMENT() -> DRAWSEGMENT\n"
		""},
	 { (char *)"delete_DRAWSEGMENT", _wrap_delete_DRAWSEGMENT, METH_VARARGS, (char *)"delete_DRAWSEGMENT(DRAWSEGMENT self)"},
	 { (char *)"DRAWSEGMENT_Next", _wrap_DRAWSEGMENT_Next, METH_VARARGS, (char *)"DRAWSEGMENT_Next(DRAWSEGMENT self) -> DRAWSEGMENT"},
	 { (char *)"DRAWSEGMENT_Back", _wrap_DRAWSEGMENT_Back, METH_VARARGS, (char *)"DRAWSEGMENT_Back(DRAWSEGMENT self) -> DRAWSEGMENT"},
	 { (char *)"DRAWSEGMENT_SetWidth", _wrap_DRAWSEGMENT_SetWidth, METH_VARARGS, (char *)"DRAWSEGMENT_SetWidth(DRAWSEGMENT self, int aWidth)"},
	 { (char *)"DRAWSEGMENT_GetWidth", _wrap_DRAWSEGMENT_GetWidth, METH_VARARGS, (char *)"DRAWSEGMENT_GetWidth(DRAWSEGMENT self) -> int"},
	 { (char *)"DRAWSEGMENT_SetAngle", _wrap_DRAWSEGMENT_SetAngle, METH_VARARGS, (char *)"DRAWSEGMENT_SetAngle(DRAWSEGMENT self, double aAngle)"},
	 { (char *)"DRAWSEGMENT_GetAngle", _wrap_DRAWSEGMENT_GetAngle, METH_VARARGS, (char *)"DRAWSEGMENT_GetAngle(DRAWSEGMENT self) -> double"},
	 { (char *)"DRAWSEGMENT_SetType", _wrap_DRAWSEGMENT_SetType, METH_VARARGS, (char *)"DRAWSEGMENT_SetType(DRAWSEGMENT self, int aType)"},
	 { (char *)"DRAWSEGMENT_GetType", _wrap_DRAWSEGMENT_GetType, METH_VARARGS, (char *)"DRAWSEGMENT_GetType(DRAWSEGMENT self) -> int"},
	 { (char *)"DRAWSEGMENT_SetShape", _wrap_DRAWSEGMENT_SetShape, METH_VARARGS, (char *)"DRAWSEGMENT_SetShape(DRAWSEGMENT self, STROKE_T aShape)"},
	 { (char *)"DRAWSEGMENT_GetShape", _wrap_DRAWSEGMENT_GetShape, METH_VARARGS, (char *)"DRAWSEGMENT_GetShape(DRAWSEGMENT self) -> STROKE_T"},
	 { (char *)"DRAWSEGMENT_SetBezControl1", _wrap_DRAWSEGMENT_SetBezControl1, METH_VARARGS, (char *)"DRAWSEGMENT_SetBezControl1(DRAWSEGMENT self, wxPoint aPoint)"},
	 { (char *)"DRAWSEGMENT_GetBezControl1", _wrap_DRAWSEGMENT_GetBezControl1, METH_VARARGS, (char *)"DRAWSEGMENT_GetBezControl1(DRAWSEGMENT self) -> wxPoint"},
	 { (char *)"DRAWSEGMENT_SetBezControl2", _wrap_DRAWSEGMENT_SetBezControl2, METH_VARARGS, (char *)"DRAWSEGMENT_SetBezControl2(DRAWSEGMENT self, wxPoint aPoint)"},
	 { (char *)"DRAWSEGMENT_GetBezControl2", _wrap_DRAWSEGMENT_GetBezControl2, METH_VARARGS, (char *)"DRAWSEGMENT_GetBezControl2(DRAWSEGMENT self) -> wxPoint"},
	 { (char *)"DRAWSEGMENT_SetPosition", _wrap_DRAWSEGMENT_SetPosition, METH_VARARGS, (char *)"DRAWSEGMENT_SetPosition(DRAWSEGMENT self, wxPoint aPos)"},
	 { (char *)"DRAWSEGMENT_GetPosition", _wrap_DRAWSEGMENT_GetPosition, METH_VARARGS, (char *)"DRAWSEGMENT_GetPosition(DRAWSEGMENT self) -> wxPoint"},
	 { (char *)"DRAWSEGMENT_GetStart", _wrap_DRAWSEGMENT_GetStart, METH_VARARGS, (char *)"DRAWSEGMENT_GetStart(DRAWSEGMENT self) -> wxPoint"},
	 { (char *)"DRAWSEGMENT_SetStart", _wrap_DRAWSEGMENT_SetStart, METH_VARARGS, (char *)"DRAWSEGMENT_SetStart(DRAWSEGMENT self, wxPoint aStart)"},
	 { (char *)"DRAWSEGMENT_SetStartY", _wrap_DRAWSEGMENT_SetStartY, METH_VARARGS, (char *)"DRAWSEGMENT_SetStartY(DRAWSEGMENT self, int y)"},
	 { (char *)"DRAWSEGMENT_SetStartX", _wrap_DRAWSEGMENT_SetStartX, METH_VARARGS, (char *)"DRAWSEGMENT_SetStartX(DRAWSEGMENT self, int x)"},
	 { (char *)"DRAWSEGMENT_GetEnd", _wrap_DRAWSEGMENT_GetEnd, METH_VARARGS, (char *)"DRAWSEGMENT_GetEnd(DRAWSEGMENT self) -> wxPoint"},
	 { (char *)"DRAWSEGMENT_SetEnd", _wrap_DRAWSEGMENT_SetEnd, METH_VARARGS, (char *)"DRAWSEGMENT_SetEnd(DRAWSEGMENT self, wxPoint aEnd)"},
	 { (char *)"DRAWSEGMENT_SetEndY", _wrap_DRAWSEGMENT_SetEndY, METH_VARARGS, (char *)"DRAWSEGMENT_SetEndY(DRAWSEGMENT self, int y)"},
	 { (char *)"DRAWSEGMENT_SetEndX", _wrap_DRAWSEGMENT_SetEndX, METH_VARARGS, (char *)"DRAWSEGMENT_SetEndX(DRAWSEGMENT self, int x)"},
	 { (char *)"DRAWSEGMENT_GetCenter", _wrap_DRAWSEGMENT_GetCenter, METH_VARARGS, (char *)"DRAWSEGMENT_GetCenter(DRAWSEGMENT self) -> wxPoint"},
	 { (char *)"DRAWSEGMENT_GetArcStart", _wrap_DRAWSEGMENT_GetArcStart, METH_VARARGS, (char *)"DRAWSEGMENT_GetArcStart(DRAWSEGMENT self) -> wxPoint"},
	 { (char *)"DRAWSEGMENT_GetArcEnd", _wrap_DRAWSEGMENT_GetArcEnd, METH_VARARGS, (char *)"DRAWSEGMENT_GetArcEnd(DRAWSEGMENT self) -> wxPoint"},
	 { (char *)"DRAWSEGMENT_GetArcAngleStart", _wrap_DRAWSEGMENT_GetArcAngleStart, METH_VARARGS, (char *)"DRAWSEGMENT_GetArcAngleStart(DRAWSEGMENT self) -> double const"},
	 { (char *)"DRAWSEGMENT_GetRadius", _wrap_DRAWSEGMENT_GetRadius, METH_VARARGS, (char *)"DRAWSEGMENT_GetRadius(DRAWSEGMENT self) -> int"},
	 { (char *)"DRAWSEGMENT_GetParentModule", _wrap_DRAWSEGMENT_GetParentModule, METH_VARARGS, (char *)"DRAWSEGMENT_GetParentModule(DRAWSEGMENT self) -> MODULE"},
	 { (char *)"DRAWSEGMENT_GetBezierPoints", _wrap_DRAWSEGMENT_GetBezierPoints, METH_VARARGS, (char *)"DRAWSEGMENT_GetBezierPoints(DRAWSEGMENT self) -> std::vector< wxPoint,std::allocator< wxPoint > > const &"},
	 { (char *)"DRAWSEGMENT_GetPolyPoints", _wrap_DRAWSEGMENT_GetPolyPoints, METH_VARARGS, (char *)"DRAWSEGMENT_GetPolyPoints(DRAWSEGMENT self) -> std::vector< wxPoint,std::allocator< wxPoint > > const &"},
	 { (char *)"DRAWSEGMENT_SetBezierPoints", _wrap_DRAWSEGMENT_SetBezierPoints, METH_VARARGS, (char *)"DRAWSEGMENT_SetBezierPoints(DRAWSEGMENT self, std::vector< wxPoint,std::allocator< wxPoint > > const & aPoints)"},
	 { (char *)"DRAWSEGMENT_SetPolyPoints", _wrap_DRAWSEGMENT_SetPolyPoints, METH_VARARGS, (char *)"DRAWSEGMENT_SetPolyPoints(DRAWSEGMENT self, std::vector< wxPoint,std::allocator< wxPoint > > const & aPoints)"},
	 { (char *)"DRAWSEGMENT_Copy", _wrap_DRAWSEGMENT_Copy, METH_VARARGS, (char *)"DRAWSEGMENT_Copy(DRAWSEGMENT self, DRAWSEGMENT source)"},
	 { (char *)"DRAWSEGMENT_Draw", _wrap_DRAWSEGMENT_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)\n"
		"DRAWSEGMENT_Draw(DRAWSEGMENT self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"DRAWSEGMENT_DisplayInfo", _wrap_DRAWSEGMENT_DisplayInfo, METH_VARARGS, (char *)"DRAWSEGMENT_DisplayInfo(DRAWSEGMENT self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"DRAWSEGMENT_GetBoundingBox", _wrap_DRAWSEGMENT_GetBoundingBox, METH_VARARGS, (char *)"DRAWSEGMENT_GetBoundingBox(DRAWSEGMENT self) -> EDA_RECT"},
	 { (char *)"DRAWSEGMENT_HitTest", _wrap_DRAWSEGMENT_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"DRAWSEGMENT_HitTest(DRAWSEGMENT self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"DRAWSEGMENT_GetClass", _wrap_DRAWSEGMENT_GetClass, METH_VARARGS, (char *)"DRAWSEGMENT_GetClass(DRAWSEGMENT self) -> wxString"},
	 { (char *)"DRAWSEGMENT_GetLength", _wrap_DRAWSEGMENT_GetLength, METH_VARARGS, (char *)"DRAWSEGMENT_GetLength(DRAWSEGMENT self) -> double"},
	 { (char *)"DRAWSEGMENT_Move", _wrap_DRAWSEGMENT_Move, METH_VARARGS, (char *)"DRAWSEGMENT_Move(DRAWSEGMENT self, wxPoint aMoveVector)"},
	 { (char *)"DRAWSEGMENT_Rotate", _wrap_DRAWSEGMENT_Rotate, METH_VARARGS, (char *)"DRAWSEGMENT_Rotate(DRAWSEGMENT self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"DRAWSEGMENT_Flip", _wrap_DRAWSEGMENT_Flip, METH_VARARGS, (char *)"DRAWSEGMENT_Flip(DRAWSEGMENT self, wxPoint aCentre)"},
	 { (char *)"DRAWSEGMENT_TransformShapeWithClearanceToPolygon", _wrap_DRAWSEGMENT_TransformShapeWithClearanceToPolygon, METH_VARARGS, (char *)"\n"
		"DRAWSEGMENT_TransformShapeWithClearanceToPolygon(DRAWSEGMENT self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, \n"
		"    int aClearanceValue, int aCircleToSegmentsCount, double aCorrectionFactor)\n"
		""},
	 { (char *)"DRAWSEGMENT_GetSelectMenuText", _wrap_DRAWSEGMENT_GetSelectMenuText, METH_VARARGS, (char *)"DRAWSEGMENT_GetSelectMenuText(DRAWSEGMENT self) -> wxString"},
	 { (char *)"DRAWSEGMENT_GetMenuImage", _wrap_DRAWSEGMENT_GetMenuImage, METH_VARARGS, (char *)"DRAWSEGMENT_GetMenuImage(DRAWSEGMENT self) -> BITMAP_DEF"},
	 { (char *)"DRAWSEGMENT_Clone", _wrap_DRAWSEGMENT_Clone, METH_VARARGS, (char *)"DRAWSEGMENT_Clone(DRAWSEGMENT self) -> EDA_ITEM"},
	 { (char *)"DRAWSEGMENT_swigregister", DRAWSEGMENT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MARKER_PCB", _wrap_new_MARKER_PCB, METH_VARARGS, (char *)"\n"
		"MARKER_PCB(BOARD_ITEM aParent)\n"
		"MARKER_PCB(int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos, wxString const & bText, \n"
		"    wxPoint bPos)\n"
		"new_MARKER_PCB(int aErrorCode, wxPoint aMarkerPos, wxString const & aText, wxPoint aPos) -> MARKER_PCB\n"
		""},
	 { (char *)"delete_MARKER_PCB", _wrap_delete_MARKER_PCB, METH_VARARGS, (char *)"delete_MARKER_PCB(MARKER_PCB self)"},
	 { (char *)"MARKER_PCB_Move", _wrap_MARKER_PCB_Move, METH_VARARGS, (char *)"MARKER_PCB_Move(MARKER_PCB self, wxPoint aMoveVector)"},
	 { (char *)"MARKER_PCB_Rotate", _wrap_MARKER_PCB_Rotate, METH_VARARGS, (char *)"MARKER_PCB_Rotate(MARKER_PCB self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"MARKER_PCB_Flip", _wrap_MARKER_PCB_Flip, METH_VARARGS, (char *)"MARKER_PCB_Flip(MARKER_PCB self, wxPoint aCentre)"},
	 { (char *)"MARKER_PCB_Draw", _wrap_MARKER_PCB_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)\n"
		"MARKER_PCB_Draw(MARKER_PCB self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)\n"
		""},
	 { (char *)"MARKER_PCB_GetPosition", _wrap_MARKER_PCB_GetPosition, METH_VARARGS, (char *)"MARKER_PCB_GetPosition(MARKER_PCB self) -> wxPoint"},
	 { (char *)"MARKER_PCB_SetPosition", _wrap_MARKER_PCB_SetPosition, METH_VARARGS, (char *)"MARKER_PCB_SetPosition(MARKER_PCB self, wxPoint aPos)"},
	 { (char *)"MARKER_PCB_HitTest", _wrap_MARKER_PCB_HitTest, METH_VARARGS, (char *)"MARKER_PCB_HitTest(MARKER_PCB self, wxPoint aPosition) -> bool"},
	 { (char *)"MARKER_PCB_IsOnLayer", _wrap_MARKER_PCB_IsOnLayer, METH_VARARGS, (char *)"MARKER_PCB_IsOnLayer(MARKER_PCB self, int aLayer) -> bool"},
	 { (char *)"MARKER_PCB_DisplayInfo", _wrap_MARKER_PCB_DisplayInfo, METH_VARARGS, (char *)"MARKER_PCB_DisplayInfo(MARKER_PCB self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"MARKER_PCB_GetSelectMenuText", _wrap_MARKER_PCB_GetSelectMenuText, METH_VARARGS, (char *)"MARKER_PCB_GetSelectMenuText(MARKER_PCB self) -> wxString"},
	 { (char *)"MARKER_PCB_GetMenuImage", _wrap_MARKER_PCB_GetMenuImage, METH_VARARGS, (char *)"MARKER_PCB_GetMenuImage(MARKER_PCB self) -> BITMAP_DEF"},
	 { (char *)"MARKER_PCB_swigregister", MARKER_PCB_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TEXTE_MODULE", _wrap_new_TEXTE_MODULE, METH_VARARGS, (char *)"\n"
		"TEXTE_MODULE(MODULE parent, int text_type=2)\n"
		"new_TEXTE_MODULE(MODULE parent) -> TEXTE_MODULE\n"
		""},
	 { (char *)"delete_TEXTE_MODULE", _wrap_delete_TEXTE_MODULE, METH_VARARGS, (char *)"delete_TEXTE_MODULE(TEXTE_MODULE self)"},
	 { (char *)"TEXTE_MODULE_Next", _wrap_TEXTE_MODULE_Next, METH_VARARGS, (char *)"TEXTE_MODULE_Next(TEXTE_MODULE self) -> TEXTE_MODULE"},
	 { (char *)"TEXTE_MODULE_Back", _wrap_TEXTE_MODULE_Back, METH_VARARGS, (char *)"TEXTE_MODULE_Back(TEXTE_MODULE self) -> TEXTE_MODULE"},
	 { (char *)"TEXTE_MODULE_SetPosition", _wrap_TEXTE_MODULE_SetPosition, METH_VARARGS, (char *)"TEXTE_MODULE_SetPosition(TEXTE_MODULE self, wxPoint aPos)"},
	 { (char *)"TEXTE_MODULE_GetPosition", _wrap_TEXTE_MODULE_GetPosition, METH_VARARGS, (char *)"TEXTE_MODULE_GetPosition(TEXTE_MODULE self) -> wxPoint"},
	 { (char *)"TEXTE_MODULE_SetType", _wrap_TEXTE_MODULE_SetType, METH_VARARGS, (char *)"TEXTE_MODULE_SetType(TEXTE_MODULE self, int aType)"},
	 { (char *)"TEXTE_MODULE_GetType", _wrap_TEXTE_MODULE_GetType, METH_VARARGS, (char *)"TEXTE_MODULE_GetType(TEXTE_MODULE self) -> int"},
	 { (char *)"TEXTE_MODULE_SetVisible", _wrap_TEXTE_MODULE_SetVisible, METH_VARARGS, (char *)"TEXTE_MODULE_SetVisible(TEXTE_MODULE self, bool isVisible)"},
	 { (char *)"TEXTE_MODULE_IsVisible", _wrap_TEXTE_MODULE_IsVisible, METH_VARARGS, (char *)"TEXTE_MODULE_IsVisible(TEXTE_MODULE self) -> bool"},
	 { (char *)"TEXTE_MODULE_SetPos0", _wrap_TEXTE_MODULE_SetPos0, METH_VARARGS, (char *)"TEXTE_MODULE_SetPos0(TEXTE_MODULE self, wxPoint aPos)"},
	 { (char *)"TEXTE_MODULE_GetPos0", _wrap_TEXTE_MODULE_GetPos0, METH_VARARGS, (char *)"TEXTE_MODULE_GetPos0(TEXTE_MODULE self) -> wxPoint"},
	 { (char *)"TEXTE_MODULE_Copy", _wrap_TEXTE_MODULE_Copy, METH_VARARGS, (char *)"TEXTE_MODULE_Copy(TEXTE_MODULE self, TEXTE_MODULE source)"},
	 { (char *)"TEXTE_MODULE_GetLength", _wrap_TEXTE_MODULE_GetLength, METH_VARARGS, (char *)"TEXTE_MODULE_GetLength(TEXTE_MODULE self) -> int"},
	 { (char *)"TEXTE_MODULE_GetDrawRotation", _wrap_TEXTE_MODULE_GetDrawRotation, METH_VARARGS, (char *)"TEXTE_MODULE_GetDrawRotation(TEXTE_MODULE self) -> int"},
	 { (char *)"TEXTE_MODULE_GetTextRect", _wrap_TEXTE_MODULE_GetTextRect, METH_VARARGS, (char *)"TEXTE_MODULE_GetTextRect(TEXTE_MODULE self) -> EDA_RECT"},
	 { (char *)"TEXTE_MODULE_GetBoundingBox", _wrap_TEXTE_MODULE_GetBoundingBox, METH_VARARGS, (char *)"TEXTE_MODULE_GetBoundingBox(TEXTE_MODULE self) -> EDA_RECT"},
	 { (char *)"TEXTE_MODULE_SetDrawCoord", _wrap_TEXTE_MODULE_SetDrawCoord, METH_VARARGS, (char *)"TEXTE_MODULE_SetDrawCoord(TEXTE_MODULE self)"},
	 { (char *)"TEXTE_MODULE_SetLocalCoord", _wrap_TEXTE_MODULE_SetLocalCoord, METH_VARARGS, (char *)"TEXTE_MODULE_SetLocalCoord(TEXTE_MODULE self)"},
	 { (char *)"TEXTE_MODULE_Draw", _wrap_TEXTE_MODULE_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)\n"
		"TEXTE_MODULE_Draw(TEXTE_MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"TEXTE_MODULE_DrawUmbilical", _wrap_TEXTE_MODULE_DrawUmbilical, METH_VARARGS, (char *)"\n"
		"DrawUmbilical(EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)\n"
		"TEXTE_MODULE_DrawUmbilical(TEXTE_MODULE self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)\n"
		""},
	 { (char *)"TEXTE_MODULE_DisplayInfo", _wrap_TEXTE_MODULE_DisplayInfo, METH_VARARGS, (char *)"TEXTE_MODULE_DisplayInfo(TEXTE_MODULE self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"TEXTE_MODULE_HitTest", _wrap_TEXTE_MODULE_HitTest, METH_VARARGS, (char *)"TEXTE_MODULE_HitTest(TEXTE_MODULE self, wxPoint aPosition) -> bool"},
	 { (char *)"TEXTE_MODULE_IsOnLayer", _wrap_TEXTE_MODULE_IsOnLayer, METH_VARARGS, (char *)"TEXTE_MODULE_IsOnLayer(TEXTE_MODULE self, int aLayer) -> bool"},
	 { (char *)"TEXTE_MODULE_GetClass", _wrap_TEXTE_MODULE_GetClass, METH_VARARGS, (char *)"TEXTE_MODULE_GetClass(TEXTE_MODULE self) -> wxString"},
	 { (char *)"TEXTE_MODULE_GetSelectMenuText", _wrap_TEXTE_MODULE_GetSelectMenuText, METH_VARARGS, (char *)"TEXTE_MODULE_GetSelectMenuText(TEXTE_MODULE self) -> wxString"},
	 { (char *)"TEXTE_MODULE_GetMenuImage", _wrap_TEXTE_MODULE_GetMenuImage, METH_VARARGS, (char *)"TEXTE_MODULE_GetMenuImage(TEXTE_MODULE self) -> BITMAP_DEF"},
	 { (char *)"TEXTE_MODULE_Clone", _wrap_TEXTE_MODULE_Clone, METH_VARARGS, (char *)"TEXTE_MODULE_Clone(TEXTE_MODULE self) -> EDA_ITEM"},
	 { (char *)"TEXTE_MODULE_swigregister", TEXTE_MODULE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EDGE_MODULE", _wrap_new_EDGE_MODULE, METH_VARARGS, (char *)"\n"
		"EDGE_MODULE(MODULE parent, STROKE_T aShape=S_SEGMENT)\n"
		"new_EDGE_MODULE(MODULE parent) -> EDGE_MODULE\n"
		""},
	 { (char *)"delete_EDGE_MODULE", _wrap_delete_EDGE_MODULE, METH_VARARGS, (char *)"delete_EDGE_MODULE(EDGE_MODULE self)"},
	 { (char *)"EDGE_MODULE_Next", _wrap_EDGE_MODULE_Next, METH_VARARGS, (char *)"EDGE_MODULE_Next(EDGE_MODULE self) -> EDGE_MODULE"},
	 { (char *)"EDGE_MODULE_Back", _wrap_EDGE_MODULE_Back, METH_VARARGS, (char *)"EDGE_MODULE_Back(EDGE_MODULE self) -> EDGE_MODULE"},
	 { (char *)"EDGE_MODULE_Copy", _wrap_EDGE_MODULE_Copy, METH_VARARGS, (char *)"EDGE_MODULE_Copy(EDGE_MODULE self, EDGE_MODULE source)"},
	 { (char *)"EDGE_MODULE_SetStart0", _wrap_EDGE_MODULE_SetStart0, METH_VARARGS, (char *)"EDGE_MODULE_SetStart0(EDGE_MODULE self, wxPoint aPoint)"},
	 { (char *)"EDGE_MODULE_GetStart0", _wrap_EDGE_MODULE_GetStart0, METH_VARARGS, (char *)"EDGE_MODULE_GetStart0(EDGE_MODULE self) -> wxPoint"},
	 { (char *)"EDGE_MODULE_SetEnd0", _wrap_EDGE_MODULE_SetEnd0, METH_VARARGS, (char *)"EDGE_MODULE_SetEnd0(EDGE_MODULE self, wxPoint aPoint)"},
	 { (char *)"EDGE_MODULE_GetEnd0", _wrap_EDGE_MODULE_GetEnd0, METH_VARARGS, (char *)"EDGE_MODULE_GetEnd0(EDGE_MODULE self) -> wxPoint"},
	 { (char *)"EDGE_MODULE_SetDrawCoord", _wrap_EDGE_MODULE_SetDrawCoord, METH_VARARGS, (char *)"EDGE_MODULE_SetDrawCoord(EDGE_MODULE self)"},
	 { (char *)"EDGE_MODULE_Draw", _wrap_EDGE_MODULE_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)\n"
		"EDGE_MODULE_Draw(EDGE_MODULE self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"EDGE_MODULE_Draw3D", _wrap_EDGE_MODULE_Draw3D, METH_VARARGS, (char *)"EDGE_MODULE_Draw3D(EDGE_MODULE self, EDA_3D_CANVAS * glcanvas)"},
	 { (char *)"EDGE_MODULE_DisplayInfo", _wrap_EDGE_MODULE_DisplayInfo, METH_VARARGS, (char *)"EDGE_MODULE_DisplayInfo(EDGE_MODULE self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"EDGE_MODULE_GetClass", _wrap_EDGE_MODULE_GetClass, METH_VARARGS, (char *)"EDGE_MODULE_GetClass(EDGE_MODULE self) -> wxString"},
	 { (char *)"EDGE_MODULE_GetSelectMenuText", _wrap_EDGE_MODULE_GetSelectMenuText, METH_VARARGS, (char *)"EDGE_MODULE_GetSelectMenuText(EDGE_MODULE self) -> wxString"},
	 { (char *)"EDGE_MODULE_GetMenuImage", _wrap_EDGE_MODULE_GetMenuImage, METH_VARARGS, (char *)"EDGE_MODULE_GetMenuImage(EDGE_MODULE self) -> BITMAP_DEF"},
	 { (char *)"EDGE_MODULE_Clone", _wrap_EDGE_MODULE_Clone, METH_VARARGS, (char *)"EDGE_MODULE_Clone(EDGE_MODULE self) -> EDA_ITEM"},
	 { (char *)"EDGE_MODULE_m_Start0_set", _wrap_EDGE_MODULE_m_Start0_set, METH_VARARGS, (char *)"EDGE_MODULE_m_Start0_set(EDGE_MODULE self, wxPoint m_Start0)"},
	 { (char *)"EDGE_MODULE_m_Start0_get", _wrap_EDGE_MODULE_m_Start0_get, METH_VARARGS, (char *)"EDGE_MODULE_m_Start0_get(EDGE_MODULE self) -> wxPoint"},
	 { (char *)"EDGE_MODULE_m_End0_set", _wrap_EDGE_MODULE_m_End0_set, METH_VARARGS, (char *)"EDGE_MODULE_m_End0_set(EDGE_MODULE self, wxPoint m_End0)"},
	 { (char *)"EDGE_MODULE_m_End0_get", _wrap_EDGE_MODULE_m_End0_get, METH_VARARGS, (char *)"EDGE_MODULE_m_End0_get(EDGE_MODULE self) -> wxPoint"},
	 { (char *)"EDGE_MODULE_swigregister", EDGE_MODULE_swigregister, METH_VARARGS, NULL},
	 { (char *)"ZONE_SETTINGS_m_FillMode_set", _wrap_ZONE_SETTINGS_m_FillMode_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_FillMode_set(ZONE_SETTINGS self, int m_FillMode)"},
	 { (char *)"ZONE_SETTINGS_m_FillMode_get", _wrap_ZONE_SETTINGS_m_FillMode_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_FillMode_get(ZONE_SETTINGS self) -> int"},
	 { (char *)"ZONE_SETTINGS_m_ZonePriority_set", _wrap_ZONE_SETTINGS_m_ZonePriority_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ZonePriority_set(ZONE_SETTINGS self, int m_ZonePriority)"},
	 { (char *)"ZONE_SETTINGS_m_ZonePriority_get", _wrap_ZONE_SETTINGS_m_ZonePriority_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ZonePriority_get(ZONE_SETTINGS self) -> int"},
	 { (char *)"ZONE_SETTINGS_m_ZoneClearance_set", _wrap_ZONE_SETTINGS_m_ZoneClearance_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ZoneClearance_set(ZONE_SETTINGS self, int m_ZoneClearance)"},
	 { (char *)"ZONE_SETTINGS_m_ZoneClearance_get", _wrap_ZONE_SETTINGS_m_ZoneClearance_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ZoneClearance_get(ZONE_SETTINGS self) -> int"},
	 { (char *)"ZONE_SETTINGS_m_ZoneMinThickness_set", _wrap_ZONE_SETTINGS_m_ZoneMinThickness_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ZoneMinThickness_set(ZONE_SETTINGS self, int m_ZoneMinThickness)"},
	 { (char *)"ZONE_SETTINGS_m_ZoneMinThickness_get", _wrap_ZONE_SETTINGS_m_ZoneMinThickness_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ZoneMinThickness_get(ZONE_SETTINGS self) -> int"},
	 { (char *)"ZONE_SETTINGS_m_NetcodeSelection_set", _wrap_ZONE_SETTINGS_m_NetcodeSelection_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_NetcodeSelection_set(ZONE_SETTINGS self, int m_NetcodeSelection)"},
	 { (char *)"ZONE_SETTINGS_m_NetcodeSelection_get", _wrap_ZONE_SETTINGS_m_NetcodeSelection_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_NetcodeSelection_get(ZONE_SETTINGS self) -> int"},
	 { (char *)"ZONE_SETTINGS_m_CurrentZone_Layer_set", _wrap_ZONE_SETTINGS_m_CurrentZone_Layer_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_CurrentZone_Layer_set(ZONE_SETTINGS self, int m_CurrentZone_Layer)"},
	 { (char *)"ZONE_SETTINGS_m_CurrentZone_Layer_get", _wrap_ZONE_SETTINGS_m_CurrentZone_Layer_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_CurrentZone_Layer_get(ZONE_SETTINGS self) -> int"},
	 { (char *)"ZONE_SETTINGS_m_Zone_HatchingStyle_set", _wrap_ZONE_SETTINGS_m_Zone_HatchingStyle_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_Zone_HatchingStyle_set(ZONE_SETTINGS self, int m_Zone_HatchingStyle)"},
	 { (char *)"ZONE_SETTINGS_m_Zone_HatchingStyle_get", _wrap_ZONE_SETTINGS_m_Zone_HatchingStyle_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_Zone_HatchingStyle_get(ZONE_SETTINGS self) -> int"},
	 { (char *)"ZONE_SETTINGS_m_ArcToSegmentsCount_set", _wrap_ZONE_SETTINGS_m_ArcToSegmentsCount_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ArcToSegmentsCount_set(ZONE_SETTINGS self, int m_ArcToSegmentsCount)"},
	 { (char *)"ZONE_SETTINGS_m_ArcToSegmentsCount_get", _wrap_ZONE_SETTINGS_m_ArcToSegmentsCount_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ArcToSegmentsCount_get(ZONE_SETTINGS self) -> int"},
	 { (char *)"ZONE_SETTINGS_m_ThermalReliefGap_set", _wrap_ZONE_SETTINGS_m_ThermalReliefGap_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ThermalReliefGap_set(ZONE_SETTINGS self, long m_ThermalReliefGap)"},
	 { (char *)"ZONE_SETTINGS_m_ThermalReliefGap_get", _wrap_ZONE_SETTINGS_m_ThermalReliefGap_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ThermalReliefGap_get(ZONE_SETTINGS self) -> long"},
	 { (char *)"ZONE_SETTINGS_m_ThermalReliefCopperBridge_set", _wrap_ZONE_SETTINGS_m_ThermalReliefCopperBridge_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ThermalReliefCopperBridge_set(ZONE_SETTINGS self, long m_ThermalReliefCopperBridge)"},
	 { (char *)"ZONE_SETTINGS_m_ThermalReliefCopperBridge_get", _wrap_ZONE_SETTINGS_m_ThermalReliefCopperBridge_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_ThermalReliefCopperBridge_get(ZONE_SETTINGS self) -> long"},
	 { (char *)"ZONE_SETTINGS_m_Zone_45_Only_set", _wrap_ZONE_SETTINGS_m_Zone_45_Only_set, METH_VARARGS, (char *)"ZONE_SETTINGS_m_Zone_45_Only_set(ZONE_SETTINGS self, bool m_Zone_45_Only)"},
	 { (char *)"ZONE_SETTINGS_m_Zone_45_Only_get", _wrap_ZONE_SETTINGS_m_Zone_45_Only_get, METH_VARARGS, (char *)"ZONE_SETTINGS_m_Zone_45_Only_get(ZONE_SETTINGS self) -> bool"},
	 { (char *)"new_ZONE_SETTINGS", _wrap_new_ZONE_SETTINGS, METH_VARARGS, (char *)"new_ZONE_SETTINGS() -> ZONE_SETTINGS"},
	 { (char *)"ZONE_SETTINGS___lshift__", _wrap_ZONE_SETTINGS___lshift__, METH_VARARGS, (char *)"ZONE_SETTINGS___lshift__(ZONE_SETTINGS self, ZONE_CONTAINER const & aSource) -> ZONE_SETTINGS"},
	 { (char *)"ZONE_SETTINGS_ExportSetting", _wrap_ZONE_SETTINGS_ExportSetting, METH_VARARGS, (char *)"\n"
		"ExportSetting(ZONE_CONTAINER & aTarget, bool aFullExport=True)\n"
		"ZONE_SETTINGS_ExportSetting(ZONE_SETTINGS self, ZONE_CONTAINER & aTarget)\n"
		""},
	 { (char *)"ZONE_SETTINGS_SetCornerSmoothingType", _wrap_ZONE_SETTINGS_SetCornerSmoothingType, METH_VARARGS, (char *)"ZONE_SETTINGS_SetCornerSmoothingType(ZONE_SETTINGS self, int aType)"},
	 { (char *)"ZONE_SETTINGS_GetCornerSmoothingType", _wrap_ZONE_SETTINGS_GetCornerSmoothingType, METH_VARARGS, (char *)"ZONE_SETTINGS_GetCornerSmoothingType(ZONE_SETTINGS self) -> int"},
	 { (char *)"ZONE_SETTINGS_SetCornerRadius", _wrap_ZONE_SETTINGS_SetCornerRadius, METH_VARARGS, (char *)"ZONE_SETTINGS_SetCornerRadius(ZONE_SETTINGS self, int aRadius)"},
	 { (char *)"ZONE_SETTINGS_GetCornerRadius", _wrap_ZONE_SETTINGS_GetCornerRadius, METH_VARARGS, (char *)"ZONE_SETTINGS_GetCornerRadius(ZONE_SETTINGS self) -> unsigned int"},
	 { (char *)"ZONE_SETTINGS_GetPadConnection", _wrap_ZONE_SETTINGS_GetPadConnection, METH_VARARGS, (char *)"ZONE_SETTINGS_GetPadConnection(ZONE_SETTINGS self) -> ZoneConnection"},
	 { (char *)"ZONE_SETTINGS_SetPadConnection", _wrap_ZONE_SETTINGS_SetPadConnection, METH_VARARGS, (char *)"ZONE_SETTINGS_SetPadConnection(ZONE_SETTINGS self, ZoneConnection aPadConnection)"},
	 { (char *)"ZONE_SETTINGS_GetIsKeepout", _wrap_ZONE_SETTINGS_GetIsKeepout, METH_VARARGS, (char *)"ZONE_SETTINGS_GetIsKeepout(ZONE_SETTINGS self) -> bool const"},
	 { (char *)"ZONE_SETTINGS_GetDoNotAllowCopperPour", _wrap_ZONE_SETTINGS_GetDoNotAllowCopperPour, METH_VARARGS, (char *)"ZONE_SETTINGS_GetDoNotAllowCopperPour(ZONE_SETTINGS self) -> bool const"},
	 { (char *)"ZONE_SETTINGS_GetDoNotAllowVias", _wrap_ZONE_SETTINGS_GetDoNotAllowVias, METH_VARARGS, (char *)"ZONE_SETTINGS_GetDoNotAllowVias(ZONE_SETTINGS self) -> bool const"},
	 { (char *)"ZONE_SETTINGS_GetDoNotAllowTracks", _wrap_ZONE_SETTINGS_GetDoNotAllowTracks, METH_VARARGS, (char *)"ZONE_SETTINGS_GetDoNotAllowTracks(ZONE_SETTINGS self) -> bool const"},
	 { (char *)"ZONE_SETTINGS_SetIsKeepout", _wrap_ZONE_SETTINGS_SetIsKeepout, METH_VARARGS, (char *)"ZONE_SETTINGS_SetIsKeepout(ZONE_SETTINGS self, bool aEnable)"},
	 { (char *)"ZONE_SETTINGS_SetDoNotAllowCopperPour", _wrap_ZONE_SETTINGS_SetDoNotAllowCopperPour, METH_VARARGS, (char *)"ZONE_SETTINGS_SetDoNotAllowCopperPour(ZONE_SETTINGS self, bool aEnable)"},
	 { (char *)"ZONE_SETTINGS_SetDoNotAllowVias", _wrap_ZONE_SETTINGS_SetDoNotAllowVias, METH_VARARGS, (char *)"ZONE_SETTINGS_SetDoNotAllowVias(ZONE_SETTINGS self, bool aEnable)"},
	 { (char *)"ZONE_SETTINGS_SetDoNotAllowTracks", _wrap_ZONE_SETTINGS_SetDoNotAllowTracks, METH_VARARGS, (char *)"ZONE_SETTINGS_SetDoNotAllowTracks(ZONE_SETTINGS self, bool aEnable)"},
	 { (char *)"delete_ZONE_SETTINGS", _wrap_delete_ZONE_SETTINGS, METH_VARARGS, (char *)"delete_ZONE_SETTINGS(ZONE_SETTINGS self)"},
	 { (char *)"ZONE_SETTINGS_swigregister", ZONE_SETTINGS_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NETCLASS", _wrap_new_NETCLASS, METH_VARARGS, (char *)"\n"
		"NETCLASS(BOARD aParent, wxString const & aName, NETCLASS initialParameters=None)\n"
		"new_NETCLASS(BOARD aParent, wxString const & aName) -> NETCLASS\n"
		""},
	 { (char *)"delete_NETCLASS", _wrap_delete_NETCLASS, METH_VARARGS, (char *)"delete_NETCLASS(NETCLASS self)"},
	 { (char *)"NETCLASS_GetClass", _wrap_NETCLASS_GetClass, METH_VARARGS, (char *)"NETCLASS_GetClass(NETCLASS self) -> wxString"},
	 { (char *)"NETCLASS_GetName", _wrap_NETCLASS_GetName, METH_VARARGS, (char *)"NETCLASS_GetName(NETCLASS self) -> wxString const &"},
	 { (char *)"NETCLASS_SetName", _wrap_NETCLASS_SetName, METH_VARARGS, (char *)"NETCLASS_SetName(NETCLASS self, wxString const & aName)"},
	 { (char *)"NETCLASS_GetCount", _wrap_NETCLASS_GetCount, METH_VARARGS, (char *)"NETCLASS_GetCount(NETCLASS self) -> unsigned int"},
	 { (char *)"NETCLASS_Clear", _wrap_NETCLASS_Clear, METH_VARARGS, (char *)"NETCLASS_Clear(NETCLASS self)"},
	 { (char *)"NETCLASS_AddNative", _wrap_NETCLASS_AddNative, METH_VARARGS, (char *)"NETCLASS_AddNative(NETCLASS self, wxString const & aNetname)"},
	 { (char *)"NETCLASS_begin", _wrap_NETCLASS_begin, METH_VARARGS, (char *)"\n"
		"begin() -> NETCLASS::iterator\n"
		"NETCLASS_begin(NETCLASS self) -> NETCLASS::const_iterator\n"
		""},
	 { (char *)"NETCLASS_end", _wrap_NETCLASS_end, METH_VARARGS, (char *)"\n"
		"end() -> NETCLASS::iterator\n"
		"NETCLASS_end(NETCLASS self) -> NETCLASS::const_iterator\n"
		""},
	 { (char *)"NETCLASS_Remove", _wrap_NETCLASS_Remove, METH_VARARGS, (char *)"\n"
		"Remove(NETCLASS::iterator aName)\n"
		"NETCLASS_Remove(NETCLASS self, wxString const & aName)\n"
		""},
	 { (char *)"NETCLASS_GetDescription", _wrap_NETCLASS_GetDescription, METH_VARARGS, (char *)"NETCLASS_GetDescription(NETCLASS self) -> wxString const &"},
	 { (char *)"NETCLASS_SetDescription", _wrap_NETCLASS_SetDescription, METH_VARARGS, (char *)"NETCLASS_SetDescription(NETCLASS self, wxString const & aDesc)"},
	 { (char *)"NETCLASS_GetClearance", _wrap_NETCLASS_GetClearance, METH_VARARGS, (char *)"NETCLASS_GetClearance(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_SetClearance", _wrap_NETCLASS_SetClearance, METH_VARARGS, (char *)"NETCLASS_SetClearance(NETCLASS self, int aClearance)"},
	 { (char *)"NETCLASS_GetTrackWidth", _wrap_NETCLASS_GetTrackWidth, METH_VARARGS, (char *)"NETCLASS_GetTrackWidth(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_GetTrackMinWidth", _wrap_NETCLASS_GetTrackMinWidth, METH_VARARGS, (char *)"NETCLASS_GetTrackMinWidth(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_SetTrackWidth", _wrap_NETCLASS_SetTrackWidth, METH_VARARGS, (char *)"NETCLASS_SetTrackWidth(NETCLASS self, int aWidth)"},
	 { (char *)"NETCLASS_GetViaDiameter", _wrap_NETCLASS_GetViaDiameter, METH_VARARGS, (char *)"NETCLASS_GetViaDiameter(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_GetViaMinDiameter", _wrap_NETCLASS_GetViaMinDiameter, METH_VARARGS, (char *)"NETCLASS_GetViaMinDiameter(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_SetViaDiameter", _wrap_NETCLASS_SetViaDiameter, METH_VARARGS, (char *)"NETCLASS_SetViaDiameter(NETCLASS self, int aDia)"},
	 { (char *)"NETCLASS_GetViaDrill", _wrap_NETCLASS_GetViaDrill, METH_VARARGS, (char *)"NETCLASS_GetViaDrill(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_GetViaMinDrill", _wrap_NETCLASS_GetViaMinDrill, METH_VARARGS, (char *)"NETCLASS_GetViaMinDrill(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_SetViaDrill", _wrap_NETCLASS_SetViaDrill, METH_VARARGS, (char *)"NETCLASS_SetViaDrill(NETCLASS self, int aSize)"},
	 { (char *)"NETCLASS_GetuViaDiameter", _wrap_NETCLASS_GetuViaDiameter, METH_VARARGS, (char *)"NETCLASS_GetuViaDiameter(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_GetuViaMinDiameter", _wrap_NETCLASS_GetuViaMinDiameter, METH_VARARGS, (char *)"NETCLASS_GetuViaMinDiameter(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_SetuViaDiameter", _wrap_NETCLASS_SetuViaDiameter, METH_VARARGS, (char *)"NETCLASS_SetuViaDiameter(NETCLASS self, int aSize)"},
	 { (char *)"NETCLASS_GetuViaDrill", _wrap_NETCLASS_GetuViaDrill, METH_VARARGS, (char *)"NETCLASS_GetuViaDrill(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_GetuViaMinDrill", _wrap_NETCLASS_GetuViaMinDrill, METH_VARARGS, (char *)"NETCLASS_GetuViaMinDrill(NETCLASS self) -> int"},
	 { (char *)"NETCLASS_SetuViaDrill", _wrap_NETCLASS_SetuViaDrill, METH_VARARGS, (char *)"NETCLASS_SetuViaDrill(NETCLASS self, int aSize)"},
	 { (char *)"NETCLASS_SetParams", _wrap_NETCLASS_SetParams, METH_VARARGS, (char *)"\n"
		"SetParams(NETCLASS defaults=None)\n"
		"NETCLASS_SetParams(NETCLASS self)\n"
		""},
	 { (char *)"NETCLASS_Format", _wrap_NETCLASS_Format, METH_VARARGS, (char *)"NETCLASS_Format(NETCLASS self, OUTPUTFORMATTER * aFormatter, int aNestLevel, int aControlBits)"},
	 { (char *)"NETCLASS_swigregister", NETCLASS_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NETCLASSES", _wrap_new_NETCLASSES, METH_VARARGS, (char *)"\n"
		"NETCLASSES(BOARD aParent=None)\n"
		"new_NETCLASSES() -> NETCLASSES\n"
		""},
	 { (char *)"delete_NETCLASSES", _wrap_delete_NETCLASSES, METH_VARARGS, (char *)"delete_NETCLASSES(NETCLASSES self)"},
	 { (char *)"NETCLASSES_Clear", _wrap_NETCLASSES_Clear, METH_VARARGS, (char *)"NETCLASSES_Clear(NETCLASSES self)"},
	 { (char *)"NETCLASSES_begin", _wrap_NETCLASSES_begin, METH_VARARGS, (char *)"\n"
		"begin() -> NETCLASSES::iterator\n"
		"NETCLASSES_begin(NETCLASSES self) -> NETCLASSES::const_iterator\n"
		""},
	 { (char *)"NETCLASSES_end", _wrap_NETCLASSES_end, METH_VARARGS, (char *)"\n"
		"end() -> NETCLASSES::iterator\n"
		"NETCLASSES_end(NETCLASSES self) -> NETCLASSES::const_iterator\n"
		""},
	 { (char *)"NETCLASSES_GetCount", _wrap_NETCLASSES_GetCount, METH_VARARGS, (char *)"NETCLASSES_GetCount(NETCLASSES self) -> unsigned int"},
	 { (char *)"NETCLASSES_GetDefault", _wrap_NETCLASSES_GetDefault, METH_VARARGS, (char *)"NETCLASSES_GetDefault(NETCLASSES self) -> NETCLASS"},
	 { (char *)"NETCLASSES_AddNative", _wrap_NETCLASSES_AddNative, METH_VARARGS, (char *)"NETCLASSES_AddNative(NETCLASSES self, NETCLASS aNetclass) -> bool"},
	 { (char *)"NETCLASSES_Remove", _wrap_NETCLASSES_Remove, METH_VARARGS, (char *)"NETCLASSES_Remove(NETCLASSES self, wxString const & aNetName) -> NETCLASS"},
	 { (char *)"NETCLASSES_Find", _wrap_NETCLASSES_Find, METH_VARARGS, (char *)"NETCLASSES_Find(NETCLASSES self, wxString const & aName) -> NETCLASS"},
	 { (char *)"NETCLASSES_swigregister", NETCLASSES_swigregister, METH_VARARGS, NULL},
	 { (char *)"Cast_to_BOARD_ITEM", _wrap_Cast_to_BOARD_ITEM, METH_VARARGS, (char *)"Cast_to_BOARD_ITEM(EDA_ITEM base) -> BOARD_ITEM"},
	 { (char *)"GetBoard", _wrap_GetBoard, METH_VARARGS, (char *)"GetBoard() -> BOARD"},
	 { (char *)"LoadBoard", _wrap_LoadBoard, METH_VARARGS, (char *)"\n"
		"LoadBoard(wxString & aFileName, IO_MGR::PCB_FILE_T aFormat) -> BOARD\n"
		"LoadBoard(wxString & aFileName) -> BOARD\n"
		""},
	 { (char *)"SaveBoard", _wrap_SaveBoard, METH_VARARGS, (char *)"\n"
		"SaveBoard(wxString & aFileName, BOARD aBoard, IO_MGR::PCB_FILE_T aFormat) -> bool\n"
		"SaveBoard(wxString & aFileName, BOARD aBoard) -> bool\n"
		""},
	 { (char *)"IO_MGR_PluginFind", _wrap_IO_MGR_PluginFind, METH_VARARGS, (char *)"IO_MGR_PluginFind(IO_MGR::PCB_FILE_T aFileType) -> PLUGIN"},
	 { (char *)"IO_MGR_PluginRelease", _wrap_IO_MGR_PluginRelease, METH_VARARGS, (char *)"IO_MGR_PluginRelease(PLUGIN aPlugin)"},
	 { (char *)"IO_MGR_ShowType", _wrap_IO_MGR_ShowType, METH_VARARGS, (char *)"IO_MGR_ShowType(IO_MGR::PCB_FILE_T aFileType) -> wxString const"},
	 { (char *)"IO_MGR_GetFileExtension", _wrap_IO_MGR_GetFileExtension, METH_VARARGS, (char *)"IO_MGR_GetFileExtension(IO_MGR::PCB_FILE_T aFileType) -> wxString const"},
	 { (char *)"IO_MGR_Load", _wrap_IO_MGR_Load, METH_VARARGS, (char *)"\n"
		"Load(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aAppendToMe=None, \n"
		"    PROPERTIES * aProperties=None) -> BOARD\n"
		"Load(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aAppendToMe=None) -> BOARD\n"
		"IO_MGR_Load(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName) -> BOARD\n"
		""},
	 { (char *)"IO_MGR_Save", _wrap_IO_MGR_Save, METH_VARARGS, (char *)"\n"
		"Save(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aBoard, PROPERTIES * aProperties=None)\n"
		"IO_MGR_Save(IO_MGR::PCB_FILE_T aFileType, wxString const & aFileName, BOARD aBoard)\n"
		""},
	 { (char *)"new_IO_MGR", _wrap_new_IO_MGR, METH_VARARGS, (char *)"new_IO_MGR() -> IO_MGR"},
	 { (char *)"delete_IO_MGR", _wrap_delete_IO_MGR, METH_VARARGS, (char *)"delete_IO_MGR(IO_MGR self)"},
	 { (char *)"IO_MGR_swigregister", IO_MGR_swigregister, METH_VARARGS, NULL},
	 { (char *)"PLUGIN_PluginName", _wrap_PLUGIN_PluginName, METH_VARARGS, (char *)"PLUGIN_PluginName(PLUGIN self) -> wxString const &"},
	 { (char *)"PLUGIN_GetFileExtension", _wrap_PLUGIN_GetFileExtension, METH_VARARGS, (char *)"PLUGIN_GetFileExtension(PLUGIN self) -> wxString const &"},
	 { (char *)"PLUGIN_Load", _wrap_PLUGIN_Load, METH_VARARGS, (char *)"\n"
		"Load(wxString const & aFileName, BOARD aAppendToMe, PROPERTIES * aProperties=None) -> BOARD\n"
		"PLUGIN_Load(PLUGIN self, wxString const & aFileName, BOARD aAppendToMe) -> BOARD\n"
		""},
	 { (char *)"PLUGIN_Save", _wrap_PLUGIN_Save, METH_VARARGS, (char *)"\n"
		"Save(wxString const & aFileName, BOARD aBoard, PROPERTIES * aProperties=None)\n"
		"PLUGIN_Save(PLUGIN self, wxString const & aFileName, BOARD aBoard)\n"
		""},
	 { (char *)"PLUGIN_FootprintEnumerate", _wrap_PLUGIN_FootprintEnumerate, METH_VARARGS, (char *)"\n"
		"FootprintEnumerate(wxString const & aLibraryPath, PROPERTIES * aProperties=None) -> wxArrayString\n"
		"PLUGIN_FootprintEnumerate(PLUGIN self, wxString const & aLibraryPath) -> wxArrayString\n"
		""},
	 { (char *)"PLUGIN_FootprintLoad", _wrap_PLUGIN_FootprintLoad, METH_VARARGS, (char *)"\n"
		"FootprintLoad(wxString const & aLibraryPath, wxString const & aFootprintName, PROPERTIES * aProperties=None) -> MODULE\n"
		"PLUGIN_FootprintLoad(PLUGIN self, wxString const & aLibraryPath, wxString const & aFootprintName) -> MODULE\n"
		""},
	 { (char *)"PLUGIN_FootprintSave", _wrap_PLUGIN_FootprintSave, METH_VARARGS, (char *)"\n"
		"FootprintSave(wxString const & aLibraryPath, MODULE aFootprint, PROPERTIES * aProperties=None)\n"
		"PLUGIN_FootprintSave(PLUGIN self, wxString const & aLibraryPath, MODULE aFootprint)\n"
		""},
	 { (char *)"PLUGIN_FootprintDelete", _wrap_PLUGIN_FootprintDelete, METH_VARARGS, (char *)"PLUGIN_FootprintDelete(PLUGIN self, wxString const & aLibraryPath, wxString const & aFootprintName)"},
	 { (char *)"PLUGIN_FootprintLibCreate", _wrap_PLUGIN_FootprintLibCreate, METH_VARARGS, (char *)"\n"
		"FootprintLibCreate(wxString const & aLibraryPath, PROPERTIES * aProperties=None)\n"
		"PLUGIN_FootprintLibCreate(PLUGIN self, wxString const & aLibraryPath)\n"
		""},
	 { (char *)"PLUGIN_FootprintLibDelete", _wrap_PLUGIN_FootprintLibDelete, METH_VARARGS, (char *)"\n"
		"FootprintLibDelete(wxString const & aLibraryPath, PROPERTIES * aProperties=None)\n"
		"PLUGIN_FootprintLibDelete(PLUGIN self, wxString const & aLibraryPath)\n"
		""},
	 { (char *)"PLUGIN_IsFootprintLibWritable", _wrap_PLUGIN_IsFootprintLibWritable, METH_VARARGS, (char *)"PLUGIN_IsFootprintLibWritable(PLUGIN self, wxString const & aLibraryPath) -> bool"},
	 { (char *)"delete_PLUGIN", _wrap_delete_PLUGIN, METH_VARARGS, (char *)"delete_PLUGIN(PLUGIN self)"},
	 { (char *)"PLUGIN_swigregister", PLUGIN_swigregister, METH_VARARGS, NULL},
	 { (char *)"PCB_IO_PluginName", _wrap_PCB_IO_PluginName, METH_VARARGS, (char *)"PCB_IO_PluginName(PCB_IO self) -> wxString const &"},
	 { (char *)"PCB_IO_GetFileExtension", _wrap_PCB_IO_GetFileExtension, METH_VARARGS, (char *)"PCB_IO_GetFileExtension(PCB_IO self) -> wxString const &"},
	 { (char *)"PCB_IO_Save", _wrap_PCB_IO_Save, METH_VARARGS, (char *)"\n"
		"Save(wxString const & aFileName, BOARD aBoard, PROPERTIES * aProperties=None)\n"
		"PCB_IO_Save(PCB_IO self, wxString const & aFileName, BOARD aBoard)\n"
		""},
	 { (char *)"PCB_IO_Load", _wrap_PCB_IO_Load, METH_VARARGS, (char *)"\n"
		"Load(wxString const & aFileName, BOARD aAppendToMe, PROPERTIES * aProperties=None) -> BOARD\n"
		"PCB_IO_Load(PCB_IO self, wxString const & aFileName, BOARD aAppendToMe) -> BOARD\n"
		""},
	 { (char *)"new_PCB_IO", _wrap_new_PCB_IO, METH_VARARGS, (char *)"new_PCB_IO() -> PCB_IO"},
	 { (char *)"PCB_IO_Format", _wrap_PCB_IO_Format, METH_VARARGS, (char *)"\n"
		"Format(BOARD_ITEM aItem, int aNestLevel=0)\n"
		"PCB_IO_Format(PCB_IO self, BOARD_ITEM aItem)\n"
		""},
	 { (char *)"PCB_IO_GetStringOutput", _wrap_PCB_IO_GetStringOutput, METH_VARARGS, (char *)"PCB_IO_GetStringOutput(PCB_IO self, bool doClear) -> std::string"},
	 { (char *)"delete_PCB_IO", _wrap_delete_PCB_IO, METH_VARARGS, (char *)"delete_PCB_IO(PCB_IO self)"},
	 { (char *)"PCB_IO_swigregister", PCB_IO_swigregister, METH_VARARGS, NULL},
	 { (char *)"BOARD_ITEM_List_Get", _wrap_BOARD_ITEM_List_Get, METH_VARARGS, (char *)"BOARD_ITEM_List_Get(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List___deref__", _wrap_BOARD_ITEM_List___deref__, METH_VARARGS, (char *)"BOARD_ITEM_List___deref__(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_GetFirst", _wrap_BOARD_ITEM_List_GetFirst, METH_VARARGS, (char *)"BOARD_ITEM_List_GetFirst(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_GetLast", _wrap_BOARD_ITEM_List_GetLast, METH_VARARGS, (char *)"BOARD_ITEM_List_GetLast(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_Append", _wrap_BOARD_ITEM_List_Append, METH_VARARGS, (char *)"\n"
		"Append(BOARD_ITEM aNewElement)\n"
		"BOARD_ITEM_List_Append(BOARD_ITEM_List self, BOARD_ITEM_List aList)\n"
		""},
	 { (char *)"BOARD_ITEM_List_Insert", _wrap_BOARD_ITEM_List_Insert, METH_VARARGS, (char *)"BOARD_ITEM_List_Insert(BOARD_ITEM_List self, BOARD_ITEM aNewElement, BOARD_ITEM aElementAfterMe)"},
	 { (char *)"BOARD_ITEM_List_Remove", _wrap_BOARD_ITEM_List_Remove, METH_VARARGS, (char *)"BOARD_ITEM_List_Remove(BOARD_ITEM_List self, BOARD_ITEM aElement) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_begin", _wrap_BOARD_ITEM_List_begin, METH_VARARGS, (char *)"BOARD_ITEM_List_begin(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_end", _wrap_BOARD_ITEM_List_end, METH_VARARGS, (char *)"BOARD_ITEM_List_end(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_PopFront", _wrap_BOARD_ITEM_List_PopFront, METH_VARARGS, (char *)"BOARD_ITEM_List_PopFront(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_PopBack", _wrap_BOARD_ITEM_List_PopBack, METH_VARARGS, (char *)"BOARD_ITEM_List_PopBack(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_PushFront", _wrap_BOARD_ITEM_List_PushFront, METH_VARARGS, (char *)"BOARD_ITEM_List_PushFront(BOARD_ITEM_List self, BOARD_ITEM aNewElement)"},
	 { (char *)"BOARD_ITEM_List_PushBack", _wrap_BOARD_ITEM_List_PushBack, METH_VARARGS, (char *)"BOARD_ITEM_List_PushBack(BOARD_ITEM_List self, BOARD_ITEM aNewElement)"},
	 { (char *)"new_BOARD_ITEM_List", _wrap_new_BOARD_ITEM_List, METH_VARARGS, (char *)"new_BOARD_ITEM_List() -> BOARD_ITEM_List"},
	 { (char *)"delete_BOARD_ITEM_List", _wrap_delete_BOARD_ITEM_List, METH_VARARGS, (char *)"delete_BOARD_ITEM_List(BOARD_ITEM_List self)"},
	 { (char *)"BOARD_ITEM_List_Next", _wrap_BOARD_ITEM_List_Next, METH_VARARGS, (char *)"BOARD_ITEM_List_Next(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_Back", _wrap_BOARD_ITEM_List_Back, METH_VARARGS, (char *)"BOARD_ITEM_List_Back(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_GetParent", _wrap_BOARD_ITEM_List_GetParent, METH_VARARGS, (char *)"BOARD_ITEM_List_GetParent(BOARD_ITEM_List self) -> BOARD_ITEM"},
	 { (char *)"BOARD_ITEM_List_GetLayer", _wrap_BOARD_ITEM_List_GetLayer, METH_VARARGS, (char *)"BOARD_ITEM_List_GetLayer(BOARD_ITEM_List self) -> int"},
	 { (char *)"BOARD_ITEM_List_SetLayer", _wrap_BOARD_ITEM_List_SetLayer, METH_VARARGS, (char *)"BOARD_ITEM_List_SetLayer(BOARD_ITEM_List self, int aLayer)"},
	 { (char *)"BOARD_ITEM_List_Draw", _wrap_BOARD_ITEM_List_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint offset=)\n"
		"BOARD_ITEM_List_Draw(BOARD_ITEM_List self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"BOARD_ITEM_List_IsOnLayer", _wrap_BOARD_ITEM_List_IsOnLayer, METH_VARARGS, (char *)"BOARD_ITEM_List_IsOnLayer(BOARD_ITEM_List self, int aLayer) -> bool"},
	 { (char *)"BOARD_ITEM_List_IsTrack", _wrap_BOARD_ITEM_List_IsTrack, METH_VARARGS, (char *)"BOARD_ITEM_List_IsTrack(BOARD_ITEM_List self) -> bool"},
	 { (char *)"BOARD_ITEM_List_IsLocked", _wrap_BOARD_ITEM_List_IsLocked, METH_VARARGS, (char *)"BOARD_ITEM_List_IsLocked(BOARD_ITEM_List self) -> bool"},
	 { (char *)"BOARD_ITEM_List_UnLink", _wrap_BOARD_ITEM_List_UnLink, METH_VARARGS, (char *)"BOARD_ITEM_List_UnLink(BOARD_ITEM_List self)"},
	 { (char *)"BOARD_ITEM_List_DeleteStructure", _wrap_BOARD_ITEM_List_DeleteStructure, METH_VARARGS, (char *)"BOARD_ITEM_List_DeleteStructure(BOARD_ITEM_List self)"},
	 { (char *)"BOARD_ITEM_List_ShowShape", _wrap_BOARD_ITEM_List_ShowShape, METH_VARARGS, (char *)"BOARD_ITEM_List_ShowShape(BOARD_ITEM_List self, STROKE_T aShape) -> wxString"},
	 { (char *)"BOARD_ITEM_List_Move", _wrap_BOARD_ITEM_List_Move, METH_VARARGS, (char *)"BOARD_ITEM_List_Move(BOARD_ITEM_List self, wxPoint aMoveVector)"},
	 { (char *)"BOARD_ITEM_List_Rotate", _wrap_BOARD_ITEM_List_Rotate, METH_VARARGS, (char *)"BOARD_ITEM_List_Rotate(BOARD_ITEM_List self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"BOARD_ITEM_List_Flip", _wrap_BOARD_ITEM_List_Flip, METH_VARARGS, (char *)"BOARD_ITEM_List_Flip(BOARD_ITEM_List self, wxPoint aCentre)"},
	 { (char *)"BOARD_ITEM_List_GetBoard", _wrap_BOARD_ITEM_List_GetBoard, METH_VARARGS, (char *)"BOARD_ITEM_List_GetBoard(BOARD_ITEM_List self) -> BOARD"},
	 { (char *)"BOARD_ITEM_List_GetLayerName", _wrap_BOARD_ITEM_List_GetLayerName, METH_VARARGS, (char *)"BOARD_ITEM_List_GetLayerName(BOARD_ITEM_List self) -> wxString"},
	 { (char *)"BOARD_ITEM_List_FormatInternalUnits", _wrap_BOARD_ITEM_List_FormatInternalUnits, METH_VARARGS, (char *)"\n"
		"FormatInternalUnits(int aValue) -> std::string\n"
		"FormatInternalUnits(wxPoint aPoint) -> std::string\n"
		"BOARD_ITEM_List_FormatInternalUnits(BOARD_ITEM_List self, wxSize aSize) -> std::string\n"
		""},
	 { (char *)"BOARD_ITEM_List_FormatAngle", _wrap_BOARD_ITEM_List_FormatAngle, METH_VARARGS, (char *)"BOARD_ITEM_List_FormatAngle(BOARD_ITEM_List self, double aAngle) -> std::string"},
	 { (char *)"BOARD_ITEM_List_Cast_to_TEXTE_PCB", _wrap_BOARD_ITEM_List_Cast_to_TEXTE_PCB, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_TEXTE_PCB(BOARD_ITEM_List self) -> TEXTE_PCB"},
	 { (char *)"BOARD_ITEM_List_Cast_to_DIMENSION", _wrap_BOARD_ITEM_List_Cast_to_DIMENSION, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_DIMENSION(BOARD_ITEM_List self) -> DIMENSION"},
	 { (char *)"BOARD_ITEM_List_Cast_to_MODULE", _wrap_BOARD_ITEM_List_Cast_to_MODULE, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_MODULE(BOARD_ITEM_List self) -> MODULE"},
	 { (char *)"BOARD_ITEM_List_Cast_to_TEXTE_MODULE", _wrap_BOARD_ITEM_List_Cast_to_TEXTE_MODULE, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_TEXTE_MODULE(BOARD_ITEM_List self) -> TEXTE_MODULE"},
	 { (char *)"BOARD_ITEM_List_Cast_to_DRAWSEGMENT", _wrap_BOARD_ITEM_List_Cast_to_DRAWSEGMENT, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_DRAWSEGMENT(BOARD_ITEM_List self) -> DRAWSEGMENT"},
	 { (char *)"BOARD_ITEM_List_Cast_to_MARKER_PCB", _wrap_BOARD_ITEM_List_Cast_to_MARKER_PCB, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_MARKER_PCB(BOARD_ITEM_List self) -> MARKER_PCB"},
	 { (char *)"BOARD_ITEM_List_Cast_to_BOARD", _wrap_BOARD_ITEM_List_Cast_to_BOARD, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_BOARD(BOARD_ITEM_List self) -> BOARD"},
	 { (char *)"BOARD_ITEM_List_Cast_to_EDGE_MODULE", _wrap_BOARD_ITEM_List_Cast_to_EDGE_MODULE, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_EDGE_MODULE(BOARD_ITEM_List self) -> EDGE_MODULE"},
	 { (char *)"BOARD_ITEM_List_Cast_to_D_PAD", _wrap_BOARD_ITEM_List_Cast_to_D_PAD, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_D_PAD(BOARD_ITEM_List self) -> D_PAD"},
	 { (char *)"BOARD_ITEM_List_Cast_to_TRACK", _wrap_BOARD_ITEM_List_Cast_to_TRACK, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_TRACK(BOARD_ITEM_List self) -> TRACK"},
	 { (char *)"BOARD_ITEM_List_Cast_to_SEGZONE", _wrap_BOARD_ITEM_List_Cast_to_SEGZONE, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_SEGZONE(BOARD_ITEM_List self) -> SEGZONE"},
	 { (char *)"BOARD_ITEM_List_Cast_to_SEGVIA", _wrap_BOARD_ITEM_List_Cast_to_SEGVIA, METH_VARARGS, (char *)"BOARD_ITEM_List_Cast_to_SEGVIA(BOARD_ITEM_List self) -> SEGVIA"},
	 { (char *)"BOARD_ITEM_List_Type", _wrap_BOARD_ITEM_List_Type, METH_VARARGS, (char *)"BOARD_ITEM_List_Type(BOARD_ITEM_List self) -> KICAD_T"},
	 { (char *)"BOARD_ITEM_List_SetTimeStamp", _wrap_BOARD_ITEM_List_SetTimeStamp, METH_VARARGS, (char *)"BOARD_ITEM_List_SetTimeStamp(BOARD_ITEM_List self, time_t aNewTimeStamp)"},
	 { (char *)"BOARD_ITEM_List_GetTimeStamp", _wrap_BOARD_ITEM_List_GetTimeStamp, METH_VARARGS, (char *)"BOARD_ITEM_List_GetTimeStamp(BOARD_ITEM_List self) -> time_t"},
	 { (char *)"BOARD_ITEM_List_GetSon", _wrap_BOARD_ITEM_List_GetSon, METH_VARARGS, (char *)"BOARD_ITEM_List_GetSon(BOARD_ITEM_List self) -> EDA_ITEM"},
	 { (char *)"BOARD_ITEM_List_GetList", _wrap_BOARD_ITEM_List_GetList, METH_VARARGS, (char *)"BOARD_ITEM_List_GetList(BOARD_ITEM_List self) -> DHEAD"},
	 { (char *)"BOARD_ITEM_List_SetParent", _wrap_BOARD_ITEM_List_SetParent, METH_VARARGS, (char *)"BOARD_ITEM_List_SetParent(BOARD_ITEM_List self, EDA_ITEM aParent)"},
	 { (char *)"BOARD_ITEM_List_SetSon", _wrap_BOARD_ITEM_List_SetSon, METH_VARARGS, (char *)"BOARD_ITEM_List_SetSon(BOARD_ITEM_List self, EDA_ITEM aSon)"},
	 { (char *)"BOARD_ITEM_List_SetList", _wrap_BOARD_ITEM_List_SetList, METH_VARARGS, (char *)"BOARD_ITEM_List_SetList(BOARD_ITEM_List self, DHEAD aList)"},
	 { (char *)"BOARD_ITEM_List_IsNew", _wrap_BOARD_ITEM_List_IsNew, METH_VARARGS, (char *)"BOARD_ITEM_List_IsNew(BOARD_ITEM_List self) -> bool"},
	 { (char *)"BOARD_ITEM_List_IsModified", _wrap_BOARD_ITEM_List_IsModified, METH_VARARGS, (char *)"BOARD_ITEM_List_IsModified(BOARD_ITEM_List self) -> bool"},
	 { (char *)"BOARD_ITEM_List_IsMoving", _wrap_BOARD_ITEM_List_IsMoving, METH_VARARGS, (char *)"BOARD_ITEM_List_IsMoving(BOARD_ITEM_List self) -> bool"},
	 { (char *)"BOARD_ITEM_List_IsDragging", _wrap_BOARD_ITEM_List_IsDragging, METH_VARARGS, (char *)"BOARD_ITEM_List_IsDragging(BOARD_ITEM_List self) -> bool"},
	 { (char *)"BOARD_ITEM_List_IsSelected", _wrap_BOARD_ITEM_List_IsSelected, METH_VARARGS, (char *)"BOARD_ITEM_List_IsSelected(BOARD_ITEM_List self) -> bool"},
	 { (char *)"BOARD_ITEM_List_IsResized", _wrap_BOARD_ITEM_List_IsResized, METH_VARARGS, (char *)"BOARD_ITEM_List_IsResized(BOARD_ITEM_List self) -> bool"},
	 { (char *)"BOARD_ITEM_List_SetModified", _wrap_BOARD_ITEM_List_SetModified, METH_VARARGS, (char *)"BOARD_ITEM_List_SetModified(BOARD_ITEM_List self)"},
	 { (char *)"BOARD_ITEM_List_GetState", _wrap_BOARD_ITEM_List_GetState, METH_VARARGS, (char *)"BOARD_ITEM_List_GetState(BOARD_ITEM_List self, int type) -> int"},
	 { (char *)"BOARD_ITEM_List_SetState", _wrap_BOARD_ITEM_List_SetState, METH_VARARGS, (char *)"BOARD_ITEM_List_SetState(BOARD_ITEM_List self, int type, int state)"},
	 { (char *)"BOARD_ITEM_List_GetStatus", _wrap_BOARD_ITEM_List_GetStatus, METH_VARARGS, (char *)"BOARD_ITEM_List_GetStatus(BOARD_ITEM_List self) -> int"},
	 { (char *)"BOARD_ITEM_List_SetStatus", _wrap_BOARD_ITEM_List_SetStatus, METH_VARARGS, (char *)"BOARD_ITEM_List_SetStatus(BOARD_ITEM_List self, int aStatus)"},
	 { (char *)"BOARD_ITEM_List_SetFlags", _wrap_BOARD_ITEM_List_SetFlags, METH_VARARGS, (char *)"BOARD_ITEM_List_SetFlags(BOARD_ITEM_List self, int aMask)"},
	 { (char *)"BOARD_ITEM_List_ClearFlags", _wrap_BOARD_ITEM_List_ClearFlags, METH_VARARGS, (char *)"\n"
		"ClearFlags(int aMask=-1)\n"
		"BOARD_ITEM_List_ClearFlags(BOARD_ITEM_List self)\n"
		""},
	 { (char *)"BOARD_ITEM_List_GetFlags", _wrap_BOARD_ITEM_List_GetFlags, METH_VARARGS, (char *)"BOARD_ITEM_List_GetFlags(BOARD_ITEM_List self) -> int"},
	 { (char *)"BOARD_ITEM_List_SetImage", _wrap_BOARD_ITEM_List_SetImage, METH_VARARGS, (char *)"BOARD_ITEM_List_SetImage(BOARD_ITEM_List self, EDA_ITEM aItem)"},
	 { (char *)"BOARD_ITEM_List_SetForceVisible", _wrap_BOARD_ITEM_List_SetForceVisible, METH_VARARGS, (char *)"BOARD_ITEM_List_SetForceVisible(BOARD_ITEM_List self, bool aEnable)"},
	 { (char *)"BOARD_ITEM_List_DisplayInfo", _wrap_BOARD_ITEM_List_DisplayInfo, METH_VARARGS, (char *)"BOARD_ITEM_List_DisplayInfo(BOARD_ITEM_List self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"BOARD_ITEM_List_HitTest", _wrap_BOARD_ITEM_List_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"BOARD_ITEM_List_HitTest(BOARD_ITEM_List self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"BOARD_ITEM_List_GetBoundingBox", _wrap_BOARD_ITEM_List_GetBoundingBox, METH_VARARGS, (char *)"BOARD_ITEM_List_GetBoundingBox(BOARD_ITEM_List self) -> EDA_RECT"},
	 { (char *)"BOARD_ITEM_List_Clone", _wrap_BOARD_ITEM_List_Clone, METH_VARARGS, (char *)"BOARD_ITEM_List_Clone(BOARD_ITEM_List self) -> EDA_ITEM"},
	 { (char *)"BOARD_ITEM_List_IterateForward", _wrap_BOARD_ITEM_List_IterateForward, METH_VARARGS, (char *)"\n"
		"BOARD_ITEM_List_IterateForward(BOARD_ITEM_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, \n"
		"    KICAD_T const [] scanTypes) -> SEARCH_RESULT\n"
		""},
	 { (char *)"BOARD_ITEM_List_Visit", _wrap_BOARD_ITEM_List_Visit, METH_VARARGS, (char *)"BOARD_ITEM_List_Visit(BOARD_ITEM_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"BOARD_ITEM_List_GetClass", _wrap_BOARD_ITEM_List_GetClass, METH_VARARGS, (char *)"BOARD_ITEM_List_GetClass(BOARD_ITEM_List self) -> wxString"},
	 { (char *)"BOARD_ITEM_List_GetSelectMenuText", _wrap_BOARD_ITEM_List_GetSelectMenuText, METH_VARARGS, (char *)"BOARD_ITEM_List_GetSelectMenuText(BOARD_ITEM_List self) -> wxString"},
	 { (char *)"BOARD_ITEM_List_GetMenuImage", _wrap_BOARD_ITEM_List_GetMenuImage, METH_VARARGS, (char *)"BOARD_ITEM_List_GetMenuImage(BOARD_ITEM_List self) -> BITMAP_DEF"},
	 { (char *)"BOARD_ITEM_List_Matches", _wrap_BOARD_ITEM_List_Matches, METH_VARARGS, (char *)"\n"
		"Matches(wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool\n"
		"BOARD_ITEM_List_Matches(BOARD_ITEM_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"BOARD_ITEM_List_Replace", _wrap_BOARD_ITEM_List_Replace, METH_VARARGS, (char *)"\n"
		"Replace(wxFindReplaceData & aSearchData, wxString & aText) -> bool\n"
		"Replace(wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool\n"
		"BOARD_ITEM_List_Replace(BOARD_ITEM_List self, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"BOARD_ITEM_List_IsReplaceable", _wrap_BOARD_ITEM_List_IsReplaceable, METH_VARARGS, (char *)"BOARD_ITEM_List_IsReplaceable(BOARD_ITEM_List self) -> bool"},
	 { (char *)"BOARD_ITEM_List___lt__", _wrap_BOARD_ITEM_List___lt__, METH_VARARGS, (char *)"BOARD_ITEM_List___lt__(BOARD_ITEM_List self, EDA_ITEM aItem) -> bool"},
	 { (char *)"BOARD_ITEM_List_Sort", _wrap_BOARD_ITEM_List_Sort, METH_VARARGS, (char *)"BOARD_ITEM_List_Sort(BOARD_ITEM_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"},
	 { (char *)"BOARD_ITEM_List_swigregister", BOARD_ITEM_List_swigregister, METH_VARARGS, NULL},
	 { (char *)"MODULE_List_Get", _wrap_MODULE_List_Get, METH_VARARGS, (char *)"MODULE_List_Get(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List___deref__", _wrap_MODULE_List___deref__, METH_VARARGS, (char *)"MODULE_List___deref__(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_GetFirst", _wrap_MODULE_List_GetFirst, METH_VARARGS, (char *)"MODULE_List_GetFirst(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_GetLast", _wrap_MODULE_List_GetLast, METH_VARARGS, (char *)"MODULE_List_GetLast(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_Append", _wrap_MODULE_List_Append, METH_VARARGS, (char *)"\n"
		"Append(MODULE aNewElement)\n"
		"MODULE_List_Append(MODULE_List self, MODULE_List aList)\n"
		""},
	 { (char *)"MODULE_List_Insert", _wrap_MODULE_List_Insert, METH_VARARGS, (char *)"MODULE_List_Insert(MODULE_List self, MODULE aNewElement, MODULE aElementAfterMe)"},
	 { (char *)"MODULE_List_Remove", _wrap_MODULE_List_Remove, METH_VARARGS, (char *)"MODULE_List_Remove(MODULE_List self, MODULE aElement) -> MODULE"},
	 { (char *)"MODULE_List_begin", _wrap_MODULE_List_begin, METH_VARARGS, (char *)"MODULE_List_begin(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_end", _wrap_MODULE_List_end, METH_VARARGS, (char *)"MODULE_List_end(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_PopFront", _wrap_MODULE_List_PopFront, METH_VARARGS, (char *)"MODULE_List_PopFront(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_PopBack", _wrap_MODULE_List_PopBack, METH_VARARGS, (char *)"MODULE_List_PopBack(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_PushFront", _wrap_MODULE_List_PushFront, METH_VARARGS, (char *)"MODULE_List_PushFront(MODULE_List self, MODULE aNewElement)"},
	 { (char *)"MODULE_List_PushBack", _wrap_MODULE_List_PushBack, METH_VARARGS, (char *)"MODULE_List_PushBack(MODULE_List self, MODULE aNewElement)"},
	 { (char *)"new_MODULE_List", _wrap_new_MODULE_List, METH_VARARGS, (char *)"new_MODULE_List() -> MODULE_List"},
	 { (char *)"delete_MODULE_List", _wrap_delete_MODULE_List, METH_VARARGS, (char *)"delete_MODULE_List(MODULE_List self)"},
	 { (char *)"MODULE_List_m_Orient_set", _wrap_MODULE_List_m_Orient_set, METH_VARARGS, (char *)"MODULE_List_m_Orient_set(MODULE_List self, double m_Orient)"},
	 { (char *)"MODULE_List_m_Orient_get", _wrap_MODULE_List_m_Orient_get, METH_VARARGS, (char *)"MODULE_List_m_Orient_get(MODULE_List self) -> double"},
	 { (char *)"MODULE_List_m_Pos_set", _wrap_MODULE_List_m_Pos_set, METH_VARARGS, (char *)"MODULE_List_m_Pos_set(MODULE_List self, wxPoint m_Pos)"},
	 { (char *)"MODULE_List_m_Pos_get", _wrap_MODULE_List_m_Pos_get, METH_VARARGS, (char *)"MODULE_List_m_Pos_get(MODULE_List self) -> wxPoint"},
	 { (char *)"MODULE_List_m_Pads_set", _wrap_MODULE_List_m_Pads_set, METH_VARARGS, (char *)"MODULE_List_m_Pads_set(MODULE_List self, PAD_List m_Pads)"},
	 { (char *)"MODULE_List_m_Pads_get", _wrap_MODULE_List_m_Pads_get, METH_VARARGS, (char *)"MODULE_List_m_Pads_get(MODULE_List self) -> PAD_List"},
	 { (char *)"MODULE_List_m_Drawings_set", _wrap_MODULE_List_m_Drawings_set, METH_VARARGS, (char *)"MODULE_List_m_Drawings_set(MODULE_List self, BOARD_ITEM_List m_Drawings)"},
	 { (char *)"MODULE_List_m_Drawings_get", _wrap_MODULE_List_m_Drawings_get, METH_VARARGS, (char *)"MODULE_List_m_Drawings_get(MODULE_List self) -> BOARD_ITEM_List"},
	 { (char *)"MODULE_List_m_3D_Drawings_set", _wrap_MODULE_List_m_3D_Drawings_set, METH_VARARGS, (char *)"MODULE_List_m_3D_Drawings_set(MODULE_List self, DLIST< S3D_MASTER > * m_3D_Drawings)"},
	 { (char *)"MODULE_List_m_3D_Drawings_get", _wrap_MODULE_List_m_3D_Drawings_get, METH_VARARGS, (char *)"MODULE_List_m_3D_Drawings_get(MODULE_List self) -> DLIST< S3D_MASTER > *"},
	 { (char *)"MODULE_List_m_Reference_set", _wrap_MODULE_List_m_Reference_set, METH_VARARGS, (char *)"MODULE_List_m_Reference_set(MODULE_List self, TEXTE_MODULE m_Reference)"},
	 { (char *)"MODULE_List_m_Reference_get", _wrap_MODULE_List_m_Reference_get, METH_VARARGS, (char *)"MODULE_List_m_Reference_get(MODULE_List self) -> TEXTE_MODULE"},
	 { (char *)"MODULE_List_m_Value_set", _wrap_MODULE_List_m_Value_set, METH_VARARGS, (char *)"MODULE_List_m_Value_set(MODULE_List self, TEXTE_MODULE m_Value)"},
	 { (char *)"MODULE_List_m_Value_get", _wrap_MODULE_List_m_Value_get, METH_VARARGS, (char *)"MODULE_List_m_Value_get(MODULE_List self) -> TEXTE_MODULE"},
	 { (char *)"MODULE_List_m_LibRef_set", _wrap_MODULE_List_m_LibRef_set, METH_VARARGS, (char *)"MODULE_List_m_LibRef_set(MODULE_List self, wxString m_LibRef)"},
	 { (char *)"MODULE_List_m_LibRef_get", _wrap_MODULE_List_m_LibRef_get, METH_VARARGS, (char *)"MODULE_List_m_LibRef_get(MODULE_List self) -> wxString"},
	 { (char *)"MODULE_List_m_Attributs_set", _wrap_MODULE_List_m_Attributs_set, METH_VARARGS, (char *)"MODULE_List_m_Attributs_set(MODULE_List self, int m_Attributs)"},
	 { (char *)"MODULE_List_m_Attributs_get", _wrap_MODULE_List_m_Attributs_get, METH_VARARGS, (char *)"MODULE_List_m_Attributs_get(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_flag_set", _wrap_MODULE_List_flag_set, METH_VARARGS, (char *)"MODULE_List_flag_set(MODULE_List self, int flag)"},
	 { (char *)"MODULE_List_flag_get", _wrap_MODULE_List_flag_get, METH_VARARGS, (char *)"MODULE_List_flag_get(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_m_ModuleStatus_set", _wrap_MODULE_List_m_ModuleStatus_set, METH_VARARGS, (char *)"MODULE_List_m_ModuleStatus_set(MODULE_List self, int m_ModuleStatus)"},
	 { (char *)"MODULE_List_m_ModuleStatus_get", _wrap_MODULE_List_m_ModuleStatus_get, METH_VARARGS, (char *)"MODULE_List_m_ModuleStatus_get(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_m_BoundaryBox_set", _wrap_MODULE_List_m_BoundaryBox_set, METH_VARARGS, (char *)"MODULE_List_m_BoundaryBox_set(MODULE_List self, EDA_RECT m_BoundaryBox)"},
	 { (char *)"MODULE_List_m_BoundaryBox_get", _wrap_MODULE_List_m_BoundaryBox_get, METH_VARARGS, (char *)"MODULE_List_m_BoundaryBox_get(MODULE_List self) -> EDA_RECT"},
	 { (char *)"MODULE_List_m_PadNum_set", _wrap_MODULE_List_m_PadNum_set, METH_VARARGS, (char *)"MODULE_List_m_PadNum_set(MODULE_List self, int m_PadNum)"},
	 { (char *)"MODULE_List_m_PadNum_get", _wrap_MODULE_List_m_PadNum_get, METH_VARARGS, (char *)"MODULE_List_m_PadNum_get(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_m_AltPadNum_set", _wrap_MODULE_List_m_AltPadNum_set, METH_VARARGS, (char *)"MODULE_List_m_AltPadNum_set(MODULE_List self, int m_AltPadNum)"},
	 { (char *)"MODULE_List_m_AltPadNum_get", _wrap_MODULE_List_m_AltPadNum_get, METH_VARARGS, (char *)"MODULE_List_m_AltPadNum_get(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_m_CntRot90_set", _wrap_MODULE_List_m_CntRot90_set, METH_VARARGS, (char *)"MODULE_List_m_CntRot90_set(MODULE_List self, int m_CntRot90)"},
	 { (char *)"MODULE_List_m_CntRot90_get", _wrap_MODULE_List_m_CntRot90_get, METH_VARARGS, (char *)"MODULE_List_m_CntRot90_get(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_m_CntRot180_set", _wrap_MODULE_List_m_CntRot180_set, METH_VARARGS, (char *)"MODULE_List_m_CntRot180_set(MODULE_List self, int m_CntRot180)"},
	 { (char *)"MODULE_List_m_CntRot180_get", _wrap_MODULE_List_m_CntRot180_get, METH_VARARGS, (char *)"MODULE_List_m_CntRot180_get(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_m_Ext_set", _wrap_MODULE_List_m_Ext_set, METH_VARARGS, (char *)"MODULE_List_m_Ext_set(MODULE_List self, wxSize m_Ext)"},
	 { (char *)"MODULE_List_m_Ext_get", _wrap_MODULE_List_m_Ext_get, METH_VARARGS, (char *)"MODULE_List_m_Ext_get(MODULE_List self) -> wxSize"},
	 { (char *)"MODULE_List_m_Surface_set", _wrap_MODULE_List_m_Surface_set, METH_VARARGS, (char *)"MODULE_List_m_Surface_set(MODULE_List self, double m_Surface)"},
	 { (char *)"MODULE_List_m_Surface_get", _wrap_MODULE_List_m_Surface_get, METH_VARARGS, (char *)"MODULE_List_m_Surface_get(MODULE_List self) -> double"},
	 { (char *)"MODULE_List_m_Link_set", _wrap_MODULE_List_m_Link_set, METH_VARARGS, (char *)"MODULE_List_m_Link_set(MODULE_List self, time_t m_Link)"},
	 { (char *)"MODULE_List_m_Link_get", _wrap_MODULE_List_m_Link_get, METH_VARARGS, (char *)"MODULE_List_m_Link_get(MODULE_List self) -> time_t"},
	 { (char *)"MODULE_List_m_LastEdit_Time_set", _wrap_MODULE_List_m_LastEdit_Time_set, METH_VARARGS, (char *)"MODULE_List_m_LastEdit_Time_set(MODULE_List self, long m_LastEdit_Time)"},
	 { (char *)"MODULE_List_m_LastEdit_Time_get", _wrap_MODULE_List_m_LastEdit_Time_get, METH_VARARGS, (char *)"MODULE_List_m_LastEdit_Time_get(MODULE_List self) -> long"},
	 { (char *)"MODULE_List_m_Path_set", _wrap_MODULE_List_m_Path_set, METH_VARARGS, (char *)"MODULE_List_m_Path_set(MODULE_List self, wxString m_Path)"},
	 { (char *)"MODULE_List_m_Path_get", _wrap_MODULE_List_m_Path_get, METH_VARARGS, (char *)"MODULE_List_m_Path_get(MODULE_List self) -> wxString"},
	 { (char *)"MODULE_List_m_Doc_set", _wrap_MODULE_List_m_Doc_set, METH_VARARGS, (char *)"MODULE_List_m_Doc_set(MODULE_List self, wxString m_Doc)"},
	 { (char *)"MODULE_List_m_Doc_get", _wrap_MODULE_List_m_Doc_get, METH_VARARGS, (char *)"MODULE_List_m_Doc_get(MODULE_List self) -> wxString"},
	 { (char *)"MODULE_List_m_KeyWord_set", _wrap_MODULE_List_m_KeyWord_set, METH_VARARGS, (char *)"MODULE_List_m_KeyWord_set(MODULE_List self, wxString m_KeyWord)"},
	 { (char *)"MODULE_List_m_KeyWord_get", _wrap_MODULE_List_m_KeyWord_get, METH_VARARGS, (char *)"MODULE_List_m_KeyWord_get(MODULE_List self) -> wxString"},
	 { (char *)"MODULE_List_m_ZoneConnection_set", _wrap_MODULE_List_m_ZoneConnection_set, METH_VARARGS, (char *)"MODULE_List_m_ZoneConnection_set(MODULE_List self, ZoneConnection m_ZoneConnection)"},
	 { (char *)"MODULE_List_m_ZoneConnection_get", _wrap_MODULE_List_m_ZoneConnection_get, METH_VARARGS, (char *)"MODULE_List_m_ZoneConnection_get(MODULE_List self) -> ZoneConnection"},
	 { (char *)"MODULE_List_m_ThermalWidth_set", _wrap_MODULE_List_m_ThermalWidth_set, METH_VARARGS, (char *)"MODULE_List_m_ThermalWidth_set(MODULE_List self, int m_ThermalWidth)"},
	 { (char *)"MODULE_List_m_ThermalWidth_get", _wrap_MODULE_List_m_ThermalWidth_get, METH_VARARGS, (char *)"MODULE_List_m_ThermalWidth_get(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_m_ThermalGap_set", _wrap_MODULE_List_m_ThermalGap_set, METH_VARARGS, (char *)"MODULE_List_m_ThermalGap_set(MODULE_List self, int m_ThermalGap)"},
	 { (char *)"MODULE_List_m_ThermalGap_get", _wrap_MODULE_List_m_ThermalGap_get, METH_VARARGS, (char *)"MODULE_List_m_ThermalGap_get(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_Next", _wrap_MODULE_List_Next, METH_VARARGS, (char *)"MODULE_List_Next(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_Back", _wrap_MODULE_List_Back, METH_VARARGS, (char *)"MODULE_List_Back(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_Copy", _wrap_MODULE_List_Copy, METH_VARARGS, (char *)"MODULE_List_Copy(MODULE_List self, MODULE Module)"},
	 { (char *)"MODULE_List_CalculateBoundingBox", _wrap_MODULE_List_CalculateBoundingBox, METH_VARARGS, (char *)"MODULE_List_CalculateBoundingBox(MODULE_List self)"},
	 { (char *)"MODULE_List_GetFootPrintRect", _wrap_MODULE_List_GetFootPrintRect, METH_VARARGS, (char *)"MODULE_List_GetFootPrintRect(MODULE_List self) -> EDA_RECT"},
	 { (char *)"MODULE_List_GetBoundingBox", _wrap_MODULE_List_GetBoundingBox, METH_VARARGS, (char *)"MODULE_List_GetBoundingBox(MODULE_List self) -> EDA_RECT"},
	 { (char *)"MODULE_List_SetPosition", _wrap_MODULE_List_SetPosition, METH_VARARGS, (char *)"MODULE_List_SetPosition(MODULE_List self, wxPoint aPos)"},
	 { (char *)"MODULE_List_GetPosition", _wrap_MODULE_List_GetPosition, METH_VARARGS, (char *)"MODULE_List_GetPosition(MODULE_List self) -> wxPoint"},
	 { (char *)"MODULE_List_SetOrientation", _wrap_MODULE_List_SetOrientation, METH_VARARGS, (char *)"MODULE_List_SetOrientation(MODULE_List self, double newangle)"},
	 { (char *)"MODULE_List_GetOrientation", _wrap_MODULE_List_GetOrientation, METH_VARARGS, (char *)"MODULE_List_GetOrientation(MODULE_List self) -> double"},
	 { (char *)"MODULE_List_GetLibRef", _wrap_MODULE_List_GetLibRef, METH_VARARGS, (char *)"MODULE_List_GetLibRef(MODULE_List self) -> wxString const &"},
	 { (char *)"MODULE_List_SetLibRef", _wrap_MODULE_List_SetLibRef, METH_VARARGS, (char *)"MODULE_List_SetLibRef(MODULE_List self, wxString const & aLibRef)"},
	 { (char *)"MODULE_List_GetDescription", _wrap_MODULE_List_GetDescription, METH_VARARGS, (char *)"MODULE_List_GetDescription(MODULE_List self) -> wxString const &"},
	 { (char *)"MODULE_List_SetDescription", _wrap_MODULE_List_SetDescription, METH_VARARGS, (char *)"MODULE_List_SetDescription(MODULE_List self, wxString const & aDoc)"},
	 { (char *)"MODULE_List_GetKeywords", _wrap_MODULE_List_GetKeywords, METH_VARARGS, (char *)"MODULE_List_GetKeywords(MODULE_List self) -> wxString const &"},
	 { (char *)"MODULE_List_SetKeywords", _wrap_MODULE_List_SetKeywords, METH_VARARGS, (char *)"MODULE_List_SetKeywords(MODULE_List self, wxString const & aKeywords)"},
	 { (char *)"MODULE_List_GetPath", _wrap_MODULE_List_GetPath, METH_VARARGS, (char *)"MODULE_List_GetPath(MODULE_List self) -> wxString const &"},
	 { (char *)"MODULE_List_SetPath", _wrap_MODULE_List_SetPath, METH_VARARGS, (char *)"MODULE_List_SetPath(MODULE_List self, wxString const & aPath)"},
	 { (char *)"MODULE_List_GetLocalSolderMaskMargin", _wrap_MODULE_List_GetLocalSolderMaskMargin, METH_VARARGS, (char *)"MODULE_List_GetLocalSolderMaskMargin(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_SetLocalSolderMaskMargin", _wrap_MODULE_List_SetLocalSolderMaskMargin, METH_VARARGS, (char *)"MODULE_List_SetLocalSolderMaskMargin(MODULE_List self, int aMargin)"},
	 { (char *)"MODULE_List_GetLocalClearance", _wrap_MODULE_List_GetLocalClearance, METH_VARARGS, (char *)"MODULE_List_GetLocalClearance(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_SetLocalClearance", _wrap_MODULE_List_SetLocalClearance, METH_VARARGS, (char *)"MODULE_List_SetLocalClearance(MODULE_List self, int aClearance)"},
	 { (char *)"MODULE_List_GetLocalSolderPasteMargin", _wrap_MODULE_List_GetLocalSolderPasteMargin, METH_VARARGS, (char *)"MODULE_List_GetLocalSolderPasteMargin(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_SetLocalSolderPasteMargin", _wrap_MODULE_List_SetLocalSolderPasteMargin, METH_VARARGS, (char *)"MODULE_List_SetLocalSolderPasteMargin(MODULE_List self, int aMargin)"},
	 { (char *)"MODULE_List_GetLocalSolderPasteMarginRatio", _wrap_MODULE_List_GetLocalSolderPasteMarginRatio, METH_VARARGS, (char *)"MODULE_List_GetLocalSolderPasteMarginRatio(MODULE_List self) -> double"},
	 { (char *)"MODULE_List_SetLocalSolderPasteMarginRatio", _wrap_MODULE_List_SetLocalSolderPasteMarginRatio, METH_VARARGS, (char *)"MODULE_List_SetLocalSolderPasteMarginRatio(MODULE_List self, double aRatio)"},
	 { (char *)"MODULE_List_SetZoneConnection", _wrap_MODULE_List_SetZoneConnection, METH_VARARGS, (char *)"MODULE_List_SetZoneConnection(MODULE_List self, ZoneConnection aType)"},
	 { (char *)"MODULE_List_GetZoneConnection", _wrap_MODULE_List_GetZoneConnection, METH_VARARGS, (char *)"MODULE_List_GetZoneConnection(MODULE_List self) -> ZoneConnection"},
	 { (char *)"MODULE_List_SetThermalWidth", _wrap_MODULE_List_SetThermalWidth, METH_VARARGS, (char *)"MODULE_List_SetThermalWidth(MODULE_List self, int aWidth)"},
	 { (char *)"MODULE_List_GetThermalWidth", _wrap_MODULE_List_GetThermalWidth, METH_VARARGS, (char *)"MODULE_List_GetThermalWidth(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_SetThermalGap", _wrap_MODULE_List_SetThermalGap, METH_VARARGS, (char *)"MODULE_List_SetThermalGap(MODULE_List self, int aGap)"},
	 { (char *)"MODULE_List_GetThermalGap", _wrap_MODULE_List_GetThermalGap, METH_VARARGS, (char *)"MODULE_List_GetThermalGap(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_GetAttributes", _wrap_MODULE_List_GetAttributes, METH_VARARGS, (char *)"MODULE_List_GetAttributes(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_SetAttributes", _wrap_MODULE_List_SetAttributes, METH_VARARGS, (char *)"MODULE_List_SetAttributes(MODULE_List self, int aAttributes)"},
	 { (char *)"MODULE_List_Move", _wrap_MODULE_List_Move, METH_VARARGS, (char *)"MODULE_List_Move(MODULE_List self, wxPoint aMoveVector)"},
	 { (char *)"MODULE_List_Rotate", _wrap_MODULE_List_Rotate, METH_VARARGS, (char *)"MODULE_List_Rotate(MODULE_List self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"MODULE_List_Flip", _wrap_MODULE_List_Flip, METH_VARARGS, (char *)"MODULE_List_Flip(MODULE_List self, wxPoint aCentre)"},
	 { (char *)"MODULE_List_IsLocked", _wrap_MODULE_List_IsLocked, METH_VARARGS, (char *)"MODULE_List_IsLocked(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List_SetLocked", _wrap_MODULE_List_SetLocked, METH_VARARGS, (char *)"MODULE_List_SetLocked(MODULE_List self, bool isLocked)"},
	 { (char *)"MODULE_List_IsPlaced", _wrap_MODULE_List_IsPlaced, METH_VARARGS, (char *)"MODULE_List_IsPlaced(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List_SetIsPlaced", _wrap_MODULE_List_SetIsPlaced, METH_VARARGS, (char *)"MODULE_List_SetIsPlaced(MODULE_List self, bool isPlaced)"},
	 { (char *)"MODULE_List_SetLastEditTime", _wrap_MODULE_List_SetLastEditTime, METH_VARARGS, (char *)"MODULE_List_SetLastEditTime(MODULE_List self, long aTime)"},
	 { (char *)"MODULE_List_GetLastEditTime", _wrap_MODULE_List_GetLastEditTime, METH_VARARGS, (char *)"MODULE_List_GetLastEditTime(MODULE_List self) -> long"},
	 { (char *)"MODULE_List_Read_GPCB_Descr", _wrap_MODULE_List_Read_GPCB_Descr, METH_VARARGS, (char *)"MODULE_List_Read_GPCB_Descr(MODULE_List self, wxString const & CmpFullFileName) -> bool"},
	 { (char *)"MODULE_List_Draw", _wrap_MODULE_List_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)\n"
		"MODULE_List_Draw(MODULE_List self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)\n"
		""},
	 { (char *)"MODULE_List_Draw3D", _wrap_MODULE_List_Draw3D, METH_VARARGS, (char *)"MODULE_List_Draw3D(MODULE_List self, EDA_3D_CANVAS * glcanvas)"},
	 { (char *)"MODULE_List_DrawEdgesOnly", _wrap_MODULE_List_DrawEdgesOnly, METH_VARARGS, (char *)"MODULE_List_DrawEdgesOnly(MODULE_List self, EDA_DRAW_PANEL * panel, wxDC * DC, wxPoint offset, int draw_mode)"},
	 { (char *)"MODULE_List_DrawAncre", _wrap_MODULE_List_DrawAncre, METH_VARARGS, (char *)"\n"
		"MODULE_List_DrawAncre(MODULE_List self, EDA_DRAW_PANEL * panel, wxDC * DC, wxPoint offset, int dim_ancre, \n"
		"    int draw_mode)\n"
		""},
	 { (char *)"MODULE_List_DisplayInfo", _wrap_MODULE_List_DisplayInfo, METH_VARARGS, (char *)"MODULE_List_DisplayInfo(MODULE_List self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"MODULE_List_HitTest", _wrap_MODULE_List_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"MODULE_List_HitTest(MODULE_List self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"MODULE_List_GetReference", _wrap_MODULE_List_GetReference, METH_VARARGS, (char *)"MODULE_List_GetReference(MODULE_List self) -> wxString const &"},
	 { (char *)"MODULE_List_SetReference", _wrap_MODULE_List_SetReference, METH_VARARGS, (char *)"MODULE_List_SetReference(MODULE_List self, wxString const & aReference)"},
	 { (char *)"MODULE_List_GetValue", _wrap_MODULE_List_GetValue, METH_VARARGS, (char *)"MODULE_List_GetValue(MODULE_List self) -> wxString const &"},
	 { (char *)"MODULE_List_SetValue", _wrap_MODULE_List_SetValue, METH_VARARGS, (char *)"MODULE_List_SetValue(MODULE_List self, wxString const & aValue)"},
	 { (char *)"MODULE_List_Value", _wrap_MODULE_List_Value, METH_VARARGS, (char *)"MODULE_List_Value(MODULE_List self) -> TEXTE_MODULE"},
	 { (char *)"MODULE_List_Reference", _wrap_MODULE_List_Reference, METH_VARARGS, (char *)"MODULE_List_Reference(MODULE_List self) -> TEXTE_MODULE"},
	 { (char *)"MODULE_List_FindPadByName", _wrap_MODULE_List_FindPadByName, METH_VARARGS, (char *)"MODULE_List_FindPadByName(MODULE_List self, wxString const & aPadName) -> D_PAD"},
	 { (char *)"MODULE_List_GetPad", _wrap_MODULE_List_GetPad, METH_VARARGS, (char *)"\n"
		"GetPad(wxPoint aPosition, int aLayerMask=ALL_LAYERS) -> D_PAD\n"
		"MODULE_List_GetPad(MODULE_List self, wxPoint aPosition) -> D_PAD\n"
		""},
	 { (char *)"MODULE_List_GetPadCount", _wrap_MODULE_List_GetPadCount, METH_VARARGS, (char *)"MODULE_List_GetPadCount(MODULE_List self) -> unsigned int"},
	 { (char *)"MODULE_List_Add3DModel", _wrap_MODULE_List_Add3DModel, METH_VARARGS, (char *)"MODULE_List_Add3DModel(MODULE_List self, S3D_MASTER * a3DModel)"},
	 { (char *)"MODULE_List_AddPad", _wrap_MODULE_List_AddPad, METH_VARARGS, (char *)"MODULE_List_AddPad(MODULE_List self, D_PAD aPad)"},
	 { (char *)"MODULE_List_Visit", _wrap_MODULE_List_Visit, METH_VARARGS, (char *)"MODULE_List_Visit(MODULE_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"MODULE_List_GetClass", _wrap_MODULE_List_GetClass, METH_VARARGS, (char *)"MODULE_List_GetClass(MODULE_List self) -> wxString"},
	 { (char *)"MODULE_List_GetSelectMenuText", _wrap_MODULE_List_GetSelectMenuText, METH_VARARGS, (char *)"MODULE_List_GetSelectMenuText(MODULE_List self) -> wxString"},
	 { (char *)"MODULE_List_GetMenuImage", _wrap_MODULE_List_GetMenuImage, METH_VARARGS, (char *)"MODULE_List_GetMenuImage(MODULE_List self) -> BITMAP_DEF"},
	 { (char *)"MODULE_List_Clone", _wrap_MODULE_List_Clone, METH_VARARGS, (char *)"MODULE_List_Clone(MODULE_List self) -> EDA_ITEM"},
	 { (char *)"MODULE_List_GetParent", _wrap_MODULE_List_GetParent, METH_VARARGS, (char *)"MODULE_List_GetParent(MODULE_List self) -> BOARD_ITEM"},
	 { (char *)"MODULE_List_GetLayer", _wrap_MODULE_List_GetLayer, METH_VARARGS, (char *)"MODULE_List_GetLayer(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_SetLayer", _wrap_MODULE_List_SetLayer, METH_VARARGS, (char *)"MODULE_List_SetLayer(MODULE_List self, int aLayer)"},
	 { (char *)"MODULE_List_IsOnLayer", _wrap_MODULE_List_IsOnLayer, METH_VARARGS, (char *)"MODULE_List_IsOnLayer(MODULE_List self, int aLayer) -> bool"},
	 { (char *)"MODULE_List_IsTrack", _wrap_MODULE_List_IsTrack, METH_VARARGS, (char *)"MODULE_List_IsTrack(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List_UnLink", _wrap_MODULE_List_UnLink, METH_VARARGS, (char *)"MODULE_List_UnLink(MODULE_List self)"},
	 { (char *)"MODULE_List_DeleteStructure", _wrap_MODULE_List_DeleteStructure, METH_VARARGS, (char *)"MODULE_List_DeleteStructure(MODULE_List self)"},
	 { (char *)"MODULE_List_ShowShape", _wrap_MODULE_List_ShowShape, METH_VARARGS, (char *)"MODULE_List_ShowShape(MODULE_List self, STROKE_T aShape) -> wxString"},
	 { (char *)"MODULE_List_GetBoard", _wrap_MODULE_List_GetBoard, METH_VARARGS, (char *)"MODULE_List_GetBoard(MODULE_List self) -> BOARD"},
	 { (char *)"MODULE_List_GetLayerName", _wrap_MODULE_List_GetLayerName, METH_VARARGS, (char *)"MODULE_List_GetLayerName(MODULE_List self) -> wxString"},
	 { (char *)"MODULE_List_FormatInternalUnits", _wrap_MODULE_List_FormatInternalUnits, METH_VARARGS, (char *)"\n"
		"FormatInternalUnits(int aValue) -> std::string\n"
		"FormatInternalUnits(wxPoint aPoint) -> std::string\n"
		"MODULE_List_FormatInternalUnits(MODULE_List self, wxSize aSize) -> std::string\n"
		""},
	 { (char *)"MODULE_List_FormatAngle", _wrap_MODULE_List_FormatAngle, METH_VARARGS, (char *)"MODULE_List_FormatAngle(MODULE_List self, double aAngle) -> std::string"},
	 { (char *)"MODULE_List_Cast_to_TEXTE_PCB", _wrap_MODULE_List_Cast_to_TEXTE_PCB, METH_VARARGS, (char *)"MODULE_List_Cast_to_TEXTE_PCB(MODULE_List self) -> TEXTE_PCB"},
	 { (char *)"MODULE_List_Cast_to_DIMENSION", _wrap_MODULE_List_Cast_to_DIMENSION, METH_VARARGS, (char *)"MODULE_List_Cast_to_DIMENSION(MODULE_List self) -> DIMENSION"},
	 { (char *)"MODULE_List_Cast_to_MODULE", _wrap_MODULE_List_Cast_to_MODULE, METH_VARARGS, (char *)"MODULE_List_Cast_to_MODULE(MODULE_List self) -> MODULE"},
	 { (char *)"MODULE_List_Cast_to_TEXTE_MODULE", _wrap_MODULE_List_Cast_to_TEXTE_MODULE, METH_VARARGS, (char *)"MODULE_List_Cast_to_TEXTE_MODULE(MODULE_List self) -> TEXTE_MODULE"},
	 { (char *)"MODULE_List_Cast_to_DRAWSEGMENT", _wrap_MODULE_List_Cast_to_DRAWSEGMENT, METH_VARARGS, (char *)"MODULE_List_Cast_to_DRAWSEGMENT(MODULE_List self) -> DRAWSEGMENT"},
	 { (char *)"MODULE_List_Cast_to_MARKER_PCB", _wrap_MODULE_List_Cast_to_MARKER_PCB, METH_VARARGS, (char *)"MODULE_List_Cast_to_MARKER_PCB(MODULE_List self) -> MARKER_PCB"},
	 { (char *)"MODULE_List_Cast_to_BOARD", _wrap_MODULE_List_Cast_to_BOARD, METH_VARARGS, (char *)"MODULE_List_Cast_to_BOARD(MODULE_List self) -> BOARD"},
	 { (char *)"MODULE_List_Cast_to_EDGE_MODULE", _wrap_MODULE_List_Cast_to_EDGE_MODULE, METH_VARARGS, (char *)"MODULE_List_Cast_to_EDGE_MODULE(MODULE_List self) -> EDGE_MODULE"},
	 { (char *)"MODULE_List_Cast_to_D_PAD", _wrap_MODULE_List_Cast_to_D_PAD, METH_VARARGS, (char *)"MODULE_List_Cast_to_D_PAD(MODULE_List self) -> D_PAD"},
	 { (char *)"MODULE_List_Cast_to_TRACK", _wrap_MODULE_List_Cast_to_TRACK, METH_VARARGS, (char *)"MODULE_List_Cast_to_TRACK(MODULE_List self) -> TRACK"},
	 { (char *)"MODULE_List_Cast_to_SEGZONE", _wrap_MODULE_List_Cast_to_SEGZONE, METH_VARARGS, (char *)"MODULE_List_Cast_to_SEGZONE(MODULE_List self) -> SEGZONE"},
	 { (char *)"MODULE_List_Cast_to_SEGVIA", _wrap_MODULE_List_Cast_to_SEGVIA, METH_VARARGS, (char *)"MODULE_List_Cast_to_SEGVIA(MODULE_List self) -> SEGVIA"},
	 { (char *)"MODULE_List_Type", _wrap_MODULE_List_Type, METH_VARARGS, (char *)"MODULE_List_Type(MODULE_List self) -> KICAD_T"},
	 { (char *)"MODULE_List_SetTimeStamp", _wrap_MODULE_List_SetTimeStamp, METH_VARARGS, (char *)"MODULE_List_SetTimeStamp(MODULE_List self, time_t aNewTimeStamp)"},
	 { (char *)"MODULE_List_GetTimeStamp", _wrap_MODULE_List_GetTimeStamp, METH_VARARGS, (char *)"MODULE_List_GetTimeStamp(MODULE_List self) -> time_t"},
	 { (char *)"MODULE_List_GetSon", _wrap_MODULE_List_GetSon, METH_VARARGS, (char *)"MODULE_List_GetSon(MODULE_List self) -> EDA_ITEM"},
	 { (char *)"MODULE_List_GetList", _wrap_MODULE_List_GetList, METH_VARARGS, (char *)"MODULE_List_GetList(MODULE_List self) -> DHEAD"},
	 { (char *)"MODULE_List_SetParent", _wrap_MODULE_List_SetParent, METH_VARARGS, (char *)"MODULE_List_SetParent(MODULE_List self, EDA_ITEM aParent)"},
	 { (char *)"MODULE_List_SetSon", _wrap_MODULE_List_SetSon, METH_VARARGS, (char *)"MODULE_List_SetSon(MODULE_List self, EDA_ITEM aSon)"},
	 { (char *)"MODULE_List_SetList", _wrap_MODULE_List_SetList, METH_VARARGS, (char *)"MODULE_List_SetList(MODULE_List self, DHEAD aList)"},
	 { (char *)"MODULE_List_IsNew", _wrap_MODULE_List_IsNew, METH_VARARGS, (char *)"MODULE_List_IsNew(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List_IsModified", _wrap_MODULE_List_IsModified, METH_VARARGS, (char *)"MODULE_List_IsModified(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List_IsMoving", _wrap_MODULE_List_IsMoving, METH_VARARGS, (char *)"MODULE_List_IsMoving(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List_IsDragging", _wrap_MODULE_List_IsDragging, METH_VARARGS, (char *)"MODULE_List_IsDragging(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List_IsSelected", _wrap_MODULE_List_IsSelected, METH_VARARGS, (char *)"MODULE_List_IsSelected(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List_IsResized", _wrap_MODULE_List_IsResized, METH_VARARGS, (char *)"MODULE_List_IsResized(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List_SetModified", _wrap_MODULE_List_SetModified, METH_VARARGS, (char *)"MODULE_List_SetModified(MODULE_List self)"},
	 { (char *)"MODULE_List_GetState", _wrap_MODULE_List_GetState, METH_VARARGS, (char *)"MODULE_List_GetState(MODULE_List self, int type) -> int"},
	 { (char *)"MODULE_List_SetState", _wrap_MODULE_List_SetState, METH_VARARGS, (char *)"MODULE_List_SetState(MODULE_List self, int type, int state)"},
	 { (char *)"MODULE_List_GetStatus", _wrap_MODULE_List_GetStatus, METH_VARARGS, (char *)"MODULE_List_GetStatus(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_SetStatus", _wrap_MODULE_List_SetStatus, METH_VARARGS, (char *)"MODULE_List_SetStatus(MODULE_List self, int aStatus)"},
	 { (char *)"MODULE_List_SetFlags", _wrap_MODULE_List_SetFlags, METH_VARARGS, (char *)"MODULE_List_SetFlags(MODULE_List self, int aMask)"},
	 { (char *)"MODULE_List_ClearFlags", _wrap_MODULE_List_ClearFlags, METH_VARARGS, (char *)"\n"
		"ClearFlags(int aMask=-1)\n"
		"MODULE_List_ClearFlags(MODULE_List self)\n"
		""},
	 { (char *)"MODULE_List_GetFlags", _wrap_MODULE_List_GetFlags, METH_VARARGS, (char *)"MODULE_List_GetFlags(MODULE_List self) -> int"},
	 { (char *)"MODULE_List_SetImage", _wrap_MODULE_List_SetImage, METH_VARARGS, (char *)"MODULE_List_SetImage(MODULE_List self, EDA_ITEM aItem)"},
	 { (char *)"MODULE_List_SetForceVisible", _wrap_MODULE_List_SetForceVisible, METH_VARARGS, (char *)"MODULE_List_SetForceVisible(MODULE_List self, bool aEnable)"},
	 { (char *)"MODULE_List_IterateForward", _wrap_MODULE_List_IterateForward, METH_VARARGS, (char *)"\n"
		"MODULE_List_IterateForward(MODULE_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, \n"
		"    KICAD_T const [] scanTypes) -> SEARCH_RESULT\n"
		""},
	 { (char *)"MODULE_List_Matches", _wrap_MODULE_List_Matches, METH_VARARGS, (char *)"\n"
		"Matches(wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool\n"
		"MODULE_List_Matches(MODULE_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"MODULE_List_Replace", _wrap_MODULE_List_Replace, METH_VARARGS, (char *)"\n"
		"Replace(wxFindReplaceData & aSearchData, wxString & aText) -> bool\n"
		"Replace(wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool\n"
		"MODULE_List_Replace(MODULE_List self, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"MODULE_List_IsReplaceable", _wrap_MODULE_List_IsReplaceable, METH_VARARGS, (char *)"MODULE_List_IsReplaceable(MODULE_List self) -> bool"},
	 { (char *)"MODULE_List___lt__", _wrap_MODULE_List___lt__, METH_VARARGS, (char *)"MODULE_List___lt__(MODULE_List self, EDA_ITEM aItem) -> bool"},
	 { (char *)"MODULE_List_Sort", _wrap_MODULE_List_Sort, METH_VARARGS, (char *)"MODULE_List_Sort(MODULE_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"},
	 { (char *)"MODULE_List_swigregister", MODULE_List_swigregister, METH_VARARGS, NULL},
	 { (char *)"SEGZONE_List_Get", _wrap_SEGZONE_List_Get, METH_VARARGS, (char *)"SEGZONE_List_Get(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List___deref__", _wrap_SEGZONE_List___deref__, METH_VARARGS, (char *)"SEGZONE_List___deref__(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List_GetFirst", _wrap_SEGZONE_List_GetFirst, METH_VARARGS, (char *)"SEGZONE_List_GetFirst(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List_GetLast", _wrap_SEGZONE_List_GetLast, METH_VARARGS, (char *)"SEGZONE_List_GetLast(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List_Append", _wrap_SEGZONE_List_Append, METH_VARARGS, (char *)"\n"
		"Append(SEGZONE aNewElement)\n"
		"SEGZONE_List_Append(SEGZONE_List self, SEGZONE_List aList)\n"
		""},
	 { (char *)"SEGZONE_List_Insert", _wrap_SEGZONE_List_Insert, METH_VARARGS, (char *)"SEGZONE_List_Insert(SEGZONE_List self, SEGZONE aNewElement, SEGZONE aElementAfterMe)"},
	 { (char *)"SEGZONE_List_Remove", _wrap_SEGZONE_List_Remove, METH_VARARGS, (char *)"SEGZONE_List_Remove(SEGZONE_List self, SEGZONE aElement) -> SEGZONE"},
	 { (char *)"SEGZONE_List_begin", _wrap_SEGZONE_List_begin, METH_VARARGS, (char *)"SEGZONE_List_begin(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List_end", _wrap_SEGZONE_List_end, METH_VARARGS, (char *)"SEGZONE_List_end(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List_PopFront", _wrap_SEGZONE_List_PopFront, METH_VARARGS, (char *)"SEGZONE_List_PopFront(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List_PopBack", _wrap_SEGZONE_List_PopBack, METH_VARARGS, (char *)"SEGZONE_List_PopBack(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List_PushFront", _wrap_SEGZONE_List_PushFront, METH_VARARGS, (char *)"SEGZONE_List_PushFront(SEGZONE_List self, SEGZONE aNewElement)"},
	 { (char *)"SEGZONE_List_PushBack", _wrap_SEGZONE_List_PushBack, METH_VARARGS, (char *)"SEGZONE_List_PushBack(SEGZONE_List self, SEGZONE aNewElement)"},
	 { (char *)"new_SEGZONE_List", _wrap_new_SEGZONE_List, METH_VARARGS, (char *)"new_SEGZONE_List() -> SEGZONE_List"},
	 { (char *)"delete_SEGZONE_List", _wrap_delete_SEGZONE_List, METH_VARARGS, (char *)"delete_SEGZONE_List(SEGZONE_List self)"},
	 { (char *)"SEGZONE_List_GetClass", _wrap_SEGZONE_List_GetClass, METH_VARARGS, (char *)"SEGZONE_List_GetClass(SEGZONE_List self) -> wxString"},
	 { (char *)"SEGZONE_List_Next", _wrap_SEGZONE_List_Next, METH_VARARGS, (char *)"SEGZONE_List_Next(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List_GetSelectMenuText", _wrap_SEGZONE_List_GetSelectMenuText, METH_VARARGS, (char *)"SEGZONE_List_GetSelectMenuText(SEGZONE_List self) -> wxString"},
	 { (char *)"SEGZONE_List_GetMenuImage", _wrap_SEGZONE_List_GetMenuImage, METH_VARARGS, (char *)"SEGZONE_List_GetMenuImage(SEGZONE_List self) -> BITMAP_DEF"},
	 { (char *)"SEGZONE_List_Clone", _wrap_SEGZONE_List_Clone, METH_VARARGS, (char *)"SEGZONE_List_Clone(SEGZONE_List self) -> EDA_ITEM"},
	 { (char *)"SEGZONE_List_m_Width_set", _wrap_SEGZONE_List_m_Width_set, METH_VARARGS, (char *)"SEGZONE_List_m_Width_set(SEGZONE_List self, int m_Width)"},
	 { (char *)"SEGZONE_List_m_Width_get", _wrap_SEGZONE_List_m_Width_get, METH_VARARGS, (char *)"SEGZONE_List_m_Width_get(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_m_Start_set", _wrap_SEGZONE_List_m_Start_set, METH_VARARGS, (char *)"SEGZONE_List_m_Start_set(SEGZONE_List self, wxPoint m_Start)"},
	 { (char *)"SEGZONE_List_m_Start_get", _wrap_SEGZONE_List_m_Start_get, METH_VARARGS, (char *)"SEGZONE_List_m_Start_get(SEGZONE_List self) -> wxPoint"},
	 { (char *)"SEGZONE_List_m_End_set", _wrap_SEGZONE_List_m_End_set, METH_VARARGS, (char *)"SEGZONE_List_m_End_set(SEGZONE_List self, wxPoint m_End)"},
	 { (char *)"SEGZONE_List_m_End_get", _wrap_SEGZONE_List_m_End_get, METH_VARARGS, (char *)"SEGZONE_List_m_End_get(SEGZONE_List self) -> wxPoint"},
	 { (char *)"SEGZONE_List_m_Shape_set", _wrap_SEGZONE_List_m_Shape_set, METH_VARARGS, (char *)"SEGZONE_List_m_Shape_set(SEGZONE_List self, int m_Shape)"},
	 { (char *)"SEGZONE_List_m_Shape_get", _wrap_SEGZONE_List_m_Shape_get, METH_VARARGS, (char *)"SEGZONE_List_m_Shape_get(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_start_set", _wrap_SEGZONE_List_start_set, METH_VARARGS, (char *)"SEGZONE_List_start_set(SEGZONE_List self, BOARD_CONNECTED_ITEM start)"},
	 { (char *)"SEGZONE_List_start_get", _wrap_SEGZONE_List_start_get, METH_VARARGS, (char *)"SEGZONE_List_start_get(SEGZONE_List self) -> BOARD_CONNECTED_ITEM"},
	 { (char *)"SEGZONE_List_end_set", _wrap_SEGZONE_List_end_set, METH_VARARGS, (char *)"SEGZONE_List_end_set(SEGZONE_List self, BOARD_CONNECTED_ITEM end)"},
	 { (char *)"SEGZONE_List_end_get", _wrap_SEGZONE_List_end_get, METH_VARARGS, (char *)"SEGZONE_List_end_get(SEGZONE_List self) -> BOARD_CONNECTED_ITEM"},
	 { (char *)"SEGZONE_List_m_Param_set", _wrap_SEGZONE_List_m_Param_set, METH_VARARGS, (char *)"SEGZONE_List_m_Param_set(SEGZONE_List self, double m_Param)"},
	 { (char *)"SEGZONE_List_m_Param_get", _wrap_SEGZONE_List_m_Param_get, METH_VARARGS, (char *)"SEGZONE_List_m_Param_get(SEGZONE_List self) -> double"},
	 { (char *)"SEGZONE_List_Back", _wrap_SEGZONE_List_Back, METH_VARARGS, (char *)"SEGZONE_List_Back(SEGZONE_List self) -> TRACK"},
	 { (char *)"SEGZONE_List_Move", _wrap_SEGZONE_List_Move, METH_VARARGS, (char *)"SEGZONE_List_Move(SEGZONE_List self, wxPoint aMoveVector)"},
	 { (char *)"SEGZONE_List_Rotate", _wrap_SEGZONE_List_Rotate, METH_VARARGS, (char *)"SEGZONE_List_Rotate(SEGZONE_List self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"SEGZONE_List_Flip", _wrap_SEGZONE_List_Flip, METH_VARARGS, (char *)"SEGZONE_List_Flip(SEGZONE_List self, wxPoint aCentre)"},
	 { (char *)"SEGZONE_List_SetPosition", _wrap_SEGZONE_List_SetPosition, METH_VARARGS, (char *)"SEGZONE_List_SetPosition(SEGZONE_List self, wxPoint aPos)"},
	 { (char *)"SEGZONE_List_GetPosition", _wrap_SEGZONE_List_GetPosition, METH_VARARGS, (char *)"SEGZONE_List_GetPosition(SEGZONE_List self) -> wxPoint"},
	 { (char *)"SEGZONE_List_SetWidth", _wrap_SEGZONE_List_SetWidth, METH_VARARGS, (char *)"SEGZONE_List_SetWidth(SEGZONE_List self, int aWidth)"},
	 { (char *)"SEGZONE_List_GetWidth", _wrap_SEGZONE_List_GetWidth, METH_VARARGS, (char *)"SEGZONE_List_GetWidth(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_SetEnd", _wrap_SEGZONE_List_SetEnd, METH_VARARGS, (char *)"SEGZONE_List_SetEnd(SEGZONE_List self, wxPoint aEnd)"},
	 { (char *)"SEGZONE_List_GetEnd", _wrap_SEGZONE_List_GetEnd, METH_VARARGS, (char *)"SEGZONE_List_GetEnd(SEGZONE_List self) -> wxPoint"},
	 { (char *)"SEGZONE_List_SetStart", _wrap_SEGZONE_List_SetStart, METH_VARARGS, (char *)"SEGZONE_List_SetStart(SEGZONE_List self, wxPoint aStart)"},
	 { (char *)"SEGZONE_List_GetStart", _wrap_SEGZONE_List_GetStart, METH_VARARGS, (char *)"SEGZONE_List_GetStart(SEGZONE_List self) -> wxPoint"},
	 { (char *)"SEGZONE_List_GetBoundingBox", _wrap_SEGZONE_List_GetBoundingBox, METH_VARARGS, (char *)"SEGZONE_List_GetBoundingBox(SEGZONE_List self) -> EDA_RECT"},
	 { (char *)"SEGZONE_List_GetBestInsertPoint", _wrap_SEGZONE_List_GetBestInsertPoint, METH_VARARGS, (char *)"SEGZONE_List_GetBestInsertPoint(SEGZONE_List self, BOARD aPcb) -> TRACK"},
	 { (char *)"SEGZONE_List_GetStartNetCode", _wrap_SEGZONE_List_GetStartNetCode, METH_VARARGS, (char *)"SEGZONE_List_GetStartNetCode(SEGZONE_List self, int NetCode) -> TRACK"},
	 { (char *)"SEGZONE_List_GetEndNetCode", _wrap_SEGZONE_List_GetEndNetCode, METH_VARARGS, (char *)"SEGZONE_List_GetEndNetCode(SEGZONE_List self, int NetCode) -> TRACK"},
	 { (char *)"SEGZONE_List_GetLength", _wrap_SEGZONE_List_GetLength, METH_VARARGS, (char *)"SEGZONE_List_GetLength(SEGZONE_List self) -> double"},
	 { (char *)"SEGZONE_List_Draw", _wrap_SEGZONE_List_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)\n"
		"SEGZONE_List_Draw(SEGZONE_List self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"SEGZONE_List_GetShape", _wrap_SEGZONE_List_GetShape, METH_VARARGS, (char *)"SEGZONE_List_GetShape(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_SetShape", _wrap_SEGZONE_List_SetShape, METH_VARARGS, (char *)"SEGZONE_List_SetShape(SEGZONE_List self, int aShape)"},
	 { (char *)"SEGZONE_List_TransformShapeWithClearanceToPolygon", _wrap_SEGZONE_List_TransformShapeWithClearanceToPolygon, METH_VARARGS, (char *)"\n"
		"SEGZONE_List_TransformShapeWithClearanceToPolygon(SEGZONE_List self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, \n"
		"    int aClearanceValue, int aCircleToSegmentsCount, double aCorrectionFactor)\n"
		""},
	 { (char *)"SEGZONE_List_SetDrill", _wrap_SEGZONE_List_SetDrill, METH_VARARGS, (char *)"SEGZONE_List_SetDrill(SEGZONE_List self, int aDrill)"},
	 { (char *)"SEGZONE_List_GetDrill", _wrap_SEGZONE_List_GetDrill, METH_VARARGS, (char *)"SEGZONE_List_GetDrill(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_GetDrillValue", _wrap_SEGZONE_List_GetDrillValue, METH_VARARGS, (char *)"SEGZONE_List_GetDrillValue(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_SetDrillDefault", _wrap_SEGZONE_List_SetDrillDefault, METH_VARARGS, (char *)"SEGZONE_List_SetDrillDefault(SEGZONE_List self)"},
	 { (char *)"SEGZONE_List_IsDrillDefault", _wrap_SEGZONE_List_IsDrillDefault, METH_VARARGS, (char *)"SEGZONE_List_IsDrillDefault(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_ReturnMaskLayer", _wrap_SEGZONE_List_ReturnMaskLayer, METH_VARARGS, (char *)"SEGZONE_List_ReturnMaskLayer(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_IsPointOnEnds", _wrap_SEGZONE_List_IsPointOnEnds, METH_VARARGS, (char *)"\n"
		"IsPointOnEnds(wxPoint point, int min_dist=0) -> int\n"
		"SEGZONE_List_IsPointOnEnds(SEGZONE_List self, wxPoint point) -> int\n"
		""},
	 { (char *)"SEGZONE_List_IsNull", _wrap_SEGZONE_List_IsNull, METH_VARARGS, (char *)"SEGZONE_List_IsNull(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_DisplayInfo", _wrap_SEGZONE_List_DisplayInfo, METH_VARARGS, (char *)"SEGZONE_List_DisplayInfo(SEGZONE_List self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"SEGZONE_List_DisplayInfoBase", _wrap_SEGZONE_List_DisplayInfoBase, METH_VARARGS, (char *)"SEGZONE_List_DisplayInfoBase(SEGZONE_List self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"SEGZONE_List_ShowWidth", _wrap_SEGZONE_List_ShowWidth, METH_VARARGS, (char *)"SEGZONE_List_ShowWidth(SEGZONE_List self) -> wxString"},
	 { (char *)"SEGZONE_List_Visit", _wrap_SEGZONE_List_Visit, METH_VARARGS, (char *)"SEGZONE_List_Visit(SEGZONE_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"SEGZONE_List_HitTest", _wrap_SEGZONE_List_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"SEGZONE_List_HitTest(SEGZONE_List self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"SEGZONE_List_GetVia", _wrap_SEGZONE_List_GetVia, METH_VARARGS, (char *)"\n"
		"GetVia(wxPoint aPosition, int aLayerMask=-1) -> TRACK\n"
		"GetVia(wxPoint aPosition) -> TRACK\n"
		"SEGZONE_List_GetVia(SEGZONE_List self, TRACK aEndTrace, wxPoint aPosition, int aLayerMask) -> TRACK\n"
		""},
	 { (char *)"SEGZONE_List_GetTrace", _wrap_SEGZONE_List_GetTrace, METH_VARARGS, (char *)"SEGZONE_List_GetTrace(SEGZONE_List self, TRACK aStartTrace, TRACK aEndTrace, int aEndPoint) -> TRACK"},
	 { (char *)"SEGZONE_List_GetEndSegments", _wrap_SEGZONE_List_GetEndSegments, METH_VARARGS, (char *)"SEGZONE_List_GetEndSegments(SEGZONE_List self, int NbSegm, TRACK ** StartTrack, TRACK ** EndTrack) -> int"},
	 { (char *)"SEGZONE_List_GetClearance", _wrap_SEGZONE_List_GetClearance, METH_VARARGS, (char *)"\n"
		"GetClearance(BOARD_CONNECTED_ITEM aItem=None) -> int\n"
		"SEGZONE_List_GetClearance(SEGZONE_List self) -> int\n"
		""},
	 { (char *)"SEGZONE_List_m_TracksConnected_set", _wrap_SEGZONE_List_m_TracksConnected_set, METH_VARARGS, (char *)"SEGZONE_List_m_TracksConnected_set(SEGZONE_List self, std::vector< TRACK *,std::allocator< TRACK * > > * m_TracksConnected)"},
	 { (char *)"SEGZONE_List_m_TracksConnected_get", _wrap_SEGZONE_List_m_TracksConnected_get, METH_VARARGS, (char *)"SEGZONE_List_m_TracksConnected_get(SEGZONE_List self) -> std::vector< TRACK *,std::allocator< TRACK * > > *"},
	 { (char *)"SEGZONE_List_m_PadsConnected_set", _wrap_SEGZONE_List_m_PadsConnected_set, METH_VARARGS, (char *)"SEGZONE_List_m_PadsConnected_set(SEGZONE_List self, std::vector< D_PAD *,std::allocator< D_PAD * > > * m_PadsConnected)"},
	 { (char *)"SEGZONE_List_m_PadsConnected_get", _wrap_SEGZONE_List_m_PadsConnected_get, METH_VARARGS, (char *)"SEGZONE_List_m_PadsConnected_get(SEGZONE_List self) -> std::vector< D_PAD *,std::allocator< D_PAD * > > *"},
	 { (char *)"SEGZONE_List_GetNet", _wrap_SEGZONE_List_GetNet, METH_VARARGS, (char *)"SEGZONE_List_GetNet(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_SetNet", _wrap_SEGZONE_List_SetNet, METH_VARARGS, (char *)"SEGZONE_List_SetNet(SEGZONE_List self, int aNetCode)"},
	 { (char *)"SEGZONE_List_GetSubNet", _wrap_SEGZONE_List_GetSubNet, METH_VARARGS, (char *)"SEGZONE_List_GetSubNet(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_SetSubNet", _wrap_SEGZONE_List_SetSubNet, METH_VARARGS, (char *)"SEGZONE_List_SetSubNet(SEGZONE_List self, int aSubNetCode)"},
	 { (char *)"SEGZONE_List_GetZoneSubNet", _wrap_SEGZONE_List_GetZoneSubNet, METH_VARARGS, (char *)"SEGZONE_List_GetZoneSubNet(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_SetZoneSubNet", _wrap_SEGZONE_List_SetZoneSubNet, METH_VARARGS, (char *)"SEGZONE_List_SetZoneSubNet(SEGZONE_List self, int aSubNetCode)"},
	 { (char *)"SEGZONE_List_GetNetClass", _wrap_SEGZONE_List_GetNetClass, METH_VARARGS, (char *)"SEGZONE_List_GetNetClass(SEGZONE_List self) -> NETCLASS"},
	 { (char *)"SEGZONE_List_GetNetClassName", _wrap_SEGZONE_List_GetNetClassName, METH_VARARGS, (char *)"SEGZONE_List_GetNetClassName(SEGZONE_List self) -> wxString"},
	 { (char *)"SEGZONE_List_GetParent", _wrap_SEGZONE_List_GetParent, METH_VARARGS, (char *)"SEGZONE_List_GetParent(SEGZONE_List self) -> BOARD_ITEM"},
	 { (char *)"SEGZONE_List_GetLayer", _wrap_SEGZONE_List_GetLayer, METH_VARARGS, (char *)"SEGZONE_List_GetLayer(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_SetLayer", _wrap_SEGZONE_List_SetLayer, METH_VARARGS, (char *)"SEGZONE_List_SetLayer(SEGZONE_List self, int aLayer)"},
	 { (char *)"SEGZONE_List_IsOnLayer", _wrap_SEGZONE_List_IsOnLayer, METH_VARARGS, (char *)"SEGZONE_List_IsOnLayer(SEGZONE_List self, int aLayer) -> bool"},
	 { (char *)"SEGZONE_List_IsTrack", _wrap_SEGZONE_List_IsTrack, METH_VARARGS, (char *)"SEGZONE_List_IsTrack(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_IsLocked", _wrap_SEGZONE_List_IsLocked, METH_VARARGS, (char *)"SEGZONE_List_IsLocked(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_UnLink", _wrap_SEGZONE_List_UnLink, METH_VARARGS, (char *)"SEGZONE_List_UnLink(SEGZONE_List self)"},
	 { (char *)"SEGZONE_List_DeleteStructure", _wrap_SEGZONE_List_DeleteStructure, METH_VARARGS, (char *)"SEGZONE_List_DeleteStructure(SEGZONE_List self)"},
	 { (char *)"SEGZONE_List_ShowShape", _wrap_SEGZONE_List_ShowShape, METH_VARARGS, (char *)"SEGZONE_List_ShowShape(SEGZONE_List self, STROKE_T aShape) -> wxString"},
	 { (char *)"SEGZONE_List_GetBoard", _wrap_SEGZONE_List_GetBoard, METH_VARARGS, (char *)"SEGZONE_List_GetBoard(SEGZONE_List self) -> BOARD"},
	 { (char *)"SEGZONE_List_GetLayerName", _wrap_SEGZONE_List_GetLayerName, METH_VARARGS, (char *)"SEGZONE_List_GetLayerName(SEGZONE_List self) -> wxString"},
	 { (char *)"SEGZONE_List_FormatInternalUnits", _wrap_SEGZONE_List_FormatInternalUnits, METH_VARARGS, (char *)"\n"
		"FormatInternalUnits(int aValue) -> std::string\n"
		"FormatInternalUnits(wxPoint aPoint) -> std::string\n"
		"SEGZONE_List_FormatInternalUnits(SEGZONE_List self, wxSize aSize) -> std::string\n"
		""},
	 { (char *)"SEGZONE_List_FormatAngle", _wrap_SEGZONE_List_FormatAngle, METH_VARARGS, (char *)"SEGZONE_List_FormatAngle(SEGZONE_List self, double aAngle) -> std::string"},
	 { (char *)"SEGZONE_List_Cast_to_TEXTE_PCB", _wrap_SEGZONE_List_Cast_to_TEXTE_PCB, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_TEXTE_PCB(SEGZONE_List self) -> TEXTE_PCB"},
	 { (char *)"SEGZONE_List_Cast_to_DIMENSION", _wrap_SEGZONE_List_Cast_to_DIMENSION, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_DIMENSION(SEGZONE_List self) -> DIMENSION"},
	 { (char *)"SEGZONE_List_Cast_to_MODULE", _wrap_SEGZONE_List_Cast_to_MODULE, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_MODULE(SEGZONE_List self) -> MODULE"},
	 { (char *)"SEGZONE_List_Cast_to_TEXTE_MODULE", _wrap_SEGZONE_List_Cast_to_TEXTE_MODULE, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_TEXTE_MODULE(SEGZONE_List self) -> TEXTE_MODULE"},
	 { (char *)"SEGZONE_List_Cast_to_DRAWSEGMENT", _wrap_SEGZONE_List_Cast_to_DRAWSEGMENT, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_DRAWSEGMENT(SEGZONE_List self) -> DRAWSEGMENT"},
	 { (char *)"SEGZONE_List_Cast_to_MARKER_PCB", _wrap_SEGZONE_List_Cast_to_MARKER_PCB, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_MARKER_PCB(SEGZONE_List self) -> MARKER_PCB"},
	 { (char *)"SEGZONE_List_Cast_to_BOARD", _wrap_SEGZONE_List_Cast_to_BOARD, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_BOARD(SEGZONE_List self) -> BOARD"},
	 { (char *)"SEGZONE_List_Cast_to_EDGE_MODULE", _wrap_SEGZONE_List_Cast_to_EDGE_MODULE, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_EDGE_MODULE(SEGZONE_List self) -> EDGE_MODULE"},
	 { (char *)"SEGZONE_List_Cast_to_D_PAD", _wrap_SEGZONE_List_Cast_to_D_PAD, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_D_PAD(SEGZONE_List self) -> D_PAD"},
	 { (char *)"SEGZONE_List_Cast_to_TRACK", _wrap_SEGZONE_List_Cast_to_TRACK, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_TRACK(SEGZONE_List self) -> TRACK"},
	 { (char *)"SEGZONE_List_Cast_to_SEGZONE", _wrap_SEGZONE_List_Cast_to_SEGZONE, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_SEGZONE(SEGZONE_List self) -> SEGZONE"},
	 { (char *)"SEGZONE_List_Cast_to_SEGVIA", _wrap_SEGZONE_List_Cast_to_SEGVIA, METH_VARARGS, (char *)"SEGZONE_List_Cast_to_SEGVIA(SEGZONE_List self) -> SEGVIA"},
	 { (char *)"SEGZONE_List_Type", _wrap_SEGZONE_List_Type, METH_VARARGS, (char *)"SEGZONE_List_Type(SEGZONE_List self) -> KICAD_T"},
	 { (char *)"SEGZONE_List_SetTimeStamp", _wrap_SEGZONE_List_SetTimeStamp, METH_VARARGS, (char *)"SEGZONE_List_SetTimeStamp(SEGZONE_List self, time_t aNewTimeStamp)"},
	 { (char *)"SEGZONE_List_GetTimeStamp", _wrap_SEGZONE_List_GetTimeStamp, METH_VARARGS, (char *)"SEGZONE_List_GetTimeStamp(SEGZONE_List self) -> time_t"},
	 { (char *)"SEGZONE_List_GetSon", _wrap_SEGZONE_List_GetSon, METH_VARARGS, (char *)"SEGZONE_List_GetSon(SEGZONE_List self) -> EDA_ITEM"},
	 { (char *)"SEGZONE_List_GetList", _wrap_SEGZONE_List_GetList, METH_VARARGS, (char *)"SEGZONE_List_GetList(SEGZONE_List self) -> DHEAD"},
	 { (char *)"SEGZONE_List_SetParent", _wrap_SEGZONE_List_SetParent, METH_VARARGS, (char *)"SEGZONE_List_SetParent(SEGZONE_List self, EDA_ITEM aParent)"},
	 { (char *)"SEGZONE_List_SetSon", _wrap_SEGZONE_List_SetSon, METH_VARARGS, (char *)"SEGZONE_List_SetSon(SEGZONE_List self, EDA_ITEM aSon)"},
	 { (char *)"SEGZONE_List_SetList", _wrap_SEGZONE_List_SetList, METH_VARARGS, (char *)"SEGZONE_List_SetList(SEGZONE_List self, DHEAD aList)"},
	 { (char *)"SEGZONE_List_IsNew", _wrap_SEGZONE_List_IsNew, METH_VARARGS, (char *)"SEGZONE_List_IsNew(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_IsModified", _wrap_SEGZONE_List_IsModified, METH_VARARGS, (char *)"SEGZONE_List_IsModified(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_IsMoving", _wrap_SEGZONE_List_IsMoving, METH_VARARGS, (char *)"SEGZONE_List_IsMoving(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_IsDragging", _wrap_SEGZONE_List_IsDragging, METH_VARARGS, (char *)"SEGZONE_List_IsDragging(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_IsSelected", _wrap_SEGZONE_List_IsSelected, METH_VARARGS, (char *)"SEGZONE_List_IsSelected(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_IsResized", _wrap_SEGZONE_List_IsResized, METH_VARARGS, (char *)"SEGZONE_List_IsResized(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List_SetModified", _wrap_SEGZONE_List_SetModified, METH_VARARGS, (char *)"SEGZONE_List_SetModified(SEGZONE_List self)"},
	 { (char *)"SEGZONE_List_GetState", _wrap_SEGZONE_List_GetState, METH_VARARGS, (char *)"SEGZONE_List_GetState(SEGZONE_List self, int type) -> int"},
	 { (char *)"SEGZONE_List_SetState", _wrap_SEGZONE_List_SetState, METH_VARARGS, (char *)"SEGZONE_List_SetState(SEGZONE_List self, int type, int state)"},
	 { (char *)"SEGZONE_List_GetStatus", _wrap_SEGZONE_List_GetStatus, METH_VARARGS, (char *)"SEGZONE_List_GetStatus(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_SetStatus", _wrap_SEGZONE_List_SetStatus, METH_VARARGS, (char *)"SEGZONE_List_SetStatus(SEGZONE_List self, int aStatus)"},
	 { (char *)"SEGZONE_List_SetFlags", _wrap_SEGZONE_List_SetFlags, METH_VARARGS, (char *)"SEGZONE_List_SetFlags(SEGZONE_List self, int aMask)"},
	 { (char *)"SEGZONE_List_ClearFlags", _wrap_SEGZONE_List_ClearFlags, METH_VARARGS, (char *)"\n"
		"ClearFlags(int aMask=-1)\n"
		"SEGZONE_List_ClearFlags(SEGZONE_List self)\n"
		""},
	 { (char *)"SEGZONE_List_GetFlags", _wrap_SEGZONE_List_GetFlags, METH_VARARGS, (char *)"SEGZONE_List_GetFlags(SEGZONE_List self) -> int"},
	 { (char *)"SEGZONE_List_SetImage", _wrap_SEGZONE_List_SetImage, METH_VARARGS, (char *)"SEGZONE_List_SetImage(SEGZONE_List self, EDA_ITEM aItem)"},
	 { (char *)"SEGZONE_List_SetForceVisible", _wrap_SEGZONE_List_SetForceVisible, METH_VARARGS, (char *)"SEGZONE_List_SetForceVisible(SEGZONE_List self, bool aEnable)"},
	 { (char *)"SEGZONE_List_IterateForward", _wrap_SEGZONE_List_IterateForward, METH_VARARGS, (char *)"\n"
		"SEGZONE_List_IterateForward(SEGZONE_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, \n"
		"    KICAD_T const [] scanTypes) -> SEARCH_RESULT\n"
		""},
	 { (char *)"SEGZONE_List_Matches", _wrap_SEGZONE_List_Matches, METH_VARARGS, (char *)"\n"
		"Matches(wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool\n"
		"SEGZONE_List_Matches(SEGZONE_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"SEGZONE_List_Replace", _wrap_SEGZONE_List_Replace, METH_VARARGS, (char *)"\n"
		"Replace(wxFindReplaceData & aSearchData, wxString & aText) -> bool\n"
		"Replace(wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool\n"
		"SEGZONE_List_Replace(SEGZONE_List self, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"SEGZONE_List_IsReplaceable", _wrap_SEGZONE_List_IsReplaceable, METH_VARARGS, (char *)"SEGZONE_List_IsReplaceable(SEGZONE_List self) -> bool"},
	 { (char *)"SEGZONE_List___lt__", _wrap_SEGZONE_List___lt__, METH_VARARGS, (char *)"SEGZONE_List___lt__(SEGZONE_List self, EDA_ITEM aItem) -> bool"},
	 { (char *)"SEGZONE_List_Sort", _wrap_SEGZONE_List_Sort, METH_VARARGS, (char *)"SEGZONE_List_Sort(SEGZONE_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"},
	 { (char *)"SEGZONE_List_swigregister", SEGZONE_List_swigregister, METH_VARARGS, NULL},
	 { (char *)"TRACK_List_Get", _wrap_TRACK_List_Get, METH_VARARGS, (char *)"TRACK_List_Get(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List___deref__", _wrap_TRACK_List___deref__, METH_VARARGS, (char *)"TRACK_List___deref__(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_GetFirst", _wrap_TRACK_List_GetFirst, METH_VARARGS, (char *)"TRACK_List_GetFirst(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_GetLast", _wrap_TRACK_List_GetLast, METH_VARARGS, (char *)"TRACK_List_GetLast(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_Append", _wrap_TRACK_List_Append, METH_VARARGS, (char *)"\n"
		"Append(TRACK aNewElement)\n"
		"TRACK_List_Append(TRACK_List self, TRACK_List aList)\n"
		""},
	 { (char *)"TRACK_List_Insert", _wrap_TRACK_List_Insert, METH_VARARGS, (char *)"TRACK_List_Insert(TRACK_List self, TRACK aNewElement, TRACK aElementAfterMe)"},
	 { (char *)"TRACK_List_Remove", _wrap_TRACK_List_Remove, METH_VARARGS, (char *)"TRACK_List_Remove(TRACK_List self, TRACK aElement) -> TRACK"},
	 { (char *)"TRACK_List_begin", _wrap_TRACK_List_begin, METH_VARARGS, (char *)"TRACK_List_begin(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_end", _wrap_TRACK_List_end, METH_VARARGS, (char *)"TRACK_List_end(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_PopFront", _wrap_TRACK_List_PopFront, METH_VARARGS, (char *)"TRACK_List_PopFront(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_PopBack", _wrap_TRACK_List_PopBack, METH_VARARGS, (char *)"TRACK_List_PopBack(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_PushFront", _wrap_TRACK_List_PushFront, METH_VARARGS, (char *)"TRACK_List_PushFront(TRACK_List self, TRACK aNewElement)"},
	 { (char *)"TRACK_List_PushBack", _wrap_TRACK_List_PushBack, METH_VARARGS, (char *)"TRACK_List_PushBack(TRACK_List self, TRACK aNewElement)"},
	 { (char *)"new_TRACK_List", _wrap_new_TRACK_List, METH_VARARGS, (char *)"new_TRACK_List() -> TRACK_List"},
	 { (char *)"delete_TRACK_List", _wrap_delete_TRACK_List, METH_VARARGS, (char *)"delete_TRACK_List(TRACK_List self)"},
	 { (char *)"TRACK_List_m_Width_set", _wrap_TRACK_List_m_Width_set, METH_VARARGS, (char *)"TRACK_List_m_Width_set(TRACK_List self, int m_Width)"},
	 { (char *)"TRACK_List_m_Width_get", _wrap_TRACK_List_m_Width_get, METH_VARARGS, (char *)"TRACK_List_m_Width_get(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_m_Start_set", _wrap_TRACK_List_m_Start_set, METH_VARARGS, (char *)"TRACK_List_m_Start_set(TRACK_List self, wxPoint m_Start)"},
	 { (char *)"TRACK_List_m_Start_get", _wrap_TRACK_List_m_Start_get, METH_VARARGS, (char *)"TRACK_List_m_Start_get(TRACK_List self) -> wxPoint"},
	 { (char *)"TRACK_List_m_End_set", _wrap_TRACK_List_m_End_set, METH_VARARGS, (char *)"TRACK_List_m_End_set(TRACK_List self, wxPoint m_End)"},
	 { (char *)"TRACK_List_m_End_get", _wrap_TRACK_List_m_End_get, METH_VARARGS, (char *)"TRACK_List_m_End_get(TRACK_List self) -> wxPoint"},
	 { (char *)"TRACK_List_m_Shape_set", _wrap_TRACK_List_m_Shape_set, METH_VARARGS, (char *)"TRACK_List_m_Shape_set(TRACK_List self, int m_Shape)"},
	 { (char *)"TRACK_List_m_Shape_get", _wrap_TRACK_List_m_Shape_get, METH_VARARGS, (char *)"TRACK_List_m_Shape_get(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_start_set", _wrap_TRACK_List_start_set, METH_VARARGS, (char *)"TRACK_List_start_set(TRACK_List self, BOARD_CONNECTED_ITEM start)"},
	 { (char *)"TRACK_List_start_get", _wrap_TRACK_List_start_get, METH_VARARGS, (char *)"TRACK_List_start_get(TRACK_List self) -> BOARD_CONNECTED_ITEM"},
	 { (char *)"TRACK_List_end_set", _wrap_TRACK_List_end_set, METH_VARARGS, (char *)"TRACK_List_end_set(TRACK_List self, BOARD_CONNECTED_ITEM end)"},
	 { (char *)"TRACK_List_end_get", _wrap_TRACK_List_end_get, METH_VARARGS, (char *)"TRACK_List_end_get(TRACK_List self) -> BOARD_CONNECTED_ITEM"},
	 { (char *)"TRACK_List_m_Param_set", _wrap_TRACK_List_m_Param_set, METH_VARARGS, (char *)"TRACK_List_m_Param_set(TRACK_List self, double m_Param)"},
	 { (char *)"TRACK_List_m_Param_get", _wrap_TRACK_List_m_Param_get, METH_VARARGS, (char *)"TRACK_List_m_Param_get(TRACK_List self) -> double"},
	 { (char *)"TRACK_List_Next", _wrap_TRACK_List_Next, METH_VARARGS, (char *)"TRACK_List_Next(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_Back", _wrap_TRACK_List_Back, METH_VARARGS, (char *)"TRACK_List_Back(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_Move", _wrap_TRACK_List_Move, METH_VARARGS, (char *)"TRACK_List_Move(TRACK_List self, wxPoint aMoveVector)"},
	 { (char *)"TRACK_List_Rotate", _wrap_TRACK_List_Rotate, METH_VARARGS, (char *)"TRACK_List_Rotate(TRACK_List self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"TRACK_List_Flip", _wrap_TRACK_List_Flip, METH_VARARGS, (char *)"TRACK_List_Flip(TRACK_List self, wxPoint aCentre)"},
	 { (char *)"TRACK_List_SetPosition", _wrap_TRACK_List_SetPosition, METH_VARARGS, (char *)"TRACK_List_SetPosition(TRACK_List self, wxPoint aPos)"},
	 { (char *)"TRACK_List_GetPosition", _wrap_TRACK_List_GetPosition, METH_VARARGS, (char *)"TRACK_List_GetPosition(TRACK_List self) -> wxPoint"},
	 { (char *)"TRACK_List_SetWidth", _wrap_TRACK_List_SetWidth, METH_VARARGS, (char *)"TRACK_List_SetWidth(TRACK_List self, int aWidth)"},
	 { (char *)"TRACK_List_GetWidth", _wrap_TRACK_List_GetWidth, METH_VARARGS, (char *)"TRACK_List_GetWidth(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_SetEnd", _wrap_TRACK_List_SetEnd, METH_VARARGS, (char *)"TRACK_List_SetEnd(TRACK_List self, wxPoint aEnd)"},
	 { (char *)"TRACK_List_GetEnd", _wrap_TRACK_List_GetEnd, METH_VARARGS, (char *)"TRACK_List_GetEnd(TRACK_List self) -> wxPoint"},
	 { (char *)"TRACK_List_SetStart", _wrap_TRACK_List_SetStart, METH_VARARGS, (char *)"TRACK_List_SetStart(TRACK_List self, wxPoint aStart)"},
	 { (char *)"TRACK_List_GetStart", _wrap_TRACK_List_GetStart, METH_VARARGS, (char *)"TRACK_List_GetStart(TRACK_List self) -> wxPoint"},
	 { (char *)"TRACK_List_GetBoundingBox", _wrap_TRACK_List_GetBoundingBox, METH_VARARGS, (char *)"TRACK_List_GetBoundingBox(TRACK_List self) -> EDA_RECT"},
	 { (char *)"TRACK_List_GetBestInsertPoint", _wrap_TRACK_List_GetBestInsertPoint, METH_VARARGS, (char *)"TRACK_List_GetBestInsertPoint(TRACK_List self, BOARD aPcb) -> TRACK"},
	 { (char *)"TRACK_List_GetStartNetCode", _wrap_TRACK_List_GetStartNetCode, METH_VARARGS, (char *)"TRACK_List_GetStartNetCode(TRACK_List self, int NetCode) -> TRACK"},
	 { (char *)"TRACK_List_GetEndNetCode", _wrap_TRACK_List_GetEndNetCode, METH_VARARGS, (char *)"TRACK_List_GetEndNetCode(TRACK_List self, int NetCode) -> TRACK"},
	 { (char *)"TRACK_List_GetLength", _wrap_TRACK_List_GetLength, METH_VARARGS, (char *)"TRACK_List_GetLength(TRACK_List self) -> double"},
	 { (char *)"TRACK_List_Draw", _wrap_TRACK_List_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode, wxPoint aOffset=)\n"
		"TRACK_List_Draw(TRACK_List self, EDA_DRAW_PANEL * panel, wxDC * DC, int aDrawMode)\n"
		""},
	 { (char *)"TRACK_List_GetShape", _wrap_TRACK_List_GetShape, METH_VARARGS, (char *)"TRACK_List_GetShape(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_SetShape", _wrap_TRACK_List_SetShape, METH_VARARGS, (char *)"TRACK_List_SetShape(TRACK_List self, int aShape)"},
	 { (char *)"TRACK_List_TransformShapeWithClearanceToPolygon", _wrap_TRACK_List_TransformShapeWithClearanceToPolygon, METH_VARARGS, (char *)"\n"
		"TRACK_List_TransformShapeWithClearanceToPolygon(TRACK_List self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, \n"
		"    int aClearanceValue, int aCircleToSegmentsCount, double aCorrectionFactor)\n"
		""},
	 { (char *)"TRACK_List_SetDrill", _wrap_TRACK_List_SetDrill, METH_VARARGS, (char *)"TRACK_List_SetDrill(TRACK_List self, int aDrill)"},
	 { (char *)"TRACK_List_GetDrill", _wrap_TRACK_List_GetDrill, METH_VARARGS, (char *)"TRACK_List_GetDrill(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_GetDrillValue", _wrap_TRACK_List_GetDrillValue, METH_VARARGS, (char *)"TRACK_List_GetDrillValue(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_SetDrillDefault", _wrap_TRACK_List_SetDrillDefault, METH_VARARGS, (char *)"TRACK_List_SetDrillDefault(TRACK_List self)"},
	 { (char *)"TRACK_List_IsDrillDefault", _wrap_TRACK_List_IsDrillDefault, METH_VARARGS, (char *)"TRACK_List_IsDrillDefault(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_ReturnMaskLayer", _wrap_TRACK_List_ReturnMaskLayer, METH_VARARGS, (char *)"TRACK_List_ReturnMaskLayer(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_IsPointOnEnds", _wrap_TRACK_List_IsPointOnEnds, METH_VARARGS, (char *)"\n"
		"IsPointOnEnds(wxPoint point, int min_dist=0) -> int\n"
		"TRACK_List_IsPointOnEnds(TRACK_List self, wxPoint point) -> int\n"
		""},
	 { (char *)"TRACK_List_IsNull", _wrap_TRACK_List_IsNull, METH_VARARGS, (char *)"TRACK_List_IsNull(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_DisplayInfo", _wrap_TRACK_List_DisplayInfo, METH_VARARGS, (char *)"TRACK_List_DisplayInfo(TRACK_List self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"TRACK_List_DisplayInfoBase", _wrap_TRACK_List_DisplayInfoBase, METH_VARARGS, (char *)"TRACK_List_DisplayInfoBase(TRACK_List self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"TRACK_List_ShowWidth", _wrap_TRACK_List_ShowWidth, METH_VARARGS, (char *)"TRACK_List_ShowWidth(TRACK_List self) -> wxString"},
	 { (char *)"TRACK_List_Visit", _wrap_TRACK_List_Visit, METH_VARARGS, (char *)"TRACK_List_Visit(TRACK_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"TRACK_List_HitTest", _wrap_TRACK_List_HitTest, METH_VARARGS, (char *)"\n"
		"HitTest(wxPoint aPosition) -> bool\n"
		"TRACK_List_HitTest(TRACK_List self, EDA_RECT aRect) -> bool\n"
		""},
	 { (char *)"TRACK_List_GetVia", _wrap_TRACK_List_GetVia, METH_VARARGS, (char *)"\n"
		"GetVia(wxPoint aPosition, int aLayerMask=-1) -> TRACK\n"
		"GetVia(wxPoint aPosition) -> TRACK\n"
		"TRACK_List_GetVia(TRACK_List self, TRACK aEndTrace, wxPoint aPosition, int aLayerMask) -> TRACK\n"
		""},
	 { (char *)"TRACK_List_GetTrace", _wrap_TRACK_List_GetTrace, METH_VARARGS, (char *)"TRACK_List_GetTrace(TRACK_List self, TRACK aStartTrace, TRACK aEndTrace, int aEndPoint) -> TRACK"},
	 { (char *)"TRACK_List_GetEndSegments", _wrap_TRACK_List_GetEndSegments, METH_VARARGS, (char *)"TRACK_List_GetEndSegments(TRACK_List self, int NbSegm, TRACK ** StartTrack, TRACK ** EndTrack) -> int"},
	 { (char *)"TRACK_List_GetClass", _wrap_TRACK_List_GetClass, METH_VARARGS, (char *)"TRACK_List_GetClass(TRACK_List self) -> wxString"},
	 { (char *)"TRACK_List_GetClearance", _wrap_TRACK_List_GetClearance, METH_VARARGS, (char *)"\n"
		"GetClearance(BOARD_CONNECTED_ITEM aItem=None) -> int\n"
		"TRACK_List_GetClearance(TRACK_List self) -> int\n"
		""},
	 { (char *)"TRACK_List_GetSelectMenuText", _wrap_TRACK_List_GetSelectMenuText, METH_VARARGS, (char *)"TRACK_List_GetSelectMenuText(TRACK_List self) -> wxString"},
	 { (char *)"TRACK_List_GetMenuImage", _wrap_TRACK_List_GetMenuImage, METH_VARARGS, (char *)"TRACK_List_GetMenuImage(TRACK_List self) -> BITMAP_DEF"},
	 { (char *)"TRACK_List_Clone", _wrap_TRACK_List_Clone, METH_VARARGS, (char *)"TRACK_List_Clone(TRACK_List self) -> EDA_ITEM"},
	 { (char *)"TRACK_List_m_TracksConnected_set", _wrap_TRACK_List_m_TracksConnected_set, METH_VARARGS, (char *)"TRACK_List_m_TracksConnected_set(TRACK_List self, std::vector< TRACK *,std::allocator< TRACK * > > * m_TracksConnected)"},
	 { (char *)"TRACK_List_m_TracksConnected_get", _wrap_TRACK_List_m_TracksConnected_get, METH_VARARGS, (char *)"TRACK_List_m_TracksConnected_get(TRACK_List self) -> std::vector< TRACK *,std::allocator< TRACK * > > *"},
	 { (char *)"TRACK_List_m_PadsConnected_set", _wrap_TRACK_List_m_PadsConnected_set, METH_VARARGS, (char *)"TRACK_List_m_PadsConnected_set(TRACK_List self, std::vector< D_PAD *,std::allocator< D_PAD * > > * m_PadsConnected)"},
	 { (char *)"TRACK_List_m_PadsConnected_get", _wrap_TRACK_List_m_PadsConnected_get, METH_VARARGS, (char *)"TRACK_List_m_PadsConnected_get(TRACK_List self) -> std::vector< D_PAD *,std::allocator< D_PAD * > > *"},
	 { (char *)"TRACK_List_GetNet", _wrap_TRACK_List_GetNet, METH_VARARGS, (char *)"TRACK_List_GetNet(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_SetNet", _wrap_TRACK_List_SetNet, METH_VARARGS, (char *)"TRACK_List_SetNet(TRACK_List self, int aNetCode)"},
	 { (char *)"TRACK_List_GetSubNet", _wrap_TRACK_List_GetSubNet, METH_VARARGS, (char *)"TRACK_List_GetSubNet(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_SetSubNet", _wrap_TRACK_List_SetSubNet, METH_VARARGS, (char *)"TRACK_List_SetSubNet(TRACK_List self, int aSubNetCode)"},
	 { (char *)"TRACK_List_GetZoneSubNet", _wrap_TRACK_List_GetZoneSubNet, METH_VARARGS, (char *)"TRACK_List_GetZoneSubNet(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_SetZoneSubNet", _wrap_TRACK_List_SetZoneSubNet, METH_VARARGS, (char *)"TRACK_List_SetZoneSubNet(TRACK_List self, int aSubNetCode)"},
	 { (char *)"TRACK_List_GetNetClass", _wrap_TRACK_List_GetNetClass, METH_VARARGS, (char *)"TRACK_List_GetNetClass(TRACK_List self) -> NETCLASS"},
	 { (char *)"TRACK_List_GetNetClassName", _wrap_TRACK_List_GetNetClassName, METH_VARARGS, (char *)"TRACK_List_GetNetClassName(TRACK_List self) -> wxString"},
	 { (char *)"TRACK_List_GetParent", _wrap_TRACK_List_GetParent, METH_VARARGS, (char *)"TRACK_List_GetParent(TRACK_List self) -> BOARD_ITEM"},
	 { (char *)"TRACK_List_GetLayer", _wrap_TRACK_List_GetLayer, METH_VARARGS, (char *)"TRACK_List_GetLayer(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_SetLayer", _wrap_TRACK_List_SetLayer, METH_VARARGS, (char *)"TRACK_List_SetLayer(TRACK_List self, int aLayer)"},
	 { (char *)"TRACK_List_IsOnLayer", _wrap_TRACK_List_IsOnLayer, METH_VARARGS, (char *)"TRACK_List_IsOnLayer(TRACK_List self, int aLayer) -> bool"},
	 { (char *)"TRACK_List_IsTrack", _wrap_TRACK_List_IsTrack, METH_VARARGS, (char *)"TRACK_List_IsTrack(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_IsLocked", _wrap_TRACK_List_IsLocked, METH_VARARGS, (char *)"TRACK_List_IsLocked(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_UnLink", _wrap_TRACK_List_UnLink, METH_VARARGS, (char *)"TRACK_List_UnLink(TRACK_List self)"},
	 { (char *)"TRACK_List_DeleteStructure", _wrap_TRACK_List_DeleteStructure, METH_VARARGS, (char *)"TRACK_List_DeleteStructure(TRACK_List self)"},
	 { (char *)"TRACK_List_ShowShape", _wrap_TRACK_List_ShowShape, METH_VARARGS, (char *)"TRACK_List_ShowShape(TRACK_List self, STROKE_T aShape) -> wxString"},
	 { (char *)"TRACK_List_GetBoard", _wrap_TRACK_List_GetBoard, METH_VARARGS, (char *)"TRACK_List_GetBoard(TRACK_List self) -> BOARD"},
	 { (char *)"TRACK_List_GetLayerName", _wrap_TRACK_List_GetLayerName, METH_VARARGS, (char *)"TRACK_List_GetLayerName(TRACK_List self) -> wxString"},
	 { (char *)"TRACK_List_FormatInternalUnits", _wrap_TRACK_List_FormatInternalUnits, METH_VARARGS, (char *)"\n"
		"FormatInternalUnits(int aValue) -> std::string\n"
		"FormatInternalUnits(wxPoint aPoint) -> std::string\n"
		"TRACK_List_FormatInternalUnits(TRACK_List self, wxSize aSize) -> std::string\n"
		""},
	 { (char *)"TRACK_List_FormatAngle", _wrap_TRACK_List_FormatAngle, METH_VARARGS, (char *)"TRACK_List_FormatAngle(TRACK_List self, double aAngle) -> std::string"},
	 { (char *)"TRACK_List_Cast_to_TEXTE_PCB", _wrap_TRACK_List_Cast_to_TEXTE_PCB, METH_VARARGS, (char *)"TRACK_List_Cast_to_TEXTE_PCB(TRACK_List self) -> TEXTE_PCB"},
	 { (char *)"TRACK_List_Cast_to_DIMENSION", _wrap_TRACK_List_Cast_to_DIMENSION, METH_VARARGS, (char *)"TRACK_List_Cast_to_DIMENSION(TRACK_List self) -> DIMENSION"},
	 { (char *)"TRACK_List_Cast_to_MODULE", _wrap_TRACK_List_Cast_to_MODULE, METH_VARARGS, (char *)"TRACK_List_Cast_to_MODULE(TRACK_List self) -> MODULE"},
	 { (char *)"TRACK_List_Cast_to_TEXTE_MODULE", _wrap_TRACK_List_Cast_to_TEXTE_MODULE, METH_VARARGS, (char *)"TRACK_List_Cast_to_TEXTE_MODULE(TRACK_List self) -> TEXTE_MODULE"},
	 { (char *)"TRACK_List_Cast_to_DRAWSEGMENT", _wrap_TRACK_List_Cast_to_DRAWSEGMENT, METH_VARARGS, (char *)"TRACK_List_Cast_to_DRAWSEGMENT(TRACK_List self) -> DRAWSEGMENT"},
	 { (char *)"TRACK_List_Cast_to_MARKER_PCB", _wrap_TRACK_List_Cast_to_MARKER_PCB, METH_VARARGS, (char *)"TRACK_List_Cast_to_MARKER_PCB(TRACK_List self) -> MARKER_PCB"},
	 { (char *)"TRACK_List_Cast_to_BOARD", _wrap_TRACK_List_Cast_to_BOARD, METH_VARARGS, (char *)"TRACK_List_Cast_to_BOARD(TRACK_List self) -> BOARD"},
	 { (char *)"TRACK_List_Cast_to_EDGE_MODULE", _wrap_TRACK_List_Cast_to_EDGE_MODULE, METH_VARARGS, (char *)"TRACK_List_Cast_to_EDGE_MODULE(TRACK_List self) -> EDGE_MODULE"},
	 { (char *)"TRACK_List_Cast_to_D_PAD", _wrap_TRACK_List_Cast_to_D_PAD, METH_VARARGS, (char *)"TRACK_List_Cast_to_D_PAD(TRACK_List self) -> D_PAD"},
	 { (char *)"TRACK_List_Cast_to_TRACK", _wrap_TRACK_List_Cast_to_TRACK, METH_VARARGS, (char *)"TRACK_List_Cast_to_TRACK(TRACK_List self) -> TRACK"},
	 { (char *)"TRACK_List_Cast_to_SEGZONE", _wrap_TRACK_List_Cast_to_SEGZONE, METH_VARARGS, (char *)"TRACK_List_Cast_to_SEGZONE(TRACK_List self) -> SEGZONE"},
	 { (char *)"TRACK_List_Cast_to_SEGVIA", _wrap_TRACK_List_Cast_to_SEGVIA, METH_VARARGS, (char *)"TRACK_List_Cast_to_SEGVIA(TRACK_List self) -> SEGVIA"},
	 { (char *)"TRACK_List_Type", _wrap_TRACK_List_Type, METH_VARARGS, (char *)"TRACK_List_Type(TRACK_List self) -> KICAD_T"},
	 { (char *)"TRACK_List_SetTimeStamp", _wrap_TRACK_List_SetTimeStamp, METH_VARARGS, (char *)"TRACK_List_SetTimeStamp(TRACK_List self, time_t aNewTimeStamp)"},
	 { (char *)"TRACK_List_GetTimeStamp", _wrap_TRACK_List_GetTimeStamp, METH_VARARGS, (char *)"TRACK_List_GetTimeStamp(TRACK_List self) -> time_t"},
	 { (char *)"TRACK_List_GetSon", _wrap_TRACK_List_GetSon, METH_VARARGS, (char *)"TRACK_List_GetSon(TRACK_List self) -> EDA_ITEM"},
	 { (char *)"TRACK_List_GetList", _wrap_TRACK_List_GetList, METH_VARARGS, (char *)"TRACK_List_GetList(TRACK_List self) -> DHEAD"},
	 { (char *)"TRACK_List_SetParent", _wrap_TRACK_List_SetParent, METH_VARARGS, (char *)"TRACK_List_SetParent(TRACK_List self, EDA_ITEM aParent)"},
	 { (char *)"TRACK_List_SetSon", _wrap_TRACK_List_SetSon, METH_VARARGS, (char *)"TRACK_List_SetSon(TRACK_List self, EDA_ITEM aSon)"},
	 { (char *)"TRACK_List_SetList", _wrap_TRACK_List_SetList, METH_VARARGS, (char *)"TRACK_List_SetList(TRACK_List self, DHEAD aList)"},
	 { (char *)"TRACK_List_IsNew", _wrap_TRACK_List_IsNew, METH_VARARGS, (char *)"TRACK_List_IsNew(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_IsModified", _wrap_TRACK_List_IsModified, METH_VARARGS, (char *)"TRACK_List_IsModified(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_IsMoving", _wrap_TRACK_List_IsMoving, METH_VARARGS, (char *)"TRACK_List_IsMoving(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_IsDragging", _wrap_TRACK_List_IsDragging, METH_VARARGS, (char *)"TRACK_List_IsDragging(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_IsSelected", _wrap_TRACK_List_IsSelected, METH_VARARGS, (char *)"TRACK_List_IsSelected(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_IsResized", _wrap_TRACK_List_IsResized, METH_VARARGS, (char *)"TRACK_List_IsResized(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List_SetModified", _wrap_TRACK_List_SetModified, METH_VARARGS, (char *)"TRACK_List_SetModified(TRACK_List self)"},
	 { (char *)"TRACK_List_GetState", _wrap_TRACK_List_GetState, METH_VARARGS, (char *)"TRACK_List_GetState(TRACK_List self, int type) -> int"},
	 { (char *)"TRACK_List_SetState", _wrap_TRACK_List_SetState, METH_VARARGS, (char *)"TRACK_List_SetState(TRACK_List self, int type, int state)"},
	 { (char *)"TRACK_List_GetStatus", _wrap_TRACK_List_GetStatus, METH_VARARGS, (char *)"TRACK_List_GetStatus(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_SetStatus", _wrap_TRACK_List_SetStatus, METH_VARARGS, (char *)"TRACK_List_SetStatus(TRACK_List self, int aStatus)"},
	 { (char *)"TRACK_List_SetFlags", _wrap_TRACK_List_SetFlags, METH_VARARGS, (char *)"TRACK_List_SetFlags(TRACK_List self, int aMask)"},
	 { (char *)"TRACK_List_ClearFlags", _wrap_TRACK_List_ClearFlags, METH_VARARGS, (char *)"\n"
		"ClearFlags(int aMask=-1)\n"
		"TRACK_List_ClearFlags(TRACK_List self)\n"
		""},
	 { (char *)"TRACK_List_GetFlags", _wrap_TRACK_List_GetFlags, METH_VARARGS, (char *)"TRACK_List_GetFlags(TRACK_List self) -> int"},
	 { (char *)"TRACK_List_SetImage", _wrap_TRACK_List_SetImage, METH_VARARGS, (char *)"TRACK_List_SetImage(TRACK_List self, EDA_ITEM aItem)"},
	 { (char *)"TRACK_List_SetForceVisible", _wrap_TRACK_List_SetForceVisible, METH_VARARGS, (char *)"TRACK_List_SetForceVisible(TRACK_List self, bool aEnable)"},
	 { (char *)"TRACK_List_IterateForward", _wrap_TRACK_List_IterateForward, METH_VARARGS, (char *)"\n"
		"TRACK_List_IterateForward(TRACK_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, \n"
		"    KICAD_T const [] scanTypes) -> SEARCH_RESULT\n"
		""},
	 { (char *)"TRACK_List_Matches", _wrap_TRACK_List_Matches, METH_VARARGS, (char *)"\n"
		"Matches(wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool\n"
		"TRACK_List_Matches(TRACK_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"TRACK_List_Replace", _wrap_TRACK_List_Replace, METH_VARARGS, (char *)"\n"
		"Replace(wxFindReplaceData & aSearchData, wxString & aText) -> bool\n"
		"Replace(wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool\n"
		"TRACK_List_Replace(TRACK_List self, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"TRACK_List_IsReplaceable", _wrap_TRACK_List_IsReplaceable, METH_VARARGS, (char *)"TRACK_List_IsReplaceable(TRACK_List self) -> bool"},
	 { (char *)"TRACK_List___lt__", _wrap_TRACK_List___lt__, METH_VARARGS, (char *)"TRACK_List___lt__(TRACK_List self, EDA_ITEM aItem) -> bool"},
	 { (char *)"TRACK_List_Sort", _wrap_TRACK_List_Sort, METH_VARARGS, (char *)"TRACK_List_Sort(TRACK_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"},
	 { (char *)"TRACK_List_swigregister", TRACK_List_swigregister, METH_VARARGS, NULL},
	 { (char *)"PAD_List_Get", _wrap_PAD_List_Get, METH_VARARGS, (char *)"PAD_List_Get(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List___deref__", _wrap_PAD_List___deref__, METH_VARARGS, (char *)"PAD_List___deref__(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List_GetFirst", _wrap_PAD_List_GetFirst, METH_VARARGS, (char *)"PAD_List_GetFirst(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List_GetLast", _wrap_PAD_List_GetLast, METH_VARARGS, (char *)"PAD_List_GetLast(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List_Append", _wrap_PAD_List_Append, METH_VARARGS, (char *)"\n"
		"Append(D_PAD aNewElement)\n"
		"PAD_List_Append(PAD_List self, PAD_List aList)\n"
		""},
	 { (char *)"PAD_List_Insert", _wrap_PAD_List_Insert, METH_VARARGS, (char *)"PAD_List_Insert(PAD_List self, D_PAD aNewElement, D_PAD aElementAfterMe)"},
	 { (char *)"PAD_List_Remove", _wrap_PAD_List_Remove, METH_VARARGS, (char *)"PAD_List_Remove(PAD_List self, D_PAD aElement) -> D_PAD"},
	 { (char *)"PAD_List_begin", _wrap_PAD_List_begin, METH_VARARGS, (char *)"PAD_List_begin(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List_end", _wrap_PAD_List_end, METH_VARARGS, (char *)"PAD_List_end(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List_PopFront", _wrap_PAD_List_PopFront, METH_VARARGS, (char *)"PAD_List_PopFront(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List_PopBack", _wrap_PAD_List_PopBack, METH_VARARGS, (char *)"PAD_List_PopBack(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List_PushFront", _wrap_PAD_List_PushFront, METH_VARARGS, (char *)"PAD_List_PushFront(PAD_List self, D_PAD aNewElement)"},
	 { (char *)"PAD_List_PushBack", _wrap_PAD_List_PushBack, METH_VARARGS, (char *)"PAD_List_PushBack(PAD_List self, D_PAD aNewElement)"},
	 { (char *)"new_PAD_List", _wrap_new_PAD_List, METH_VARARGS, (char *)"new_PAD_List() -> PAD_List"},
	 { (char *)"delete_PAD_List", _wrap_delete_PAD_List, METH_VARARGS, (char *)"delete_PAD_List(PAD_List self)"},
	 { (char *)"PAD_List_Copy", _wrap_PAD_List_Copy, METH_VARARGS, (char *)"PAD_List_Copy(PAD_List self, D_PAD source)"},
	 { (char *)"PAD_List_Next", _wrap_PAD_List_Next, METH_VARARGS, (char *)"PAD_List_Next(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List_GetParent", _wrap_PAD_List_GetParent, METH_VARARGS, (char *)"PAD_List_GetParent(PAD_List self) -> MODULE"},
	 { (char *)"PAD_List_SetPadName", _wrap_PAD_List_SetPadName, METH_VARARGS, (char *)"PAD_List_SetPadName(PAD_List self, wxString const & name)"},
	 { (char *)"PAD_List_GetPadName", _wrap_PAD_List_GetPadName, METH_VARARGS, (char *)"PAD_List_GetPadName(PAD_List self) -> wxString const"},
	 { (char *)"PAD_List_PadNameEqual", _wrap_PAD_List_PadNameEqual, METH_VARARGS, (char *)"PAD_List_PadNameEqual(PAD_List self, D_PAD other) -> bool"},
	 { (char *)"PAD_List_SetNetname", _wrap_PAD_List_SetNetname, METH_VARARGS, (char *)"PAD_List_SetNetname(PAD_List self, wxString const & aNetname)"},
	 { (char *)"PAD_List_GetNetname", _wrap_PAD_List_GetNetname, METH_VARARGS, (char *)"PAD_List_GetNetname(PAD_List self) -> wxString const &"},
	 { (char *)"PAD_List_GetShortNetname", _wrap_PAD_List_GetShortNetname, METH_VARARGS, (char *)"PAD_List_GetShortNetname(PAD_List self) -> wxString const &"},
	 { (char *)"PAD_List_GetShape", _wrap_PAD_List_GetShape, METH_VARARGS, (char *)"PAD_List_GetShape(PAD_List self) -> PAD_SHAPE_T"},
	 { (char *)"PAD_List_SetShape", _wrap_PAD_List_SetShape, METH_VARARGS, (char *)"PAD_List_SetShape(PAD_List self, PAD_SHAPE_T aShape)"},
	 { (char *)"PAD_List_SetPosition", _wrap_PAD_List_SetPosition, METH_VARARGS, (char *)"PAD_List_SetPosition(PAD_List self, wxPoint aPos)"},
	 { (char *)"PAD_List_GetPosition", _wrap_PAD_List_GetPosition, METH_VARARGS, (char *)"PAD_List_GetPosition(PAD_List self) -> wxPoint"},
	 { (char *)"PAD_List_SetY", _wrap_PAD_List_SetY, METH_VARARGS, (char *)"PAD_List_SetY(PAD_List self, int y)"},
	 { (char *)"PAD_List_SetX", _wrap_PAD_List_SetX, METH_VARARGS, (char *)"PAD_List_SetX(PAD_List self, int x)"},
	 { (char *)"PAD_List_SetPos0", _wrap_PAD_List_SetPos0, METH_VARARGS, (char *)"PAD_List_SetPos0(PAD_List self, wxPoint aPos)"},
	 { (char *)"PAD_List_GetPos0", _wrap_PAD_List_GetPos0, METH_VARARGS, (char *)"PAD_List_GetPos0(PAD_List self) -> wxPoint"},
	 { (char *)"PAD_List_SetY0", _wrap_PAD_List_SetY0, METH_VARARGS, (char *)"PAD_List_SetY0(PAD_List self, int y)"},
	 { (char *)"PAD_List_SetX0", _wrap_PAD_List_SetX0, METH_VARARGS, (char *)"PAD_List_SetX0(PAD_List self, int x)"},
	 { (char *)"PAD_List_SetSize", _wrap_PAD_List_SetSize, METH_VARARGS, (char *)"PAD_List_SetSize(PAD_List self, wxSize aSize)"},
	 { (char *)"PAD_List_GetSize", _wrap_PAD_List_GetSize, METH_VARARGS, (char *)"PAD_List_GetSize(PAD_List self) -> wxSize"},
	 { (char *)"PAD_List_SetDelta", _wrap_PAD_List_SetDelta, METH_VARARGS, (char *)"PAD_List_SetDelta(PAD_List self, wxSize aSize)"},
	 { (char *)"PAD_List_GetDelta", _wrap_PAD_List_GetDelta, METH_VARARGS, (char *)"PAD_List_GetDelta(PAD_List self) -> wxSize"},
	 { (char *)"PAD_List_SetDrillSize", _wrap_PAD_List_SetDrillSize, METH_VARARGS, (char *)"PAD_List_SetDrillSize(PAD_List self, wxSize aSize)"},
	 { (char *)"PAD_List_GetDrillSize", _wrap_PAD_List_GetDrillSize, METH_VARARGS, (char *)"PAD_List_GetDrillSize(PAD_List self) -> wxSize"},
	 { (char *)"PAD_List_SetOffset", _wrap_PAD_List_SetOffset, METH_VARARGS, (char *)"PAD_List_SetOffset(PAD_List self, wxPoint aOffset)"},
	 { (char *)"PAD_List_GetOffset", _wrap_PAD_List_GetOffset, METH_VARARGS, (char *)"PAD_List_GetOffset(PAD_List self) -> wxPoint"},
	 { (char *)"PAD_List_Flip", _wrap_PAD_List_Flip, METH_VARARGS, (char *)"PAD_List_Flip(PAD_List self, int aTranslationY)"},
	 { (char *)"PAD_List_SetOrientation", _wrap_PAD_List_SetOrientation, METH_VARARGS, (char *)"PAD_List_SetOrientation(PAD_List self, double aAngle)"},
	 { (char *)"PAD_List_GetOrientation", _wrap_PAD_List_GetOrientation, METH_VARARGS, (char *)"PAD_List_GetOrientation(PAD_List self) -> double"},
	 { (char *)"PAD_List_SetDrillShape", _wrap_PAD_List_SetDrillShape, METH_VARARGS, (char *)"PAD_List_SetDrillShape(PAD_List self, PAD_SHAPE_T aDrillShape)"},
	 { (char *)"PAD_List_GetDrillShape", _wrap_PAD_List_GetDrillShape, METH_VARARGS, (char *)"PAD_List_GetDrillShape(PAD_List self) -> PAD_SHAPE_T"},
	 { (char *)"PAD_List_SetLayerMask", _wrap_PAD_List_SetLayerMask, METH_VARARGS, (char *)"PAD_List_SetLayerMask(PAD_List self, int aLayerMask)"},
	 { (char *)"PAD_List_GetLayerMask", _wrap_PAD_List_GetLayerMask, METH_VARARGS, (char *)"PAD_List_GetLayerMask(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetAttribute", _wrap_PAD_List_SetAttribute, METH_VARARGS, (char *)"PAD_List_SetAttribute(PAD_List self, PAD_ATTR_T aAttribute)"},
	 { (char *)"PAD_List_GetAttribute", _wrap_PAD_List_GetAttribute, METH_VARARGS, (char *)"PAD_List_GetAttribute(PAD_List self) -> PAD_ATTR_T"},
	 { (char *)"PAD_List_SetDieLength", _wrap_PAD_List_SetDieLength, METH_VARARGS, (char *)"PAD_List_SetDieLength(PAD_List self, int aLength)"},
	 { (char *)"PAD_List_GetDieLength", _wrap_PAD_List_GetDieLength, METH_VARARGS, (char *)"PAD_List_GetDieLength(PAD_List self) -> int"},
	 { (char *)"PAD_List_GetLocalSolderMaskMargin", _wrap_PAD_List_GetLocalSolderMaskMargin, METH_VARARGS, (char *)"PAD_List_GetLocalSolderMaskMargin(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetLocalSolderMaskMargin", _wrap_PAD_List_SetLocalSolderMaskMargin, METH_VARARGS, (char *)"PAD_List_SetLocalSolderMaskMargin(PAD_List self, int aMargin)"},
	 { (char *)"PAD_List_GetLocalClearance", _wrap_PAD_List_GetLocalClearance, METH_VARARGS, (char *)"PAD_List_GetLocalClearance(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetLocalClearance", _wrap_PAD_List_SetLocalClearance, METH_VARARGS, (char *)"PAD_List_SetLocalClearance(PAD_List self, int aClearance)"},
	 { (char *)"PAD_List_GetLocalSolderPasteMargin", _wrap_PAD_List_GetLocalSolderPasteMargin, METH_VARARGS, (char *)"PAD_List_GetLocalSolderPasteMargin(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetLocalSolderPasteMargin", _wrap_PAD_List_SetLocalSolderPasteMargin, METH_VARARGS, (char *)"PAD_List_SetLocalSolderPasteMargin(PAD_List self, int aMargin)"},
	 { (char *)"PAD_List_GetLocalSolderPasteMarginRatio", _wrap_PAD_List_GetLocalSolderPasteMarginRatio, METH_VARARGS, (char *)"PAD_List_GetLocalSolderPasteMarginRatio(PAD_List self) -> double"},
	 { (char *)"PAD_List_SetLocalSolderPasteMarginRatio", _wrap_PAD_List_SetLocalSolderPasteMarginRatio, METH_VARARGS, (char *)"PAD_List_SetLocalSolderPasteMarginRatio(PAD_List self, double aRatio)"},
	 { (char *)"PAD_List_TransformShapeWithClearanceToPolygon", _wrap_PAD_List_TransformShapeWithClearanceToPolygon, METH_VARARGS, (char *)"\n"
		"PAD_List_TransformShapeWithClearanceToPolygon(PAD_List self, std::vector< CPolyPt,std::allocator< CPolyPt > > & aCornerBuffer, \n"
		"    int aClearanceValue, int aCircleToSegmentsCount, double aCorrectionFactor)\n"
		""},
	 { (char *)"PAD_List_GetClearance", _wrap_PAD_List_GetClearance, METH_VARARGS, (char *)"\n"
		"GetClearance(BOARD_CONNECTED_ITEM aItem=None) -> int\n"
		"PAD_List_GetClearance(PAD_List self) -> int\n"
		""},
	 { (char *)"PAD_List_GetSolderMaskMargin", _wrap_PAD_List_GetSolderMaskMargin, METH_VARARGS, (char *)"PAD_List_GetSolderMaskMargin(PAD_List self) -> int"},
	 { (char *)"PAD_List_GetSolderPasteMargin", _wrap_PAD_List_GetSolderPasteMargin, METH_VARARGS, (char *)"PAD_List_GetSolderPasteMargin(PAD_List self) -> wxSize"},
	 { (char *)"PAD_List_SetZoneConnection", _wrap_PAD_List_SetZoneConnection, METH_VARARGS, (char *)"PAD_List_SetZoneConnection(PAD_List self, ZoneConnection aType)"},
	 { (char *)"PAD_List_GetZoneConnection", _wrap_PAD_List_GetZoneConnection, METH_VARARGS, (char *)"PAD_List_GetZoneConnection(PAD_List self) -> ZoneConnection"},
	 { (char *)"PAD_List_SetThermalWidth", _wrap_PAD_List_SetThermalWidth, METH_VARARGS, (char *)"PAD_List_SetThermalWidth(PAD_List self, int aWidth)"},
	 { (char *)"PAD_List_GetThermalWidth", _wrap_PAD_List_GetThermalWidth, METH_VARARGS, (char *)"PAD_List_GetThermalWidth(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetThermalGap", _wrap_PAD_List_SetThermalGap, METH_VARARGS, (char *)"PAD_List_SetThermalGap(PAD_List self, int aGap)"},
	 { (char *)"PAD_List_GetThermalGap", _wrap_PAD_List_GetThermalGap, METH_VARARGS, (char *)"PAD_List_GetThermalGap(PAD_List self) -> int"},
	 { (char *)"PAD_List_Draw", _wrap_PAD_List_Draw, METH_VARARGS, (char *)"\n"
		"Draw(EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode, wxPoint aOffset=)\n"
		"PAD_List_Draw(PAD_List self, EDA_DRAW_PANEL * aPanel, wxDC * aDC, int aDrawMode)\n"
		""},
	 { (char *)"PAD_List_Draw3D", _wrap_PAD_List_Draw3D, METH_VARARGS, (char *)"PAD_List_Draw3D(PAD_List self, EDA_3D_CANVAS * glcanvas)"},
	 { (char *)"PAD_List_DrawShape", _wrap_PAD_List_DrawShape, METH_VARARGS, (char *)"PAD_List_DrawShape(PAD_List self, EDA_RECT aClipBox, wxDC * aDC, PAD_DRAWINFO aDrawInfo)"},
	 { (char *)"PAD_List_BuildPadPolygon", _wrap_PAD_List_BuildPadPolygon, METH_VARARGS, (char *)"PAD_List_BuildPadPolygon(PAD_List self, wxPoint aCoord, wxSize aInflateValue, int aRotation)"},
	 { (char *)"PAD_List_BuildSegmentFromOvalShape", _wrap_PAD_List_BuildSegmentFromOvalShape, METH_VARARGS, (char *)"PAD_List_BuildSegmentFromOvalShape(PAD_List self, wxPoint aSegStart, wxPoint aSegEnd, int aRotation) -> int"},
	 { (char *)"PAD_List_ReturnStringPadName", _wrap_PAD_List_ReturnStringPadName, METH_VARARGS, (char *)"PAD_List_ReturnStringPadName(PAD_List self, wxString & text)"},
	 { (char *)"PAD_List_GetBoundingRadius", _wrap_PAD_List_GetBoundingRadius, METH_VARARGS, (char *)"PAD_List_GetBoundingRadius(PAD_List self) -> int"},
	 { (char *)"PAD_List_ReturnShapePos", _wrap_PAD_List_ReturnShapePos, METH_VARARGS, (char *)"PAD_List_ReturnShapePos(PAD_List self) -> wxPoint"},
	 { (char *)"PAD_List_GetSubRatsnest", _wrap_PAD_List_GetSubRatsnest, METH_VARARGS, (char *)"PAD_List_GetSubRatsnest(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetSubRatsnest", _wrap_PAD_List_SetSubRatsnest, METH_VARARGS, (char *)"PAD_List_SetSubRatsnest(PAD_List self, int aSubRatsnest)"},
	 { (char *)"PAD_List_DisplayInfo", _wrap_PAD_List_DisplayInfo, METH_VARARGS, (char *)"PAD_List_DisplayInfo(PAD_List self, EDA_DRAW_FRAME * frame)"},
	 { (char *)"PAD_List_IsOnLayer", _wrap_PAD_List_IsOnLayer, METH_VARARGS, (char *)"PAD_List_IsOnLayer(PAD_List self, int aLayer) -> bool"},
	 { (char *)"PAD_List_HitTest", _wrap_PAD_List_HitTest, METH_VARARGS, (char *)"PAD_List_HitTest(PAD_List self, wxPoint aPosition) -> bool"},
	 { (char *)"PAD_List_GetClass", _wrap_PAD_List_GetClass, METH_VARARGS, (char *)"PAD_List_GetClass(PAD_List self) -> wxString"},
	 { (char *)"PAD_List_GetBoundingBox", _wrap_PAD_List_GetBoundingBox, METH_VARARGS, (char *)"PAD_List_GetBoundingBox(PAD_List self) -> EDA_RECT"},
	 { (char *)"PAD_List_Compare", _wrap_PAD_List_Compare, METH_VARARGS, (char *)"PAD_List_Compare(PAD_List self, D_PAD padref, D_PAD padcmp) -> int"},
	 { (char *)"PAD_List_Move", _wrap_PAD_List_Move, METH_VARARGS, (char *)"PAD_List_Move(PAD_List self, wxPoint aMoveVector)"},
	 { (char *)"PAD_List_GetSelectMenuText", _wrap_PAD_List_GetSelectMenuText, METH_VARARGS, (char *)"PAD_List_GetSelectMenuText(PAD_List self) -> wxString"},
	 { (char *)"PAD_List_GetMenuImage", _wrap_PAD_List_GetMenuImage, METH_VARARGS, (char *)"PAD_List_GetMenuImage(PAD_List self) -> BITMAP_DEF"},
	 { (char *)"PAD_List_ShowPadShape", _wrap_PAD_List_ShowPadShape, METH_VARARGS, (char *)"PAD_List_ShowPadShape(PAD_List self) -> wxString"},
	 { (char *)"PAD_List_ShowPadAttr", _wrap_PAD_List_ShowPadAttr, METH_VARARGS, (char *)"PAD_List_ShowPadAttr(PAD_List self) -> wxString"},
	 { (char *)"PAD_List_AppendConfigs", _wrap_PAD_List_AppendConfigs, METH_VARARGS, (char *)"PAD_List_AppendConfigs(PAD_List self, PARAM_CFG_ARRAY * aResult)"},
	 { (char *)"PAD_List_Clone", _wrap_PAD_List_Clone, METH_VARARGS, (char *)"PAD_List_Clone(PAD_List self) -> EDA_ITEM"},
	 { (char *)"PAD_List_m_TracksConnected_set", _wrap_PAD_List_m_TracksConnected_set, METH_VARARGS, (char *)"PAD_List_m_TracksConnected_set(PAD_List self, std::vector< TRACK *,std::allocator< TRACK * > > * m_TracksConnected)"},
	 { (char *)"PAD_List_m_TracksConnected_get", _wrap_PAD_List_m_TracksConnected_get, METH_VARARGS, (char *)"PAD_List_m_TracksConnected_get(PAD_List self) -> std::vector< TRACK *,std::allocator< TRACK * > > *"},
	 { (char *)"PAD_List_m_PadsConnected_set", _wrap_PAD_List_m_PadsConnected_set, METH_VARARGS, (char *)"PAD_List_m_PadsConnected_set(PAD_List self, std::vector< D_PAD *,std::allocator< D_PAD * > > * m_PadsConnected)"},
	 { (char *)"PAD_List_m_PadsConnected_get", _wrap_PAD_List_m_PadsConnected_get, METH_VARARGS, (char *)"PAD_List_m_PadsConnected_get(PAD_List self) -> std::vector< D_PAD *,std::allocator< D_PAD * > > *"},
	 { (char *)"PAD_List_GetNet", _wrap_PAD_List_GetNet, METH_VARARGS, (char *)"PAD_List_GetNet(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetNet", _wrap_PAD_List_SetNet, METH_VARARGS, (char *)"PAD_List_SetNet(PAD_List self, int aNetCode)"},
	 { (char *)"PAD_List_GetSubNet", _wrap_PAD_List_GetSubNet, METH_VARARGS, (char *)"PAD_List_GetSubNet(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetSubNet", _wrap_PAD_List_SetSubNet, METH_VARARGS, (char *)"PAD_List_SetSubNet(PAD_List self, int aSubNetCode)"},
	 { (char *)"PAD_List_GetZoneSubNet", _wrap_PAD_List_GetZoneSubNet, METH_VARARGS, (char *)"PAD_List_GetZoneSubNet(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetZoneSubNet", _wrap_PAD_List_SetZoneSubNet, METH_VARARGS, (char *)"PAD_List_SetZoneSubNet(PAD_List self, int aSubNetCode)"},
	 { (char *)"PAD_List_GetNetClass", _wrap_PAD_List_GetNetClass, METH_VARARGS, (char *)"PAD_List_GetNetClass(PAD_List self) -> NETCLASS"},
	 { (char *)"PAD_List_GetNetClassName", _wrap_PAD_List_GetNetClassName, METH_VARARGS, (char *)"PAD_List_GetNetClassName(PAD_List self) -> wxString"},
	 { (char *)"PAD_List_Back", _wrap_PAD_List_Back, METH_VARARGS, (char *)"PAD_List_Back(PAD_List self) -> BOARD_ITEM"},
	 { (char *)"PAD_List_GetLayer", _wrap_PAD_List_GetLayer, METH_VARARGS, (char *)"PAD_List_GetLayer(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetLayer", _wrap_PAD_List_SetLayer, METH_VARARGS, (char *)"PAD_List_SetLayer(PAD_List self, int aLayer)"},
	 { (char *)"PAD_List_IsTrack", _wrap_PAD_List_IsTrack, METH_VARARGS, (char *)"PAD_List_IsTrack(PAD_List self) -> bool"},
	 { (char *)"PAD_List_IsLocked", _wrap_PAD_List_IsLocked, METH_VARARGS, (char *)"PAD_List_IsLocked(PAD_List self) -> bool"},
	 { (char *)"PAD_List_UnLink", _wrap_PAD_List_UnLink, METH_VARARGS, (char *)"PAD_List_UnLink(PAD_List self)"},
	 { (char *)"PAD_List_DeleteStructure", _wrap_PAD_List_DeleteStructure, METH_VARARGS, (char *)"PAD_List_DeleteStructure(PAD_List self)"},
	 { (char *)"PAD_List_ShowShape", _wrap_PAD_List_ShowShape, METH_VARARGS, (char *)"PAD_List_ShowShape(PAD_List self, STROKE_T aShape) -> wxString"},
	 { (char *)"PAD_List_Rotate", _wrap_PAD_List_Rotate, METH_VARARGS, (char *)"PAD_List_Rotate(PAD_List self, wxPoint aRotCentre, double aAngle)"},
	 { (char *)"PAD_List_GetBoard", _wrap_PAD_List_GetBoard, METH_VARARGS, (char *)"PAD_List_GetBoard(PAD_List self) -> BOARD"},
	 { (char *)"PAD_List_GetLayerName", _wrap_PAD_List_GetLayerName, METH_VARARGS, (char *)"PAD_List_GetLayerName(PAD_List self) -> wxString"},
	 { (char *)"PAD_List_FormatInternalUnits", _wrap_PAD_List_FormatInternalUnits, METH_VARARGS, (char *)"\n"
		"FormatInternalUnits(int aValue) -> std::string\n"
		"FormatInternalUnits(wxPoint aPoint) -> std::string\n"
		"PAD_List_FormatInternalUnits(PAD_List self, wxSize aSize) -> std::string\n"
		""},
	 { (char *)"PAD_List_FormatAngle", _wrap_PAD_List_FormatAngle, METH_VARARGS, (char *)"PAD_List_FormatAngle(PAD_List self, double aAngle) -> std::string"},
	 { (char *)"PAD_List_Cast_to_TEXTE_PCB", _wrap_PAD_List_Cast_to_TEXTE_PCB, METH_VARARGS, (char *)"PAD_List_Cast_to_TEXTE_PCB(PAD_List self) -> TEXTE_PCB"},
	 { (char *)"PAD_List_Cast_to_DIMENSION", _wrap_PAD_List_Cast_to_DIMENSION, METH_VARARGS, (char *)"PAD_List_Cast_to_DIMENSION(PAD_List self) -> DIMENSION"},
	 { (char *)"PAD_List_Cast_to_MODULE", _wrap_PAD_List_Cast_to_MODULE, METH_VARARGS, (char *)"PAD_List_Cast_to_MODULE(PAD_List self) -> MODULE"},
	 { (char *)"PAD_List_Cast_to_TEXTE_MODULE", _wrap_PAD_List_Cast_to_TEXTE_MODULE, METH_VARARGS, (char *)"PAD_List_Cast_to_TEXTE_MODULE(PAD_List self) -> TEXTE_MODULE"},
	 { (char *)"PAD_List_Cast_to_DRAWSEGMENT", _wrap_PAD_List_Cast_to_DRAWSEGMENT, METH_VARARGS, (char *)"PAD_List_Cast_to_DRAWSEGMENT(PAD_List self) -> DRAWSEGMENT"},
	 { (char *)"PAD_List_Cast_to_MARKER_PCB", _wrap_PAD_List_Cast_to_MARKER_PCB, METH_VARARGS, (char *)"PAD_List_Cast_to_MARKER_PCB(PAD_List self) -> MARKER_PCB"},
	 { (char *)"PAD_List_Cast_to_BOARD", _wrap_PAD_List_Cast_to_BOARD, METH_VARARGS, (char *)"PAD_List_Cast_to_BOARD(PAD_List self) -> BOARD"},
	 { (char *)"PAD_List_Cast_to_EDGE_MODULE", _wrap_PAD_List_Cast_to_EDGE_MODULE, METH_VARARGS, (char *)"PAD_List_Cast_to_EDGE_MODULE(PAD_List self) -> EDGE_MODULE"},
	 { (char *)"PAD_List_Cast_to_D_PAD", _wrap_PAD_List_Cast_to_D_PAD, METH_VARARGS, (char *)"PAD_List_Cast_to_D_PAD(PAD_List self) -> D_PAD"},
	 { (char *)"PAD_List_Cast_to_TRACK", _wrap_PAD_List_Cast_to_TRACK, METH_VARARGS, (char *)"PAD_List_Cast_to_TRACK(PAD_List self) -> TRACK"},
	 { (char *)"PAD_List_Cast_to_SEGZONE", _wrap_PAD_List_Cast_to_SEGZONE, METH_VARARGS, (char *)"PAD_List_Cast_to_SEGZONE(PAD_List self) -> SEGZONE"},
	 { (char *)"PAD_List_Cast_to_SEGVIA", _wrap_PAD_List_Cast_to_SEGVIA, METH_VARARGS, (char *)"PAD_List_Cast_to_SEGVIA(PAD_List self) -> SEGVIA"},
	 { (char *)"PAD_List_Type", _wrap_PAD_List_Type, METH_VARARGS, (char *)"PAD_List_Type(PAD_List self) -> KICAD_T"},
	 { (char *)"PAD_List_SetTimeStamp", _wrap_PAD_List_SetTimeStamp, METH_VARARGS, (char *)"PAD_List_SetTimeStamp(PAD_List self, time_t aNewTimeStamp)"},
	 { (char *)"PAD_List_GetTimeStamp", _wrap_PAD_List_GetTimeStamp, METH_VARARGS, (char *)"PAD_List_GetTimeStamp(PAD_List self) -> time_t"},
	 { (char *)"PAD_List_GetSon", _wrap_PAD_List_GetSon, METH_VARARGS, (char *)"PAD_List_GetSon(PAD_List self) -> EDA_ITEM"},
	 { (char *)"PAD_List_GetList", _wrap_PAD_List_GetList, METH_VARARGS, (char *)"PAD_List_GetList(PAD_List self) -> DHEAD"},
	 { (char *)"PAD_List_SetParent", _wrap_PAD_List_SetParent, METH_VARARGS, (char *)"PAD_List_SetParent(PAD_List self, EDA_ITEM aParent)"},
	 { (char *)"PAD_List_SetSon", _wrap_PAD_List_SetSon, METH_VARARGS, (char *)"PAD_List_SetSon(PAD_List self, EDA_ITEM aSon)"},
	 { (char *)"PAD_List_SetList", _wrap_PAD_List_SetList, METH_VARARGS, (char *)"PAD_List_SetList(PAD_List self, DHEAD aList)"},
	 { (char *)"PAD_List_IsNew", _wrap_PAD_List_IsNew, METH_VARARGS, (char *)"PAD_List_IsNew(PAD_List self) -> bool"},
	 { (char *)"PAD_List_IsModified", _wrap_PAD_List_IsModified, METH_VARARGS, (char *)"PAD_List_IsModified(PAD_List self) -> bool"},
	 { (char *)"PAD_List_IsMoving", _wrap_PAD_List_IsMoving, METH_VARARGS, (char *)"PAD_List_IsMoving(PAD_List self) -> bool"},
	 { (char *)"PAD_List_IsDragging", _wrap_PAD_List_IsDragging, METH_VARARGS, (char *)"PAD_List_IsDragging(PAD_List self) -> bool"},
	 { (char *)"PAD_List_IsSelected", _wrap_PAD_List_IsSelected, METH_VARARGS, (char *)"PAD_List_IsSelected(PAD_List self) -> bool"},
	 { (char *)"PAD_List_IsResized", _wrap_PAD_List_IsResized, METH_VARARGS, (char *)"PAD_List_IsResized(PAD_List self) -> bool"},
	 { (char *)"PAD_List_SetModified", _wrap_PAD_List_SetModified, METH_VARARGS, (char *)"PAD_List_SetModified(PAD_List self)"},
	 { (char *)"PAD_List_GetState", _wrap_PAD_List_GetState, METH_VARARGS, (char *)"PAD_List_GetState(PAD_List self, int type) -> int"},
	 { (char *)"PAD_List_SetState", _wrap_PAD_List_SetState, METH_VARARGS, (char *)"PAD_List_SetState(PAD_List self, int type, int state)"},
	 { (char *)"PAD_List_GetStatus", _wrap_PAD_List_GetStatus, METH_VARARGS, (char *)"PAD_List_GetStatus(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetStatus", _wrap_PAD_List_SetStatus, METH_VARARGS, (char *)"PAD_List_SetStatus(PAD_List self, int aStatus)"},
	 { (char *)"PAD_List_SetFlags", _wrap_PAD_List_SetFlags, METH_VARARGS, (char *)"PAD_List_SetFlags(PAD_List self, int aMask)"},
	 { (char *)"PAD_List_ClearFlags", _wrap_PAD_List_ClearFlags, METH_VARARGS, (char *)"\n"
		"ClearFlags(int aMask=-1)\n"
		"PAD_List_ClearFlags(PAD_List self)\n"
		""},
	 { (char *)"PAD_List_GetFlags", _wrap_PAD_List_GetFlags, METH_VARARGS, (char *)"PAD_List_GetFlags(PAD_List self) -> int"},
	 { (char *)"PAD_List_SetImage", _wrap_PAD_List_SetImage, METH_VARARGS, (char *)"PAD_List_SetImage(PAD_List self, EDA_ITEM aItem)"},
	 { (char *)"PAD_List_SetForceVisible", _wrap_PAD_List_SetForceVisible, METH_VARARGS, (char *)"PAD_List_SetForceVisible(PAD_List self, bool aEnable)"},
	 { (char *)"PAD_List_IterateForward", _wrap_PAD_List_IterateForward, METH_VARARGS, (char *)"PAD_List_IterateForward(PAD_List self, EDA_ITEM listStart, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"PAD_List_Visit", _wrap_PAD_List_Visit, METH_VARARGS, (char *)"PAD_List_Visit(PAD_List self, INSPECTOR inspector, void const * testData, KICAD_T const [] scanTypes) -> SEARCH_RESULT"},
	 { (char *)"PAD_List_Matches", _wrap_PAD_List_Matches, METH_VARARGS, (char *)"\n"
		"Matches(wxFindReplaceData & aSearchData, void * aAuxData, wxPoint aFindLocation) -> bool\n"
		"PAD_List_Matches(PAD_List self, wxString const & aText, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"PAD_List_Replace", _wrap_PAD_List_Replace, METH_VARARGS, (char *)"\n"
		"Replace(wxFindReplaceData & aSearchData, wxString & aText) -> bool\n"
		"Replace(wxFindReplaceData & aSearchData, void * aAuxData=None) -> bool\n"
		"PAD_List_Replace(PAD_List self, wxFindReplaceData & aSearchData) -> bool\n"
		""},
	 { (char *)"PAD_List_IsReplaceable", _wrap_PAD_List_IsReplaceable, METH_VARARGS, (char *)"PAD_List_IsReplaceable(PAD_List self) -> bool"},
	 { (char *)"PAD_List___lt__", _wrap_PAD_List___lt__, METH_VARARGS, (char *)"PAD_List___lt__(PAD_List self, EDA_ITEM aItem) -> bool"},
	 { (char *)"PAD_List_Sort", _wrap_PAD_List_Sort, METH_VARARGS, (char *)"PAD_List_Sort(PAD_List self, EDA_ITEM aLeft, EDA_ITEM aRight) -> bool"},
	 { (char *)"PAD_List_swigregister", PAD_List_swigregister, METH_VARARGS, NULL},
	 { (char *)"VIA_DIMENSION_Vector_iterator", _wrap_VIA_DIMENSION_Vector_iterator, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_iterator(VIA_DIMENSION_Vector self) -> SwigPyIterator"},
	 { (char *)"VIA_DIMENSION_Vector___nonzero__", _wrap_VIA_DIMENSION_Vector___nonzero__, METH_VARARGS, (char *)"VIA_DIMENSION_Vector___nonzero__(VIA_DIMENSION_Vector self) -> bool"},
	 { (char *)"VIA_DIMENSION_Vector___bool__", _wrap_VIA_DIMENSION_Vector___bool__, METH_VARARGS, (char *)"VIA_DIMENSION_Vector___bool__(VIA_DIMENSION_Vector self) -> bool"},
	 { (char *)"VIA_DIMENSION_Vector___len__", _wrap_VIA_DIMENSION_Vector___len__, METH_VARARGS, (char *)"VIA_DIMENSION_Vector___len__(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::size_type"},
	 { (char *)"VIA_DIMENSION_Vector_pop", _wrap_VIA_DIMENSION_Vector_pop, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_pop(VIA_DIMENSION_Vector self) -> VIA_DIMENSION"},
	 { (char *)"VIA_DIMENSION_Vector___getslice__", _wrap_VIA_DIMENSION_Vector___getslice__, METH_VARARGS, (char *)"VIA_DIMENSION_Vector___getslice__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i, std::vector< VIA_DIMENSION >::difference_type j) -> VIA_DIMENSION_Vector"},
	 { (char *)"VIA_DIMENSION_Vector___setslice__", _wrap_VIA_DIMENSION_Vector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< VIA_DIMENSION >::difference_type i, std::vector< VIA_DIMENSION >::difference_type j, \n"
		"    VIA_DIMENSION_Vector v=std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > >())\n"
		"VIA_DIMENSION_Vector___setslice__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i, std::vector< VIA_DIMENSION >::difference_type j)\n"
		""},
	 { (char *)"VIA_DIMENSION_Vector___delslice__", _wrap_VIA_DIMENSION_Vector___delslice__, METH_VARARGS, (char *)"VIA_DIMENSION_Vector___delslice__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i, std::vector< VIA_DIMENSION >::difference_type j)"},
	 { (char *)"VIA_DIMENSION_Vector___delitem__", _wrap_VIA_DIMENSION_Vector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< VIA_DIMENSION >::difference_type i)\n"
		"VIA_DIMENSION_Vector___delitem__(VIA_DIMENSION_Vector self, PySliceObject * slice)\n"
		""},
	 { (char *)"VIA_DIMENSION_Vector___getitem__", _wrap_VIA_DIMENSION_Vector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> VIA_DIMENSION_Vector\n"
		"VIA_DIMENSION_Vector___getitem__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i) -> VIA_DIMENSION\n"
		""},
	 { (char *)"VIA_DIMENSION_Vector___setitem__", _wrap_VIA_DIMENSION_Vector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, VIA_DIMENSION_Vector v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"VIA_DIMENSION_Vector___setitem__(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::difference_type i, VIA_DIMENSION x)\n"
		""},
	 { (char *)"VIA_DIMENSION_Vector_append", _wrap_VIA_DIMENSION_Vector_append, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_append(VIA_DIMENSION_Vector self, VIA_DIMENSION x)"},
	 { (char *)"VIA_DIMENSION_Vector_empty", _wrap_VIA_DIMENSION_Vector_empty, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_empty(VIA_DIMENSION_Vector self) -> bool"},
	 { (char *)"VIA_DIMENSION_Vector_size", _wrap_VIA_DIMENSION_Vector_size, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_size(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::size_type"},
	 { (char *)"VIA_DIMENSION_Vector_clear", _wrap_VIA_DIMENSION_Vector_clear, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_clear(VIA_DIMENSION_Vector self)"},
	 { (char *)"VIA_DIMENSION_Vector_swap", _wrap_VIA_DIMENSION_Vector_swap, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_swap(VIA_DIMENSION_Vector self, VIA_DIMENSION_Vector v)"},
	 { (char *)"VIA_DIMENSION_Vector_get_allocator", _wrap_VIA_DIMENSION_Vector_get_allocator, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_get_allocator(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::allocator_type"},
	 { (char *)"VIA_DIMENSION_Vector_begin", _wrap_VIA_DIMENSION_Vector_begin, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_begin(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::iterator"},
	 { (char *)"VIA_DIMENSION_Vector_end", _wrap_VIA_DIMENSION_Vector_end, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_end(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::iterator"},
	 { (char *)"VIA_DIMENSION_Vector_rbegin", _wrap_VIA_DIMENSION_Vector_rbegin, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_rbegin(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::reverse_iterator"},
	 { (char *)"VIA_DIMENSION_Vector_rend", _wrap_VIA_DIMENSION_Vector_rend, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_rend(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::reverse_iterator"},
	 { (char *)"VIA_DIMENSION_Vector_pop_back", _wrap_VIA_DIMENSION_Vector_pop_back, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_pop_back(VIA_DIMENSION_Vector self)"},
	 { (char *)"VIA_DIMENSION_Vector_erase", _wrap_VIA_DIMENSION_Vector_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< VIA_DIMENSION >::iterator pos) -> std::vector< VIA_DIMENSION >::iterator\n"
		"VIA_DIMENSION_Vector_erase(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::iterator first, std::vector< VIA_DIMENSION >::iterator last) -> std::vector< VIA_DIMENSION >::iterator\n"
		""},
	 { (char *)"new_VIA_DIMENSION_Vector", _wrap_new_VIA_DIMENSION_Vector, METH_VARARGS, (char *)"\n"
		"VIA_DIMENSION_Vector()\n"
		"VIA_DIMENSION_Vector(VIA_DIMENSION_Vector arg2)\n"
		"VIA_DIMENSION_Vector(std::vector< VIA_DIMENSION >::size_type size)\n"
		"new_VIA_DIMENSION_Vector(std::vector< VIA_DIMENSION >::size_type size, VIA_DIMENSION value) -> VIA_DIMENSION_Vector\n"
		""},
	 { (char *)"VIA_DIMENSION_Vector_push_back", _wrap_VIA_DIMENSION_Vector_push_back, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_push_back(VIA_DIMENSION_Vector self, VIA_DIMENSION x)"},
	 { (char *)"VIA_DIMENSION_Vector_front", _wrap_VIA_DIMENSION_Vector_front, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_front(VIA_DIMENSION_Vector self) -> VIA_DIMENSION"},
	 { (char *)"VIA_DIMENSION_Vector_back", _wrap_VIA_DIMENSION_Vector_back, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_back(VIA_DIMENSION_Vector self) -> VIA_DIMENSION"},
	 { (char *)"VIA_DIMENSION_Vector_assign", _wrap_VIA_DIMENSION_Vector_assign, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_assign(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::size_type n, VIA_DIMENSION x)"},
	 { (char *)"VIA_DIMENSION_Vector_resize", _wrap_VIA_DIMENSION_Vector_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< VIA_DIMENSION >::size_type new_size)\n"
		"VIA_DIMENSION_Vector_resize(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::size_type new_size, VIA_DIMENSION x)\n"
		""},
	 { (char *)"VIA_DIMENSION_Vector_insert", _wrap_VIA_DIMENSION_Vector_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< VIA_DIMENSION >::iterator pos, VIA_DIMENSION x) -> std::vector< VIA_DIMENSION >::iterator\n"
		"VIA_DIMENSION_Vector_insert(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::iterator pos, std::vector< VIA_DIMENSION >::size_type n, \n"
		"    VIA_DIMENSION x)\n"
		""},
	 { (char *)"VIA_DIMENSION_Vector_reserve", _wrap_VIA_DIMENSION_Vector_reserve, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_reserve(VIA_DIMENSION_Vector self, std::vector< VIA_DIMENSION >::size_type n)"},
	 { (char *)"VIA_DIMENSION_Vector_capacity", _wrap_VIA_DIMENSION_Vector_capacity, METH_VARARGS, (char *)"VIA_DIMENSION_Vector_capacity(VIA_DIMENSION_Vector self) -> std::vector< VIA_DIMENSION >::size_type"},
	 { (char *)"delete_VIA_DIMENSION_Vector", _wrap_delete_VIA_DIMENSION_Vector, METH_VARARGS, (char *)"delete_VIA_DIMENSION_Vector(VIA_DIMENSION_Vector self)"},
	 { (char *)"VIA_DIMENSION_Vector_swigregister", VIA_DIMENSION_Vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"RASTNET_Vector_iterator", _wrap_RASTNET_Vector_iterator, METH_VARARGS, (char *)"RASTNET_Vector_iterator(RASTNET_Vector self) -> SwigPyIterator"},
	 { (char *)"RASTNET_Vector___nonzero__", _wrap_RASTNET_Vector___nonzero__, METH_VARARGS, (char *)"RASTNET_Vector___nonzero__(RASTNET_Vector self) -> bool"},
	 { (char *)"RASTNET_Vector___bool__", _wrap_RASTNET_Vector___bool__, METH_VARARGS, (char *)"RASTNET_Vector___bool__(RASTNET_Vector self) -> bool"},
	 { (char *)"RASTNET_Vector___len__", _wrap_RASTNET_Vector___len__, METH_VARARGS, (char *)"RASTNET_Vector___len__(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::size_type"},
	 { (char *)"RASTNET_Vector_pop", _wrap_RASTNET_Vector_pop, METH_VARARGS, (char *)"RASTNET_Vector_pop(RASTNET_Vector self) -> RATSNEST_ITEM"},
	 { (char *)"RASTNET_Vector___getslice__", _wrap_RASTNET_Vector___getslice__, METH_VARARGS, (char *)"RASTNET_Vector___getslice__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i, std::vector< RATSNEST_ITEM >::difference_type j) -> RASTNET_Vector"},
	 { (char *)"RASTNET_Vector___setslice__", _wrap_RASTNET_Vector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< RATSNEST_ITEM >::difference_type i, std::vector< RATSNEST_ITEM >::difference_type j, \n"
		"    RASTNET_Vector v=std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > >())\n"
		"RASTNET_Vector___setslice__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i, std::vector< RATSNEST_ITEM >::difference_type j)\n"
		""},
	 { (char *)"RASTNET_Vector___delslice__", _wrap_RASTNET_Vector___delslice__, METH_VARARGS, (char *)"RASTNET_Vector___delslice__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i, std::vector< RATSNEST_ITEM >::difference_type j)"},
	 { (char *)"RASTNET_Vector___delitem__", _wrap_RASTNET_Vector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< RATSNEST_ITEM >::difference_type i)\n"
		"RASTNET_Vector___delitem__(RASTNET_Vector self, PySliceObject * slice)\n"
		""},
	 { (char *)"RASTNET_Vector___getitem__", _wrap_RASTNET_Vector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> RASTNET_Vector\n"
		"RASTNET_Vector___getitem__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i) -> RATSNEST_ITEM\n"
		""},
	 { (char *)"RASTNET_Vector___setitem__", _wrap_RASTNET_Vector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, RASTNET_Vector v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"RASTNET_Vector___setitem__(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::difference_type i, RATSNEST_ITEM x)\n"
		""},
	 { (char *)"RASTNET_Vector_append", _wrap_RASTNET_Vector_append, METH_VARARGS, (char *)"RASTNET_Vector_append(RASTNET_Vector self, RATSNEST_ITEM x)"},
	 { (char *)"RASTNET_Vector_empty", _wrap_RASTNET_Vector_empty, METH_VARARGS, (char *)"RASTNET_Vector_empty(RASTNET_Vector self) -> bool"},
	 { (char *)"RASTNET_Vector_size", _wrap_RASTNET_Vector_size, METH_VARARGS, (char *)"RASTNET_Vector_size(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::size_type"},
	 { (char *)"RASTNET_Vector_clear", _wrap_RASTNET_Vector_clear, METH_VARARGS, (char *)"RASTNET_Vector_clear(RASTNET_Vector self)"},
	 { (char *)"RASTNET_Vector_swap", _wrap_RASTNET_Vector_swap, METH_VARARGS, (char *)"RASTNET_Vector_swap(RASTNET_Vector self, RASTNET_Vector v)"},
	 { (char *)"RASTNET_Vector_get_allocator", _wrap_RASTNET_Vector_get_allocator, METH_VARARGS, (char *)"RASTNET_Vector_get_allocator(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::allocator_type"},
	 { (char *)"RASTNET_Vector_begin", _wrap_RASTNET_Vector_begin, METH_VARARGS, (char *)"RASTNET_Vector_begin(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::iterator"},
	 { (char *)"RASTNET_Vector_end", _wrap_RASTNET_Vector_end, METH_VARARGS, (char *)"RASTNET_Vector_end(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::iterator"},
	 { (char *)"RASTNET_Vector_rbegin", _wrap_RASTNET_Vector_rbegin, METH_VARARGS, (char *)"RASTNET_Vector_rbegin(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::reverse_iterator"},
	 { (char *)"RASTNET_Vector_rend", _wrap_RASTNET_Vector_rend, METH_VARARGS, (char *)"RASTNET_Vector_rend(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::reverse_iterator"},
	 { (char *)"RASTNET_Vector_pop_back", _wrap_RASTNET_Vector_pop_back, METH_VARARGS, (char *)"RASTNET_Vector_pop_back(RASTNET_Vector self)"},
	 { (char *)"RASTNET_Vector_erase", _wrap_RASTNET_Vector_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< RATSNEST_ITEM >::iterator pos) -> std::vector< RATSNEST_ITEM >::iterator\n"
		"RASTNET_Vector_erase(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::iterator first, std::vector< RATSNEST_ITEM >::iterator last) -> std::vector< RATSNEST_ITEM >::iterator\n"
		""},
	 { (char *)"new_RASTNET_Vector", _wrap_new_RASTNET_Vector, METH_VARARGS, (char *)"\n"
		"RASTNET_Vector()\n"
		"RASTNET_Vector(RASTNET_Vector arg2)\n"
		"RASTNET_Vector(std::vector< RATSNEST_ITEM >::size_type size)\n"
		"new_RASTNET_Vector(std::vector< RATSNEST_ITEM >::size_type size, RATSNEST_ITEM value) -> RASTNET_Vector\n"
		""},
	 { (char *)"RASTNET_Vector_push_back", _wrap_RASTNET_Vector_push_back, METH_VARARGS, (char *)"RASTNET_Vector_push_back(RASTNET_Vector self, RATSNEST_ITEM x)"},
	 { (char *)"RASTNET_Vector_front", _wrap_RASTNET_Vector_front, METH_VARARGS, (char *)"RASTNET_Vector_front(RASTNET_Vector self) -> RATSNEST_ITEM"},
	 { (char *)"RASTNET_Vector_back", _wrap_RASTNET_Vector_back, METH_VARARGS, (char *)"RASTNET_Vector_back(RASTNET_Vector self) -> RATSNEST_ITEM"},
	 { (char *)"RASTNET_Vector_assign", _wrap_RASTNET_Vector_assign, METH_VARARGS, (char *)"RASTNET_Vector_assign(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::size_type n, RATSNEST_ITEM x)"},
	 { (char *)"RASTNET_Vector_resize", _wrap_RASTNET_Vector_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< RATSNEST_ITEM >::size_type new_size)\n"
		"RASTNET_Vector_resize(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::size_type new_size, RATSNEST_ITEM x)\n"
		""},
	 { (char *)"RASTNET_Vector_insert", _wrap_RASTNET_Vector_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< RATSNEST_ITEM >::iterator pos, RATSNEST_ITEM x) -> std::vector< RATSNEST_ITEM >::iterator\n"
		"RASTNET_Vector_insert(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::iterator pos, std::vector< RATSNEST_ITEM >::size_type n, \n"
		"    RATSNEST_ITEM x)\n"
		""},
	 { (char *)"RASTNET_Vector_reserve", _wrap_RASTNET_Vector_reserve, METH_VARARGS, (char *)"RASTNET_Vector_reserve(RASTNET_Vector self, std::vector< RATSNEST_ITEM >::size_type n)"},
	 { (char *)"RASTNET_Vector_capacity", _wrap_RASTNET_Vector_capacity, METH_VARARGS, (char *)"RASTNET_Vector_capacity(RASTNET_Vector self) -> std::vector< RATSNEST_ITEM >::size_type"},
	 { (char *)"delete_RASTNET_Vector", _wrap_delete_RASTNET_Vector, METH_VARARGS, (char *)"delete_RASTNET_Vector(RASTNET_Vector self)"},
	 { (char *)"RASTNET_Vector_swigregister", RASTNET_Vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"PYTHON_FOOTPRINT_WIZARDS_register_wizard", _wrap_PYTHON_FOOTPRINT_WIZARDS_register_wizard, METH_VARARGS, (char *)"PYTHON_FOOTPRINT_WIZARDS_register_wizard(PyObject * wizard)"},
	 { (char *)"new_PYTHON_FOOTPRINT_WIZARDS", _wrap_new_PYTHON_FOOTPRINT_WIZARDS, METH_VARARGS, (char *)"new_PYTHON_FOOTPRINT_WIZARDS() -> PYTHON_FOOTPRINT_WIZARDS"},
	 { (char *)"delete_PYTHON_FOOTPRINT_WIZARDS", _wrap_delete_PYTHON_FOOTPRINT_WIZARDS, METH_VARARGS, (char *)"delete_PYTHON_FOOTPRINT_WIZARDS(PYTHON_FOOTPRINT_WIZARDS self)"},
	 { (char *)"PYTHON_FOOTPRINT_WIZARDS_swigregister", PYTHON_FOOTPRINT_WIZARDS_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SEGZONETo_p_BOARD_CONNECTED_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_CONNECTED_ITEM *) (TRACK *) ((SEGZONE *) x));
}
static void *_p_D_PADTo_p_BOARD_CONNECTED_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_CONNECTED_ITEM *)  ((D_PAD *) x));
}
static void *_p_TRACKTo_p_BOARD_CONNECTED_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_CONNECTED_ITEM *)  ((TRACK *) x));
}
static void *_p_SEGVIATo_p_BOARD_CONNECTED_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_CONNECTED_ITEM *) (TRACK *) ((SEGVIA *) x));
}
static void *_p_SEGZONETo_p_TRACK(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TRACK *)  ((SEGZONE *) x));
}
static void *_p_SEGVIATo_p_TRACK(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TRACK *)  ((SEGVIA *) x));
}
static void *_p_p_SEGZONETo_p_p_TRACK(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TRACK **)  ((SEGZONE **) x));
}
static void *_p_p_SEGVIATo_p_p_TRACK(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TRACK **)  ((SEGVIA **) x));
}
static void *_p_SEGZONETo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *) (BOARD_CONNECTED_ITEM *)(TRACK *) ((SEGZONE *) x));
}
static void *_p_BOARDTo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *)  ((BOARD *) x));
}
static void *_p_MODULETo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *)  ((MODULE *) x));
}
static void *_p_D_PADTo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *) (BOARD_CONNECTED_ITEM *) ((D_PAD *) x));
}
static void *_p_DIMENSIONTo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *)  ((DIMENSION *) x));
}
static void *_p_TRACKTo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *) (BOARD_CONNECTED_ITEM *) ((TRACK *) x));
}
static void *_p_TEXTE_PCBTo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *)  ((TEXTE_PCB *) x));
}
static void *_p_TEXTE_MODULETo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *)  ((TEXTE_MODULE *) x));
}
static void *_p_EDGE_MODULETo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *) (DRAWSEGMENT *) ((EDGE_MODULE *) x));
}
static void *_p_BOARD_CONNECTED_ITEMTo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *)  ((BOARD_CONNECTED_ITEM *) x));
}
static void *_p_DRAWSEGMENTTo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *)  ((DRAWSEGMENT *) x));
}
static void *_p_SEGVIATo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *) (BOARD_CONNECTED_ITEM *)(TRACK *) ((SEGVIA *) x));
}
static void *_p_MARKER_PCBTo_p_BOARD_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BOARD_ITEM *)  ((MARKER_PCB *) x));
}
static void *_p_EDGE_MODULETo_p_DRAWSEGMENT(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DRAWSEGMENT *)  ((EDGE_MODULE *) x));
}
static void *_p_TEXTE_PCBTo_p_EDA_TEXT(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_TEXT *)  ((TEXTE_PCB *) x));
}
static void *_p_TEXTE_MODULETo_p_EDA_TEXT(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_TEXT *)  ((TEXTE_MODULE *) x));
}
static void *_p_MODULETo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *) ((MODULE *) x));
}
static void *_p_DIMENSIONTo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *) ((DIMENSION *) x));
}
static void *_p_SEGVIATo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *)(BOARD_CONNECTED_ITEM *)(TRACK *) ((SEGVIA *) x));
}
static void *_p_TRACKTo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *)(BOARD_CONNECTED_ITEM *) ((TRACK *) x));
}
static void *_p_SEGZONETo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *)(BOARD_CONNECTED_ITEM *)(TRACK *) ((SEGZONE *) x));
}
static void *_p_TEXTE_PCBTo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *) ((TEXTE_PCB *) x));
}
static void *_p_BOARD_CONNECTED_ITEMTo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *) ((BOARD_CONNECTED_ITEM *) x));
}
static void *_p_D_PADTo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *)(BOARD_CONNECTED_ITEM *) ((D_PAD *) x));
}
static void *_p_BOARDTo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *) ((BOARD *) x));
}
static void *_p_MARKER_PCBTo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *) ((MARKER_PCB *) x));
}
static void *_p_BOARD_ITEMTo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *)  ((BOARD_ITEM *) x));
}
static void *_p_EDGE_MODULETo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *)(DRAWSEGMENT *) ((EDGE_MODULE *) x));
}
static void *_p_TEXTE_MODULETo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *) ((TEXTE_MODULE *) x));
}
static void *_p_DRAWSEGMENTTo_p_EDA_ITEM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EDA_ITEM *) (BOARD_ITEM *) ((DRAWSEGMENT *) x));
}
static void *_p_DLISTT_TRACK_tTo_p_DHEAD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DHEAD *)  ((DLIST< TRACK > *) x));
}
static void *_p_DLISTT_D_PAD_tTo_p_DHEAD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DHEAD *)  ((DLIST< D_PAD > *) x));
}
static void *_p_DLISTT_MODULE_tTo_p_DHEAD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DHEAD *)  ((DLIST< MODULE > *) x));
}
static void *_p_DLISTT_BOARD_ITEM_tTo_p_DHEAD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DHEAD *)  ((DLIST< BOARD_ITEM > *) x));
}
static void *_p_DLISTT_SEGZONE_tTo_p_DHEAD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DHEAD *)  ((DLIST< SEGZONE > *) x));
}
static void *_p_PCB_IOTo_p_PLUGIN(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PLUGIN *)  ((PCB_IO *) x));
}
static void *_p_MARKER_PCBTo_p_MARKER_BASE(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MARKER_BASE *)  ((MARKER_PCB *) x));
}
static swig_type_info _swigt__p_BITMAP_DEF = {"_p_BITMAP_DEF", "BITMAP_DEF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BOARD = {"_p_BOARD", "BOARD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BOARD_CONNECTED_ITEM = {"_p_BOARD_CONNECTED_ITEM", "BOARD_CONNECTED_ITEM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BOARD_DESIGN_SETTINGS = {"_p_BOARD_DESIGN_SETTINGS", "BOARD_DESIGN_SETTINGS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BOARD_ITEM = {"_p_BOARD_ITEM", "BOARD_ITEM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_COLORS_DESIGN_SETTINGS = {"_p_COLORS_DESIGN_SETTINGS", "COLORS_DESIGN_SETTINGS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DHEAD = {"_p_DHEAD", "DHEAD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DIMENSION = {"_p_DIMENSION", "DIMENSION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DLISTT_BOARD_ITEM_t = {"_p_DLISTT_BOARD_ITEM_t", "DLIST< BOARD_ITEM > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DLISTT_D_PAD_t = {"_p_DLISTT_D_PAD_t", "DLIST< D_PAD > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DLISTT_MODULE_t = {"_p_DLISTT_MODULE_t", "DLIST< MODULE > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DLISTT_S3D_MASTER_t = {"_p_DLISTT_S3D_MASTER_t", "DLIST< S3D_MASTER > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DLISTT_SEGZONE_t = {"_p_DLISTT_SEGZONE_t", "DLIST< SEGZONE > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DLISTT_TRACK_t = {"_p_DLISTT_TRACK_t", "DLIST< TRACK > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DRAWSEGMENT = {"_p_DRAWSEGMENT", "DRAWSEGMENT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DRC_ITEM = {"_p_DRC_ITEM", "DRC_ITEM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_D_PAD = {"_p_D_PAD", "D_PAD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDA_3D_CANVAS = {"_p_EDA_3D_CANVAS", "EDA_3D_CANVAS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDA_COLOR_T = {"_p_EDA_COLOR_T", "EDA_COLOR_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDA_DRAW_FRAME = {"_p_EDA_DRAW_FRAME", "EDA_DRAW_FRAME *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDA_DRAW_PANEL = {"_p_EDA_DRAW_PANEL", "EDA_DRAW_PANEL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDA_ITEM = {"_p_EDA_ITEM", "EDA_ITEM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDA_RECT = {"_p_EDA_RECT", "EDA_RECT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDA_TEXT = {"_p_EDA_TEXT", "EDA_TEXT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDGE_MODULE = {"_p_EDGE_MODULE", "EDGE_MODULE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HIGH_LIGHT_INFO = {"_p_HIGH_LIGHT_INFO", "HIGH_LIGHT_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_INSPECTOR = {"_p_INSPECTOR", "INSPECTOR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IO_ERROR = {"_p_IO_ERROR", "IO_ERROR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IO_MGR = {"_p_IO_MGR", "IO_MGR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KICAD_T = {"_p_KICAD_T", "enum KICAD_T *|KICAD_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LAYER = {"_p_LAYER", "LAYER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LOCALE_IO = {"_p_LOCALE_IO", "LOCALE_IO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MARKER_BASE = {"_p_MARKER_BASE", "MARKER_BASE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MARKER_PCB = {"_p_MARKER_PCB", "MARKER_PCB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MODULE = {"_p_MODULE", "MODULE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NETCLASS = {"_p_NETCLASS", "NETCLASS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NETCLASSES = {"_p_NETCLASSES", "NETCLASSES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NETCLASSES__NETCLASSMAP__const_iterator = {"_p_NETCLASSES__NETCLASSMAP__const_iterator", "NETCLASSES::NETCLASSMAP::const_iterator *|NETCLASSES::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NETCLASSES__NETCLASSMAP__iterator = {"_p_NETCLASSES__NETCLASSMAP__iterator", "NETCLASSES::NETCLASSMAP::iterator *|NETCLASSES::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NETCLASS__STRINGSET__const_iterator = {"_p_NETCLASS__STRINGSET__const_iterator", "NETCLASS::STRINGSET::const_iterator *|NETCLASS::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NETCLASS__STRINGSET__iterator = {"_p_NETCLASS__STRINGSET__iterator", "NETCLASS::STRINGSET::iterator *|NETCLASS::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NETINFO_ITEM = {"_p_NETINFO_ITEM", "NETINFO_ITEM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NETINFO_LIST = {"_p_NETINFO_LIST", "NETINFO_LIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OUTPUTFORMATTER = {"_p_OUTPUTFORMATTER", "OUTPUTFORMATTER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PAD_DRAWINFO = {"_p_PAD_DRAWINFO", "PAD_DRAWINFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PAGE_INFO = {"_p_PAGE_INFO", "PAGE_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PARAM_CFG_ARRAY = {"_p_PARAM_CFG_ARRAY", "PARAM_CFG_ARRAY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PCB_IO = {"_p_PCB_IO", "PCB_IO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PCB_PLOT_PARAMS = {"_p_PCB_PLOT_PARAMS", "PCB_PLOT_PARAMS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PICKED_ITEMS_LIST = {"_p_PICKED_ITEMS_LIST", "PICKED_ITEMS_LIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PLUGIN = {"_p_PLUGIN", "PLUGIN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PROPERTIES = {"_p_PROPERTIES", "PROPERTIES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PYTHON_FOOTPRINT_WIZARDS = {"_p_PYTHON_FOOTPRINT_WIZARDS", "PYTHON_FOOTPRINT_WIZARDS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RATSNEST_ITEM = {"_p_RATSNEST_ITEM", "std::vector< RATSNEST_ITEM >::value_type *|RATSNEST_ITEM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_S3D_MASTER = {"_p_S3D_MASTER", "S3D_MASTER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SEGVIA = {"_p_SEGVIA", "SEGVIA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SEGZONE = {"_p_SEGZONE", "SEGZONE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TEXTE_MODULE = {"_p_TEXTE_MODULE", "TEXTE_MODULE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TEXTE_PCB = {"_p_TEXTE_PCB", "TEXTE_PCB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TITLE_BLOCK = {"_p_TITLE_BLOCK", "TITLE_BLOCK *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TRACK = {"_p_TRACK", "TRACK *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VIA_DIMENSION = {"_p_VIA_DIMENSION", "VIA_DIMENSION *|std::vector< VIA_DIMENSION >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZONE_CONTAINER = {"_p_ZONE_CONTAINER", "ZONE_CONTAINER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZONE_SETTINGS = {"_p_ZONE_SETTINGS", "ZONE_SETTINGS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZoneConnection = {"_p_ZoneConnection", "ZoneConnection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_TRACK = {"_p_p_TRACK", "TRACK **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SEGZONE = {"_p_p_SEGZONE", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_SEGVIA = {"_p_p_SEGVIA", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_RATSNEST_ITEM_t = {"_p_std__allocatorT_RATSNEST_ITEM_t", "std::allocator< RATSNEST_ITEM > *|std::vector< RATSNEST_ITEM >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_VIA_DIMENSION_t = {"_p_std__allocatorT_VIA_DIMENSION_t", "std::vector< VIA_DIMENSION >::allocator_type *|std::allocator< VIA_DIMENSION > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t = {"_p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t", "std::vector< CPolyPt,std::allocator< CPolyPt > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t = {"_p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t", "std::vector< D_PAD *,std::allocator< D_PAD * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_EDA_ITEM_p_std__allocatorT_EDA_ITEM_p_t_t = {"_p_std__vectorT_EDA_ITEM_p_std__allocatorT_EDA_ITEM_p_t_t", "EDA_ITEMS *|std::vector< EDA_ITEM *,std::allocator< EDA_ITEM * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t = {"_p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t", "std::vector< RATSNEST_ITEM > *|std::vector< RATSNEST_ITEM,std::allocator< RATSNEST_ITEM > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t = {"_p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t", "std::vector< TRACK *,std::allocator< TRACK * > > *|TRACK_PTRS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t = {"_p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t", "std::vector< VIA_DIMENSION,std::allocator< VIA_DIMENSION > > *|std::vector< VIA_DIMENSION > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT__Tp__Alloc_t = {"_p_std__vectorT__Tp__Alloc_t", "std::vector< _Tp,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t = {"_p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t", "std::vector< wxPoint,std::allocator< wxPoint > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_time_t = {"_p_time_t", "time_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxArrayString = {"_p_wxArrayString", "wxArrayString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxChar = {"_p_wxChar", "wxChar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxCoord = {"_p_wxCoord", "wxCoord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxDC = {"_p_wxDC", "wxDC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxFindReplaceData = {"_p_wxFindReplaceData", "wxFindReplaceData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxPaperSize = {"_p_wxPaperSize", "wxPaperSize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxPoint = {"_p_wxPoint", "wxPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxRect = {"_p_wxRect", "wxRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxSize = {"_p_wxSize", "wxSize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxStaticText = {"_p_wxStaticText", "wxStaticText *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxString = {"_p_wxString", "wxString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxTextCtrl = {"_p_wxTextCtrl", "wxTextCtrl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxWindow = {"_p_wxWindow", "wxWindow *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BITMAP_DEF,
  &_swigt__p_BOARD,
  &_swigt__p_BOARD_CONNECTED_ITEM,
  &_swigt__p_BOARD_DESIGN_SETTINGS,
  &_swigt__p_BOARD_ITEM,
  &_swigt__p_COLORS_DESIGN_SETTINGS,
  &_swigt__p_DHEAD,
  &_swigt__p_DIMENSION,
  &_swigt__p_DLISTT_BOARD_ITEM_t,
  &_swigt__p_DLISTT_D_PAD_t,
  &_swigt__p_DLISTT_MODULE_t,
  &_swigt__p_DLISTT_S3D_MASTER_t,
  &_swigt__p_DLISTT_SEGZONE_t,
  &_swigt__p_DLISTT_TRACK_t,
  &_swigt__p_DRAWSEGMENT,
  &_swigt__p_DRC_ITEM,
  &_swigt__p_D_PAD,
  &_swigt__p_EDA_3D_CANVAS,
  &_swigt__p_EDA_COLOR_T,
  &_swigt__p_EDA_DRAW_FRAME,
  &_swigt__p_EDA_DRAW_PANEL,
  &_swigt__p_EDA_ITEM,
  &_swigt__p_EDA_RECT,
  &_swigt__p_EDA_TEXT,
  &_swigt__p_EDGE_MODULE,
  &_swigt__p_HIGH_LIGHT_INFO,
  &_swigt__p_INSPECTOR,
  &_swigt__p_IO_ERROR,
  &_swigt__p_IO_MGR,
  &_swigt__p_KICAD_T,
  &_swigt__p_LAYER,
  &_swigt__p_LOCALE_IO,
  &_swigt__p_MARKER_BASE,
  &_swigt__p_MARKER_PCB,
  &_swigt__p_MODULE,
  &_swigt__p_NETCLASS,
  &_swigt__p_NETCLASSES,
  &_swigt__p_NETCLASSES__NETCLASSMAP__const_iterator,
  &_swigt__p_NETCLASSES__NETCLASSMAP__iterator,
  &_swigt__p_NETCLASS__STRINGSET__const_iterator,
  &_swigt__p_NETCLASS__STRINGSET__iterator,
  &_swigt__p_NETINFO_ITEM,
  &_swigt__p_NETINFO_LIST,
  &_swigt__p_OUTPUTFORMATTER,
  &_swigt__p_PAD_DRAWINFO,
  &_swigt__p_PAGE_INFO,
  &_swigt__p_PARAM_CFG_ARRAY,
  &_swigt__p_PCB_IO,
  &_swigt__p_PCB_PLOT_PARAMS,
  &_swigt__p_PICKED_ITEMS_LIST,
  &_swigt__p_PLUGIN,
  &_swigt__p_PROPERTIES,
  &_swigt__p_PYTHON_FOOTPRINT_WIZARDS,
  &_swigt__p_RATSNEST_ITEM,
  &_swigt__p_S3D_MASTER,
  &_swigt__p_SEGVIA,
  &_swigt__p_SEGZONE,
  &_swigt__p_TEXTE_MODULE,
  &_swigt__p_TEXTE_PCB,
  &_swigt__p_TITLE_BLOCK,
  &_swigt__p_TRACK,
  &_swigt__p_VIA_DIMENSION,
  &_swigt__p_ZONE_CONTAINER,
  &_swigt__p_ZONE_SETTINGS,
  &_swigt__p_ZoneConnection,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_SEGVIA,
  &_swigt__p_p_SEGZONE,
  &_swigt__p_p_TRACK,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_RATSNEST_ITEM_t,
  &_swigt__p_std__allocatorT_VIA_DIMENSION_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t,
  &_swigt__p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t,
  &_swigt__p_std__vectorT_EDA_ITEM_p_std__allocatorT_EDA_ITEM_p_t_t,
  &_swigt__p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t,
  &_swigt__p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t,
  &_swigt__p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t,
  &_swigt__p_std__vectorT__Tp__Alloc_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_time_t,
  &_swigt__p_value_type,
  &_swigt__p_wxArrayString,
  &_swigt__p_wxChar,
  &_swigt__p_wxCoord,
  &_swigt__p_wxDC,
  &_swigt__p_wxFindReplaceData,
  &_swigt__p_wxPaperSize,
  &_swigt__p_wxPoint,
  &_swigt__p_wxRect,
  &_swigt__p_wxSize,
  &_swigt__p_wxStaticText,
  &_swigt__p_wxString,
  &_swigt__p_wxTextCtrl,
  &_swigt__p_wxWindow,
};

static swig_cast_info _swigc__p_BITMAP_DEF[] = {  {&_swigt__p_BITMAP_DEF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BOARD[] = {  {&_swigt__p_BOARD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BOARD_CONNECTED_ITEM[] = {  {&_swigt__p_SEGZONE, _p_SEGZONETo_p_BOARD_CONNECTED_ITEM, 0, 0},  {&_swigt__p_D_PAD, _p_D_PADTo_p_BOARD_CONNECTED_ITEM, 0, 0},  {&_swigt__p_TRACK, _p_TRACKTo_p_BOARD_CONNECTED_ITEM, 0, 0},  {&_swigt__p_BOARD_CONNECTED_ITEM, 0, 0, 0},  {&_swigt__p_SEGVIA, _p_SEGVIATo_p_BOARD_CONNECTED_ITEM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BOARD_DESIGN_SETTINGS[] = {  {&_swigt__p_BOARD_DESIGN_SETTINGS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BOARD_ITEM[] = {  {&_swigt__p_SEGVIA, _p_SEGVIATo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_D_PAD, _p_D_PADTo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_DIMENSION, _p_DIMENSIONTo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_BOARD, _p_BOARDTo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_SEGZONE, _p_SEGZONETo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_TEXTE_PCB, _p_TEXTE_PCBTo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_BOARD_CONNECTED_ITEM, _p_BOARD_CONNECTED_ITEMTo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_MARKER_PCB, _p_MARKER_PCBTo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_BOARD_ITEM, 0, 0, 0},  {&_swigt__p_MODULE, _p_MODULETo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_TEXTE_MODULE, _p_TEXTE_MODULETo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_EDGE_MODULE, _p_EDGE_MODULETo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_DRAWSEGMENT, _p_DRAWSEGMENTTo_p_BOARD_ITEM, 0, 0},  {&_swigt__p_TRACK, _p_TRACKTo_p_BOARD_ITEM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_COLORS_DESIGN_SETTINGS[] = {  {&_swigt__p_COLORS_DESIGN_SETTINGS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DHEAD[] = {  {&_swigt__p_DLISTT_TRACK_t, _p_DLISTT_TRACK_tTo_p_DHEAD, 0, 0},  {&_swigt__p_DLISTT_D_PAD_t, _p_DLISTT_D_PAD_tTo_p_DHEAD, 0, 0},  {&_swigt__p_DLISTT_MODULE_t, _p_DLISTT_MODULE_tTo_p_DHEAD, 0, 0},  {&_swigt__p_DLISTT_BOARD_ITEM_t, _p_DLISTT_BOARD_ITEM_tTo_p_DHEAD, 0, 0},  {&_swigt__p_DLISTT_SEGZONE_t, _p_DLISTT_SEGZONE_tTo_p_DHEAD, 0, 0},  {&_swigt__p_DHEAD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DIMENSION[] = {  {&_swigt__p_DIMENSION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DLISTT_BOARD_ITEM_t[] = {  {&_swigt__p_DLISTT_BOARD_ITEM_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DLISTT_D_PAD_t[] = {  {&_swigt__p_DLISTT_D_PAD_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DLISTT_MODULE_t[] = {  {&_swigt__p_DLISTT_MODULE_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DLISTT_S3D_MASTER_t[] = {  {&_swigt__p_DLISTT_S3D_MASTER_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DLISTT_SEGZONE_t[] = {  {&_swigt__p_DLISTT_SEGZONE_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DLISTT_TRACK_t[] = {  {&_swigt__p_DLISTT_TRACK_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DRAWSEGMENT[] = {  {&_swigt__p_EDGE_MODULE, _p_EDGE_MODULETo_p_DRAWSEGMENT, 0, 0},  {&_swigt__p_DRAWSEGMENT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DRC_ITEM[] = {  {&_swigt__p_DRC_ITEM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_D_PAD[] = {  {&_swigt__p_D_PAD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDA_3D_CANVAS[] = {  {&_swigt__p_EDA_3D_CANVAS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDA_COLOR_T[] = {  {&_swigt__p_EDA_COLOR_T, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDA_DRAW_FRAME[] = {  {&_swigt__p_EDA_DRAW_FRAME, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDA_DRAW_PANEL[] = {  {&_swigt__p_EDA_DRAW_PANEL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDA_ITEM[] = {  {&_swigt__p_SEGVIA, _p_SEGVIATo_p_EDA_ITEM, 0, 0},  {&_swigt__p_D_PAD, _p_D_PADTo_p_EDA_ITEM, 0, 0},  {&_swigt__p_DIMENSION, _p_DIMENSIONTo_p_EDA_ITEM, 0, 0},  {&_swigt__p_BOARD, _p_BOARDTo_p_EDA_ITEM, 0, 0},  {&_swigt__p_SEGZONE, _p_SEGZONETo_p_EDA_ITEM, 0, 0},  {&_swigt__p_EDA_ITEM, 0, 0, 0},  {&_swigt__p_TEXTE_PCB, _p_TEXTE_PCBTo_p_EDA_ITEM, 0, 0},  {&_swigt__p_BOARD_CONNECTED_ITEM, _p_BOARD_CONNECTED_ITEMTo_p_EDA_ITEM, 0, 0},  {&_swigt__p_MARKER_PCB, _p_MARKER_PCBTo_p_EDA_ITEM, 0, 0},  {&_swigt__p_BOARD_ITEM, _p_BOARD_ITEMTo_p_EDA_ITEM, 0, 0},  {&_swigt__p_MODULE, _p_MODULETo_p_EDA_ITEM, 0, 0},  {&_swigt__p_TEXTE_MODULE, _p_TEXTE_MODULETo_p_EDA_ITEM, 0, 0},  {&_swigt__p_EDGE_MODULE, _p_EDGE_MODULETo_p_EDA_ITEM, 0, 0},  {&_swigt__p_TRACK, _p_TRACKTo_p_EDA_ITEM, 0, 0},  {&_swigt__p_DRAWSEGMENT, _p_DRAWSEGMENTTo_p_EDA_ITEM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDA_RECT[] = {  {&_swigt__p_EDA_RECT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDA_TEXT[] = {  {&_swigt__p_TEXTE_PCB, _p_TEXTE_PCBTo_p_EDA_TEXT, 0, 0},  {&_swigt__p_TEXTE_MODULE, _p_TEXTE_MODULETo_p_EDA_TEXT, 0, 0},  {&_swigt__p_EDA_TEXT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDGE_MODULE[] = {  {&_swigt__p_EDGE_MODULE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HIGH_LIGHT_INFO[] = {  {&_swigt__p_HIGH_LIGHT_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INSPECTOR[] = {  {&_swigt__p_INSPECTOR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IO_ERROR[] = {  {&_swigt__p_IO_ERROR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IO_MGR[] = {  {&_swigt__p_IO_MGR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KICAD_T[] = {  {&_swigt__p_KICAD_T, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LAYER[] = {  {&_swigt__p_LAYER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LOCALE_IO[] = {  {&_swigt__p_LOCALE_IO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MARKER_BASE[] = {  {&_swigt__p_MARKER_PCB, _p_MARKER_PCBTo_p_MARKER_BASE, 0, 0},  {&_swigt__p_MARKER_BASE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MARKER_PCB[] = {  {&_swigt__p_MARKER_PCB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MODULE[] = {  {&_swigt__p_MODULE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NETCLASS[] = {  {&_swigt__p_NETCLASS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NETCLASSES[] = {  {&_swigt__p_NETCLASSES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NETCLASSES__NETCLASSMAP__const_iterator[] = {  {&_swigt__p_NETCLASSES__NETCLASSMAP__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NETCLASSES__NETCLASSMAP__iterator[] = {  {&_swigt__p_NETCLASSES__NETCLASSMAP__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NETCLASS__STRINGSET__const_iterator[] = {  {&_swigt__p_NETCLASS__STRINGSET__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NETCLASS__STRINGSET__iterator[] = {  {&_swigt__p_NETCLASS__STRINGSET__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NETINFO_ITEM[] = {  {&_swigt__p_NETINFO_ITEM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NETINFO_LIST[] = {  {&_swigt__p_NETINFO_LIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OUTPUTFORMATTER[] = {  {&_swigt__p_OUTPUTFORMATTER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PAD_DRAWINFO[] = {  {&_swigt__p_PAD_DRAWINFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PAGE_INFO[] = {  {&_swigt__p_PAGE_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PARAM_CFG_ARRAY[] = {  {&_swigt__p_PARAM_CFG_ARRAY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PCB_IO[] = {  {&_swigt__p_PCB_IO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PCB_PLOT_PARAMS[] = {  {&_swigt__p_PCB_PLOT_PARAMS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PICKED_ITEMS_LIST[] = {  {&_swigt__p_PICKED_ITEMS_LIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PLUGIN[] = {  {&_swigt__p_PLUGIN, 0, 0, 0},  {&_swigt__p_PCB_IO, _p_PCB_IOTo_p_PLUGIN, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PROPERTIES[] = {  {&_swigt__p_PROPERTIES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PYTHON_FOOTPRINT_WIZARDS[] = {  {&_swigt__p_PYTHON_FOOTPRINT_WIZARDS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RATSNEST_ITEM[] = {  {&_swigt__p_RATSNEST_ITEM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_S3D_MASTER[] = {  {&_swigt__p_S3D_MASTER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SEGVIA[] = {  {&_swigt__p_SEGVIA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SEGZONE[] = {  {&_swigt__p_SEGZONE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TEXTE_MODULE[] = {  {&_swigt__p_TEXTE_MODULE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TEXTE_PCB[] = {  {&_swigt__p_TEXTE_PCB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TITLE_BLOCK[] = {  {&_swigt__p_TITLE_BLOCK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TRACK[] = {  {&_swigt__p_SEGZONE, _p_SEGZONETo_p_TRACK, 0, 0},  {&_swigt__p_TRACK, 0, 0, 0},  {&_swigt__p_SEGVIA, _p_SEGVIATo_p_TRACK, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VIA_DIMENSION[] = {  {&_swigt__p_VIA_DIMENSION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZONE_CONTAINER[] = {  {&_swigt__p_ZONE_CONTAINER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZONE_SETTINGS[] = {  {&_swigt__p_ZONE_SETTINGS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZoneConnection[] = {  {&_swigt__p_ZoneConnection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SEGZONE[] = {{&_swigt__p_p_SEGZONE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SEGVIA[] = {{&_swigt__p_p_SEGVIA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_TRACK[] = {  {&_swigt__p_p_SEGZONE, _p_p_SEGZONETo_p_p_TRACK, 0, 0},  {&_swigt__p_p_TRACK, 0, 0, 0},  {&_swigt__p_p_SEGVIA, _p_p_SEGVIATo_p_p_TRACK, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_RATSNEST_ITEM_t[] = {  {&_swigt__p_std__allocatorT_RATSNEST_ITEM_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_VIA_DIMENSION_t[] = {  {&_swigt__p_std__allocatorT_VIA_DIMENSION_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t[] = {  {&_swigt__p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t[] = {  {&_swigt__p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_EDA_ITEM_p_std__allocatorT_EDA_ITEM_p_t_t[] = {  {&_swigt__p_std__vectorT_EDA_ITEM_p_std__allocatorT_EDA_ITEM_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t[] = {  {&_swigt__p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t[] = {  {&_swigt__p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t[] = {  {&_swigt__p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT__Tp__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t[] = {  {&_swigt__p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_time_t[] = {  {&_swigt__p_time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxArrayString[] = {  {&_swigt__p_wxArrayString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxChar[] = {  {&_swigt__p_wxChar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCoord[] = {  {&_swigt__p_wxCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDC[] = {  {&_swigt__p_wxDC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFindReplaceData[] = {  {&_swigt__p_wxFindReplaceData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPaperSize[] = {  {&_swigt__p_wxPaperSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPoint[] = {  {&_swigt__p_wxPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxRect[] = {  {&_swigt__p_wxRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSize[] = {  {&_swigt__p_wxSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxStaticText[] = {  {&_swigt__p_wxStaticText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxString[] = {  {&_swigt__p_wxString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTextCtrl[] = {  {&_swigt__p_wxTextCtrl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindow[] = {  {&_swigt__p_wxWindow, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BITMAP_DEF,
  _swigc__p_BOARD,
  _swigc__p_BOARD_CONNECTED_ITEM,
  _swigc__p_BOARD_DESIGN_SETTINGS,
  _swigc__p_BOARD_ITEM,
  _swigc__p_COLORS_DESIGN_SETTINGS,
  _swigc__p_DHEAD,
  _swigc__p_DIMENSION,
  _swigc__p_DLISTT_BOARD_ITEM_t,
  _swigc__p_DLISTT_D_PAD_t,
  _swigc__p_DLISTT_MODULE_t,
  _swigc__p_DLISTT_S3D_MASTER_t,
  _swigc__p_DLISTT_SEGZONE_t,
  _swigc__p_DLISTT_TRACK_t,
  _swigc__p_DRAWSEGMENT,
  _swigc__p_DRC_ITEM,
  _swigc__p_D_PAD,
  _swigc__p_EDA_3D_CANVAS,
  _swigc__p_EDA_COLOR_T,
  _swigc__p_EDA_DRAW_FRAME,
  _swigc__p_EDA_DRAW_PANEL,
  _swigc__p_EDA_ITEM,
  _swigc__p_EDA_RECT,
  _swigc__p_EDA_TEXT,
  _swigc__p_EDGE_MODULE,
  _swigc__p_HIGH_LIGHT_INFO,
  _swigc__p_INSPECTOR,
  _swigc__p_IO_ERROR,
  _swigc__p_IO_MGR,
  _swigc__p_KICAD_T,
  _swigc__p_LAYER,
  _swigc__p_LOCALE_IO,
  _swigc__p_MARKER_BASE,
  _swigc__p_MARKER_PCB,
  _swigc__p_MODULE,
  _swigc__p_NETCLASS,
  _swigc__p_NETCLASSES,
  _swigc__p_NETCLASSES__NETCLASSMAP__const_iterator,
  _swigc__p_NETCLASSES__NETCLASSMAP__iterator,
  _swigc__p_NETCLASS__STRINGSET__const_iterator,
  _swigc__p_NETCLASS__STRINGSET__iterator,
  _swigc__p_NETINFO_ITEM,
  _swigc__p_NETINFO_LIST,
  _swigc__p_OUTPUTFORMATTER,
  _swigc__p_PAD_DRAWINFO,
  _swigc__p_PAGE_INFO,
  _swigc__p_PARAM_CFG_ARRAY,
  _swigc__p_PCB_IO,
  _swigc__p_PCB_PLOT_PARAMS,
  _swigc__p_PICKED_ITEMS_LIST,
  _swigc__p_PLUGIN,
  _swigc__p_PROPERTIES,
  _swigc__p_PYTHON_FOOTPRINT_WIZARDS,
  _swigc__p_RATSNEST_ITEM,
  _swigc__p_S3D_MASTER,
  _swigc__p_SEGVIA,
  _swigc__p_SEGZONE,
  _swigc__p_TEXTE_MODULE,
  _swigc__p_TEXTE_PCB,
  _swigc__p_TITLE_BLOCK,
  _swigc__p_TRACK,
  _swigc__p_VIA_DIMENSION,
  _swigc__p_ZONE_CONTAINER,
  _swigc__p_ZONE_SETTINGS,
  _swigc__p_ZoneConnection,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_difference_type,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_p_PyObject,
  _swigc__p_p_SEGVIA,
  _swigc__p_p_SEGZONE,
  _swigc__p_p_TRACK,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_RATSNEST_ITEM_t,
  _swigc__p_std__allocatorT_VIA_DIMENSION_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__vectorT_CPolyPt_std__allocatorT_CPolyPt_t_t,
  _swigc__p_std__vectorT_D_PAD_p_std__allocatorT_D_PAD_p_t_t,
  _swigc__p_std__vectorT_EDA_ITEM_p_std__allocatorT_EDA_ITEM_p_t_t,
  _swigc__p_std__vectorT_RATSNEST_ITEM_std__allocatorT_RATSNEST_ITEM_t_t,
  _swigc__p_std__vectorT_TRACK_p_std__allocatorT_TRACK_p_t_t,
  _swigc__p_std__vectorT_VIA_DIMENSION_std__allocatorT_VIA_DIMENSION_t_t,
  _swigc__p_std__vectorT__Tp__Alloc_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_wxPoint_std__allocatorT_wxPoint_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_time_t,
  _swigc__p_value_type,
  _swigc__p_wxArrayString,
  _swigc__p_wxChar,
  _swigc__p_wxCoord,
  _swigc__p_wxDC,
  _swigc__p_wxFindReplaceData,
  _swigc__p_wxPaperSize,
  _swigc__p_wxPoint,
  _swigc__p_wxRect,
  _swigc__p_wxSize,
  _swigc__p_wxStaticText,
  _swigc__p_wxString,
  _swigc__p_wxTextCtrl,
  _swigc__p_wxWindow,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "NOT_USED",SWIG_From_int(static_cast< int >(NOT_USED)));
  SWIG_Python_SetConstant(d, "EOT",SWIG_From_int(static_cast< int >(EOT)));
  SWIG_Python_SetConstant(d, "TYPE_NOT_INIT",SWIG_From_int(static_cast< int >(TYPE_NOT_INIT)));
  SWIG_Python_SetConstant(d, "PCB_T",SWIG_From_int(static_cast< int >(PCB_T)));
  SWIG_Python_SetConstant(d, "SCREEN_T",SWIG_From_int(static_cast< int >(SCREEN_T)));
  SWIG_Python_SetConstant(d, "PCB_MODULE_T",SWIG_From_int(static_cast< int >(PCB_MODULE_T)));
  SWIG_Python_SetConstant(d, "PCB_PAD_T",SWIG_From_int(static_cast< int >(PCB_PAD_T)));
  SWIG_Python_SetConstant(d, "PCB_LINE_T",SWIG_From_int(static_cast< int >(PCB_LINE_T)));
  SWIG_Python_SetConstant(d, "PCB_TEXT_T",SWIG_From_int(static_cast< int >(PCB_TEXT_T)));
  SWIG_Python_SetConstant(d, "PCB_MODULE_TEXT_T",SWIG_From_int(static_cast< int >(PCB_MODULE_TEXT_T)));
  SWIG_Python_SetConstant(d, "PCB_MODULE_EDGE_T",SWIG_From_int(static_cast< int >(PCB_MODULE_EDGE_T)));
  SWIG_Python_SetConstant(d, "PCB_TRACE_T",SWIG_From_int(static_cast< int >(PCB_TRACE_T)));
  SWIG_Python_SetConstant(d, "PCB_VIA_T",SWIG_From_int(static_cast< int >(PCB_VIA_T)));
  SWIG_Python_SetConstant(d, "PCB_ZONE_T",SWIG_From_int(static_cast< int >(PCB_ZONE_T)));
  SWIG_Python_SetConstant(d, "PCB_MARKER_T",SWIG_From_int(static_cast< int >(PCB_MARKER_T)));
  SWIG_Python_SetConstant(d, "PCB_DIMENSION_T",SWIG_From_int(static_cast< int >(PCB_DIMENSION_T)));
  SWIG_Python_SetConstant(d, "PCB_TARGET_T",SWIG_From_int(static_cast< int >(PCB_TARGET_T)));
  SWIG_Python_SetConstant(d, "PCB_ZONE_AREA_T",SWIG_From_int(static_cast< int >(PCB_ZONE_AREA_T)));
  SWIG_Python_SetConstant(d, "PCB_ITEM_LIST_T",SWIG_From_int(static_cast< int >(PCB_ITEM_LIST_T)));
  SWIG_Python_SetConstant(d, "SCH_MARKER_T",SWIG_From_int(static_cast< int >(SCH_MARKER_T)));
  SWIG_Python_SetConstant(d, "SCH_JUNCTION_T",SWIG_From_int(static_cast< int >(SCH_JUNCTION_T)));
  SWIG_Python_SetConstant(d, "SCH_NO_CONNECT_T",SWIG_From_int(static_cast< int >(SCH_NO_CONNECT_T)));
  SWIG_Python_SetConstant(d, "SCH_BUS_ENTRY_T",SWIG_From_int(static_cast< int >(SCH_BUS_ENTRY_T)));
  SWIG_Python_SetConstant(d, "SCH_LINE_T",SWIG_From_int(static_cast< int >(SCH_LINE_T)));
  SWIG_Python_SetConstant(d, "SCH_POLYLINE_T",SWIG_From_int(static_cast< int >(SCH_POLYLINE_T)));
  SWIG_Python_SetConstant(d, "SCH_BITMAP_T",SWIG_From_int(static_cast< int >(SCH_BITMAP_T)));
  SWIG_Python_SetConstant(d, "SCH_TEXT_T",SWIG_From_int(static_cast< int >(SCH_TEXT_T)));
  SWIG_Python_SetConstant(d, "SCH_LABEL_T",SWIG_From_int(static_cast< int >(SCH_LABEL_T)));
  SWIG_Python_SetConstant(d, "SCH_GLOBAL_LABEL_T",SWIG_From_int(static_cast< int >(SCH_GLOBAL_LABEL_T)));
  SWIG_Python_SetConstant(d, "SCH_HIERARCHICAL_LABEL_T",SWIG_From_int(static_cast< int >(SCH_HIERARCHICAL_LABEL_T)));
  SWIG_Python_SetConstant(d, "SCH_FIELD_T",SWIG_From_int(static_cast< int >(SCH_FIELD_T)));
  SWIG_Python_SetConstant(d, "SCH_COMPONENT_T",SWIG_From_int(static_cast< int >(SCH_COMPONENT_T)));
  SWIG_Python_SetConstant(d, "SCH_SHEET_PIN_T",SWIG_From_int(static_cast< int >(SCH_SHEET_PIN_T)));
  SWIG_Python_SetConstant(d, "SCH_SHEET_T",SWIG_From_int(static_cast< int >(SCH_SHEET_T)));
  SWIG_Python_SetConstant(d, "SCH_SCREEN_T",SWIG_From_int(static_cast< int >(SCH_SCREEN_T)));
  SWIG_Python_SetConstant(d, "LIB_COMPONENT_T",SWIG_From_int(static_cast< int >(LIB_COMPONENT_T)));
  SWIG_Python_SetConstant(d, "LIB_ALIAS_T",SWIG_From_int(static_cast< int >(LIB_ALIAS_T)));
  SWIG_Python_SetConstant(d, "LIB_ARC_T",SWIG_From_int(static_cast< int >(LIB_ARC_T)));
  SWIG_Python_SetConstant(d, "LIB_CIRCLE_T",SWIG_From_int(static_cast< int >(LIB_CIRCLE_T)));
  SWIG_Python_SetConstant(d, "LIB_TEXT_T",SWIG_From_int(static_cast< int >(LIB_TEXT_T)));
  SWIG_Python_SetConstant(d, "LIB_RECTANGLE_T",SWIG_From_int(static_cast< int >(LIB_RECTANGLE_T)));
  SWIG_Python_SetConstant(d, "LIB_POLYLINE_T",SWIG_From_int(static_cast< int >(LIB_POLYLINE_T)));
  SWIG_Python_SetConstant(d, "LIB_BEZIER_T",SWIG_From_int(static_cast< int >(LIB_BEZIER_T)));
  SWIG_Python_SetConstant(d, "LIB_PIN_T",SWIG_From_int(static_cast< int >(LIB_PIN_T)));
  SWIG_Python_SetConstant(d, "LIB_FIELD_T",SWIG_From_int(static_cast< int >(LIB_FIELD_T)));
  SWIG_Python_SetConstant(d, "TYPE_GERBER_DRAW_ITEM",SWIG_From_int(static_cast< int >(TYPE_GERBER_DRAW_ITEM)));
  SWIG_Python_SetConstant(d, "MAX_STRUCT_TYPE_ID",SWIG_From_int(static_cast< int >(MAX_STRUCT_TYPE_ID)));
  SWIG_Python_SetConstant(d, "NO_FILL",SWIG_From_int(static_cast< int >(NO_FILL)));
  SWIG_Python_SetConstant(d, "FILLED_SHAPE",SWIG_From_int(static_cast< int >(FILLED_SHAPE)));
  SWIG_Python_SetConstant(d, "FILLED_WITH_BG_BODYCOLOR",SWIG_From_int(static_cast< int >(FILLED_WITH_BG_BODYCOLOR)));
  SWIG_Python_SetConstant(d, "SEARCH_QUIT",SWIG_From_int(static_cast< int >(SEARCH_QUIT)));
  SWIG_Python_SetConstant(d, "SEARCH_CONTINUE",SWIG_From_int(static_cast< int >(SEARCH_CONTINUE)));
  SWIG_Python_SetConstant(d, "IS_CHANGED",SWIG_From_int(static_cast< int >((1 << 0))));
  SWIG_Python_SetConstant(d, "IS_LINKED",SWIG_From_int(static_cast< int >((1 << 1))));
  SWIG_Python_SetConstant(d, "IN_EDIT",SWIG_From_int(static_cast< int >((1 << 2))));
  SWIG_Python_SetConstant(d, "IS_MOVED",SWIG_From_int(static_cast< int >((1 << 3))));
  SWIG_Python_SetConstant(d, "IS_NEW",SWIG_From_int(static_cast< int >((1 << 4))));
  SWIG_Python_SetConstant(d, "IS_RESIZED",SWIG_From_int(static_cast< int >((1 << 5))));
  SWIG_Python_SetConstant(d, "IS_DRAGGED",SWIG_From_int(static_cast< int >((1 << 6))));
  SWIG_Python_SetConstant(d, "IS_DELETED",SWIG_From_int(static_cast< int >((1 << 7))));
  SWIG_Python_SetConstant(d, "IS_WIRE_IMAGE",SWIG_From_int(static_cast< int >((1 << 8))));
  SWIG_Python_SetConstant(d, "STARTPOINT",SWIG_From_int(static_cast< int >((1 << 9))));
  SWIG_Python_SetConstant(d, "ENDPOINT",SWIG_From_int(static_cast< int >((1 << 10))));
  SWIG_Python_SetConstant(d, "SELECTED",SWIG_From_int(static_cast< int >((1 << 11))));
  SWIG_Python_SetConstant(d, "SELECTEDNODE",SWIG_From_int(static_cast< int >((1 << 12))));
  SWIG_Python_SetConstant(d, "STRUCT_DELETED",SWIG_From_int(static_cast< int >((1 << 13))));
  SWIG_Python_SetConstant(d, "CANDIDATE",SWIG_From_int(static_cast< int >((1 << 14))));
  SWIG_Python_SetConstant(d, "SKIP_STRUCT",SWIG_From_int(static_cast< int >((1 << 15))));
  SWIG_Python_SetConstant(d, "DO_NOT_DRAW",SWIG_From_int(static_cast< int >((1 << 16))));
  SWIG_Python_SetConstant(d, "IS_CANCELLED",SWIG_From_int(static_cast< int >((1 << 17))));
  SWIG_Python_SetConstant(d, "TRACK_LOCKED",SWIG_From_int(static_cast< int >((1 << 18))));
  SWIG_Python_SetConstant(d, "TRACK_AR",SWIG_From_int(static_cast< int >((1 << 19))));
  SWIG_Python_SetConstant(d, "FLAG1",SWIG_From_int(static_cast< int >((1 << 20))));
  SWIG_Python_SetConstant(d, "FLAG0",SWIG_From_int(static_cast< int >((1 << 21))));
  SWIG_Python_SetConstant(d, "BEGIN_ONPAD",SWIG_From_int(static_cast< int >((1 << 22))));
  SWIG_Python_SetConstant(d, "END_ONPAD",SWIG_From_int(static_cast< int >((1 << 23))));
  SWIG_Python_SetConstant(d, "BUSY",SWIG_From_int(static_cast< int >((1 << 24))));
  SWIG_Python_SetConstant(d, "EDA_ITEM_ALL_FLAGS",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, "GR_KB_RIGHTSHIFT",SWIG_From_int(static_cast< int >(0x10000000)));
  SWIG_Python_SetConstant(d, "GR_KB_LEFTSHIFT",SWIG_From_int(static_cast< int >(0x20000000)));
  SWIG_Python_SetConstant(d, "GR_KB_CTRL",SWIG_From_int(static_cast< int >(0x40000000)));
  SWIG_Python_SetConstant(d, "GR_KB_ALT",SWIG_From_int(static_cast< int >(0x80000000)));
  SWIG_Python_SetConstant(d, "GR_KB_SHIFT",SWIG_From_int(static_cast< int >((0x20000000|0x10000000))));
  SWIG_Python_SetConstant(d, "GR_KB_SHIFTCTRL",SWIG_From_int(static_cast< int >(((0x20000000|0x10000000)|0x40000000))));
  SWIG_Python_SetConstant(d, "MOUSE_MIDDLE",SWIG_From_int(static_cast< int >(0x08000000)));
  SWIG_Python_SetConstant(d, "EDA_PANNING_UP_KEY",SWIG_From_int(static_cast< int >(EDA_PANNING_UP_KEY)));
  SWIG_Python_SetConstant(d, "EDA_PANNING_DOWN_KEY",SWIG_From_int(static_cast< int >(EDA_PANNING_DOWN_KEY)));
  SWIG_Python_SetConstant(d, "EDA_PANNING_LEFT_KEY",SWIG_From_int(static_cast< int >(EDA_PANNING_LEFT_KEY)));
  SWIG_Python_SetConstant(d, "EDA_PANNING_RIGHT_KEY",SWIG_From_int(static_cast< int >(EDA_PANNING_RIGHT_KEY)));
  SWIG_Python_SetConstant(d, "EDA_ZOOM_IN_FROM_MOUSE",SWIG_From_int(static_cast< int >(EDA_ZOOM_IN_FROM_MOUSE)));
  SWIG_Python_SetConstant(d, "EDA_ZOOM_OUT_FROM_MOUSE",SWIG_From_int(static_cast< int >(EDA_ZOOM_OUT_FROM_MOUSE)));
  SWIG_Python_SetConstant(d, "EDA_ZOOM_CENTER_FROM_MOUSE",SWIG_From_int(static_cast< int >(EDA_ZOOM_CENTER_FROM_MOUSE)));
  SWIG_Python_SetConstant(d, "ESC",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, "TEXT_ORIENT_HORIZ",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "TEXT_ORIENT_VERT",SWIG_From_int(static_cast< int >(900)));
  SWIG_Python_SetConstant(d, "ON",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "OFF",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "INCHES",SWIG_From_int(static_cast< int >(INCHES)));
  SWIG_Python_SetConstant(d, "MILLIMETRES",SWIG_From_int(static_cast< int >(MILLIMETRES)));
  SWIG_Python_SetConstant(d, "UNSCALED_UNITS",SWIG_From_int(static_cast< int >(UNSCALED_UNITS)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_A4",Swig_var_PAGE_INFO_A4_get, Swig_var_PAGE_INFO_A4_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_A3",Swig_var_PAGE_INFO_A3_get, Swig_var_PAGE_INFO_A3_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_A2",Swig_var_PAGE_INFO_A2_get, Swig_var_PAGE_INFO_A2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_A1",Swig_var_PAGE_INFO_A1_get, Swig_var_PAGE_INFO_A1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_A0",Swig_var_PAGE_INFO_A0_get, Swig_var_PAGE_INFO_A0_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_A",Swig_var_PAGE_INFO_A_get, Swig_var_PAGE_INFO_A_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_B",Swig_var_PAGE_INFO_B_get, Swig_var_PAGE_INFO_B_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_C",Swig_var_PAGE_INFO_C_get, Swig_var_PAGE_INFO_C_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_D",Swig_var_PAGE_INFO_D_get, Swig_var_PAGE_INFO_D_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_E",Swig_var_PAGE_INFO_E_get, Swig_var_PAGE_INFO_E_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_GERBER",Swig_var_PAGE_INFO_GERBER_get, Swig_var_PAGE_INFO_GERBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_USLetter",Swig_var_PAGE_INFO_USLetter_get, Swig_var_PAGE_INFO_USLetter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_USLegal",Swig_var_PAGE_INFO_USLegal_get, Swig_var_PAGE_INFO_USLegal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_USLedger",Swig_var_PAGE_INFO_USLedger_get, Swig_var_PAGE_INFO_USLedger_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PAGE_INFO_Custom",Swig_var_PAGE_INFO_Custom_get, Swig_var_PAGE_INFO_Custom_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_ProductName",Swig_var_g_ProductName_get, Swig_var_g_ProductName_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_UserLibDirBuffer",Swig_var_g_UserLibDirBuffer_get, Swig_var_g_UserLibDirBuffer_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_ShowPageLimits",Swig_var_g_ShowPageLimits_get, Swig_var_g_ShowPageLimits_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Prj_Default_Config_FullFilename",Swig_var_g_Prj_Default_Config_FullFilename_get, Swig_var_g_Prj_Default_Config_FullFilename_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Prj_Config_LocalFilename",Swig_var_g_Prj_Config_LocalFilename_get, Swig_var_g_Prj_Config_LocalFilename_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_UserUnit",Swig_var_g_UserUnit_get, Swig_var_g_UserUnit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_GhostColor",Swig_var_g_GhostColor_get, Swig_var_g_GhostColor_set);
  SWIG_Python_SetConstant(d, "LAYERSCOLORSBUFFERSIZE",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "ITEMSCOLORSBUFFERSIZE",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "GR_TEXT_HJUSTIFY_LEFT",SWIG_From_int(static_cast< int >(GR_TEXT_HJUSTIFY_LEFT)));
  SWIG_Python_SetConstant(d, "GR_TEXT_HJUSTIFY_CENTER",SWIG_From_int(static_cast< int >(GR_TEXT_HJUSTIFY_CENTER)));
  SWIG_Python_SetConstant(d, "GR_TEXT_HJUSTIFY_RIGHT",SWIG_From_int(static_cast< int >(GR_TEXT_HJUSTIFY_RIGHT)));
  SWIG_Python_SetConstant(d, "GR_TEXT_VJUSTIFY_TOP",SWIG_From_int(static_cast< int >(GR_TEXT_VJUSTIFY_TOP)));
  SWIG_Python_SetConstant(d, "GR_TEXT_VJUSTIFY_CENTER",SWIG_From_int(static_cast< int >(GR_TEXT_VJUSTIFY_CENTER)));
  SWIG_Python_SetConstant(d, "GR_TEXT_VJUSTIFY_BOTTOM",SWIG_From_int(static_cast< int >(GR_TEXT_VJUSTIFY_BOTTOM)));
  SWIG_Python_SetConstant(d, "LINE",SWIG_From_int(static_cast< int >(LINE)));
  SWIG_Python_SetConstant(d, "FILLED",SWIG_From_int(static_cast< int >(FILLED)));
  SWIG_Python_SetConstant(d, "SKETCH",SWIG_From_int(static_cast< int >(SKETCH)));
  SWIG_Python_SetConstant(d, "DEFAULT_SIZE_TEXT",SWIG_From_int(static_cast< int >(60)));
  SWIG_Python_SetConstant(d, "TEXT_NO_VISIBLE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "DECIMILS_PER_IU",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "MILS_PER_IU",SWIG_From_double(static_cast< double >(10.0)));
  SWIG_Python_SetConstant(d, "MM_PER_IU",SWIG_From_double(static_cast< double >((1e4/25.4))));
  SWIG_Python_SetConstant(d, "IU_PER_DECIMILS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "IU_PER_MILS",SWIG_From_double(static_cast< double >(10.0)));
  SWIG_Python_SetConstant(d, "IU_PER_MM",SWIG_From_double(static_cast< double >((1e4/25.4))));
  SWIG_Python_SetConstant(d, "S_SEGMENT",SWIG_From_int(static_cast< int >(S_SEGMENT)));
  SWIG_Python_SetConstant(d, "S_RECT",SWIG_From_int(static_cast< int >(S_RECT)));
  SWIG_Python_SetConstant(d, "S_ARC",SWIG_From_int(static_cast< int >(S_ARC)));
  SWIG_Python_SetConstant(d, "S_CIRCLE",SWIG_From_int(static_cast< int >(S_CIRCLE)));
  SWIG_Python_SetConstant(d, "S_POLYGON",SWIG_From_int(static_cast< int >(S_POLYGON)));
  SWIG_Python_SetConstant(d, "S_CURVE",SWIG_From_int(static_cast< int >(S_CURVE)));
  SWIG_Python_SetConstant(d, "S_LAST",SWIG_From_int(static_cast< int >(S_LAST)));
  SWIG_Python_SetConstant(d, "HISTORY_MAX_COUNT",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "LT_UNDEFINED",SWIG_From_int(static_cast< int >(LT_UNDEFINED)));
  SWIG_Python_SetConstant(d, "LT_SIGNAL",SWIG_From_int(static_cast< int >(LT_SIGNAL)));
  SWIG_Python_SetConstant(d, "LT_POWER",SWIG_From_int(static_cast< int >(LT_POWER)));
  SWIG_Python_SetConstant(d, "LT_MIXED",SWIG_From_int(static_cast< int >(LT_MIXED)));
  SWIG_Python_SetConstant(d, "LT_JUMPER",SWIG_From_int(static_cast< int >(LT_JUMPER)));
  SWIG_Python_SetConstant(d, "ADD_APPEND",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "MOD_DEFAULT",SWIG_From_int(static_cast< int >(MOD_DEFAULT)));
  SWIG_Python_SetConstant(d, "MOD_CMS",SWIG_From_int(static_cast< int >(MOD_CMS)));
  SWIG_Python_SetConstant(d, "MOD_VIRTUAL",SWIG_From_int(static_cast< int >(MOD_VIRTUAL)));
  SWIG_Python_SetConstant(d, "MODULE_is_LOCKED",SWIG_From_int(static_cast< int >(0x01)));
  SWIG_Python_SetConstant(d, "MODULE_is_PLACED",SWIG_From_int(static_cast< int >(0x02)));
  SWIG_Python_SetConstant(d, "MODULE_to_PLACE",SWIG_From_int(static_cast< int >(0x04)));
  SWIG_Python_SetConstant(d, "VIA_THROUGH",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "VIA_BLIND_BURIED",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "VIA_MICROVIA",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "VIA_NOT_DEFINED",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "UNDEFINED_DRILL_DIAMETER",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, "UNDEFINED_LAYER",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, "FIRST_COPPER_LAYER",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "LAYER_N_BACK",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "LAYER_N_2",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "LAYER_N_3",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "LAYER_N_4",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "LAYER_N_5",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "LAYER_N_6",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "LAYER_N_7",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "LAYER_N_8",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "LAYER_N_9",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "LAYER_N_10",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "LAYER_N_11",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "LAYER_N_12",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "LAYER_N_13",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "LAYER_N_14",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, "LAYER_N_15",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, "LAYER_N_FRONT",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "LAST_COPPER_LAYER",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "NB_COPPER_LAYERS",SWIG_From_int(static_cast< int >((15+1))));
  SWIG_Python_SetConstant(d, "FIRST_NO_COPPER_LAYER",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "ADHESIVE_N_BACK",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "ADHESIVE_N_FRONT",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, "SOLDERPASTE_N_BACK",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, "SOLDERPASTE_N_FRONT",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, "SILKSCREEN_N_BACK",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "SILKSCREEN_N_FRONT",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, "SOLDERMASK_N_BACK",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, "SOLDERMASK_N_FRONT",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, "DRAW_N",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "COMMENT_N",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, "ECO1_N",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, "ECO2_N",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, "EDGE_N",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "LAST_NO_COPPER_LAYER",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "UNUSED_LAYER_29",SWIG_From_int(static_cast< int >(29)));
  SWIG_Python_SetConstant(d, "UNUSED_LAYER_30",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, "UNUSED_LAYER_31",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, "NB_LAYERS",SWIG_From_int(static_cast< int >((28+1))));
  SWIG_Python_SetConstant(d, "LAYER_COUNT",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "LAYER_BACK",SWIG_From_int(static_cast< int >((1 << 0))));
  SWIG_Python_SetConstant(d, "LAYER_2",SWIG_From_int(static_cast< int >((1 << 1))));
  SWIG_Python_SetConstant(d, "LAYER_3",SWIG_From_int(static_cast< int >((1 << 2))));
  SWIG_Python_SetConstant(d, "LAYER_4",SWIG_From_int(static_cast< int >((1 << 3))));
  SWIG_Python_SetConstant(d, "LAYER_5",SWIG_From_int(static_cast< int >((1 << 4))));
  SWIG_Python_SetConstant(d, "LAYER_6",SWIG_From_int(static_cast< int >((1 << 5))));
  SWIG_Python_SetConstant(d, "LAYER_7",SWIG_From_int(static_cast< int >((1 << 6))));
  SWIG_Python_SetConstant(d, "LAYER_8",SWIG_From_int(static_cast< int >((1 << 7))));
  SWIG_Python_SetConstant(d, "LAYER_9",SWIG_From_int(static_cast< int >((1 << 8))));
  SWIG_Python_SetConstant(d, "LAYER_10",SWIG_From_int(static_cast< int >((1 << 9))));
  SWIG_Python_SetConstant(d, "LAYER_11",SWIG_From_int(static_cast< int >((1 << 10))));
  SWIG_Python_SetConstant(d, "LAYER_12",SWIG_From_int(static_cast< int >((1 << 11))));
  SWIG_Python_SetConstant(d, "LAYER_13",SWIG_From_int(static_cast< int >((1 << 12))));
  SWIG_Python_SetConstant(d, "LAYER_14",SWIG_From_int(static_cast< int >((1 << 13))));
  SWIG_Python_SetConstant(d, "LAYER_15",SWIG_From_int(static_cast< int >((1 << 14))));
  SWIG_Python_SetConstant(d, "LAYER_FRONT",SWIG_From_int(static_cast< int >((1 << 15))));
  SWIG_Python_SetConstant(d, "ADHESIVE_LAYER_BACK",SWIG_From_int(static_cast< int >((1 << 16))));
  SWIG_Python_SetConstant(d, "ADHESIVE_LAYER_FRONT",SWIG_From_int(static_cast< int >((1 << 17))));
  SWIG_Python_SetConstant(d, "SOLDERPASTE_LAYER_BACK",SWIG_From_int(static_cast< int >((1 << 18))));
  SWIG_Python_SetConstant(d, "SOLDERPASTE_LAYER_FRONT",SWIG_From_int(static_cast< int >((1 << 19))));
  SWIG_Python_SetConstant(d, "SILKSCREEN_LAYER_BACK",SWIG_From_int(static_cast< int >((1 << 20))));
  SWIG_Python_SetConstant(d, "SILKSCREEN_LAYER_FRONT",SWIG_From_int(static_cast< int >((1 << 21))));
  SWIG_Python_SetConstant(d, "SOLDERMASK_LAYER_BACK",SWIG_From_int(static_cast< int >((1 << 22))));
  SWIG_Python_SetConstant(d, "SOLDERMASK_LAYER_FRONT",SWIG_From_int(static_cast< int >((1 << 23))));
  SWIG_Python_SetConstant(d, "DRAW_LAYER",SWIG_From_int(static_cast< int >((1 << 24))));
  SWIG_Python_SetConstant(d, "COMMENT_LAYER",SWIG_From_int(static_cast< int >((1 << 25))));
  SWIG_Python_SetConstant(d, "ECO1_LAYER",SWIG_From_int(static_cast< int >((1 << 26))));
  SWIG_Python_SetConstant(d, "ECO2_LAYER",SWIG_From_int(static_cast< int >((1 << 27))));
  SWIG_Python_SetConstant(d, "EDGE_LAYER",SWIG_From_int(static_cast< int >((1 << 28))));
  SWIG_Python_SetConstant(d, "FIRST_NON_COPPER_LAYER",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "LAST_NON_COPPER_LAYER",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "ALL_LAYERS",SWIG_From_int(static_cast< int >(0x1FFFFFFF)));
  SWIG_Python_SetConstant(d, "FULL_LAYERS",SWIG_From_int(static_cast< int >(0xFFFFFFFF)));
  SWIG_Python_SetConstant(d, "ALL_NO_CU_LAYERS",SWIG_From_int(static_cast< int >(0x1FFF0000)));
  SWIG_Python_SetConstant(d, "ALL_CU_LAYERS",SWIG_From_int(static_cast< int >(0x0000FFFF)));
  SWIG_Python_SetConstant(d, "INTERNAL_LAYERS",SWIG_From_int(static_cast< int >(0x00007FFE)));
  SWIG_Python_SetConstant(d, "EXTERNAL_LAYERS",SWIG_From_int(static_cast< int >(0x00008001)));
  SWIG_Python_SetConstant(d, "VIAS_VISIBLE",SWIG_From_int(static_cast< int >(VIAS_VISIBLE)));
  SWIG_Python_SetConstant(d, "VIA_MICROVIA_VISIBLE",SWIG_From_int(static_cast< int >(VIA_MICROVIA_VISIBLE)));
  SWIG_Python_SetConstant(d, "VIA_BBLIND_VISIBLE",SWIG_From_int(static_cast< int >(VIA_BBLIND_VISIBLE)));
  SWIG_Python_SetConstant(d, "VIA_THROUGH_VISIBLE",SWIG_From_int(static_cast< int >(VIA_THROUGH_VISIBLE)));
  SWIG_Python_SetConstant(d, "MOD_TEXT_FR_VISIBLE",SWIG_From_int(static_cast< int >(MOD_TEXT_FR_VISIBLE)));
  SWIG_Python_SetConstant(d, "MOD_TEXT_BK_VISIBLE",SWIG_From_int(static_cast< int >(MOD_TEXT_BK_VISIBLE)));
  SWIG_Python_SetConstant(d, "MOD_TEXT_INVISIBLE",SWIG_From_int(static_cast< int >(MOD_TEXT_INVISIBLE)));
  SWIG_Python_SetConstant(d, "ANCHOR_VISIBLE",SWIG_From_int(static_cast< int >(ANCHOR_VISIBLE)));
  SWIG_Python_SetConstant(d, "PAD_FR_VISIBLE",SWIG_From_int(static_cast< int >(PAD_FR_VISIBLE)));
  SWIG_Python_SetConstant(d, "PAD_BK_VISIBLE",SWIG_From_int(static_cast< int >(PAD_BK_VISIBLE)));
  SWIG_Python_SetConstant(d, "RATSNEST_VISIBLE",SWIG_From_int(static_cast< int >(RATSNEST_VISIBLE)));
  SWIG_Python_SetConstant(d, "GRID_VISIBLE",SWIG_From_int(static_cast< int >(GRID_VISIBLE)));
  SWIG_Python_SetConstant(d, "NO_CONNECTS_VISIBLE",SWIG_From_int(static_cast< int >(NO_CONNECTS_VISIBLE)));
  SWIG_Python_SetConstant(d, "MOD_FR_VISIBLE",SWIG_From_int(static_cast< int >(MOD_FR_VISIBLE)));
  SWIG_Python_SetConstant(d, "MOD_BK_VISIBLE",SWIG_From_int(static_cast< int >(MOD_BK_VISIBLE)));
  SWIG_Python_SetConstant(d, "MOD_VALUES_VISIBLE",SWIG_From_int(static_cast< int >(MOD_VALUES_VISIBLE)));
  SWIG_Python_SetConstant(d, "MOD_REFERENCES_VISIBLE",SWIG_From_int(static_cast< int >(MOD_REFERENCES_VISIBLE)));
  SWIG_Python_SetConstant(d, "END_PCB_VISIBLE_LIST",SWIG_From_int(static_cast< int >(END_PCB_VISIBLE_LIST)));
  SWIG_Python_SetConstant(d, "PAD_STANDARD_DEFAULT_LAYERS",SWIG_From_int(static_cast< int >(0x0000FFFF|(1 << 21)|(1 << 22)|(1 << 23))));
  SWIG_Python_SetConstant(d, "PAD_CONN_DEFAULT_LAYERS",SWIG_From_int(static_cast< int >((1 << 15)|(1 << 19)|(1 << 23))));
  SWIG_Python_SetConstant(d, "PAD_SMD_DEFAULT_LAYERS",SWIG_From_int(static_cast< int >((1 << 15)|(1 << 23))));
  SWIG_Python_SetConstant(d, "PAD_HOLE_NOT_PLATED_DEFAULT_LAYERS",SWIG_From_int(static_cast< int >(0x0000FFFF|(1 << 21)|(1 << 22)|(1 << 23))));
  SWIG_Python_SetConstant(d, "PAD_NONE",SWIG_From_int(static_cast< int >(PAD_NONE)));
  SWIG_Python_SetConstant(d, "PAD_CIRCLE",SWIG_From_int(static_cast< int >(PAD_CIRCLE)));
  SWIG_Python_SetConstant(d, "PAD_ROUND",SWIG_From_int(static_cast< int >(PAD_ROUND)));
  SWIG_Python_SetConstant(d, "PAD_RECT",SWIG_From_int(static_cast< int >(PAD_RECT)));
  SWIG_Python_SetConstant(d, "PAD_OVAL",SWIG_From_int(static_cast< int >(PAD_OVAL)));
  SWIG_Python_SetConstant(d, "PAD_TRAPEZOID",SWIG_From_int(static_cast< int >(PAD_TRAPEZOID)));
  SWIG_Python_SetConstant(d, "PAD_RRECT",SWIG_From_int(static_cast< int >(PAD_RRECT)));
  SWIG_Python_SetConstant(d, "PAD_OCTAGON",SWIG_From_int(static_cast< int >(PAD_OCTAGON)));
  SWIG_Python_SetConstant(d, "PAD_SQUARE",SWIG_From_int(static_cast< int >(PAD_SQUARE)));
  SWIG_Python_SetConstant(d, "PAD_STANDARD",SWIG_From_int(static_cast< int >(PAD_STANDARD)));
  SWIG_Python_SetConstant(d, "PAD_SMD",SWIG_From_int(static_cast< int >(PAD_SMD)));
  SWIG_Python_SetConstant(d, "PAD_CONN",SWIG_From_int(static_cast< int >(PAD_CONN)));
  SWIG_Python_SetConstant(d, "PAD_HOLE_NOT_PLATED",SWIG_From_int(static_cast< int >(PAD_HOLE_NOT_PLATED)));
  SWIG_Python_SetConstant(d, "CH_VISIBLE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "CH_UNROUTABLE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "CH_ROUTE_REQ",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "CH_ACTIF",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "LOCAL_RATSNEST_ITEM",SWIG_From_int(static_cast< int >(0x8000)));
  SWIG_Python_SetConstant(d, "START_ON_PAD",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, "END_ON_PAD",SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Python_SetConstant(d, "START_ON_TRACK",SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Python_SetConstant(d, "END_ON_TRACK",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, "LISTE_PAD_OK",SWIG_From_int(static_cast< int >(LISTE_PAD_OK)));
  SWIG_Python_SetConstant(d, "LISTE_RATSNEST_ITEM_OK",SWIG_From_int(static_cast< int >(LISTE_RATSNEST_ITEM_OK)));
  SWIG_Python_SetConstant(d, "RATSNEST_ITEM_LOCAL_OK",SWIG_From_int(static_cast< int >(RATSNEST_ITEM_LOCAL_OK)));
  SWIG_Python_SetConstant(d, "CONNEXION_OK",SWIG_From_int(static_cast< int >(CONNEXION_OK)));
  SWIG_Python_SetConstant(d, "NET_CODES_OK",SWIG_From_int(static_cast< int >(NET_CODES_OK)));
  SWIG_Python_SetConstant(d, "DO_NOT_SHOW_GENERAL_RASTNEST",SWIG_From_int(static_cast< int >(DO_NOT_SHOW_GENERAL_RASTNEST)));
  SWIG_Python_SetConstant(d, "TEXT_is_REFERENCE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "TEXT_is_VALUE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "TEXT_is_DIVERS",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "MAX_ZONE_CORNER_RADIUS_MILS",SWIG_From_int(static_cast< int >(400)));
  SWIG_Python_SetConstant(d, "ZONE_SETTINGS_SMOOTHING_NONE",SWIG_From_int(static_cast< int >(ZONE_SETTINGS::SMOOTHING_NONE)));
  SWIG_Python_SetConstant(d, "ZONE_SETTINGS_SMOOTHING_CHAMFER",SWIG_From_int(static_cast< int >(ZONE_SETTINGS::SMOOTHING_CHAMFER)));
  SWIG_Python_SetConstant(d, "ZONE_SETTINGS_SMOOTHING_FILLET",SWIG_From_int(static_cast< int >(ZONE_SETTINGS::SMOOTHING_FILLET)));
  SWIG_Python_SetConstant(d, "ZONE_SETTINGS_SMOOTHING_LAST",SWIG_From_int(static_cast< int >(ZONE_SETTINGS::SMOOTHING_LAST)));
  SWIG_addvarlink(SWIG_globals(),(char*)"NETCLASS_Default",Swig_var_NETCLASS_Default_get, Swig_var_NETCLASS_Default_set);
  SWIG_Python_SetConstant(d, "IO_MGR_LEGACY",SWIG_From_int(static_cast< int >(IO_MGR::LEGACY)));
  SWIG_Python_SetConstant(d, "IO_MGR_KICAD",SWIG_From_int(static_cast< int >(IO_MGR::KICAD)));
  SWIG_Python_SetConstant(d, "IO_MGR_EAGLE",SWIG_From_int(static_cast< int >(IO_MGR::EAGLE)));
  SWIG_Python_SetConstant(d, "SEXPR_BOARD_FILE_VERSION",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "CTL_CLIPBOARD",SWIG_From_int(static_cast< int >((1 << 0))));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

